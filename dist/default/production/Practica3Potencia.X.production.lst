

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue May 21 09:21:59 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 2.05
    41                           ; Generated 20/12/2018 GMT
    42                           ; 
    43                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F886 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0089                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  008F                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0094                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  009F                     	;# 
   363  0105                     	;# 
   364  0107                     	;# 
   365  0108                     	;# 
   366  0109                     	;# 
   367  010C                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0185                     	;# 
   373  0187                     	;# 
   374  0188                     	;# 
   375  0189                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  000E                     	;# 
   393  000F                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0013                     	;# 
   398  0014                     	;# 
   399  0015                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  001D                     	;# 
   410  001E                     	;# 
   411  001F                     	;# 
   412  0081                     	;# 
   413  0085                     	;# 
   414  0086                     	;# 
   415  0087                     	;# 
   416  0089                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  008F                     	;# 
   421  0090                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0093                     	;# 
   427  0094                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0098                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  0105                     	;# 
   440  0107                     	;# 
   441  0108                     	;# 
   442  0109                     	;# 
   443  010C                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  0185                     	;# 
   449  0187                     	;# 
   450  0188                     	;# 
   451  0189                     	;# 
   452  018C                     	;# 
   453  018D                     	;# 
   454                           
   455                           	psect	idataBANK0
   456  0005                     __pidataBANK0:	
   457                           
   458                           ;initializer for _key2
   459  0005  3430               	retlw	48
   460  0006  3400               	retlw	0
   461                           
   462                           ;initializer for _keypress
   463  0007  3430               	retlw	48
   464                           
   465                           	psect	strings
   466  0800                     __pstrings:	
   467  0800                     stringtab:	
   468  0800                     __stringtab:	
   469                           
   470                           ;	String table - string pointers are 1 byte each
   471  0800  1BFF               	btfsc	btemp+1,7
   472  0801  280A               	ljmp	stringcode
   473  0802  1383               	bcf	3,7
   474  0803  187F               	btfsc	btemp+1,0
   475  0804  1783               	bsf	3,7
   476  0805  0800               	movf	0,w
   477  0806  0A84               	incf	4,f
   478  0807  1903               	skipnz
   479  0808  0AFF               	incf	btemp+1,f
   480  0809  0008               	return
   481  080A                     stringcode:	
   482  080A                     stringdir:	
   483  080A  3008               	movlw	high stringdir
   484  080B  008A               	movwf	10
   485  080C  0804               	movf	4,w
   486  080D  0A84               	incf	4,f
   487  080E  0782               	addwf	2,f
   488  080F                     __stringbase:	
   489  080F  3400               	retlw	0
   490  0810                     __end_of__stringtab:	
   491  0810                     _keyPadMatrix:	
   492  0810  3441               	retlw	65
   493  0811  3400               	retlw	0
   494  0812  3431               	retlw	49
   495  0813  3400               	retlw	0
   496  0814  3432               	retlw	50
   497  0815  3400               	retlw	0
   498  0816  3433               	retlw	51
   499  0817  3400               	retlw	0
   500  0818  3442               	retlw	66
   501  0819  3400               	retlw	0
   502  081A  3434               	retlw	52
   503  081B  3400               	retlw	0
   504  081C  3435               	retlw	53
   505  081D  3400               	retlw	0
   506  081E  3436               	retlw	54
   507  081F  3400               	retlw	0
   508  0820  3443               	retlw	67
   509  0821  3400               	retlw	0
   510  0822  3437               	retlw	55
   511  0823  3400               	retlw	0
   512  0824  3438               	retlw	56
   513  0825  3400               	retlw	0
   514  0826  3439               	retlw	57
   515  0827  3400               	retlw	0
   516  0828  3444               	retlw	68
   517  0829  3400               	retlw	0
   518  082A  342A               	retlw	42
   519  082B  3400               	retlw	0
   520  082C  3430               	retlw	48
   521  082D  3400               	retlw	0
   522  082E  3423               	retlw	35
   523  082F  3400               	retlw	0
   524  0830  34FF               	retlw	255
   525  0831  3400               	retlw	0
   526  0832                     __end_of_keyPadMatrix:	
   527  0832                     _dpowers:	
   528  0832  3401               	retlw	1
   529  0833  3400               	retlw	0
   530  0834  340A               	retlw	10
   531  0835  3400               	retlw	0
   532  0836  3464               	retlw	100
   533  0837  3400               	retlw	0
   534  0838  34E8               	retlw	232
   535  0839  3403               	retlw	3
   536  083A  3410               	retlw	16
   537  083B  3427               	retlw	39
   538  083C                     __end_of_dpowers:	
   539  0005                     _PORTA	set	5
   540  0007                     _PORTC	set	7
   541  003A                     _RC2	set	58
   542  0039                     _RC1	set	57
   543  0038                     _RC0	set	56
   544  002E                     _RA6	set	46
   545  002F                     _RA7	set	47
   546  002D                     _RA5	set	45
   547  002B                     _RA3	set	43
   548  002C                     _RA4	set	44
   549  002A                     _RA2	set	42
   550  0029                     _RA1	set	41
   551  0028                     _RA0	set	40
   552  0033                     _RB3	set	51
   553  0032                     _RB2	set	50
   554  0035                     _RB5	set	53
   555  0036                     _RB6	set	54
   556  0034                     _RB4	set	52
   557  0037                     _RB7	set	55
   558  0030                     _RB0	set	48
   559  0085                     _TRISA	set	133
   560  0087                     _TRISC	set	135
   561  0086                     _TRISB	set	134
   562  0090                     _OSCTUNE	set	144
   563  008F                     _OSCCONbits	set	143
   564  0188                     _ANSEL	set	392
   565  0189                     _ANSELH	set	393
   566  083C                     STR_12:	
   567  083C  3444               	retlw	68	;'D'
   568  083D  3469               	retlw	105	;'i'
   569  083E  3472               	retlw	114	;'r'
   570  083F  343A               	retlw	58	;':'
   571  0840  3420               	retlw	32	;' '
   572  0841  3441               	retlw	65	;'A'
   573  0842  3464               	retlw	100	;'d'
   574  0843  3465               	retlw	101	;'e'
   575  0844  346C               	retlw	108	;'l'
   576  0845  3461               	retlw	97	;'a'
   577  0846  346E               	retlw	110	;'n'
   578  0847  3474               	retlw	116	;'t'
   579  0848  3465               	retlw	101	;'e'
   580  0849  3400               	retlw	0
   581  084A                     STR_7:	
   582  084A  3441               	retlw	65	;'A'
   583  084B  3464               	retlw	100	;'d'
   584  084C  3465               	retlw	101	;'e'
   585  084D  346C               	retlw	108	;'l'
   586  084E  3461               	retlw	97	;'a'
   587  084F  346E               	retlw	110	;'n'
   588  0850  3474               	retlw	116	;'t'
   589  0851  3465               	retlw	101	;'e'
   590  0852  343A               	retlw	58	;':'
   591  0853  3420               	retlw	32	;' '
   592  0854  3400               	retlw	0
   593  0855                     STR_14:	
   594  0855  3444               	retlw	68	;'D'
   595  0856  3469               	retlw	105	;'i'
   596  0857  3472               	retlw	114	;'r'
   597  0858  343A               	retlw	58	;':'
   598  0859  3420               	retlw	32	;' '
   599  085A  3441               	retlw	65	;'A'
   600  085B  3474               	retlw	116	;'t'
   601  085C  3472               	retlw	114	;'r'
   602  085D  3461               	retlw	97	;'a'
   603  085E  3473               	retlw	115	;'s'
   604  085F  3400               	retlw	0
   605  0860                     STR_13:	
   606  0860  3420               	retlw	32	;' '
   607  0861  3443               	retlw	67	;'C'
   608  0862  346D               	retlw	109	;'m'
   609  0863  3420               	retlw	32	;' '
   610  0864  3464               	retlw	100	;'d'
   611  0865  3465               	retlw	101	;'e'
   612  0866  343A               	retlw	58	;':'
   613  0867  3420               	retlw	32	;' '
   614  0868  3400               	retlw	0
   615  0869                     STR_2:	
   616  0869  3441               	retlw	65	;'A'
   617  086A  3474               	retlw	116	;'t'
   618  086B  3472               	retlw	114	;'r'
   619  086C  3461               	retlw	97	;'a'
   620  086D  3473               	retlw	115	;'s'
   621  086E  343A               	retlw	58	;':'
   622  086F  3420               	retlw	32	;' '
   623  0870  3400               	retlw	0
   624  0871                     STR_3:	
   625  0871  3430               	retlw	48	;'0'
   626  0872  3420               	retlw	32	;' '
   627  0873  3443               	retlw	67	;'C'
   628  0874  346D               	retlw	109	;'m'
   629  0875  3400               	retlw	0
   630  0876                     STR_1:	
   631  0876  3425               	retlw	37	;'%'
   632  0877  3464               	retlw	100	;'d'
   633  0878  3400               	retlw	0
   634  0860                     
   635                           ; #config settings
   636  0000                     
   637                           	psect	cinit
   638  07DD                     start_initialization:	
   639  07DD                     __initialization:	
   640                           
   641                           ; Initialize objects allocated to BANK0
   642  07DD  120A  118A  2005  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   643  07E2  00E7               	movwf	__pdataBANK0& (0+127)
   644  07E3  120A  118A  2006  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   645  07E8  00E8               	movwf	(__pdataBANK0+1)& (0+127)
   646  07E9  120A  118A  2007   	fcall	__pidataBANK0+2	;fetch initializer
   647  07EC  00E9               	movwf	(__pdataBANK0+2)& (0+127)
   648                           
   649                           ; Clear objects allocated to BANK0
   650  07ED  01D8               	clrf	__pbssBANK0& (0+127)
   651  07EE  01D9               	clrf	(__pbssBANK0+1)& (0+127)
   652  07EF  01DA               	clrf	(__pbssBANK0+2)& (0+127)
   653  07F0  01DB               	clrf	(__pbssBANK0+3)& (0+127)
   654  07F1  01DC               	clrf	(__pbssBANK0+4)& (0+127)
   655  07F2  01DD               	clrf	(__pbssBANK0+5)& (0+127)
   656  07F3  01DE               	clrf	(__pbssBANK0+6)& (0+127)
   657  07F4  01DF               	clrf	(__pbssBANK0+7)& (0+127)
   658  07F5  01E0               	clrf	(__pbssBANK0+8)& (0+127)
   659  07F6  01E1               	clrf	(__pbssBANK0+9)& (0+127)
   660  07F7  01E2               	clrf	(__pbssBANK0+10)& (0+127)
   661  07F8  01E3               	clrf	(__pbssBANK0+11)& (0+127)
   662  07F9  01E4               	clrf	(__pbssBANK0+12)& (0+127)
   663  07FA  01E5               	clrf	(__pbssBANK0+13)& (0+127)
   664  07FB  01E6               	clrf	(__pbssBANK0+14)& (0+127)
   665  07FC                     end_of_initialization:	
   666                           ;End of C runtime variable initialization code
   667                           
   668  07FC                     __end_of__initialization:	
   669  07FC  0183               	clrf	3
   670  07FD  120A  158A  2AE1   	ljmp	_main	;jump to C main() function
   671                           
   672                           	psect	bssBANK0
   673  0058                     __pbssBANK0:	
   674  0058                     _lastCm:	
   675  0058                     	ds	2
   676  005A                     _cm:	
   677  005A                     	ds	2
   678  005C                     _CmAntiHorario:	
   679  005C                     	ds	2
   680  005E                     _CmHorario:	
   681  005E                     	ds	2
   682  0060                     _Grados:	
   683  0060                     	ds	2
   684  0062                     _old_key:	
   685  0062                     	ds	1
   686  0063                     _key:	
   687  0063                     	ds	1
   688  0064                     _LastState:	
   689  0064                     	ds	1
   690  0065                     _buffer:	
   691  0065                     	ds	2
   692                           
   693                           	psect	dataBANK0
   694  0067                     __pdataBANK0:	
   695  0067                     _key2:	
   696  0067                     	ds	2
   697  0069                     _keypress:	
   698  0069                     	ds	1
   699                           
   700                           	psect	cstackCOMMON
   701  0070                     __pcstackCOMMON:	
   702  0070                     ?_ConfigInit:	
   703  0070                     ??_ConfigInit:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_Lcd_Init:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ??_StopMotor:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ??_RunMotor:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_Lcd_Port:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ??_Lcd_Port:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_Lcd_Cmd:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_Lcd_Clear:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_Lcd_Write_Char:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_StopMotor:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_configurarHorario:	
   734                           ; 2 bytes @ 0x0
   735                           
   736  0070                     ?_configurarAntiHorario:	
   737                           ; 2 bytes @ 0x0
   738                           
   739  0070                     ?_KeyPadGetKey:	
   740                           ; 2 bytes @ 0x0
   741                           
   742  0070                     ?_RunMotor:	
   743                           ; 2 bytes @ 0x0
   744                           
   745  0070                     ?_Encoder:	
   746                           ; 2 bytes @ 0x0
   747                           
   748  0070                     ?__Umul8_16:	
   749                           ; 2 bytes @ 0x0
   750                           
   751  0070                     ?_main:	
   752                           ; 2 bytes @ 0x0
   753                           
   754  0070                     ?_VerificarInversionGiro:	
   755                           ; 2 bytes @ 0x0
   756                           
   757  0070                     ?___wmul:	
   758                           ; 2 bytes @ 0x0
   759                           
   760  0070                     ?___lwdiv:	
   761                           ; 2 bytes @ 0x0
   762                           
   763  0070                     ?___xxtofl:	
   764                           ; 2 bytes @ 0x0
   765                           
   766  0070                     Lcd_Port@a:	
   767                           ; 4 bytes @ 0x0
   768                           
   769  0070                     __Umul8_16@multiplicand:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0070                     ___wmul@multiplier:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0070                     ___lwdiv@divisor:	
   776                           ; 2 bytes @ 0x0
   777                           
   778  0070                     ___xxtofl@val:	
   779                           ; 2 bytes @ 0x0
   780                           
   781                           
   782                           ; 4 bytes @ 0x0
   783  0070                     	ds	1
   784  0071                     ??_Lcd_Cmd:	
   785  0071                     ??_Lcd_Write_Char:	
   786                           ; 1 bytes @ 0x1
   787                           
   788                           
   789                           ; 1 bytes @ 0x1
   790  0071                     	ds	1
   791  0072                     ??_KeyPadGetKey:	
   792  0072                     ??__Umul8_16:	
   793                           ; 1 bytes @ 0x2
   794                           
   795  0072                     Lcd_Write_Char@temp:	
   796                           ; 1 bytes @ 0x2
   797                           
   798  0072                     ___wmul@multiplicand:	
   799                           ; 1 bytes @ 0x2
   800                           
   801  0072                     ___lwdiv@dividend:	
   802                           ; 2 bytes @ 0x2
   803                           
   804                           
   805                           ; 2 bytes @ 0x2
   806  0072                     	ds	1
   807  0073                     Lcd_Cmd@a:	
   808  0073                     Lcd_Write_Char@y:	
   809                           ; 1 bytes @ 0x3
   810                           
   811                           
   812                           ; 1 bytes @ 0x3
   813  0073                     	ds	1
   814  0074                     ??_Lcd_Init:	
   815  0074                     ??_Lcd_Clear:	
   816                           ; 1 bytes @ 0x4
   817                           
   818  0074                     ?_Lcd_Set_Cursor:	
   819                           ; 1 bytes @ 0x4
   820                           
   821  0074                     ??___wmul:	
   822                           ; 1 bytes @ 0x4
   823                           
   824  0074                     ??___lwdiv:	
   825                           ; 1 bytes @ 0x4
   826                           
   827  0074                     ??___xxtofl:	
   828                           ; 1 bytes @ 0x4
   829                           
   830  0074                     Lcd_Set_Cursor@b:	
   831                           ; 1 bytes @ 0x4
   832                           
   833  0074                     Lcd_Write_Char@a:	
   834                           ; 1 bytes @ 0x4
   835                           
   836  0074                     KeyPadGetKey@key:	
   837                           ; 1 bytes @ 0x4
   838                           
   839  0074                     ___wmul@product:	
   840                           ; 1 bytes @ 0x4
   841                           
   842  0074                     __Umul8_16@product:	
   843                           ; 2 bytes @ 0x4
   844                           
   845                           
   846                           ; 2 bytes @ 0x4
   847  0074                     	ds	1
   848  0075                     ??_Lcd_Set_Cursor:	
   849  0075                     ?_Lcd_Write_String:	
   850                           ; 1 bytes @ 0x5
   851                           
   852  0075                     KeyPadGetKey@row:	
   853                           ; 1 bytes @ 0x5
   854                           
   855  0075                     Lcd_Write_String@a:	
   856                           ; 1 bytes @ 0x5
   857                           
   858  0075                     ___lwdiv@quotient:	
   859                           ; 2 bytes @ 0x5
   860                           
   861                           
   862                           ; 2 bytes @ 0x5
   863  0075                     	ds	1
   864  0076                     __Umul8_16@word_mpld:	
   865                           
   866                           ; 2 bytes @ 0x6
   867  0076                     	ds	1
   868  0077                     ??_Lcd_Write_String:	
   869  0077                     Lcd_Set_Cursor@a:	
   870                           ; 1 bytes @ 0x7
   871                           
   872  0077                     ___lwdiv@counter:	
   873                           ; 1 bytes @ 0x7
   874                           
   875                           
   876                           ; 1 bytes @ 0x7
   877  0077                     	ds	1
   878  0078                     ?___lwmod:	
   879  0078                     Lcd_Set_Cursor@z:	
   880                           ; 2 bytes @ 0x8
   881                           
   882  0078                     ___xxtofl@sign:	
   883                           ; 1 bytes @ 0x8
   884                           
   885  0078                     __Umul8_16@multiplier:	
   886                           ; 1 bytes @ 0x8
   887                           
   888  0078                     ___lwmod@divisor:	
   889                           ; 1 bytes @ 0x8
   890                           
   891                           
   892                           ; 2 bytes @ 0x8
   893  0078                     	ds	1
   894  0079                     Lcd_Set_Cursor@y:	
   895  0079                     ___xxtofl@exp:	
   896                           ; 1 bytes @ 0x9
   897                           
   898                           
   899                           ; 1 bytes @ 0x9
   900  0079                     	ds	1
   901  007A                     Lcd_Set_Cursor@temp:	
   902  007A                     Lcd_Write_String@i:	
   903                           ; 1 bytes @ 0xA
   904                           
   905  007A                     ___lwmod@dividend:	
   906                           ; 2 bytes @ 0xA
   907                           
   908  007A                     ___xxtofl@arg:	
   909                           ; 2 bytes @ 0xA
   910                           
   911                           
   912                           ; 4 bytes @ 0xA
   913  007A                     	ds	2
   914  007C                     ??___lwmod:	
   915                           
   916                           ; 1 bytes @ 0xC
   917  007C                     	ds	1
   918  007D                     ___lwmod@counter:	
   919                           
   920                           ; 1 bytes @ 0xD
   921  007D                     	ds	1
   922  007E                     ??_VerificarInversionGiro:	
   923                           
   924                           	psect	cstackBANK0
   925  0020                     __pcstackBANK0:	
   926                           ; 1 bytes @ 0xE
   927                           
   928  0020                     ?_sprintf:	
   929  0020                     ?___fladd:	
   930                           ; 2 bytes @ 0x0
   931                           
   932  0020                     ?___flmul:	
   933                           ; 4 bytes @ 0x0
   934                           
   935  0020                     sprintf@f:	
   936                           ; 4 bytes @ 0x0
   937                           
   938  0020                     ___fladd@b:	
   939                           ; 1 bytes @ 0x0
   940                           
   941  0020                     ___flmul@b:	
   942                           ; 4 bytes @ 0x0
   943                           
   944                           
   945                           ; 4 bytes @ 0x0
   946  0020                     	ds	3
   947  0023                     ??_sprintf:	
   948                           
   949                           ; 1 bytes @ 0x3
   950  0023                     	ds	1
   951  0024                     ___fladd@a:	
   952  0024                     ___flmul@a:	
   953                           ; 4 bytes @ 0x4
   954                           
   955                           
   956                           ; 4 bytes @ 0x4
   957  0024                     	ds	2
   958  0026                     sprintf@ap:	
   959                           
   960                           ; 1 bytes @ 0x6
   961  0026                     	ds	1
   962  0027                     sprintf@flag:	
   963                           
   964                           ; 1 bytes @ 0x7
   965  0027                     	ds	1
   966  0028                     ??___fladd:	
   967  0028                     ??___flmul:	
   968                           ; 1 bytes @ 0x8
   969                           
   970  0028                     sprintf@prec:	
   971                           ; 1 bytes @ 0x8
   972                           
   973                           
   974                           ; 1 bytes @ 0x8
   975  0028                     	ds	1
   976  0029                     sprintf@val:	
   977                           
   978                           ; 2 bytes @ 0x9
   979  0029                     	ds	2
   980  002B                     sprintf@sp:	
   981                           
   982                           ; 1 bytes @ 0xB
   983  002B                     	ds	1
   984  002C                     sprintf@c:	
   985                           
   986                           ; 1 bytes @ 0xC
   987  002C                     	ds	1
   988  002D                     ___flmul@sign:	
   989                           
   990                           ; 1 bytes @ 0xD
   991  002D                     	ds	1
   992  002E                     ___flmul@grs:	
   993                           
   994                           ; 4 bytes @ 0xE
   995  002E                     	ds	2
   996  0030                     ___fladd@signs:	
   997                           
   998                           ; 1 bytes @ 0x10
   999  0030                     	ds	1
  1000  0031                     ___fladd@aexp:	
  1001                           
  1002                           ; 1 bytes @ 0x11
  1003  0031                     	ds	1
  1004  0032                     ___fladd@bexp:	
  1005  0032                     ___flmul@aexp:	
  1006                           ; 1 bytes @ 0x12
  1007                           
  1008                           
  1009                           ; 1 bytes @ 0x12
  1010  0032                     	ds	1
  1011  0033                     ___fladd@grs:	
  1012  0033                     ___flmul@bexp:	
  1013                           ; 1 bytes @ 0x13
  1014                           
  1015                           
  1016                           ; 1 bytes @ 0x13
  1017  0033                     	ds	1
  1018  0034                     ___flmul@prod:	
  1019                           
  1020                           ; 4 bytes @ 0x14
  1021  0034                     	ds	4
  1022  0038                     ___flmul@temp:	
  1023                           
  1024                           ; 2 bytes @ 0x18
  1025  0038                     	ds	2
  1026  003A                     ?___flge:	
  1027  003A                     ?___fltol:	
  1028                           ; 1 bit 
  1029                           
  1030  003A                     ___flge@ff1:	
  1031                           ; 4 bytes @ 0x1A
  1032                           
  1033  003A                     ___fltol@f1:	
  1034                           ; 4 bytes @ 0x1A
  1035                           
  1036                           
  1037                           ; 4 bytes @ 0x1A
  1038  003A                     	ds	4
  1039  003E                     ??___fltol:	
  1040  003E                     ___flge@ff2:	
  1041                           ; 1 bytes @ 0x1E
  1042                           
  1043                           
  1044                           ; 4 bytes @ 0x1E
  1045  003E                     	ds	4
  1046  0042                     ??___flge:	
  1047                           
  1048                           ; 1 bytes @ 0x22
  1049  0042                     	ds	1
  1050  0043                     ___fltol@sign1:	
  1051                           
  1052                           ; 1 bytes @ 0x23
  1053  0043                     	ds	1
  1054  0044                     ___fltol@exp1:	
  1055                           
  1056                           ; 1 bytes @ 0x24
  1057  0044                     	ds	1
  1058  0045                     ?_Lcd_Write_Integer:	
  1059  0045                     Lcd_Write_Integer@a:	
  1060                           ; 1 bytes @ 0x25
  1061                           
  1062                           
  1063                           ; 2 bytes @ 0x25
  1064  0045                     	ds	2
  1065  0047                     ??_Lcd_Write_Integer:	
  1066                           
  1067                           ; 1 bytes @ 0x27
  1068  0047                     	ds	1
  1069  0048                     Lcd_Write_Integer@Data:	
  1070                           
  1071                           ; 10 bytes @ 0x28
  1072  0048                     	ds	10
  1073  0052                     ??_configurarHorario:	
  1074  0052                     ??_configurarAntiHorario:	
  1075                           ; 1 bytes @ 0x32
  1076                           
  1077  0052                     ??_Encoder:	
  1078                           ; 1 bytes @ 0x32
  1079                           
  1080                           
  1081                           ; 1 bytes @ 0x32
  1082  0052                     	ds	4
  1083  0056                     ??_main:	
  1084                           
  1085                           ; 1 bytes @ 0x36
  1086  0056                     	ds	2
  1087                           
  1088                           	psect	maintext
  1089  0AE1                     __pmaintext:	
  1090 ;;
  1091 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1092 ;;
  1093 ;; *************** function _main *****************
  1094 ;; Defined at:
  1095 ;;		line 12 in file "main.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;		None
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;		None
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  2   26[None  ] int 
  1102 ;; Registers used:
  1103 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : B00/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1109 ;;      Params:         0       0       0       0       0
  1110 ;;      Locals:         0       0       0       0       0
  1111 ;;      Temps:          0       2       0       0       0
  1112 ;;      Totals:         0       2       0       0       0
  1113 ;;Total ram usage:        2 bytes
  1114 ;; Hardware stack levels required when called:    5
  1115 ;; This function calls:
  1116 ;;		_ConfigInit
  1117 ;;		_Encoder
  1118 ;;		_KeyPadGetKey
  1119 ;;		_Lcd_Init
  1120 ;;		_RunMotor
  1121 ;;		_StopMotor
  1122 ;;		_configurarAntiHorario
  1123 ;;		_configurarHorario
  1124 ;; This function is called by:
  1125 ;;		Startup code after reset
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           
  1130                           ;psect for function _main
  1131  0AE1                     _main:	
  1132                           
  1133                           ;main.c: 13:     ConfigInit();
  1134                           
  1135                           ;incstack = 0
  1136                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1137  0AE1  120A  158A  20C6  120A  158A  	fcall	_ConfigInit
  1138                           
  1139                           ;main.c: 14:     Lcd_Init();
  1140  0AE6  120A  158A  2286  120A  158A  	fcall	_Lcd_Init
  1141                           
  1142                           ;main.c: 15:     StopMotor();
  1143  0AEB  120A  118A  2008  120A  158A  	fcall	_StopMotor
  1144                           
  1145                           ;main.c: 16:     configurarHorario();
  1146  0AF0  120A  118A  200D  120A  158A  	fcall	_configurarHorario
  1147                           
  1148                           ;main.c: 17:     configurarAntiHorario();
  1149  0AF5  120A  158A  270A  120A  158A  	fcall	_configurarAntiHorario
  1150  0AFA                     l2851:	
  1151                           
  1152                           ;main.c: 21:         keypress = KeyPadGetKey();
  1153  0AFA  120A  158A  23B5  120A  158A  	fcall	_KeyPadGetKey
  1154  0AFF  0870               	movf	?_KeyPadGetKey,w
  1155  0B00  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0B01  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0B02  00D6               	movwf	??_main
  1158  0B03  0856               	movf	??_main,w
  1159  0B04  00E9               	movwf	_keypress
  1160                           
  1161                           ;main.c: 24:         if (keypress != 0xFF) {
  1162  0B05  0A69               	incf	_keypress,w
  1163  0B06  1D03               	btfss	3,2
  1164  0B07  2B21               	goto	l2867
  1165  0B08  2B37               	goto	l28
  1166  0B09                     l2857:	
  1167                           
  1168                           ;main.c: 28:                     configurarHorario();
  1169  0B09  120A  118A  200D  120A  158A  	fcall	_configurarHorario
  1170                           
  1171                           ;main.c: 29:                     break;
  1172  0B0E  2B37               	goto	l28
  1173  0B0F                     l2859:	
  1174                           
  1175                           ;main.c: 31:                     configurarAntiHorario();
  1176  0B0F  120A  158A  270A  120A  158A  	fcall	_configurarAntiHorario
  1177                           
  1178                           ;main.c: 32:                     break;
  1179  0B14  2B37               	goto	l28
  1180  0B15                     l2861:	
  1181                           
  1182                           ;main.c: 34:                     StopMotor();
  1183  0B15  120A  118A  2008  120A  158A  	fcall	_StopMotor
  1184                           
  1185                           ;main.c: 35:                     break;
  1186  0B1A  2B37               	goto	l28
  1187  0B1B                     l2863:	
  1188                           
  1189                           ;main.c: 37:                     RunMotor();
  1190  0B1B  120A  158A  20A1  120A  158A  	fcall	_RunMotor
  1191                           
  1192                           ;main.c: 38:                     break;
  1193  0B20  2B37               	goto	l28
  1194  0B21                     l2867:	
  1195  0B21  0869               	movf	_keypress,w
  1196  0B22  00D6               	movwf	??_main
  1197  0B23  01D7               	clrf	??_main+1
  1198                           
  1199                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1200                           ; Switch size 1, requested type "simple"
  1201                           ; Number of cases is 1, Range of values is 0 to 0
  1202                           ; switch strategies available:
  1203                           ; Name         Instructions Cycles
  1204                           ; simple_byte            4     3 (average)
  1205                           ; direct_byte           11     8 (fixed)
  1206                           ; jumptable            260     6 (fixed)
  1207                           ;	Chosen strategy is simple_byte
  1208  0B24  0857               	movf	??_main+1,w
  1209  0B25  3A00               	xorlw	0	; case 0
  1210  0B26  1903               	skipnz
  1211  0B27  2B29               	goto	l2963
  1212  0B28  2B37               	goto	l28
  1213  0B29                     l2963:	
  1214                           
  1215                           ; Switch size 1, requested type "simple"
  1216                           ; Number of cases is 4, Range of values is 65 to 68
  1217                           ; switch strategies available:
  1218                           ; Name         Instructions Cycles
  1219                           ; simple_byte           13     7 (average)
  1220                           ; direct_byte           23    11 (fixed)
  1221                           ; jumptable            263     9 (fixed)
  1222                           ;	Chosen strategy is simple_byte
  1223  0B29  0856               	movf	??_main,w
  1224  0B2A  3A41               	xorlw	65	; case 65
  1225  0B2B  1903               	skipnz
  1226  0B2C  2B09               	goto	l2857
  1227  0B2D  3A03               	xorlw	3	; case 66
  1228  0B2E  1903               	skipnz
  1229  0B2F  2B0F               	goto	l2859
  1230  0B30  3A01               	xorlw	1	; case 67
  1231  0B31  1903               	skipnz
  1232  0B32  2B15               	goto	l2861
  1233  0B33  3A07               	xorlw	7	; case 68
  1234  0B34  1903               	skipnz
  1235  0B35  2B1B               	goto	l2863
  1236  0B36  2B37               	goto	l28
  1237  0B37                     l28:	
  1238                           ;main.c: 40:         }
  1239                           
  1240                           
  1241                           ;main.c: 43:         if (RB0 == 1 && LastState == 0) {
  1242  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  1243  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  1244  0B39  1C06               	btfss	6,0	;volatile
  1245  0B3A  2B44               	goto	l35
  1246  0B3B  0864               	movf	_LastState,w
  1247  0B3C  1D03               	btfss	3,2
  1248  0B3D  2B44               	goto	l35
  1249                           
  1250                           ;main.c: 44:             Encoder();
  1251  0B3E  120A  118A  20C9  120A  158A  	fcall	_Encoder
  1252                           
  1253                           ;main.c: 45:         } else if (RB0 == 0) {
  1254  0B43  2AFA               	goto	l2851
  1255  0B44                     l35:	
  1256  0B44  1806               	btfsc	6,0	;volatile
  1257  0B45  2AFA               	goto	l2851
  1258                           
  1259                           ;main.c: 46:             LastState = 0;
  1260  0B46  01E4               	clrf	_LastState
  1261  0B47  2AFA               	goto	l2851
  1262  0B48                     __end_of_main:	
  1263                           
  1264                           	psect	text1
  1265  000D                     __ptext1:	
  1266 ;; *************** function _configurarHorario *****************
  1267 ;; Defined at:
  1268 ;;		line 125 in file "Controls.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  2    8[None  ] int 
  1275 ;; Registers used:
  1276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1282 ;;      Params:         0       0       0       0       0
  1283 ;;      Locals:         0       0       0       0       0
  1284 ;;      Temps:          0       4       0       0       0
  1285 ;;      Totals:         0       4       0       0       0
  1286 ;;Total ram usage:        4 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    4
  1289 ;; This function calls:
  1290 ;;		_KeyPadGetKey
  1291 ;;		_Lcd_Clear
  1292 ;;		_Lcd_Set_Cursor
  1293 ;;		_Lcd_Write_Integer
  1294 ;;		_Lcd_Write_String
  1295 ;;		_RunMotor
  1296 ;;		_StopMotor
  1297 ;;		___wmul
  1298 ;; This function is called by:
  1299 ;;		_main
  1300 ;; This function uses a non-reentrant model
  1301 ;;
  1302                           
  1303                           
  1304                           ;psect for function _configurarHorario
  1305  000D                     _configurarHorario:	
  1306                           
  1307                           ;Controls.c: 127:     buffer = 0;
  1308                           
  1309                           ;incstack = 0
  1310                           ; Regs used in _configurarHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1311  000D  1283               	bcf	3,5	;RP0=0, select bank0
  1312  000E  1303               	bcf	3,6	;RP1=0, select bank0
  1313  000F  01E5               	clrf	_buffer
  1314  0010  01E6               	clrf	_buffer+1
  1315                           
  1316                           ;Controls.c: 128:     StopMotor();
  1317  0011  120A  118A  2008  120A  118A  	fcall	_StopMotor
  1318  0016                     L2:	
  1319                           
  1320                           ;Controls.c: 130:     Lcd_Clear();
  1321  0016  120A  158A  2096  120A  118A  	fcall	_Lcd_Clear
  1322                           
  1323                           ;Controls.c: 131:     Lcd_Set_Cursor(1, 1);
  1324  001B  01F4               	clrf	Lcd_Set_Cursor@b
  1325  001C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1326  001D  3001               	movlw	1
  1327  001E  120A  158A  223C  120A  118A  	fcall	_Lcd_Set_Cursor
  1328                           
  1329                           ;Controls.c: 132:     Lcd_Write_String("Adelante: ");
  1330  0023  303B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1331  0024  00F5               	movwf	Lcd_Write_String@a
  1332  0025  3080               	movlw	128
  1333  0026  00F6               	movwf	Lcd_Write_String@a+1
  1334  0027  120A  158A  21FF  120A  118A  	fcall	_Lcd_Write_String
  1335                           
  1336                           ;Controls.c: 133:     Lcd_Set_Cursor(2, 1);
  1337  002C  01F4               	clrf	Lcd_Set_Cursor@b
  1338  002D  0AF4               	incf	Lcd_Set_Cursor@b,f
  1339  002E  3002               	movlw	2
  1340  002F  120A  158A  223C  120A  118A  	fcall	_Lcd_Set_Cursor
  1341                           
  1342                           ;Controls.c: 134:     Lcd_Write_String("0 Cm");
  1343  0034  3062               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1344                           
  1345                           ;Controls.c: 141:             switch (key2) {
  1346  0035  287C               	goto	L3
  1347  0036                     l2697:	
  1348                           
  1349                           ;Controls.c: 144:                     buffer = 0;
  1350  0036  01E5               	clrf	_buffer
  1351  0037  01E6               	clrf	_buffer+1
  1352  0038  2816               	goto	L2
  1353  0039                     l2709:	
  1354                           ;Controls.c: 150:                     break;
  1355                           
  1356                           ;Controls.c: 149:                     Lcd_Write_String("0 Cm");
  1357                           
  1358                           ;Controls.c: 148:                     Lcd_Set_Cursor(2, 1);
  1359                           
  1360                           ;Controls.c: 147:                     Lcd_Write_String("Adelante: ");
  1361                           
  1362                           ;Controls.c: 146:                     Lcd_Set_Cursor(1, 1);
  1363                           
  1364                           ;Controls.c: 145:                     Lcd_Clear();
  1365                           
  1366                           
  1367                           ;Controls.c: 156:                     Grados = 0;
  1368  0039  01E0               	clrf	_Grados
  1369  003A  01E1               	clrf	_Grados+1
  1370                           
  1371                           ;Controls.c: 157:                     CmHorario = buffer;
  1372  003B  0866               	movf	_buffer+1,w
  1373  003C  00DF               	movwf	_CmHorario+1
  1374  003D  0865               	movf	_buffer,w
  1375  003E  00DE               	movwf	_CmHorario
  1376                           
  1377                           ;Controls.c: 158:                     RunMotor();
  1378  003F  120A  158A  20A1  120A  118A  	fcall	_RunMotor
  1379                           
  1380                           ;Controls.c: 159:                     if (CmHorario != 0) {
  1381  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1382  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1383  0046  085E               	movf	_CmHorario,w
  1384  0047  045F               	iorwf	_CmHorario+1,w
  1385  0048  1D03               	btfss	3,2
  1386  0049  0008               	return
  1387  004A  2884               	goto	l2691
  1388  004B                     l2719:	
  1389                           
  1390                           ;Controls.c: 168:                     buffer = (10 * buffer + key2);
  1391  004B  0866               	movf	_buffer+1,w
  1392  004C  00F1               	movwf	___wmul@multiplier+1
  1393  004D  0865               	movf	_buffer,w
  1394  004E  00F0               	movwf	___wmul@multiplier
  1395  004F  300A               	movlw	10
  1396  0050  00F2               	movwf	___wmul@multiplicand
  1397  0051  3000               	movlw	0
  1398  0052  00F3               	movwf	___wmul@multiplicand+1
  1399  0053  120A  158A  2114  120A  118A  	fcall	___wmul
  1400  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1401  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1402  005A  0867               	movf	_key2,w
  1403  005B  0770               	addwf	?___wmul,w
  1404  005C  00E5               	movwf	_buffer
  1405  005D  0868               	movf	_key2+1,w
  1406  005E  1803               	skipnc
  1407  005F  0A68               	incf	_key2+1,w
  1408  0060  0771               	addwf	?___wmul+1,w
  1409  0061  00E6               	movwf	_buffer+1
  1410                           
  1411                           ;Controls.c: 169:                     buffer -= 48;
  1412  0062  30D0               	movlw	208
  1413  0063  07E5               	addwf	_buffer,f
  1414  0064  1803               	skipnc
  1415  0065  0AE6               	incf	_buffer+1,f
  1416  0066  30FF               	movlw	255
  1417  0067  07E6               	addwf	_buffer+1,f
  1418                           
  1419                           ;Controls.c: 170:                     Lcd_Set_Cursor(2, 1);
  1420  0068  01F4               	clrf	Lcd_Set_Cursor@b
  1421  0069  0AF4               	incf	Lcd_Set_Cursor@b,f
  1422  006A  3002               	movlw	2
  1423  006B  120A  158A  223C  120A  118A  	fcall	_Lcd_Set_Cursor
  1424                           
  1425                           ;Controls.c: 171:                     Lcd_Write_Integer(buffer);
  1426  0070  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0071  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0072  0866               	movf	_buffer+1,w
  1429  0073  00C6               	movwf	Lcd_Write_Integer@a+1
  1430  0074  0865               	movf	_buffer,w
  1431  0075  00C5               	movwf	Lcd_Write_Integer@a
  1432  0076  120A  158A  20AE  120A  118A  	fcall	_Lcd_Write_Integer
  1433                           
  1434                           ;Controls.c: 172:                     Lcd_Write_String(" Cm");
  1435  007B  3063               	movlw	(low (((STR_3+1)-__stringbase)| (0+32768)))& (0+255)
  1436  007C                     L3:	
  1437  007C  00F5               	movwf	Lcd_Write_String@a
  1438  007D  3080               	movlw	128
  1439  007E  00F6               	movwf	Lcd_Write_String@a+1
  1440  007F  120A  158A  21FF  120A  118A  	fcall	_Lcd_Write_String
  1441  0084                     l2691:	
  1442                           
  1443                           ;Controls.c: 138:         keypress = KeyPadGetKey();
  1444  0084  120A  158A  23B5  120A  118A  	fcall	_KeyPadGetKey
  1445  0089  0870               	movf	?_KeyPadGetKey,w
  1446  008A  1283               	bcf	3,5	;RP0=0, select bank0
  1447  008B  1303               	bcf	3,6	;RP1=0, select bank0
  1448  008C  00D2               	movwf	??_configurarHorario
  1449  008D  0852               	movf	??_configurarHorario,w
  1450  008E  00E9               	movwf	_keypress
  1451                           
  1452                           ;Controls.c: 139:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1453  008F  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1454  0090  0084               	movwf	4
  1455  0091  120A  158A  200A  120A  118A  	fcall	stringdir
  1456  0096  00D2               	movwf	??_configurarHorario
  1457  0097  120A  158A  200A  120A  118A  	fcall	stringdir
  1458  009C  00D3               	movwf	??_configurarHorario+1
  1459  009D  0869               	movf	_keypress,w
  1460  009E  00D4               	movwf	??_configurarHorario+2
  1461  009F  01D5               	clrf	??_configurarHorario+3
  1462  00A0  0853               	movf	??_configurarHorario+1,w
  1463  00A1  0655               	xorwf	??_configurarHorario+3,w
  1464  00A2  1D03               	skipz
  1465  00A3  28A6               	goto	u3655
  1466  00A4  0852               	movf	??_configurarHorario,w
  1467  00A5  0654               	xorwf	??_configurarHorario+2,w
  1468  00A6                     u3655:	
  1469  00A6  1903               	skipnz
  1470  00A7  2884               	goto	l2691
  1471                           
  1472                           ;Controls.c: 140:             key2 = keypress;
  1473  00A8  0869               	movf	_keypress,w
  1474  00A9  00D2               	movwf	??_configurarHorario
  1475  00AA  01D3               	clrf	??_configurarHorario+1
  1476  00AB  0852               	movf	??_configurarHorario,w
  1477  00AC  00E7               	movwf	_key2
  1478  00AD  0853               	movf	??_configurarHorario+1,w
  1479  00AE  00E8               	movwf	_key2+1
  1480                           
  1481                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1482                           ; Switch size 1, requested type "simple"
  1483                           ; Number of cases is 1, Range of values is 0 to 0
  1484                           ; switch strategies available:
  1485                           ; Name         Instructions Cycles
  1486                           ; simple_byte            4     3 (average)
  1487                           ; direct_byte           11     8 (fixed)
  1488                           ; jumptable            260     6 (fixed)
  1489                           ;	Chosen strategy is simple_byte
  1490                           
  1491                           ;Controls.c: 173:             }
  1492  00AF  0868               	movf	_key2+1,w
  1493  00B0  3A00               	xorlw	0	; case 0
  1494  00B1  1903               	skipnz
  1495  00B2  28B4               	goto	l2965
  1496  00B3  284B               	goto	l2719
  1497  00B4                     l2965:	
  1498                           
  1499                           ; Switch size 1, requested type "simple"
  1500                           ; Number of cases is 6, Range of values is 35 to 68
  1501                           ; switch strategies available:
  1502                           ; Name         Instructions Cycles
  1503                           ; simple_byte           19    10 (average)
  1504                           ; direct_byte          113    11 (fixed)
  1505                           ; jumptable            263     9 (fixed)
  1506                           ;	Chosen strategy is simple_byte
  1507  00B4  0867               	movf	_key2,w
  1508  00B5  3A23               	xorlw	35	; case 35
  1509  00B6  1903               	skipnz
  1510  00B7  28C8               	goto	l222
  1511  00B8  3A09               	xorlw	9	; case 42
  1512  00B9  1903               	skipnz
  1513  00BA  28C8               	goto	l222
  1514  00BB  3A6B               	xorlw	107	; case 65
  1515  00BC  1903               	skipnz
  1516  00BD  2836               	goto	l2697
  1517  00BE  3A03               	xorlw	3	; case 66
  1518  00BF  1903               	skipnz
  1519  00C0  28C8               	goto	l222
  1520  00C1  3A01               	xorlw	1	; case 67
  1521  00C2  1903               	skipnz
  1522  00C3  28C8               	goto	l222
  1523  00C4  3A07               	xorlw	7	; case 68
  1524  00C5  1903               	skipnz
  1525  00C6  2839               	goto	l2709
  1526  00C7  284B               	goto	l2719
  1527  00C8                     l222:	
  1528                           ;Controls.c: 174:         }
  1529                           
  1530  00C8  2884               	goto	l2691
  1531  00C9                     __end_of_configurarHorario:	
  1532                           
  1533                           	psect	text2
  1534  0F0A                     __ptext2:	
  1535 ;; *************** function _configurarAntiHorario *****************
  1536 ;; Defined at:
  1537 ;;		line 68 in file "Controls.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;		None
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  2   10[None  ] int 
  1544 ;; Registers used:
  1545 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1551 ;;      Params:         0       0       0       0       0
  1552 ;;      Locals:         0       0       0       0       0
  1553 ;;      Temps:          0       4       0       0       0
  1554 ;;      Totals:         0       4       0       0       0
  1555 ;;Total ram usage:        4 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    4
  1558 ;; This function calls:
  1559 ;;		_KeyPadGetKey
  1560 ;;		_Lcd_Clear
  1561 ;;		_Lcd_Set_Cursor
  1562 ;;		_Lcd_Write_Integer
  1563 ;;		_Lcd_Write_String
  1564 ;;		_RunMotor
  1565 ;;		_StopMotor
  1566 ;;		___wmul
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           
  1573                           ;psect for function _configurarAntiHorario
  1574  0F0A                     _configurarAntiHorario:	
  1575                           
  1576                           ;Controls.c: 70:     buffer = 0;
  1577                           
  1578                           ;incstack = 0
  1579                           ; Regs used in _configurarAntiHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1580  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0F0C  01E5               	clrf	_buffer
  1583  0F0D  01E6               	clrf	_buffer+1
  1584                           
  1585                           ;Controls.c: 71:     StopMotor();
  1586  0F0E  120A  118A  2008  120A  158A  	fcall	_StopMotor
  1587                           
  1588                           ;Controls.c: 73:     Lcd_Clear();
  1589  0F13  120A  158A  2096  120A  158A  	fcall	_Lcd_Clear
  1590                           
  1591                           ;Controls.c: 74:     Lcd_Set_Cursor(1, 1);
  1592  0F18  01F4               	clrf	Lcd_Set_Cursor@b
  1593  0F19  0AF4               	incf	Lcd_Set_Cursor@b,f
  1594  0F1A  3001               	movlw	1
  1595  0F1B  120A  158A  223C  120A  158A  	fcall	_Lcd_Set_Cursor
  1596                           
  1597                           ;Controls.c: 75:     Lcd_Write_String("Atras: ");
  1598  0F20  305A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1599  0F21  00F5               	movwf	Lcd_Write_String@a
  1600  0F22  3080               	movlw	128
  1601  0F23  00F6               	movwf	Lcd_Write_String@a+1
  1602  0F24  120A  158A  21FF  120A  158A  	fcall	_Lcd_Write_String
  1603                           
  1604                           ;Controls.c: 76:     Lcd_Set_Cursor(2, 1);
  1605  0F29  01F4               	clrf	Lcd_Set_Cursor@b
  1606  0F2A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1607  0F2B  3002               	movlw	2
  1608  0F2C  120A  158A  223C  120A  158A  	fcall	_Lcd_Set_Cursor
  1609                           
  1610                           ;Controls.c: 77:     Lcd_Write_String("0 Cm");
  1611  0F31  3062               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1612  0F32  00F5               	movwf	Lcd_Write_String@a
  1613  0F33  3080               	movlw	128
  1614  0F34  00F6               	movwf	Lcd_Write_String@a+1
  1615  0F35  120A  158A  21FF  120A  158A  	fcall	_Lcd_Write_String
  1616  0F3A                     l2749:	
  1617                           
  1618                           ;Controls.c: 81:         keypress = KeyPadGetKey();
  1619  0F3A  120A  158A  23B5  120A  158A  	fcall	_KeyPadGetKey
  1620  0F3F  0870               	movf	?_KeyPadGetKey,w
  1621  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0F42  00D2               	movwf	??_configurarAntiHorario
  1624  0F43  0852               	movf	??_configurarAntiHorario,w
  1625  0F44  00E9               	movwf	_keypress
  1626                           
  1627                           ;Controls.c: 82:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1628  0F45  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1629  0F46  0084               	movwf	4
  1630  0F47  120A  158A  200A  120A  158A  	fcall	stringdir
  1631  0F4C  00D2               	movwf	??_configurarAntiHorario
  1632  0F4D  120A  158A  200A  120A  158A  	fcall	stringdir
  1633  0F52  00D3               	movwf	??_configurarAntiHorario+1
  1634  0F53  0869               	movf	_keypress,w
  1635  0F54  00D4               	movwf	??_configurarAntiHorario+2
  1636  0F55  01D5               	clrf	??_configurarAntiHorario+3
  1637  0F56  0853               	movf	??_configurarAntiHorario+1,w
  1638  0F57  0655               	xorwf	??_configurarAntiHorario+3,w
  1639  0F58  1D03               	skipz
  1640  0F59  2F5C               	goto	u3675
  1641  0F5A  0852               	movf	??_configurarAntiHorario,w
  1642  0F5B  0654               	xorwf	??_configurarAntiHorario+2,w
  1643  0F5C                     u3675:	
  1644  0F5C  1903               	skipnz
  1645  0F5D  2FF5               	goto	l2789
  1646                           
  1647                           ;Controls.c: 83:             key2 = keypress;
  1648  0F5E  0869               	movf	_keypress,w
  1649  0F5F  00D2               	movwf	??_configurarAntiHorario
  1650  0F60  01D3               	clrf	??_configurarAntiHorario+1
  1651  0F61  0852               	movf	??_configurarAntiHorario,w
  1652  0F62  00E7               	movwf	_key2
  1653  0F63  0853               	movf	??_configurarAntiHorario+1,w
  1654  0F64  00E8               	movwf	_key2+1
  1655                           
  1656                           ;Controls.c: 84:             switch (key2) {
  1657  0F65  2FDC               	goto	l2787
  1658  0F66                     l2755:	
  1659                           
  1660                           ;Controls.c: 88:                     buffer = 0;
  1661  0F66  01E5               	clrf	_buffer
  1662  0F67  01E6               	clrf	_buffer+1
  1663                           
  1664                           ;Controls.c: 89:                     Lcd_Clear();
  1665  0F68  120A  158A  2096  120A  158A  	fcall	_Lcd_Clear
  1666                           
  1667                           ;Controls.c: 90:                     Lcd_Set_Cursor(1, 1);
  1668  0F6D  01F4               	clrf	Lcd_Set_Cursor@b
  1669  0F6E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1670  0F6F  3001               	movlw	1
  1671  0F70  120A  158A  223C  120A  158A  	fcall	_Lcd_Set_Cursor
  1672                           
  1673                           ;Controls.c: 91:                     Lcd_Write_String("Atras: ");
  1674  0F75  305A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1675  0F76  00F5               	movwf	Lcd_Write_String@a
  1676  0F77  3080               	movlw	128
  1677  0F78  00F6               	movwf	Lcd_Write_String@a+1
  1678  0F79  120A  158A  21FF  120A  158A  	fcall	_Lcd_Write_String
  1679                           
  1680                           ;Controls.c: 92:                     Lcd_Set_Cursor(2, 1);
  1681  0F7E  01F4               	clrf	Lcd_Set_Cursor@b
  1682  0F7F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1683  0F80  3002               	movlw	2
  1684  0F81  120A  158A  223C  120A  158A  	fcall	_Lcd_Set_Cursor
  1685                           
  1686                           ;Controls.c: 93:                     Lcd_Write_String("0 Cm");
  1687  0F86  3062               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1688  0F87  00F5               	movwf	Lcd_Write_String@a
  1689  0F88  3080               	movlw	128
  1690  0F89  00F6               	movwf	Lcd_Write_String@a+1
  1691  0F8A  120A  158A  21FF  120A  158A  	fcall	_Lcd_Write_String
  1692                           
  1693                           ;Controls.c: 94:                     break;
  1694  0F8F  2FF5               	goto	l2789
  1695  0F90                     l2767:	
  1696                           
  1697                           ;Controls.c: 98:                     Grados = 0;
  1698  0F90  01E0               	clrf	_Grados
  1699  0F91  01E1               	clrf	_Grados+1
  1700                           
  1701                           ;Controls.c: 99:                     CmAntiHorario = buffer;
  1702  0F92  0866               	movf	_buffer+1,w
  1703  0F93  00DD               	movwf	_CmAntiHorario+1
  1704  0F94  0865               	movf	_buffer,w
  1705  0F95  00DC               	movwf	_CmAntiHorario
  1706                           
  1707                           ;Controls.c: 100:                     RunMotor();
  1708  0F96  120A  158A  20A1  120A  158A  	fcall	_RunMotor
  1709                           
  1710                           ;Controls.c: 101:                     if (CmAntiHorario != 0) {
  1711  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0F9D  085C               	movf	_CmAntiHorario,w
  1714  0F9E  045D               	iorwf	_CmAntiHorario+1,w
  1715  0F9F  1D03               	btfss	3,2
  1716  0FA0  0008               	return
  1717  0FA1  2FF5               	goto	l2789
  1718  0FA2                     l2777:	
  1719                           
  1720                           ;Controls.c: 110:                     buffer = (10 * buffer + key2);
  1721  0FA2  0866               	movf	_buffer+1,w
  1722  0FA3  00F1               	movwf	___wmul@multiplier+1
  1723  0FA4  0865               	movf	_buffer,w
  1724  0FA5  00F0               	movwf	___wmul@multiplier
  1725  0FA6  300A               	movlw	10
  1726  0FA7  00F2               	movwf	___wmul@multiplicand
  1727  0FA8  3000               	movlw	0
  1728  0FA9  00F3               	movwf	___wmul@multiplicand+1
  1729  0FAA  120A  158A  2114  120A  158A  	fcall	___wmul
  1730  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  1731  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  1732  0FB1  0867               	movf	_key2,w
  1733  0FB2  0770               	addwf	?___wmul,w
  1734  0FB3  00E5               	movwf	_buffer
  1735  0FB4  0868               	movf	_key2+1,w
  1736  0FB5  1803               	skipnc
  1737  0FB6  0A68               	incf	_key2+1,w
  1738  0FB7  0771               	addwf	?___wmul+1,w
  1739  0FB8  00E6               	movwf	_buffer+1
  1740                           
  1741                           ;Controls.c: 111:                     buffer -= 48;
  1742  0FB9  30D0               	movlw	208
  1743  0FBA  07E5               	addwf	_buffer,f
  1744  0FBB  1803               	skipnc
  1745  0FBC  0AE6               	incf	_buffer+1,f
  1746  0FBD  30FF               	movlw	255
  1747  0FBE  07E6               	addwf	_buffer+1,f
  1748                           
  1749                           ;Controls.c: 112:                     Lcd_Set_Cursor(2, 1);
  1750  0FBF  01F4               	clrf	Lcd_Set_Cursor@b
  1751  0FC0  0AF4               	incf	Lcd_Set_Cursor@b,f
  1752  0FC1  3002               	movlw	2
  1753  0FC2  120A  158A  223C  120A  158A  	fcall	_Lcd_Set_Cursor
  1754                           
  1755                           ;Controls.c: 113:                     Lcd_Write_Integer(buffer);
  1756  0FC7  1283               	bcf	3,5	;RP0=0, select bank0
  1757  0FC8  1303               	bcf	3,6	;RP1=0, select bank0
  1758  0FC9  0866               	movf	_buffer+1,w
  1759  0FCA  00C6               	movwf	Lcd_Write_Integer@a+1
  1760  0FCB  0865               	movf	_buffer,w
  1761  0FCC  00C5               	movwf	Lcd_Write_Integer@a
  1762  0FCD  120A  158A  20AE  120A  158A  	fcall	_Lcd_Write_Integer
  1763                           
  1764                           ;Controls.c: 114:                     Lcd_Write_String(" Cm");
  1765  0FD2  3063               	movlw	(low (((STR_3+1)-__stringbase)| (0+32768)))& (0+255)
  1766  0FD3  00F5               	movwf	Lcd_Write_String@a
  1767  0FD4  3080               	movlw	128
  1768  0FD5  00F6               	movwf	Lcd_Write_String@a+1
  1769  0FD6  120A  158A  21FF  120A  158A  	fcall	_Lcd_Write_String
  1770                           
  1771                           ;Controls.c: 115:             }
  1772  0FDB  2FF5               	goto	l2789
  1773  0FDC                     l2787:	
  1774                           
  1775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1776                           ; Switch size 1, requested type "simple"
  1777                           ; Number of cases is 1, Range of values is 0 to 0
  1778                           ; switch strategies available:
  1779                           ; Name         Instructions Cycles
  1780                           ; simple_byte            4     3 (average)
  1781                           ; direct_byte           11     8 (fixed)
  1782                           ; jumptable            260     6 (fixed)
  1783                           ;	Chosen strategy is simple_byte
  1784  0FDC  0868               	movf	_key2+1,w
  1785  0FDD  3A00               	xorlw	0	; case 0
  1786  0FDE  1903               	skipnz
  1787  0FDF  2FE1               	goto	l2967
  1788  0FE0  2FA2               	goto	l2777
  1789  0FE1                     l2967:	
  1790                           
  1791                           ; Switch size 1, requested type "simple"
  1792                           ; Number of cases is 6, Range of values is 35 to 68
  1793                           ; switch strategies available:
  1794                           ; Name         Instructions Cycles
  1795                           ; simple_byte           19    10 (average)
  1796                           ; direct_byte          113    11 (fixed)
  1797                           ; jumptable            263     9 (fixed)
  1798                           ;	Chosen strategy is simple_byte
  1799  0FE1  0867               	movf	_key2,w
  1800  0FE2  3A23               	xorlw	35	; case 35
  1801  0FE3  1903               	skipnz
  1802  0FE4  2FF5               	goto	l2789
  1803  0FE5  3A09               	xorlw	9	; case 42
  1804  0FE6  1903               	skipnz
  1805  0FE7  2FF5               	goto	l2789
  1806  0FE8  3A6B               	xorlw	107	; case 65
  1807  0FE9  1903               	skipnz
  1808  0FEA  2FF5               	goto	l2789
  1809  0FEB  3A03               	xorlw	3	; case 66
  1810  0FEC  1903               	skipnz
  1811  0FED  2F66               	goto	l2755
  1812  0FEE  3A01               	xorlw	1	; case 67
  1813  0FEF  1903               	skipnz
  1814  0FF0  2FF5               	goto	l2789
  1815  0FF1  3A07               	xorlw	7	; case 68
  1816  0FF2  1903               	skipnz
  1817  0FF3  2F90               	goto	l2767
  1818  0FF4  2FA2               	goto	l2777
  1819  0FF5                     l2789:	
  1820                           
  1821                           ;Controls.c: 117:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1822  0FF5  3003               	movlw	3
  1823  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  1824  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  1825  0FF8  00D3               	movwf	??_configurarAntiHorario+1
  1826  0FF9  3097               	movlw	151
  1827  0FFA  00D2               	movwf	??_configurarAntiHorario
  1828  0FFB                     u3777:	
  1829  0FFB  0BD2               	decfsz	??_configurarAntiHorario,f
  1830  0FFC  2FFB               	goto	u3777
  1831  0FFD  0BD3               	decfsz	??_configurarAntiHorario+1,f
  1832  0FFE  2FFB               	goto	u3777
  1833  0FFF  2F3A               	goto	l2749
  1834  1000                     __end_of_configurarAntiHorario:	
  1835                           
  1836                           	psect	text3
  1837  0914                     __ptext3:	
  1838 ;; *************** function ___wmul *****************
  1839 ;; Defined at:
  1840 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1841 ;; Parameters:    Size  Location     Type
  1842 ;;  multiplier      2    0[COMMON] unsigned int 
  1843 ;;  multiplicand    2    2[COMMON] unsigned int 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  product         2    4[COMMON] unsigned int 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  2    0[COMMON] unsigned int 
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1855 ;;      Params:         4       0       0       0       0
  1856 ;;      Locals:         2       0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0
  1858 ;;      Totals:         6       0       0       0       0
  1859 ;;Total ram usage:        6 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_configurarAntiHorario
  1865 ;;		_configurarHorario
  1866 ;; This function uses a non-reentrant model
  1867 ;;
  1868                           
  1869                           
  1870                           ;psect for function ___wmul
  1871  0914                     ___wmul:	
  1872                           
  1873                           ;incstack = 0
  1874                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1875  0914  01F4               	clrf	___wmul@product
  1876  0915  01F5               	clrf	___wmul@product+1
  1877  0916                     l2407:	
  1878  0916  1C70               	btfss	___wmul@multiplier,0
  1879  0917  291E               	goto	l361
  1880  0918  0872               	movf	___wmul@multiplicand,w
  1881  0919  07F4               	addwf	___wmul@product,f
  1882  091A  1803               	skipnc
  1883  091B  0AF5               	incf	___wmul@product+1,f
  1884  091C  0873               	movf	___wmul@multiplicand+1,w
  1885  091D  07F5               	addwf	___wmul@product+1,f
  1886  091E                     l361:	
  1887  091E  3001               	movlw	1
  1888  091F                     u3065:	
  1889  091F  1003               	clrc
  1890  0920  0DF2               	rlf	___wmul@multiplicand,f
  1891  0921  0DF3               	rlf	___wmul@multiplicand+1,f
  1892  0922  3EFF               	addlw	-1
  1893  0923  1D03               	skipz
  1894  0924  291F               	goto	u3065
  1895  0925  3001               	movlw	1
  1896  0926                     u3075:	
  1897  0926  1003               	clrc
  1898  0927  0CF1               	rrf	___wmul@multiplier+1,f
  1899  0928  0CF0               	rrf	___wmul@multiplier,f
  1900  0929  3EFF               	addlw	-1
  1901  092A  1D03               	skipz
  1902  092B  2926               	goto	u3075
  1903  092C  0870               	movf	___wmul@multiplier,w
  1904  092D  0471               	iorwf	___wmul@multiplier+1,w
  1905  092E  1D03               	btfss	3,2
  1906  092F  2916               	goto	l2407
  1907  0930  0875               	movf	___wmul@product+1,w
  1908  0931  00F1               	movwf	?___wmul+1
  1909  0932  0874               	movf	___wmul@product,w
  1910  0933  00F0               	movwf	?___wmul
  1911  0934  0008               	return
  1912  0935                     __end_of___wmul:	
  1913                           
  1914                           	psect	text4
  1915  0008                     __ptext4:	
  1916 ;; *************** function _StopMotor *****************
  1917 ;; Defined at:
  1918 ;;		line 58 in file "Controls.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  2    6[None  ] int 
  1925 ;; Registers used:
  1926 ;;		None
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1932 ;;      Params:         0       0       0       0       0
  1933 ;;      Locals:         0       0       0       0       0
  1934 ;;      Temps:          0       0       0       0       0
  1935 ;;      Totals:         0       0       0       0       0
  1936 ;;Total ram usage:        0 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; This function calls:
  1939 ;;		Nothing
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;;		_configurarAntiHorario
  1943 ;;		_configurarHorario
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function _StopMotor
  1949  0008                     _StopMotor:	
  1950                           
  1951                           ;Controls.c: 59:     RC1 = 0;
  1952                           
  1953                           ;incstack = 0
  1954                           ; Regs used in _StopMotor: []
  1955  0008  1283               	bcf	3,5	;RP0=0, select bank0
  1956  0009  1303               	bcf	3,6	;RP1=0, select bank0
  1957  000A  1087               	bcf	7,1	;volatile
  1958                           
  1959                           ;Controls.c: 60:     RC0 = 0;
  1960  000B  1007               	bcf	7,0	;volatile
  1961                           
  1962                           ;Controls.c: 61:     return 0;;	Return value of _StopMotor is never used
  1963  000C  0008               	return
  1964  000D                     __end_of_StopMotor:	
  1965                           
  1966                           	psect	text5
  1967  08A1                     __ptext5:	
  1968 ;; *************** function _RunMotor *****************
  1969 ;; Defined at:
  1970 ;;		line 47 in file "Controls.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  2   14[None  ] int 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2, status,0
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1984 ;;      Params:         0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0
  1987 ;;      Totals:         0       0       0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; This function calls:
  1991 ;;		Nothing
  1992 ;; This function is called by:
  1993 ;;		_main
  1994 ;;		_configurarAntiHorario
  1995 ;;		_configurarHorario
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _RunMotor
  2001  08A1                     _RunMotor:	
  2002                           
  2003                           ;Controls.c: 48:     if (CmAntiHorario != 0 && CmHorario != 0) {
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in _RunMotor: [wreg+status,2+status,0]
  2007  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  2008  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  2009  08A3  085C               	movf	_CmAntiHorario,w
  2010  08A4  045D               	iorwf	_CmAntiHorario+1,w
  2011  08A5  1903               	btfsc	3,2
  2012  08A6  0008               	return
  2013  08A7  085E               	movf	_CmHorario,w
  2014  08A8  045F               	iorwf	_CmHorario+1,w
  2015  08A9  1903               	btfsc	3,2
  2016  08AA  0008               	return
  2017                           
  2018                           ;Controls.c: 49:         RC0 = 1;
  2019  08AB  1407               	bsf	7,0	;volatile
  2020                           
  2021                           ;Controls.c: 50:         RC1 = 0;
  2022  08AC  1087               	bcf	7,1	;volatile
  2023  08AD  0008               	return
  2024  08AE                     __end_of_RunMotor:	
  2025                           
  2026                           	psect	text6
  2027  0BB5                     __ptext6:	
  2028 ;; *************** function _KeyPadGetKey *****************
  2029 ;; Defined at:
  2030 ;;		line 19 in file "KeyPad.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;		None
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;  row             1    5[COMMON] unsigned char 
  2035 ;;  key             1    4[COMMON] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  2    0[COMMON] int 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2045 ;;      Params:         2       0       0       0       0
  2046 ;;      Locals:         2       0       0       0       0
  2047 ;;      Temps:          2       0       0       0       0
  2048 ;;      Totals:         6       0       0       0       0
  2049 ;;Total ram usage:        6 bytes
  2050 ;; Hardware stack levels used:    2
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		_main
  2055 ;;		_configurarAntiHorario
  2056 ;;		_configurarHorario
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           
  2061                           ;psect for function _KeyPadGetKey
  2062  0BB5                     _KeyPadGetKey:	
  2063                           
  2064                           ;KeyPad.c: 21:     char key = 0, row;
  2065                           
  2066                           ;incstack = 0
  2067                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  2068  0BB5  01F4               	clrf	KeyPadGetKey@key
  2069                           
  2070                           ;KeyPad.c: 23:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  2071  0BB6  01F5               	clrf	KeyPadGetKey@row
  2072  0BB7  0AF5               	incf	KeyPadGetKey@row,f
  2073  0BB8                     l127:	
  2074                           
  2075                           ;KeyPad.c: 24:         {;KeyPad.c: 25:             RA0 = (row & 0x0001) >> 0;
  2076  0BB8  1C75               	btfss	KeyPadGetKey@row,0
  2077  0BB9  2BBE               	goto	u2780
  2078  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  2080  0BBC  1405               	bsf	5,0	;volatile
  2081  0BBD  2BC1               	goto	l2309
  2082  0BBE                     u2780:	
  2083  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  2084  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  2085  0BC0  1005               	bcf	5,0	;volatile
  2086  0BC1                     l2309:	
  2087                           
  2088                           ;KeyPad.c: 26:             RA1 = (row & 0x0002) >> 1;
  2089  0BC1  0875               	movf	KeyPadGetKey@row,w
  2090  0BC2  00F2               	movwf	??_KeyPadGetKey
  2091  0BC3  3001               	movlw	1
  2092  0BC4                     u2805:	
  2093  0BC4  1003               	clrc
  2094  0BC5  0CF2               	rrf	??_KeyPadGetKey,f
  2095  0BC6  3EFF               	addlw	-1
  2096  0BC7  1D03               	skipz
  2097  0BC8  2BC4               	goto	u2805
  2098  0BC9  1C72               	btfss	??_KeyPadGetKey,0
  2099  0BCA  2BCF               	goto	u2810
  2100  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  2101  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  2102  0BCD  1485               	bsf	5,1	;volatile
  2103  0BCE  2BD2               	goto	u2824
  2104  0BCF                     u2810:	
  2105  0BCF  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0BD0  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0BD1  1085               	bcf	5,1	;volatile
  2108  0BD2                     u2824:	
  2109                           
  2110                           ;KeyPad.c: 27:             RA2 = (row & 0x0004) >> 2;
  2111  0BD2  0875               	movf	KeyPadGetKey@row,w
  2112  0BD3  00F2               	movwf	??_KeyPadGetKey
  2113  0BD4  3002               	movlw	2
  2114  0BD5                     u2835:	
  2115  0BD5  1003               	clrc
  2116  0BD6  0CF2               	rrf	??_KeyPadGetKey,f
  2117  0BD7  3EFF               	addlw	-1
  2118  0BD8  1D03               	skipz
  2119  0BD9  2BD5               	goto	u2835
  2120  0BDA  1C72               	btfss	??_KeyPadGetKey,0
  2121  0BDB  2BE0               	goto	u2840
  2122  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0BDE  1505               	bsf	5,2	;volatile
  2125  0BDF  2BE3               	goto	u2854
  2126  0BE0                     u2840:	
  2127  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  2128  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  2129  0BE2  1105               	bcf	5,2	;volatile
  2130  0BE3                     u2854:	
  2131                           
  2132                           ;KeyPad.c: 28:             RA4 = (row & 0x0008) >> 3;
  2133  0BE3  0875               	movf	KeyPadGetKey@row,w
  2134  0BE4  00F2               	movwf	??_KeyPadGetKey
  2135  0BE5  3003               	movlw	3
  2136  0BE6                     u2865:	
  2137  0BE6  1003               	clrc
  2138  0BE7  0CF2               	rrf	??_KeyPadGetKey,f
  2139  0BE8  3EFF               	addlw	-1
  2140  0BE9  1D03               	skipz
  2141  0BEA  2BE6               	goto	u2865
  2142  0BEB  1C72               	btfss	??_KeyPadGetKey,0
  2143  0BEC  2BF1               	goto	u2870
  2144  0BED  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0BEE  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0BEF  1605               	bsf	5,4	;volatile
  2147  0BF0  2BF4               	goto	l2311
  2148  0BF1                     u2870:	
  2149  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  2150  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  2151  0BF3  1205               	bcf	5,4	;volatile
  2152  0BF4                     l2311:	
  2153                           
  2154                           ;KeyPad.c: 29:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2155  0BF4  3003               	movlw	3
  2156  0BF5  00F3               	movwf	??_KeyPadGetKey+1
  2157  0BF6  3097               	movlw	151
  2158  0BF7  00F2               	movwf	??_KeyPadGetKey
  2159  0BF8                     u3787:	
  2160  0BF8  0BF2               	decfsz	??_KeyPadGetKey,f
  2161  0BF9  2BF8               	goto	u3787
  2162  0BFA  0BF3               	decfsz	??_KeyPadGetKey+1,f
  2163  0BFB  2BF8               	goto	u3787
  2164  0BFC  2BFD               	nop2
  2165                           
  2166                           ;KeyPad.c: 30:         };KeyPad.c: 32:         if (RA3)break;
  2167  0BFD  1283               	bcf	3,5	;RP0=0, select bank0
  2168  0BFE  1303               	bcf	3,6	;RP1=0, select bank0
  2169  0BFF  1985               	btfsc	5,3	;volatile
  2170  0C00  2C1D               	goto	l128
  2171                           
  2172                           ;KeyPad.c: 33:         key++;
  2173  0C01  3001               	movlw	1
  2174  0C02  00F2               	movwf	??_KeyPadGetKey
  2175  0C03  0872               	movf	??_KeyPadGetKey,w
  2176  0C04  07F4               	addwf	KeyPadGetKey@key,f
  2177                           
  2178                           ;KeyPad.c: 34:         if (RA5)break;
  2179  0C05  1A85               	btfsc	5,5	;volatile
  2180  0C06  2C1D               	goto	l128
  2181                           
  2182                           ;KeyPad.c: 35:         key++;
  2183  0C07  3001               	movlw	1
  2184  0C08  00F2               	movwf	??_KeyPadGetKey
  2185  0C09  0872               	movf	??_KeyPadGetKey,w
  2186  0C0A  07F4               	addwf	KeyPadGetKey@key,f
  2187                           
  2188                           ;KeyPad.c: 36:         if (RA7)break;
  2189  0C0B  1B85               	btfsc	5,7	;volatile
  2190  0C0C  2C1D               	goto	l128
  2191                           
  2192                           ;KeyPad.c: 37:         key++;
  2193  0C0D  3001               	movlw	1
  2194  0C0E  00F2               	movwf	??_KeyPadGetKey
  2195  0C0F  0872               	movf	??_KeyPadGetKey,w
  2196  0C10  07F4               	addwf	KeyPadGetKey@key,f
  2197                           
  2198                           ;KeyPad.c: 38:         if (RA6)break;
  2199  0C11  1B05               	btfsc	5,6	;volatile
  2200  0C12  2C1D               	goto	l128
  2201                           
  2202                           ;KeyPad.c: 39:         key++;
  2203  0C13  3001               	movlw	1
  2204  0C14  00F2               	movwf	??_KeyPadGetKey
  2205  0C15  0872               	movf	??_KeyPadGetKey,w
  2206  0C16  07F4               	addwf	KeyPadGetKey@key,f
  2207                           
  2208                           ;KeyPad.c: 40:     }
  2209  0C17  1003               	clrc
  2210  0C18  0DF5               	rlf	KeyPadGetKey@row,f
  2211  0C19  3010               	movlw	16
  2212  0C1A  0275               	subwf	KeyPadGetKey@row,w
  2213  0C1B  1C03               	skipc
  2214  0C1C  2BB8               	goto	l127
  2215  0C1D                     l128:	
  2216                           
  2217                           ;KeyPad.c: 41:     RA0 = 0;
  2218  0C1D  1005               	bcf	5,0	;volatile
  2219                           
  2220                           ;KeyPad.c: 42:     RA1 = 0;
  2221  0C1E  1085               	bcf	5,1	;volatile
  2222                           
  2223                           ;KeyPad.c: 43:     RA2 = 0;
  2224  0C1F  1105               	bcf	5,2	;volatile
  2225                           
  2226                           ;KeyPad.c: 44:     RA4 = 0;
  2227  0C20  1205               	bcf	5,4	;volatile
  2228                           
  2229                           ;KeyPad.c: 45:     if (key != old_key) {
  2230  0C21  0874               	movf	KeyPadGetKey@key,w
  2231  0C22  0662               	xorwf	_old_key,w
  2232  0C23  1903               	skipnz
  2233  0C24  2C39               	goto	l2351
  2234                           
  2235                           ;KeyPad.c: 46:         old_key = key;
  2236  0C25  0874               	movf	KeyPadGetKey@key,w
  2237  0C26  00F2               	movwf	??_KeyPadGetKey
  2238  0C27  0872               	movf	??_KeyPadGetKey,w
  2239  0C28  00E2               	movwf	_old_key
  2240                           
  2241                           ;KeyPad.c: 47:         return keyPadMatrix[ key ];
  2242  0C29  0874               	movf	KeyPadGetKey@key,w
  2243  0C2A  00F2               	movwf	??_KeyPadGetKey
  2244  0C2B  0772               	addwf	??_KeyPadGetKey,w
  2245  0C2C  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  2246  0C2D  0084               	movwf	4
  2247  0C2E  120A  158A  200A  120A  158A  	fcall	stringdir
  2248  0C33  00F0               	movwf	?_KeyPadGetKey
  2249  0C34  120A  158A  200A   	fcall	stringdir
  2250  0C37  00F1               	movwf	?_KeyPadGetKey+1
  2251  0C38  0008               	return
  2252  0C39                     l2351:	
  2253                           
  2254                           ;KeyPad.c: 49:         return keyPadMatrix[ 0x10 ];
  2255  0C39  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  2256  0C3A  0084               	movwf	4
  2257  0C3B  120A  158A  200A  120A  158A  	fcall	stringdir
  2258  0C40  00F0               	movwf	?_KeyPadGetKey
  2259  0C41  120A  158A  200A   	fcall	stringdir
  2260  0C44  00F1               	movwf	?_KeyPadGetKey+1
  2261  0C45  0008               	return
  2262  0C46                     __end_of_KeyPadGetKey:	
  2263                           
  2264                           	psect	text7
  2265  0A86                     __ptext7:	
  2266 ;; *************** function _Lcd_Init *****************
  2267 ;; Defined at:
  2268 ;;		line 60 in file "Lcd.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, status,2, status,0, pclath, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2282 ;;      Params:         0       0       0       0       0
  2283 ;;      Locals:         0       0       0       0       0
  2284 ;;      Temps:          2       0       0       0       0
  2285 ;;      Totals:         2       0       0       0       0
  2286 ;;Total ram usage:        2 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    2
  2289 ;; This function calls:
  2290 ;;		_Lcd_Cmd
  2291 ;;		_Lcd_Port
  2292 ;; This function is called by:
  2293 ;;		_main
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _Lcd_Init
  2299  0A86                     _Lcd_Init:	
  2300                           
  2301                           ;Lcd.c: 61:     Lcd_Port(0x00);
  2302                           
  2303                           ;incstack = 0
  2304                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2305  0A86  3000               	movlw	0
  2306  0A87  120A  158A  20E0  120A  158A  	fcall	_Lcd_Port
  2307                           
  2308                           ;Lcd.c: 62:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2309  0A8C  3034               	movlw	52
  2310  0A8D  00F5               	movwf	??_Lcd_Init+1
  2311  0A8E  30F1               	movlw	241
  2312  0A8F  00F4               	movwf	??_Lcd_Init
  2313  0A90                     u3797:	
  2314  0A90  0BF4               	decfsz	??_Lcd_Init,f
  2315  0A91  2A90               	goto	u3797
  2316  0A92  0BF5               	decfsz	??_Lcd_Init+1,f
  2317  0A93  2A90               	goto	u3797
  2318  0A94  2A95               	nop2
  2319                           
  2320                           ;Lcd.c: 63:     Lcd_Cmd(0x03);
  2321  0A95  3003               	movlw	3
  2322  0A96  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2323                           
  2324                           ;Lcd.c: 64:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2325  0A9B  300D               	movlw	13
  2326  0A9C  00F5               	movwf	??_Lcd_Init+1
  2327  0A9D  30FB               	movlw	251
  2328  0A9E  00F4               	movwf	??_Lcd_Init
  2329  0A9F                     u3807:	
  2330  0A9F  0BF4               	decfsz	??_Lcd_Init,f
  2331  0AA0  2A9F               	goto	u3807
  2332  0AA1  0BF5               	decfsz	??_Lcd_Init+1,f
  2333  0AA2  2A9F               	goto	u3807
  2334  0AA3  2AA4               	nop2
  2335                           
  2336                           ;Lcd.c: 65:     Lcd_Cmd(0x03);
  2337  0AA4  3003               	movlw	3
  2338  0AA5  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2339                           
  2340                           ;Lcd.c: 66:     _delay((unsigned long)((11)*(8000000/4000.0)));
  2341  0AAA  301D               	movlw	29
  2342  0AAB  00F5               	movwf	??_Lcd_Init+1
  2343  0AAC  3091               	movlw	145
  2344  0AAD  00F4               	movwf	??_Lcd_Init
  2345  0AAE                     u3817:	
  2346  0AAE  0BF4               	decfsz	??_Lcd_Init,f
  2347  0AAF  2AAE               	goto	u3817
  2348  0AB0  0BF5               	decfsz	??_Lcd_Init+1,f
  2349  0AB1  2AAE               	goto	u3817
  2350                           
  2351                           ;Lcd.c: 67:     Lcd_Cmd(0x03);
  2352  0AB2  3003               	movlw	3
  2353  0AB3  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2354                           
  2355                           ;Lcd.c: 68:     Lcd_Cmd(0x02);
  2356  0AB8  3002               	movlw	2
  2357  0AB9  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2358                           
  2359                           ;Lcd.c: 69:     Lcd_Cmd(0x02);
  2360  0ABE  3002               	movlw	2
  2361  0ABF  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2362                           
  2363                           ;Lcd.c: 70:     Lcd_Cmd(0x08);
  2364  0AC4  3008               	movlw	8
  2365  0AC5  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2366                           
  2367                           ;Lcd.c: 71:     Lcd_Cmd(0x00);
  2368  0ACA  3000               	movlw	0
  2369  0ACB  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2370                           
  2371                           ;Lcd.c: 72:     Lcd_Cmd(0x0C);
  2372  0AD0  300C               	movlw	12
  2373  0AD1  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2374                           
  2375                           ;Lcd.c: 73:     Lcd_Cmd(0x00);
  2376  0AD6  3000               	movlw	0
  2377  0AD7  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  2378                           
  2379                           ;Lcd.c: 74:     Lcd_Cmd(0x06);
  2380  0ADC  3006               	movlw	6
  2381  0ADD  120A  158A  20FA   	fcall	_Lcd_Cmd
  2382  0AE0  0008               	return
  2383  0AE1                     __end_of_Lcd_Init:	
  2384                           
  2385                           	psect	text8
  2386  00C9                     __ptext8:	
  2387 ;; *************** function _Encoder *****************
  2388 ;; Defined at:
  2389 ;;		line 202 in file "Controls.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  2   18[None  ] int 
  2396 ;; Registers used:
  2397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2403 ;;      Params:         0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0
  2405 ;;      Temps:          0       1       0       0       0
  2406 ;;      Totals:         0       1       0       0       0
  2407 ;;Total ram usage:        1 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    4
  2410 ;; This function calls:
  2411 ;;		_Lcd_Clear
  2412 ;;		_Lcd_Set_Cursor
  2413 ;;		_Lcd_Write_Integer
  2414 ;;		_Lcd_Write_String
  2415 ;;		_VerificarInversionGiro
  2416 ;;		___fladd
  2417 ;;		___flmul
  2418 ;;		___fltol
  2419 ;;		___xxtofl
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _Encoder
  2427  00C9                     _Encoder:	
  2428                           
  2429                           ;Controls.c: 203:     LastState = 1;
  2430                           
  2431                           ;incstack = 0
  2432                           ; Regs used in _Encoder: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2433  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  2434  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  2435  00CB  01E4               	clrf	_LastState
  2436  00CC  0AE4               	incf	_LastState,f
  2437                           
  2438                           ;Controls.c: 204:     Grados++;
  2439  00CD  3001               	movlw	1
  2440  00CE  07E0               	addwf	_Grados,f
  2441  00CF  1803               	skipnc
  2442  00D0  0AE1               	incf	_Grados+1,f
  2443  00D1  3000               	movlw	0
  2444  00D2  07E1               	addwf	_Grados+1,f
  2445                           
  2446                           ;Controls.c: 205:     VerificarInversionGiro();
  2447  00D3  120A  158A  257E  120A  118A  	fcall	_VerificarInversionGiro
  2448                           
  2449                           ;Controls.c: 206:     RC2 = !RC2;
  2450  00D8  3004               	movlw	4
  2451  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2452  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  2453  00DB  0687               	xorwf	7,f
  2454                           
  2455                           ;Controls.c: 207:     cm = Grados * 0.97;
  2456  00DC  0860               	movf	_Grados,w
  2457  00DD  00F0               	movwf	___xxtofl@val
  2458  00DE  0861               	movf	_Grados+1,w
  2459  00DF  00F1               	movwf	___xxtofl@val+1
  2460  00E0  3000               	movlw	0
  2461  00E1  1BF1               	btfsc	___xxtofl@val+1,7
  2462  00E2  30FF               	movlw	255
  2463  00E3  00F2               	movwf	___xxtofl@val+2
  2464  00E4  00F3               	movwf	___xxtofl@val+3
  2465  00E5  3001               	movlw	1
  2466  00E6  120A  158A  24DB  120A  118A  	fcall	___xxtofl
  2467  00EB  0873               	movf	?___xxtofl+3,w
  2468  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  2469  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  2470  00EE  00A7               	movwf	___flmul@a+3
  2471  00EF  0872               	movf	?___xxtofl+2,w
  2472  00F0  00A6               	movwf	___flmul@a+2
  2473  00F1  0871               	movf	?___xxtofl+1,w
  2474  00F2  00A5               	movwf	___flmul@a+1
  2475  00F3  0870               	movf	?___xxtofl,w
  2476  00F4  00A4               	movwf	___flmul@a
  2477  00F5  303F               	movlw	63
  2478  00F6  00A3               	movwf	___flmul@b+3
  2479  00F7  3078               	movlw	120
  2480  00F8  00A2               	movwf	___flmul@b+2
  2481  00F9  3051               	movlw	81
  2482  00FA  00A1               	movwf	___flmul@b+1
  2483  00FB  30EC               	movlw	236
  2484  00FC  00A0               	movwf	___flmul@b
  2485  00FD  120A  118A  24C8  120A  118A  	fcall	___flmul
  2486  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0103  1303               	bcf	3,6	;RP1=0, select bank0
  2488  0104  0823               	movf	?___flmul+3,w
  2489  0105  00BD               	movwf	___fltol@f1+3
  2490  0106  0822               	movf	?___flmul+2,w
  2491  0107  00BC               	movwf	___fltol@f1+2
  2492  0108  0821               	movf	?___flmul+1,w
  2493  0109  00BB               	movwf	___fltol@f1+1
  2494  010A  0820               	movf	?___flmul,w
  2495  010B  00BA               	movwf	___fltol@f1
  2496  010C  120A  158A  2348  120A  118A  	fcall	___fltol
  2497  0111  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0112  1303               	bcf	3,6	;RP1=0, select bank0
  2499  0113  083B               	movf	?___fltol+1,w
  2500  0114  00DB               	movwf	_cm+1
  2501  0115  083A               	movf	?___fltol,w
  2502  0116  00DA               	movwf	_cm
  2503                           
  2504                           ;Controls.c: 209:     if (RC0 && (cm > lastCm)) {
  2505  0117  1C07               	btfss	7,0	;volatile
  2506  0118  299E               	goto	l244
  2507  0119  0859               	movf	_lastCm+1,w
  2508  011A  3A80               	xorlw	128
  2509  011B  00D2               	movwf	??_Encoder
  2510  011C  085B               	movf	_cm+1,w
  2511  011D  3A80               	xorlw	128
  2512  011E  0252               	subwf	??_Encoder,w
  2513  011F  1D03               	skipz
  2514  0120  2923               	goto	u3705
  2515  0121  085A               	movf	_cm,w
  2516  0122  0258               	subwf	_lastCm,w
  2517  0123                     u3705:	
  2518  0123  1803               	skipnc
  2519  0124  299E               	goto	l244
  2520                           
  2521                           ;Controls.c: 210:         lastCm = cm + 0.9;
  2522  0125  1283               	bcf	3,5	;RP0=0, select bank0
  2523  0126  1303               	bcf	3,6	;RP1=0, select bank0
  2524  0127  085A               	movf	_cm,w
  2525  0128  00F0               	movwf	___xxtofl@val
  2526  0129  085B               	movf	_cm+1,w
  2527  012A  00F1               	movwf	___xxtofl@val+1
  2528  012B  3000               	movlw	0
  2529  012C  1BF1               	btfsc	___xxtofl@val+1,7
  2530  012D  30FF               	movlw	255
  2531  012E  00F2               	movwf	___xxtofl@val+2
  2532  012F  00F3               	movwf	___xxtofl@val+3
  2533  0130  3001               	movlw	1
  2534  0131  120A  158A  24DB  120A  118A  	fcall	___xxtofl
  2535  0136  0873               	movf	?___xxtofl+3,w
  2536  0137  1283               	bcf	3,5	;RP0=0, select bank0
  2537  0138  1303               	bcf	3,6	;RP1=0, select bank0
  2538  0139  00A7               	movwf	___fladd@a+3
  2539  013A  0872               	movf	?___xxtofl+2,w
  2540  013B  00A6               	movwf	___fladd@a+2
  2541  013C  0871               	movf	?___xxtofl+1,w
  2542  013D  00A5               	movwf	___fladd@a+1
  2543  013E  0870               	movf	?___xxtofl,w
  2544  013F  00A4               	movwf	___fladd@a
  2545  0140  303F               	movlw	63
  2546  0141  00A3               	movwf	___fladd@b+3
  2547  0142  3066               	movlw	102
  2548  0143  00A2               	movwf	___fladd@b+2
  2549  0144  3066               	movlw	102
  2550  0145  00A1               	movwf	___fladd@b+1
  2551  0146  3066               	movlw	102
  2552  0147  00A0               	movwf	___fladd@b
  2553  0148  120A  118A  2299  120A  118A  	fcall	___fladd
  2554  014D  1283               	bcf	3,5	;RP0=0, select bank0
  2555  014E  1303               	bcf	3,6	;RP1=0, select bank0
  2556  014F  0823               	movf	?___fladd+3,w
  2557  0150  00BD               	movwf	___fltol@f1+3
  2558  0151  0822               	movf	?___fladd+2,w
  2559  0152  00BC               	movwf	___fltol@f1+2
  2560  0153  0821               	movf	?___fladd+1,w
  2561  0154  00BB               	movwf	___fltol@f1+1
  2562  0155  0820               	movf	?___fladd,w
  2563  0156  00BA               	movwf	___fltol@f1
  2564  0157  120A  158A  2348  120A  118A  	fcall	___fltol
  2565  015C  1283               	bcf	3,5	;RP0=0, select bank0
  2566  015D  1303               	bcf	3,6	;RP1=0, select bank0
  2567  015E  083B               	movf	?___fltol+1,w
  2568  015F  00D9               	movwf	_lastCm+1
  2569  0160  083A               	movf	?___fltol,w
  2570  0161  00D8               	movwf	_lastCm
  2571                           
  2572                           ;Controls.c: 211:         Lcd_Clear();
  2573  0162  120A  158A  2096  120A  118A  	fcall	_Lcd_Clear
  2574                           
  2575                           ;Controls.c: 212:         Lcd_Set_Cursor(1, 1);
  2576  0167  01F4               	clrf	Lcd_Set_Cursor@b
  2577  0168  0AF4               	incf	Lcd_Set_Cursor@b,f
  2578  0169  3001               	movlw	1
  2579  016A  120A  158A  223C  120A  118A  	fcall	_Lcd_Set_Cursor
  2580                           
  2581                           ;Controls.c: 213:         Lcd_Write_String("Dir: Adelante");
  2582  016F  302D               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2583  0170  00F5               	movwf	Lcd_Write_String@a
  2584  0171  3080               	movlw	128
  2585  0172  00F6               	movwf	Lcd_Write_String@a+1
  2586  0173  120A  158A  21FF  120A  118A  	fcall	_Lcd_Write_String
  2587                           
  2588                           ;Controls.c: 214:         Lcd_Set_Cursor(2, 1);
  2589  0178  01F4               	clrf	Lcd_Set_Cursor@b
  2590  0179  0AF4               	incf	Lcd_Set_Cursor@b,f
  2591  017A  3002               	movlw	2
  2592  017B  120A  158A  223C  120A  118A  	fcall	_Lcd_Set_Cursor
  2593                           
  2594                           ;Controls.c: 215:         Lcd_Write_Integer(cm);
  2595  0180  1283               	bcf	3,5	;RP0=0, select bank0
  2596  0181  1303               	bcf	3,6	;RP1=0, select bank0
  2597  0182  085B               	movf	_cm+1,w
  2598  0183  00C6               	movwf	Lcd_Write_Integer@a+1
  2599  0184  085A               	movf	_cm,w
  2600  0185  00C5               	movwf	Lcd_Write_Integer@a
  2601  0186  120A  158A  20AE  120A  118A  	fcall	_Lcd_Write_Integer
  2602                           
  2603                           ;Controls.c: 216:         Lcd_Write_String(" Cm de: ");
  2604  018B  3051               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2605  018C  00F5               	movwf	Lcd_Write_String@a
  2606  018D  3080               	movlw	128
  2607  018E  00F6               	movwf	Lcd_Write_String@a+1
  2608  018F  120A  158A  21FF  120A  118A  	fcall	_Lcd_Write_String
  2609                           
  2610                           ;Controls.c: 217:         Lcd_Write_Integer(CmHorario);
  2611  0194  1283               	bcf	3,5	;RP0=0, select bank0
  2612  0195  1303               	bcf	3,6	;RP1=0, select bank0
  2613  0196  085F               	movf	_CmHorario+1,w
  2614  0197  00C6               	movwf	Lcd_Write_Integer@a+1
  2615  0198  085E               	movf	_CmHorario,w
  2616  0199  00C5               	movwf	Lcd_Write_Integer@a
  2617  019A  120A  158A  20AE   	fcall	_Lcd_Write_Integer
  2618                           
  2619                           ;Controls.c: 218:     } else if (RC1 && (cm > lastCm)) {
  2620  019D  0008               	return
  2621  019E                     l244:	
  2622  019E  1283               	bcf	3,5	;RP0=0, select bank0
  2623  019F  1303               	bcf	3,6	;RP1=0, select bank0
  2624  01A0  1C87               	btfss	7,1	;volatile
  2625  01A1  0008               	return
  2626  01A2  0859               	movf	_lastCm+1,w
  2627  01A3  3A80               	xorlw	128
  2628  01A4  00D2               	movwf	??_Encoder
  2629  01A5  085B               	movf	_cm+1,w
  2630  01A6  3A80               	xorlw	128
  2631  01A7  0252               	subwf	??_Encoder,w
  2632  01A8  1D03               	skipz
  2633  01A9  29AC               	goto	u3725
  2634  01AA  085A               	movf	_cm,w
  2635  01AB  0258               	subwf	_lastCm,w
  2636  01AC                     u3725:	
  2637  01AC  1803               	skipnc
  2638  01AD  0008               	return
  2639                           
  2640                           ;Controls.c: 219:         lastCm = cm + 0.9;
  2641  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  2642  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  2643  01B0  085A               	movf	_cm,w
  2644  01B1  00F0               	movwf	___xxtofl@val
  2645  01B2  085B               	movf	_cm+1,w
  2646  01B3  00F1               	movwf	___xxtofl@val+1
  2647  01B4  3000               	movlw	0
  2648  01B5  1BF1               	btfsc	___xxtofl@val+1,7
  2649  01B6  30FF               	movlw	255
  2650  01B7  00F2               	movwf	___xxtofl@val+2
  2651  01B8  00F3               	movwf	___xxtofl@val+3
  2652  01B9  3001               	movlw	1
  2653  01BA  120A  158A  24DB  120A  118A  	fcall	___xxtofl
  2654  01BF  0873               	movf	?___xxtofl+3,w
  2655  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  2656  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  2657  01C2  00A7               	movwf	___fladd@a+3
  2658  01C3  0872               	movf	?___xxtofl+2,w
  2659  01C4  00A6               	movwf	___fladd@a+2
  2660  01C5  0871               	movf	?___xxtofl+1,w
  2661  01C6  00A5               	movwf	___fladd@a+1
  2662  01C7  0870               	movf	?___xxtofl,w
  2663  01C8  00A4               	movwf	___fladd@a
  2664  01C9  303F               	movlw	63
  2665  01CA  00A3               	movwf	___fladd@b+3
  2666  01CB  3066               	movlw	102
  2667  01CC  00A2               	movwf	___fladd@b+2
  2668  01CD  3066               	movlw	102
  2669  01CE  00A1               	movwf	___fladd@b+1
  2670  01CF  3066               	movlw	102
  2671  01D0  00A0               	movwf	___fladd@b
  2672  01D1  120A  118A  2299  120A  118A  	fcall	___fladd
  2673  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  2674  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  2675  01D8  0823               	movf	?___fladd+3,w
  2676  01D9  00BD               	movwf	___fltol@f1+3
  2677  01DA  0822               	movf	?___fladd+2,w
  2678  01DB  00BC               	movwf	___fltol@f1+2
  2679  01DC  0821               	movf	?___fladd+1,w
  2680  01DD  00BB               	movwf	___fltol@f1+1
  2681  01DE  0820               	movf	?___fladd,w
  2682  01DF  00BA               	movwf	___fltol@f1
  2683  01E0  120A  158A  2348  120A  118A  	fcall	___fltol
  2684  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2685  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2686  01E7  083B               	movf	?___fltol+1,w
  2687  01E8  00D9               	movwf	_lastCm+1
  2688  01E9  083A               	movf	?___fltol,w
  2689  01EA  00D8               	movwf	_lastCm
  2690                           
  2691                           ;Controls.c: 220:         cm = Grados * 0.97;
  2692  01EB  0860               	movf	_Grados,w
  2693  01EC  00F0               	movwf	___xxtofl@val
  2694  01ED  0861               	movf	_Grados+1,w
  2695  01EE  00F1               	movwf	___xxtofl@val+1
  2696  01EF  3000               	movlw	0
  2697  01F0  1BF1               	btfsc	___xxtofl@val+1,7
  2698  01F1  30FF               	movlw	255
  2699  01F2  00F2               	movwf	___xxtofl@val+2
  2700  01F3  00F3               	movwf	___xxtofl@val+3
  2701  01F4  3001               	movlw	1
  2702  01F5  120A  158A  24DB  120A  118A  	fcall	___xxtofl
  2703  01FA  0873               	movf	?___xxtofl+3,w
  2704  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  2705  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  2706  01FD  00A7               	movwf	___flmul@a+3
  2707  01FE  0872               	movf	?___xxtofl+2,w
  2708  01FF  00A6               	movwf	___flmul@a+2
  2709  0200  0871               	movf	?___xxtofl+1,w
  2710  0201  00A5               	movwf	___flmul@a+1
  2711  0202  0870               	movf	?___xxtofl,w
  2712  0203  00A4               	movwf	___flmul@a
  2713  0204  303F               	movlw	63
  2714  0205  00A3               	movwf	___flmul@b+3
  2715  0206  3078               	movlw	120
  2716  0207  00A2               	movwf	___flmul@b+2
  2717  0208  3051               	movlw	81
  2718  0209  00A1               	movwf	___flmul@b+1
  2719  020A  30EC               	movlw	236
  2720  020B  00A0               	movwf	___flmul@b
  2721  020C  120A  118A  24C8  120A  118A  	fcall	___flmul
  2722  0211  1283               	bcf	3,5	;RP0=0, select bank0
  2723  0212  1303               	bcf	3,6	;RP1=0, select bank0
  2724  0213  0823               	movf	?___flmul+3,w
  2725  0214  00BD               	movwf	___fltol@f1+3
  2726  0215  0822               	movf	?___flmul+2,w
  2727  0216  00BC               	movwf	___fltol@f1+2
  2728  0217  0821               	movf	?___flmul+1,w
  2729  0218  00BB               	movwf	___fltol@f1+1
  2730  0219  0820               	movf	?___flmul,w
  2731  021A  00BA               	movwf	___fltol@f1
  2732  021B  120A  158A  2348  120A  118A  	fcall	___fltol
  2733  0220  1283               	bcf	3,5	;RP0=0, select bank0
  2734  0221  1303               	bcf	3,6	;RP1=0, select bank0
  2735  0222  083B               	movf	?___fltol+1,w
  2736  0223  00DB               	movwf	_cm+1
  2737  0224  083A               	movf	?___fltol,w
  2738  0225  00DA               	movwf	_cm
  2739                           
  2740                           ;Controls.c: 221:         Lcd_Clear();
  2741  0226  120A  158A  2096  120A  118A  	fcall	_Lcd_Clear
  2742                           
  2743                           ;Controls.c: 222:         Lcd_Set_Cursor(1, 1);
  2744  022B  01F4               	clrf	Lcd_Set_Cursor@b
  2745  022C  0AF4               	incf	Lcd_Set_Cursor@b,f
  2746  022D  3001               	movlw	1
  2747  022E  120A  158A  223C  120A  118A  	fcall	_Lcd_Set_Cursor
  2748                           
  2749                           ;Controls.c: 223:         Lcd_Write_String("Dir: Atras");
  2750  0233  3046               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2751  0234  00F5               	movwf	Lcd_Write_String@a
  2752  0235  3080               	movlw	128
  2753  0236  00F6               	movwf	Lcd_Write_String@a+1
  2754  0237  120A  158A  21FF  120A  118A  	fcall	_Lcd_Write_String
  2755                           
  2756                           ;Controls.c: 224:         Lcd_Set_Cursor(2, 1);
  2757  023C  01F4               	clrf	Lcd_Set_Cursor@b
  2758  023D  0AF4               	incf	Lcd_Set_Cursor@b,f
  2759  023E  3002               	movlw	2
  2760  023F  120A  158A  223C  120A  118A  	fcall	_Lcd_Set_Cursor
  2761                           
  2762                           ;Controls.c: 225:         Lcd_Write_Integer(Grados * 0.97);
  2763  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0246  0860               	movf	_Grados,w
  2766  0247  00F0               	movwf	___xxtofl@val
  2767  0248  0861               	movf	_Grados+1,w
  2768  0249  00F1               	movwf	___xxtofl@val+1
  2769  024A  3000               	movlw	0
  2770  024B  1BF1               	btfsc	___xxtofl@val+1,7
  2771  024C  30FF               	movlw	255
  2772  024D  00F2               	movwf	___xxtofl@val+2
  2773  024E  00F3               	movwf	___xxtofl@val+3
  2774  024F  3001               	movlw	1
  2775  0250  120A  158A  24DB  120A  118A  	fcall	___xxtofl
  2776  0255  0873               	movf	?___xxtofl+3,w
  2777  0256  1283               	bcf	3,5	;RP0=0, select bank0
  2778  0257  1303               	bcf	3,6	;RP1=0, select bank0
  2779  0258  00A7               	movwf	___flmul@a+3
  2780  0259  0872               	movf	?___xxtofl+2,w
  2781  025A  00A6               	movwf	___flmul@a+2
  2782  025B  0871               	movf	?___xxtofl+1,w
  2783  025C  00A5               	movwf	___flmul@a+1
  2784  025D  0870               	movf	?___xxtofl,w
  2785  025E  00A4               	movwf	___flmul@a
  2786  025F  303F               	movlw	63
  2787  0260  00A3               	movwf	___flmul@b+3
  2788  0261  3078               	movlw	120
  2789  0262  00A2               	movwf	___flmul@b+2
  2790  0263  3051               	movlw	81
  2791  0264  00A1               	movwf	___flmul@b+1
  2792  0265  30EC               	movlw	236
  2793  0266  00A0               	movwf	___flmul@b
  2794  0267  120A  118A  24C8  120A  118A  	fcall	___flmul
  2795  026C  1283               	bcf	3,5	;RP0=0, select bank0
  2796  026D  1303               	bcf	3,6	;RP1=0, select bank0
  2797  026E  0823               	movf	?___flmul+3,w
  2798  026F  00BD               	movwf	___fltol@f1+3
  2799  0270  0822               	movf	?___flmul+2,w
  2800  0271  00BC               	movwf	___fltol@f1+2
  2801  0272  0821               	movf	?___flmul+1,w
  2802  0273  00BB               	movwf	___fltol@f1+1
  2803  0274  0820               	movf	?___flmul,w
  2804  0275  00BA               	movwf	___fltol@f1
  2805  0276  120A  158A  2348  120A  118A  	fcall	___fltol
  2806  027B  1283               	bcf	3,5	;RP0=0, select bank0
  2807  027C  1303               	bcf	3,6	;RP1=0, select bank0
  2808  027D  083B               	movf	?___fltol+1,w
  2809  027E  00C6               	movwf	Lcd_Write_Integer@a+1
  2810  027F  083A               	movf	?___fltol,w
  2811  0280  00C5               	movwf	Lcd_Write_Integer@a
  2812  0281  120A  158A  20AE  120A  118A  	fcall	_Lcd_Write_Integer
  2813                           
  2814                           ;Controls.c: 226:         Lcd_Write_String(" Cm de: ");
  2815  0286  3051               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2816  0287  00F5               	movwf	Lcd_Write_String@a
  2817  0288  3080               	movlw	128
  2818  0289  00F6               	movwf	Lcd_Write_String@a+1
  2819  028A  120A  158A  21FF  120A  118A  	fcall	_Lcd_Write_String
  2820                           
  2821                           ;Controls.c: 227:         Lcd_Write_Integer(CmAntiHorario);
  2822  028F  1283               	bcf	3,5	;RP0=0, select bank0
  2823  0290  1303               	bcf	3,6	;RP1=0, select bank0
  2824  0291  085D               	movf	_CmAntiHorario+1,w
  2825  0292  00C6               	movwf	Lcd_Write_Integer@a+1
  2826  0293  085C               	movf	_CmAntiHorario,w
  2827  0294  00C5               	movwf	Lcd_Write_Integer@a
  2828  0295  120A  158A  20AE   	fcall	_Lcd_Write_Integer
  2829  0298  0008               	return
  2830  0299                     __end_of_Encoder:	
  2831                           
  2832                           	psect	text9
  2833  0B48                     __ptext9:	
  2834 ;; *************** function ___fltol *****************
  2835 ;; Defined at:
  2836 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  f1              4   26[BANK0 ] int 
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;  exp1            1   36[BANK0 ] unsigned char 
  2841 ;;  sign1           1   35[BANK0 ] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  4   26[BANK0 ] long 
  2844 ;; Registers used:
  2845 ;;		wreg, status,2, status,0
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2851 ;;      Params:         0       4       0       0       0
  2852 ;;      Locals:         0       2       0       0       0
  2853 ;;      Temps:          0       5       0       0       0
  2854 ;;      Totals:         0      11       0       0       0
  2855 ;;Total ram usage:       11 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; This function calls:
  2858 ;;		Nothing
  2859 ;; This function is called by:
  2860 ;;		_Encoder
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           
  2865                           ;psect for function ___fltol
  2866  0B48                     ___fltol:	
  2867                           
  2868                           ;incstack = 0
  2869                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  2870  0B48  1003               	clrc
  2871  0B49  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0B4A  1303               	bcf	3,6	;RP1=0, select bank0
  2873  0B4B  0D3C               	rlf	___fltol@f1+2,w
  2874  0B4C  0D3D               	rlf	___fltol@f1+3,w
  2875  0B4D  00BE               	movwf	??___fltol
  2876  0B4E  083E               	movf	??___fltol,w
  2877  0B4F  00C4               	movwf	___fltol@exp1
  2878  0B50  0844               	movf	___fltol@exp1,w
  2879  0B51  1D03               	btfss	3,2
  2880  0B52  2B5C               	goto	l2425
  2881  0B53                     l2421:	
  2882  0B53  3000               	movlw	0
  2883  0B54  00BD               	movwf	?___fltol+3
  2884  0B55  3000               	movlw	0
  2885  0B56  00BC               	movwf	?___fltol+2
  2886  0B57  3000               	movlw	0
  2887  0B58  00BB               	movwf	?___fltol+1
  2888  0B59  3000               	movlw	0
  2889  0B5A  00BA               	movwf	?___fltol
  2890  0B5B  0008               	return
  2891  0B5C                     l2425:	
  2892  0B5C  083A               	movf	___fltol@f1,w
  2893  0B5D  00BE               	movwf	??___fltol
  2894  0B5E  083B               	movf	___fltol@f1+1,w
  2895  0B5F  00BF               	movwf	??___fltol+1
  2896  0B60  083C               	movf	___fltol@f1+2,w
  2897  0B61  00C0               	movwf	??___fltol+2
  2898  0B62  083D               	movf	___fltol@f1+3,w
  2899  0B63  00C1               	movwf	??___fltol+3
  2900  0B64  301F               	movlw	31
  2901  0B65                     u3105:	
  2902  0B65  1003               	clrc
  2903  0B66  0CC1               	rrf	??___fltol+3,f
  2904  0B67  0CC0               	rrf	??___fltol+2,f
  2905  0B68  0CBF               	rrf	??___fltol+1,f
  2906  0B69  0CBE               	rrf	??___fltol,f
  2907  0B6A  3EFF               	addlw	-1
  2908  0B6B  1D03               	skipz
  2909  0B6C  2B65               	goto	u3105
  2910  0B6D  083E               	movf	??___fltol,w
  2911  0B6E  00C2               	movwf	??___fltol+4
  2912  0B6F  0842               	movf	??___fltol+4,w
  2913  0B70  00C3               	movwf	___fltol@sign1
  2914  0B71  17BC               	bsf	___fltol@f1+2,7
  2915  0B72  30FF               	movlw	255
  2916  0B73  05BA               	andwf	___fltol@f1,f
  2917  0B74  30FF               	movlw	255
  2918  0B75  05BB               	andwf	___fltol@f1+1,f
  2919  0B76  30FF               	movlw	255
  2920  0B77  05BC               	andwf	___fltol@f1+2,f
  2921  0B78  3000               	movlw	0
  2922  0B79  05BD               	andwf	___fltol@f1+3,f
  2923  0B7A  3096               	movlw	150
  2924  0B7B  02C4               	subwf	___fltol@exp1,f
  2925  0B7C  1FC4               	btfss	___fltol@exp1,7
  2926  0B7D  2B93               	goto	l2443
  2927  0B7E  0844               	movf	___fltol@exp1,w
  2928  0B7F  3A80               	xorlw	128
  2929  0B80  3E97               	addlw	151
  2930  0B81  1C03               	btfss	3,0
  2931  0B82  2B53               	goto	l2421
  2932  0B83                     l2441:	
  2933  0B83  3001               	movlw	1
  2934  0B84                     u3135:	
  2935  0B84  1003               	clrc
  2936  0B85  0CBD               	rrf	___fltol@f1+3,f
  2937  0B86  0CBC               	rrf	___fltol@f1+2,f
  2938  0B87  0CBB               	rrf	___fltol@f1+1,f
  2939  0B88  0CBA               	rrf	___fltol@f1,f
  2940  0B89  3EFF               	addlw	-1
  2941  0B8A  1D03               	skipz
  2942  0B8B  2B84               	goto	u3135
  2943  0B8C  3001               	movlw	1
  2944  0B8D  00BE               	movwf	??___fltol
  2945  0B8E  083E               	movf	??___fltol,w
  2946  0B8F  07C4               	addwf	___fltol@exp1,f
  2947  0B90  1903               	btfsc	3,2
  2948  0B91  2BA6               	goto	l2451
  2949  0B92  2B83               	goto	l2441
  2950  0B93                     l2443:	
  2951  0B93  3020               	movlw	32
  2952  0B94  0244               	subwf	___fltol@exp1,w
  2953  0B95  1803               	btfsc	3,0
  2954  0B96  2B53               	goto	l2421
  2955  0B97                     l554:	
  2956  0B97  0844               	movf	___fltol@exp1,w
  2957  0B98  1903               	btfsc	3,2
  2958  0B99  2BA6               	goto	l2451
  2959  0B9A  3001               	movlw	1
  2960  0B9B  00BE               	movwf	??___fltol
  2961  0B9C                     u3165:	
  2962  0B9C  1003               	clrc
  2963  0B9D  0DBA               	rlf	___fltol@f1,f
  2964  0B9E  0DBB               	rlf	___fltol@f1+1,f
  2965  0B9F  0DBC               	rlf	___fltol@f1+2,f
  2966  0BA0  0DBD               	rlf	___fltol@f1+3,f
  2967  0BA1  0BBE               	decfsz	??___fltol,f
  2968  0BA2  2B9C               	goto	u3165
  2969  0BA3  3001               	movlw	1
  2970  0BA4  02C4               	subwf	___fltol@exp1,f
  2971  0BA5  2B97               	goto	l554
  2972  0BA6                     l2451:	
  2973  0BA6  0843               	movf	___fltol@sign1,w
  2974  0BA7  1903               	btfsc	3,2
  2975  0BA8  0008               	return
  2976  0BA9  09BA               	comf	___fltol@f1,f
  2977  0BAA  09BB               	comf	___fltol@f1+1,f
  2978  0BAB  09BC               	comf	___fltol@f1+2,f
  2979  0BAC  09BD               	comf	___fltol@f1+3,f
  2980  0BAD  0ABA               	incf	___fltol@f1,f
  2981  0BAE  1903               	skipnz
  2982  0BAF  0ABB               	incf	___fltol@f1+1,f
  2983  0BB0  1903               	skipnz
  2984  0BB1  0ABC               	incf	___fltol@f1+2,f
  2985  0BB2  1903               	skipnz
  2986  0BB3  0ABD               	incf	___fltol@f1+3,f
  2987  0BB4  0008               	return
  2988  0BB5                     __end_of___fltol:	
  2989                           
  2990                           	psect	text10
  2991  0299                     __ptext10:	
  2992 ;; *************** function ___fladd *****************
  2993 ;; Defined at:
  2994 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  b               4    0[BANK0 ] long 
  2997 ;;  a               4    4[BANK0 ] long 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  grs             1   19[BANK0 ] unsigned char 
  3000 ;;  bexp            1   18[BANK0 ] unsigned char 
  3001 ;;  aexp            1   17[BANK0 ] unsigned char 
  3002 ;;  signs           1   16[BANK0 ] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  4    0[BANK0 ] unsigned char 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0, btemp+1
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3012 ;;      Params:         0       8       0       0       0
  3013 ;;      Locals:         0       4       0       0       0
  3014 ;;      Temps:          0       8       0       0       0
  3015 ;;      Totals:         0      20       0       0       0
  3016 ;;Total ram usage:       20 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_Encoder
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           
  3026                           ;psect for function ___fladd
  3027  0299                     ___fladd:	
  3028                           
  3029                           ;incstack = 0
  3030                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  3031  0299  1283               	bcf	3,5	;RP0=0, select bank0
  3032  029A  1303               	bcf	3,6	;RP1=0, select bank0
  3033  029B  0823               	movf	___fladd@b+3,w
  3034  029C  3980               	andlw	128
  3035  029D  00A8               	movwf	??___fladd
  3036  029E  0828               	movf	??___fladd,w
  3037  029F  00B0               	movwf	___fladd@signs
  3038  02A0  0823               	movf	___fladd@b+3,w
  3039  02A1  00A8               	movwf	??___fladd
  3040  02A2  0728               	addwf	??___fladd,w
  3041  02A3  00A9               	movwf	??___fladd+1
  3042  02A4  0829               	movf	??___fladd+1,w
  3043  02A5  00B2               	movwf	___fladd@bexp
  3044  02A6  1BA2               	btfsc	___fladd@b+2,7
  3045  02A7  1432               	bsf	___fladd@bexp,0
  3046  02A8  0832               	movf	___fladd@bexp,w
  3047  02A9  1903               	btfsc	3,2
  3048  02AA  2AB9               	goto	l2473
  3049  02AB  0A32               	incf	___fladd@bexp,w
  3050  02AC  1D03               	btfss	3,2
  3051  02AD  2AB6               	goto	l2469
  3052  02AE  3000               	movlw	0
  3053  02AF  00A3               	movwf	___fladd@b+3
  3054  02B0  3000               	movlw	0
  3055  02B1  00A2               	movwf	___fladd@b+2
  3056  02B2  3000               	movlw	0
  3057  02B3  00A1               	movwf	___fladd@b+1
  3058  02B4  3000               	movlw	0
  3059  02B5  00A0               	movwf	___fladd@b
  3060  02B6                     l2469:	
  3061  02B6  17A2               	bsf	___fladd@b+2,7
  3062  02B7  01A3               	clrf	___fladd@b+3
  3063  02B8  2AC1               	goto	l2475
  3064  02B9                     l2473:	
  3065  02B9  3000               	movlw	0
  3066  02BA  00A3               	movwf	___fladd@b+3
  3067  02BB  3000               	movlw	0
  3068  02BC  00A2               	movwf	___fladd@b+2
  3069  02BD  3000               	movlw	0
  3070  02BE  00A1               	movwf	___fladd@b+1
  3071  02BF  3000               	movlw	0
  3072  02C0  00A0               	movwf	___fladd@b
  3073  02C1                     l2475:	
  3074  02C1  0827               	movf	___fladd@a+3,w
  3075  02C2  3980               	andlw	128
  3076  02C3  00A8               	movwf	??___fladd
  3077  02C4  0828               	movf	??___fladd,w
  3078  02C5  00B1               	movwf	___fladd@aexp
  3079  02C6  0831               	movf	___fladd@aexp,w
  3080  02C7  0630               	xorwf	___fladd@signs,w
  3081  02C8  1D03               	btfss	3,2
  3082  02C9  1730               	bsf	___fladd@signs,6
  3083  02CA  0827               	movf	___fladd@a+3,w
  3084  02CB  00A8               	movwf	??___fladd
  3085  02CC  0728               	addwf	??___fladd,w
  3086  02CD  00A9               	movwf	??___fladd+1
  3087  02CE  0829               	movf	??___fladd+1,w
  3088  02CF  00B1               	movwf	___fladd@aexp
  3089  02D0  1BA6               	btfsc	___fladd@a+2,7
  3090  02D1  1431               	bsf	___fladd@aexp,0
  3091  02D2  0831               	movf	___fladd@aexp,w
  3092  02D3  1903               	btfsc	3,2
  3093  02D4  2AE3               	goto	l2497
  3094  02D5  0A31               	incf	___fladd@aexp,w
  3095  02D6  1D03               	btfss	3,2
  3096  02D7  2AE0               	goto	l2493
  3097  02D8  3000               	movlw	0
  3098  02D9  00A7               	movwf	___fladd@a+3
  3099  02DA  3000               	movlw	0
  3100  02DB  00A6               	movwf	___fladd@a+2
  3101  02DC  3000               	movlw	0
  3102  02DD  00A5               	movwf	___fladd@a+1
  3103  02DE  3000               	movlw	0
  3104  02DF  00A4               	movwf	___fladd@a
  3105  02E0                     l2493:	
  3106  02E0  17A6               	bsf	___fladd@a+2,7
  3107  02E1  01A7               	clrf	___fladd@a+3
  3108  02E2  2AEB               	goto	l654
  3109  02E3                     l2497:	
  3110  02E3  3000               	movlw	0
  3111  02E4  00A7               	movwf	___fladd@a+3
  3112  02E5  3000               	movlw	0
  3113  02E6  00A6               	movwf	___fladd@a+2
  3114  02E7  3000               	movlw	0
  3115  02E8  00A5               	movwf	___fladd@a+1
  3116  02E9  3000               	movlw	0
  3117  02EA  00A4               	movwf	___fladd@a
  3118  02EB                     l654:	
  3119  02EB  0832               	movf	___fladd@bexp,w
  3120  02EC  0231               	subwf	___fladd@aexp,w
  3121  02ED  1803               	skipnc
  3122  02EE  2B31               	goto	l2533
  3123  02EF  1F30               	btfss	___fladd@signs,6
  3124  02F0  2AF5               	goto	l2503
  3125  02F1  3080               	movlw	128
  3126  02F2  00A8               	movwf	??___fladd
  3127  02F3  0828               	movf	??___fladd,w
  3128  02F4  06B0               	xorwf	___fladd@signs,f
  3129  02F5                     l2503:	
  3130  02F5  0832               	movf	___fladd@bexp,w
  3131  02F6  00A8               	movwf	??___fladd
  3132  02F7  0828               	movf	??___fladd,w
  3133  02F8  00B3               	movwf	___fladd@grs
  3134  02F9  0831               	movf	___fladd@aexp,w
  3135  02FA  00A8               	movwf	??___fladd
  3136  02FB  0828               	movf	??___fladd,w
  3137  02FC  00B2               	movwf	___fladd@bexp
  3138  02FD  0833               	movf	___fladd@grs,w
  3139  02FE  00A8               	movwf	??___fladd
  3140  02FF  0828               	movf	??___fladd,w
  3141  0300  00B1               	movwf	___fladd@aexp
  3142  0301  0820               	movf	___fladd@b,w
  3143  0302  00A8               	movwf	??___fladd
  3144  0303  0828               	movf	??___fladd,w
  3145  0304  00B3               	movwf	___fladd@grs
  3146  0305  0824               	movf	___fladd@a,w
  3147  0306  00A8               	movwf	??___fladd
  3148  0307  0828               	movf	??___fladd,w
  3149  0308  00A0               	movwf	___fladd@b
  3150  0309  0833               	movf	___fladd@grs,w
  3151  030A  00A8               	movwf	??___fladd
  3152  030B  0828               	movf	??___fladd,w
  3153  030C  00A4               	movwf	___fladd@a
  3154  030D  0821               	movf	___fladd@b+1,w
  3155  030E  00A8               	movwf	??___fladd
  3156  030F  0828               	movf	??___fladd,w
  3157  0310  00B3               	movwf	___fladd@grs
  3158  0311  0825               	movf	___fladd@a+1,w
  3159  0312  00A8               	movwf	??___fladd
  3160  0313  0828               	movf	??___fladd,w
  3161  0314  00A1               	movwf	___fladd@b+1
  3162  0315  0833               	movf	___fladd@grs,w
  3163  0316  00A8               	movwf	??___fladd
  3164  0317  0828               	movf	??___fladd,w
  3165  0318  00A5               	movwf	___fladd@a+1
  3166  0319  0822               	movf	___fladd@b+2,w
  3167  031A  00A8               	movwf	??___fladd
  3168  031B  0828               	movf	??___fladd,w
  3169  031C  00B3               	movwf	___fladd@grs
  3170  031D  0826               	movf	___fladd@a+2,w
  3171  031E  00A8               	movwf	??___fladd
  3172  031F  0828               	movf	??___fladd,w
  3173  0320  00A2               	movwf	___fladd@b+2
  3174  0321  0833               	movf	___fladd@grs,w
  3175  0322  00A8               	movwf	??___fladd
  3176  0323  0828               	movf	??___fladd,w
  3177  0324  00A6               	movwf	___fladd@a+2
  3178  0325  0823               	movf	___fladd@b+3,w
  3179  0326  00A8               	movwf	??___fladd
  3180  0327  0828               	movf	??___fladd,w
  3181  0328  00B3               	movwf	___fladd@grs
  3182  0329  0827               	movf	___fladd@a+3,w
  3183  032A  00A8               	movwf	??___fladd
  3184  032B  0828               	movf	??___fladd,w
  3185  032C  00A3               	movwf	___fladd@b+3
  3186  032D  0833               	movf	___fladd@grs,w
  3187  032E  00A8               	movwf	??___fladd
  3188  032F  0828               	movf	??___fladd,w
  3189  0330  00A7               	movwf	___fladd@a+3
  3190  0331                     l2533:	
  3191  0331  01B3               	clrf	___fladd@grs
  3192  0332  0831               	movf	___fladd@aexp,w
  3193  0333  00A8               	movwf	??___fladd
  3194  0334  01A9               	clrf	??___fladd+1
  3195  0335  0829               	movf	??___fladd+1,w
  3196  0336  00AB               	movwf	??___fladd+3
  3197  0337  0832               	movf	___fladd@bexp,w
  3198  0338  0228               	subwf	??___fladd,w
  3199  0339  00AA               	movwf	??___fladd+2
  3200  033A  1C03               	skipc
  3201  033B  03AB               	decf	??___fladd+3,f
  3202  033C  082B               	movf	??___fladd+3,w
  3203  033D  3A80               	xorlw	128
  3204  033E  00FF               	movwf	127
  3205  033F  3080               	movlw	128
  3206  0340  027F               	subwf	127,w
  3207  0341  1D03               	skipz
  3208  0342  2B45               	goto	u3285
  3209  0343  301A               	movlw	26
  3210  0344  022A               	subwf	??___fladd+2,w
  3211  0345                     u3285:	
  3212  0345  1C03               	skipc
  3213  0346  2B7E               	goto	l2551
  3214  0347  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0348  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0349  0823               	movf	___fladd@b+3,w
  3217  034A  0422               	iorwf	___fladd@b+2,w
  3218  034B  0421               	iorwf	___fladd@b+1,w
  3219  034C  0420               	iorwf	___fladd@b,w
  3220  034D  1903               	btfsc	3,2
  3221  034E  2B51               	goto	u3290
  3222  034F  3001               	movlw	1
  3223  0350  2B52               	goto	u3300
  3224  0351                     u3290:	
  3225  0351  3000               	movlw	0
  3226  0352                     u3300:	
  3227  0352  00A8               	movwf	??___fladd
  3228  0353  0828               	movf	??___fladd,w
  3229  0354  00B3               	movwf	___fladd@grs
  3230  0355  3000               	movlw	0
  3231  0356  00A3               	movwf	___fladd@b+3
  3232  0357  3000               	movlw	0
  3233  0358  00A2               	movwf	___fladd@b+2
  3234  0359  3000               	movlw	0
  3235  035A  00A1               	movwf	___fladd@b+1
  3236  035B  3000               	movlw	0
  3237  035C  00A0               	movwf	___fladd@b
  3238  035D  0831               	movf	___fladd@aexp,w
  3239  035E  00A8               	movwf	??___fladd
  3240  035F  0828               	movf	??___fladd,w
  3241  0360  00B2               	movwf	___fladd@bexp
  3242  0361  2B84               	goto	l658
  3243  0362                     l660:	
  3244  0362  1C33               	btfss	___fladd@grs,0
  3245  0363  2B6D               	goto	l2541
  3246  0364  0833               	movf	___fladd@grs,w
  3247  0365  00A8               	movwf	??___fladd
  3248  0366  1003               	clrc
  3249  0367  0C28               	rrf	??___fladd,w
  3250  0368  3801               	iorlw	1
  3251  0369  00A9               	movwf	??___fladd+1
  3252  036A  0829               	movf	??___fladd+1,w
  3253  036B  00B3               	movwf	___fladd@grs
  3254  036C  2B6F               	goto	l2543
  3255  036D                     l2541:	
  3256  036D  1003               	clrc
  3257  036E  0CB3               	rrf	___fladd@grs,f
  3258  036F                     l2543:	
  3259  036F  1820               	btfsc	___fladd@b,0
  3260  0370  17B3               	bsf	___fladd@grs,7
  3261  0371  3001               	movlw	1
  3262  0372  00A8               	movwf	??___fladd
  3263  0373                     u3335:	
  3264  0373  0D23               	rlf	___fladd@b+3,w
  3265  0374  0CA3               	rrf	___fladd@b+3,f
  3266  0375  0CA2               	rrf	___fladd@b+2,f
  3267  0376  0CA1               	rrf	___fladd@b+1,f
  3268  0377  0CA0               	rrf	___fladd@b,f
  3269  0378  0BA8               	decfsz	??___fladd& (0+127),f
  3270  0379  2B73               	goto	u3335
  3271  037A  3001               	movlw	1
  3272  037B  00A8               	movwf	??___fladd
  3273  037C  0828               	movf	??___fladd,w
  3274  037D  07B2               	addwf	___fladd@bexp,f
  3275  037E                     l2551:	
  3276  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3277  037F  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0380  0831               	movf	___fladd@aexp,w
  3279  0381  0232               	subwf	___fladd@bexp,w
  3280  0382  1C03               	skipc
  3281  0383  2B62               	goto	l660
  3282  0384                     l658:	
  3283  0384  1B30               	btfsc	___fladd@signs,6
  3284  0385  2BC5               	goto	l2577
  3285  0386  0832               	movf	___fladd@bexp,w
  3286  0387  1D03               	btfss	3,2
  3287  0388  2B92               	goto	l2559
  3288  0389  3000               	movlw	0
  3289  038A  00A3               	movwf	?___fladd+3
  3290  038B  3000               	movlw	0
  3291  038C  00A2               	movwf	?___fladd+2
  3292  038D  3000               	movlw	0
  3293  038E  00A1               	movwf	?___fladd+1
  3294  038F  3000               	movlw	0
  3295  0390  00A0               	movwf	?___fladd
  3296  0391  0008               	return
  3297  0392                     l2559:	
  3298  0392  0824               	movf	___fladd@a,w
  3299  0393  07A0               	addwf	___fladd@b,f
  3300  0394  0825               	movf	___fladd@a+1,w
  3301  0395  1103               	clrz
  3302  0396  1803               	skipnc
  3303  0397  3E01               	addlw	1
  3304  0398  1D03               	btfss	3,2
  3305  0399  07A1               	addwf	___fladd@b+1,f
  3306  039A  0826               	movf	___fladd@a+2,w
  3307  039B  1103               	clrz
  3308  039C  1803               	skipnc
  3309  039D  3E01               	addlw	1
  3310  039E  1D03               	btfss	3,2
  3311  039F  07A2               	addwf	___fladd@b+2,f
  3312  03A0  0827               	movf	___fladd@a+3,w
  3313  03A1  1103               	clrz
  3314  03A2  1803               	skipnc
  3315  03A3  3E01               	addlw	1
  3316  03A4  1D03               	btfss	3,2
  3317  03A5  07A3               	addwf	___fladd@b+3,f
  3318  03A6  1C23               	btfss	___fladd@b+3,0
  3319  03A7  2C67               	goto	l2611
  3320  03A8  1C33               	btfss	___fladd@grs,0
  3321  03A9  2BB3               	goto	l2567
  3322  03AA  0833               	movf	___fladd@grs,w
  3323  03AB  00A8               	movwf	??___fladd
  3324  03AC  1003               	clrc
  3325  03AD  0C28               	rrf	??___fladd,w
  3326  03AE  3801               	iorlw	1
  3327  03AF  00A9               	movwf	??___fladd+1
  3328  03B0  0829               	movf	??___fladd+1,w
  3329  03B1  00B3               	movwf	___fladd@grs
  3330  03B2  2BB5               	goto	l2569
  3331  03B3                     l2567:	
  3332  03B3  1003               	clrc
  3333  03B4  0CB3               	rrf	___fladd@grs,f
  3334  03B5                     l2569:	
  3335  03B5  1820               	btfsc	___fladd@b,0
  3336  03B6  17B3               	bsf	___fladd@grs,7
  3337  03B7  3001               	movlw	1
  3338  03B8  00A8               	movwf	??___fladd
  3339  03B9                     u3415:	
  3340  03B9  0D23               	rlf	___fladd@b+3,w
  3341  03BA  0CA3               	rrf	___fladd@b+3,f
  3342  03BB  0CA2               	rrf	___fladd@b+2,f
  3343  03BC  0CA1               	rrf	___fladd@b+1,f
  3344  03BD  0CA0               	rrf	___fladd@b,f
  3345  03BE  0BA8               	decfsz	??___fladd& (0+127),f
  3346  03BF  2BB9               	goto	u3415
  3347  03C0  3001               	movlw	1
  3348  03C1  00A8               	movwf	??___fladd
  3349  03C2  0828               	movf	??___fladd,w
  3350  03C3  07B2               	addwf	___fladd@bexp,f
  3351  03C4  2C67               	goto	l2611
  3352  03C5                     l2577:	
  3353  03C5  0823               	movf	___fladd@b+3,w
  3354  03C6  3A80               	xorlw	128
  3355  03C7  00FF               	movwf	127
  3356  03C8  0827               	movf	___fladd@a+3,w
  3357  03C9  3A80               	xorlw	128
  3358  03CA  027F               	subwf	127,w
  3359  03CB  1D03               	skipz
  3360  03CC  2BD7               	goto	u3423
  3361  03CD  0826               	movf	___fladd@a+2,w
  3362  03CE  0222               	subwf	___fladd@b+2,w
  3363  03CF  1D03               	skipz
  3364  03D0  2BD7               	goto	u3423
  3365  03D1  0825               	movf	___fladd@a+1,w
  3366  03D2  0221               	subwf	___fladd@b+1,w
  3367  03D3  1D03               	skipz
  3368  03D4  2BD7               	goto	u3423
  3369  03D5  0824               	movf	___fladd@a,w
  3370  03D6  0220               	subwf	___fladd@b,w
  3371  03D7                     u3423:	
  3372  03D7  1803               	skipnc
  3373  03D8  2C2F               	goto	l2587
  3374  03D9  30FF               	movlw	255
  3375  03DA  00A8               	movwf	??___fladd
  3376  03DB  30FF               	movlw	255
  3377  03DC  00A9               	movwf	??___fladd+1
  3378  03DD  30FF               	movlw	255
  3379  03DE  00AA               	movwf	??___fladd+2
  3380  03DF  30FF               	movlw	255
  3381  03E0  00AB               	movwf	??___fladd+3
  3382  03E1  0824               	movf	___fladd@a,w
  3383  03E2  00AC               	movwf	??___fladd+4
  3384  03E3  0825               	movf	___fladd@a+1,w
  3385  03E4  00AD               	movwf	??___fladd+5
  3386  03E5  0826               	movf	___fladd@a+2,w
  3387  03E6  00AE               	movwf	??___fladd+6
  3388  03E7  0827               	movf	___fladd@a+3,w
  3389  03E8  00AF               	movwf	??___fladd+7
  3390  03E9  0820               	movf	___fladd@b,w
  3391  03EA  02AC               	subwf	??___fladd+4,f
  3392  03EB  0821               	movf	___fladd@b+1,w
  3393  03EC  1C03               	skipc
  3394  03ED  0F21               	incfsz	___fladd@b+1,w
  3395  03EE  2BF0               	goto	u3431
  3396  03EF  2BF1               	goto	u3432
  3397  03F0                     u3431:	
  3398  03F0  02AD               	subwf	??___fladd+5,f
  3399  03F1                     u3432:	
  3400  03F1  0822               	movf	___fladd@b+2,w
  3401  03F2  1C03               	skipc
  3402  03F3  0F22               	incfsz	___fladd@b+2,w
  3403  03F4  2BF6               	goto	u3433
  3404  03F5  2BF7               	goto	u3434
  3405  03F6                     u3433:	
  3406  03F6  02AE               	subwf	??___fladd+6,f
  3407  03F7                     u3434:	
  3408  03F7  0823               	movf	___fladd@b+3,w
  3409  03F8  1C03               	skipc
  3410  03F9  0F23               	incfsz	___fladd@b+3,w
  3411  03FA  2BFC               	goto	u3435
  3412  03FB  2BFD               	goto	u3436
  3413  03FC                     u3435:	
  3414  03FC  02AF               	subwf	??___fladd+7,f
  3415  03FD                     u3436:	
  3416  03FD  082C               	movf	??___fladd+4,w
  3417  03FE  07A8               	addwf	??___fladd,f
  3418  03FF  082D               	movf	??___fladd+5,w
  3419  0400  1803               	skipnc
  3420  0401  0F2D               	incfsz	??___fladd+5,w
  3421  0402  2C04               	goto	u3440
  3422  0403  2C05               	goto	u3441
  3423  0404                     u3440:	
  3424  0404  07A9               	addwf	??___fladd+1,f
  3425  0405                     u3441:	
  3426  0405  082E               	movf	??___fladd+6,w
  3427  0406  1803               	skipnc
  3428  0407  0F2E               	incfsz	??___fladd+6,w
  3429  0408  2C0A               	goto	u3442
  3430  0409  2C0B               	goto	u3443
  3431  040A                     u3442:	
  3432  040A  07AA               	addwf	??___fladd+2,f
  3433  040B                     u3443:	
  3434  040B  082F               	movf	??___fladd+7,w
  3435  040C  1803               	skipnc
  3436  040D  0A2F               	incf	??___fladd+7,w
  3437  040E  07AB               	addwf	??___fladd+3,f
  3438  040F  082B               	movf	??___fladd+3,w
  3439  0410  00A3               	movwf	___fladd@b+3
  3440  0411  082A               	movf	??___fladd+2,w
  3441  0412  00A2               	movwf	___fladd@b+2
  3442  0413  0829               	movf	??___fladd+1,w
  3443  0414  00A1               	movwf	___fladd@b+1
  3444  0415  0828               	movf	??___fladd,w
  3445  0416  00A0               	movwf	___fladd@b
  3446  0417  3080               	movlw	128
  3447  0418  00A8               	movwf	??___fladd
  3448  0419  0828               	movf	??___fladd,w
  3449  041A  06B0               	xorwf	___fladd@signs,f
  3450  041B  09B3               	comf	___fladd@grs,f
  3451  041C  0AB3               	incf	___fladd@grs,f
  3452  041D  0833               	movf	___fladd@grs,w
  3453  041E  1D03               	btfss	3,2
  3454  041F  2C3D               	goto	l675
  3455  0420  3001               	movlw	1
  3456  0421  07A0               	addwf	___fladd@b,f
  3457  0422  3000               	movlw	0
  3458  0423  1803               	skipnc
  3459  0424  3001               	movlw	1
  3460  0425  07A1               	addwf	___fladd@b+1,f
  3461  0426  3000               	movlw	0
  3462  0427  1803               	skipnc
  3463  0428  3001               	movlw	1
  3464  0429  07A2               	addwf	___fladd@b+2,f
  3465  042A  3000               	movlw	0
  3466  042B  1803               	skipnc
  3467  042C  3001               	movlw	1
  3468  042D  07A3               	addwf	___fladd@b+3,f
  3469  042E  2C3D               	goto	l675
  3470  042F                     l2587:	
  3471  042F  0824               	movf	___fladd@a,w
  3472  0430  02A0               	subwf	___fladd@b,f
  3473  0431  0825               	movf	___fladd@a+1,w
  3474  0432  1C03               	skipc
  3475  0433  0F25               	incfsz	___fladd@a+1,w
  3476  0434  02A1               	subwf	___fladd@b+1,f
  3477  0435  0826               	movf	___fladd@a+2,w
  3478  0436  1C03               	skipc
  3479  0437  0F26               	incfsz	___fladd@a+2,w
  3480  0438  02A2               	subwf	___fladd@b+2,f
  3481  0439  0827               	movf	___fladd@a+3,w
  3482  043A  1C03               	skipc
  3483  043B  0F27               	incfsz	___fladd@a+3,w
  3484  043C  02A3               	subwf	___fladd@b+3,f
  3485  043D                     l675:	
  3486  043D  0823               	movf	___fladd@b+3,w
  3487  043E  0422               	iorwf	___fladd@b+2,w
  3488  043F  0421               	iorwf	___fladd@b+1,w
  3489  0440  0420               	iorwf	___fladd@b,w
  3490  0441  1D03               	skipz
  3491  0442  2C65               	goto	l2609
  3492  0443  0833               	movf	___fladd@grs,w
  3493  0444  1D03               	btfss	3,2
  3494  0445  2C65               	goto	l2609
  3495  0446  3000               	movlw	0
  3496  0447  00A3               	movwf	?___fladd+3
  3497  0448  3000               	movlw	0
  3498  0449  00A2               	movwf	?___fladd+2
  3499  044A  3000               	movlw	0
  3500  044B  00A1               	movwf	?___fladd+1
  3501  044C  3000               	movlw	0
  3502  044D  00A0               	movwf	?___fladd
  3503  044E  0008               	return
  3504  044F                     l2595:	
  3505  044F  3001               	movlw	1
  3506  0450  00A8               	movwf	??___fladd
  3507  0451                     u3485:	
  3508  0451  1003               	clrc
  3509  0452  0DA0               	rlf	___fladd@b,f
  3510  0453  0DA1               	rlf	___fladd@b+1,f
  3511  0454  0DA2               	rlf	___fladd@b+2,f
  3512  0455  0DA3               	rlf	___fladd@b+3,f
  3513  0456  0BA8               	decfsz	??___fladd,f
  3514  0457  2C51               	goto	u3485
  3515  0458  1BB3               	btfsc	___fladd@grs,7
  3516  0459  1420               	bsf	___fladd@b,0
  3517  045A  1C33               	btfss	___fladd@grs,0
  3518  045B  2C5E               	goto	l2603
  3519  045C  1403               	setc
  3520  045D  2C5F               	goto	L4
  3521  045E                     l2603:	
  3522  045E  1003               	clrc
  3523  045F                     L4:	
  3524  045F  0DB3               	rlf	___fladd@grs,f
  3525  0460  0832               	movf	___fladd@bexp,w
  3526  0461  1903               	btfsc	3,2
  3527  0462  2C65               	goto	l2609
  3528  0463  3001               	movlw	1
  3529  0464  02B2               	subwf	___fladd@bexp,f
  3530  0465                     l2609:	
  3531  0465  1FA2               	btfss	___fladd@b+2,7
  3532  0466  2C4F               	goto	l2595
  3533  0467                     l2611:	
  3534  0467  01B1               	clrf	___fladd@aexp
  3535  0468  1FB3               	btfss	___fladd@grs,7
  3536  0469  2C72               	goto	l2621
  3537  046A  0833               	movf	___fladd@grs,w
  3538  046B  397F               	andlw	127
  3539  046C  1903               	btfsc	3,2
  3540  046D  1820               	btfsc	___fladd@b,0
  3541  046E  2C70               	goto	l2617
  3542  046F  2C72               	goto	l2621
  3543  0470                     l2617:	
  3544  0470  01B1               	clrf	___fladd@aexp
  3545  0471  0AB1               	incf	___fladd@aexp,f
  3546  0472                     l2621:	
  3547  0472  0831               	movf	___fladd@aexp,w
  3548  0473  1903               	btfsc	3,2
  3549  0474  2CA5               	goto	l688
  3550  0475  3001               	movlw	1
  3551  0476  07A0               	addwf	___fladd@b,f
  3552  0477  3000               	movlw	0
  3553  0478  1803               	skipnc
  3554  0479  3001               	movlw	1
  3555  047A  07A1               	addwf	___fladd@b+1,f
  3556  047B  3000               	movlw	0
  3557  047C  1803               	skipnc
  3558  047D  3001               	movlw	1
  3559  047E  07A2               	addwf	___fladd@b+2,f
  3560  047F  3000               	movlw	0
  3561  0480  1803               	skipnc
  3562  0481  3001               	movlw	1
  3563  0482  07A3               	addwf	___fladd@b+3,f
  3564  0483  1C23               	btfss	___fladd@b+3,0
  3565  0484  2CA5               	goto	l688
  3566  0485  0820               	movf	___fladd@b,w
  3567  0486  00A8               	movwf	??___fladd
  3568  0487  0821               	movf	___fladd@b+1,w
  3569  0488  00A9               	movwf	??___fladd+1
  3570  0489  0822               	movf	___fladd@b+2,w
  3571  048A  00AA               	movwf	??___fladd+2
  3572  048B  0823               	movf	___fladd@b+3,w
  3573  048C  00AB               	movwf	??___fladd+3
  3574  048D  3001               	movlw	1
  3575  048E  00AC               	movwf	??___fladd+4
  3576  048F                     u3585:	
  3577  048F  0D2B               	rlf	??___fladd+3,w
  3578  0490  0CAB               	rrf	??___fladd+3,f
  3579  0491  0CAA               	rrf	??___fladd+2,f
  3580  0492  0CA9               	rrf	??___fladd+1,f
  3581  0493  0CA8               	rrf	??___fladd,f
  3582  0494  0BAC               	decfsz	??___fladd+4,f
  3583  0495  2C8F               	goto	u3585
  3584  0496  082B               	movf	??___fladd+3,w
  3585  0497  00A3               	movwf	___fladd@b+3
  3586  0498  082A               	movf	??___fladd+2,w
  3587  0499  00A2               	movwf	___fladd@b+2
  3588  049A  0829               	movf	??___fladd+1,w
  3589  049B  00A1               	movwf	___fladd@b+1
  3590  049C  0828               	movf	??___fladd,w
  3591  049D  00A0               	movwf	___fladd@b
  3592  049E  0A32               	incf	___fladd@bexp,w
  3593  049F  1903               	btfsc	3,2
  3594  04A0  2CA5               	goto	l688
  3595  04A1  3001               	movlw	1
  3596  04A2  00A8               	movwf	??___fladd
  3597  04A3  0828               	movf	??___fladd,w
  3598  04A4  07B2               	addwf	___fladd@bexp,f
  3599  04A5                     l688:	
  3600  04A5  0A32               	incf	___fladd@bexp,w
  3601  04A6  1D03               	btfss	3,2
  3602  04A7  0832               	movf	___fladd@bexp,w
  3603  04A8  1D03               	btfss	3,2
  3604  04A9  2CB5               	goto	l2639
  3605  04AA  3000               	movlw	0
  3606  04AB  00A3               	movwf	___fladd@b+3
  3607  04AC  3000               	movlw	0
  3608  04AD  00A2               	movwf	___fladd@b+2
  3609  04AE  3000               	movlw	0
  3610  04AF  00A1               	movwf	___fladd@b+1
  3611  04B0  3000               	movlw	0
  3612  04B1  00A0               	movwf	___fladd@b
  3613  04B2  0832               	movf	___fladd@bexp,w
  3614  04B3  1903               	btfsc	3,2
  3615  04B4  01B0               	clrf	___fladd@signs
  3616  04B5                     l2639:	
  3617  04B5  1C32               	btfss	___fladd@bexp,0
  3618  04B6  2CB9               	goto	l2643
  3619  04B7  17A2               	bsf	___fladd@b+2,7
  3620  04B8  2CBD               	goto	l696
  3621  04B9                     l2643:	
  3622  04B9  307F               	movlw	127
  3623  04BA  00A8               	movwf	??___fladd
  3624  04BB  0828               	movf	??___fladd,w
  3625  04BC  05A2               	andwf	___fladd@b+2,f
  3626  04BD                     l696:	
  3627  04BD  0832               	movf	___fladd@bexp,w
  3628  04BE  00A8               	movwf	??___fladd
  3629  04BF  1003               	clrc
  3630  04C0  0C28               	rrf	??___fladd,w
  3631  04C1  00A9               	movwf	??___fladd+1
  3632  04C2  0829               	movf	??___fladd+1,w
  3633  04C3  00A3               	movwf	___fladd@b+3
  3634  04C4  1FB0               	btfss	___fladd@signs,7
  3635  04C5  0008               	return
  3636  04C6  17A3               	bsf	___fladd@b+3,7
  3637  04C7  0008               	return
  3638  04C8                     __end_of___fladd:	
  3639                           
  3640                           	psect	text11
  3641  0D7E                     __ptext11:	
  3642 ;; *************** function _VerificarInversionGiro *****************
  3643 ;; Defined at:
  3644 ;;		line 183 in file "Controls.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  2  237[None  ] int 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0
  3661 ;;      Totals:         0       0       0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    2
  3665 ;; This function calls:
  3666 ;;		___flge
  3667 ;;		___flmul
  3668 ;;		___xxtofl
  3669 ;; This function is called by:
  3670 ;;		_Encoder
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           
  3675                           ;psect for function _VerificarInversionGiro
  3676  0D7E                     _VerificarInversionGiro:	
  3677                           
  3678                           ;Controls.c: 184:     if (RC0 && (Grados * 0.97 >= CmHorario)) {
  3679                           
  3680                           ;incstack = 0
  3681                           ; Regs used in _VerificarInversionGiro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3682  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  3683  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  3684  0D80  1C07               	btfss	7,0	;volatile
  3685  0D81  2DDD               	goto	l238
  3686  0D82  303F               	movlw	63
  3687  0D83  00A3               	movwf	___flmul@b+3
  3688  0D84  3078               	movlw	120
  3689  0D85  00A2               	movwf	___flmul@b+2
  3690  0D86  3051               	movlw	81
  3691  0D87  00A1               	movwf	___flmul@b+1
  3692  0D88  30EC               	movlw	236
  3693  0D89  00A0               	movwf	___flmul@b
  3694  0D8A  0860               	movf	_Grados,w
  3695  0D8B  00F0               	movwf	___xxtofl@val
  3696  0D8C  0861               	movf	_Grados+1,w
  3697  0D8D  00F1               	movwf	___xxtofl@val+1
  3698  0D8E  3000               	movlw	0
  3699  0D8F  1BF1               	btfsc	___xxtofl@val+1,7
  3700  0D90  30FF               	movlw	255
  3701  0D91  00F2               	movwf	___xxtofl@val+2
  3702  0D92  00F3               	movwf	___xxtofl@val+3
  3703  0D93  3001               	movlw	1
  3704  0D94  120A  158A  24DB  120A  158A  	fcall	___xxtofl
  3705  0D99  0873               	movf	?___xxtofl+3,w
  3706  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
  3707  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
  3708  0D9C  00A7               	movwf	___flmul@a+3
  3709  0D9D  0872               	movf	?___xxtofl+2,w
  3710  0D9E  00A6               	movwf	___flmul@a+2
  3711  0D9F  0871               	movf	?___xxtofl+1,w
  3712  0DA0  00A5               	movwf	___flmul@a+1
  3713  0DA1  0870               	movf	?___xxtofl,w
  3714  0DA2  00A4               	movwf	___flmul@a
  3715  0DA3  120A  118A  24C8  120A  158A  	fcall	___flmul
  3716  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  3717  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  3718  0DAA  0823               	movf	?___flmul+3,w
  3719  0DAB  00BD               	movwf	___flge@ff1+3
  3720  0DAC  0822               	movf	?___flmul+2,w
  3721  0DAD  00BC               	movwf	___flge@ff1+2
  3722  0DAE  0821               	movf	?___flmul+1,w
  3723  0DAF  00BB               	movwf	___flge@ff1+1
  3724  0DB0  0820               	movf	?___flmul,w
  3725  0DB1  00BA               	movwf	___flge@ff1
  3726  0DB2  085E               	movf	_CmHorario,w
  3727  0DB3  00F0               	movwf	___xxtofl@val
  3728  0DB4  085F               	movf	_CmHorario+1,w
  3729  0DB5  00F1               	movwf	___xxtofl@val+1
  3730  0DB6  3000               	movlw	0
  3731  0DB7  1BF1               	btfsc	___xxtofl@val+1,7
  3732  0DB8  30FF               	movlw	255
  3733  0DB9  00F2               	movwf	___xxtofl@val+2
  3734  0DBA  00F3               	movwf	___xxtofl@val+3
  3735  0DBB  3001               	movlw	1
  3736  0DBC  120A  158A  24DB  120A  158A  	fcall	___xxtofl
  3737  0DC1  0873               	movf	?___xxtofl+3,w
  3738  0DC2  1283               	bcf	3,5	;RP0=0, select bank0
  3739  0DC3  1303               	bcf	3,6	;RP1=0, select bank0
  3740  0DC4  00C1               	movwf	___flge@ff2+3
  3741  0DC5  0872               	movf	?___xxtofl+2,w
  3742  0DC6  00C0               	movwf	___flge@ff2+2
  3743  0DC7  0871               	movf	?___xxtofl+1,w
  3744  0DC8  00BF               	movwf	___flge@ff2+1
  3745  0DC9  0870               	movf	?___xxtofl,w
  3746  0DCA  00BE               	movwf	___flge@ff2
  3747  0DCB  120A  158A  2446  120A  158A  	fcall	___flge
  3748  0DD0  1C03               	btfss	3,0
  3749  0DD1  2DDD               	goto	l238
  3750  0DD2                     l2389:	
  3751                           
  3752                           ;Controls.c: 185:         Grados = 0;
  3753  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  3754  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  3755  0DD4  01E0               	clrf	_Grados
  3756  0DD5  01E1               	clrf	_Grados+1
  3757                           
  3758                           ;Controls.c: 186:         RC0 = !RC0;
  3759  0DD6  3001               	movlw	1
  3760  0DD7  0687               	xorwf	7,f
  3761                           
  3762                           ;Controls.c: 187:         RC1 = !RC1;
  3763  0DD8  3002               	movlw	2
  3764  0DD9  0687               	xorwf	7,f
  3765                           
  3766                           ;Controls.c: 188:         lastCm = 0;
  3767  0DDA  01D8               	clrf	_lastCm
  3768  0DDB  01D9               	clrf	_lastCm+1
  3769                           
  3770                           ;Controls.c: 189:     } else if (RC1 && Grados * 0.97 >= CmAntiHorario) {
  3771  0DDC  0008               	return
  3772  0DDD                     l238:	
  3773  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
  3774  0DDE  1303               	bcf	3,6	;RP1=0, select bank0
  3775  0DDF  1C87               	btfss	7,1	;volatile
  3776  0DE0  0008               	return
  3777  0DE1  303F               	movlw	63
  3778  0DE2  00A3               	movwf	___flmul@b+3
  3779  0DE3  3078               	movlw	120
  3780  0DE4  00A2               	movwf	___flmul@b+2
  3781  0DE5  3051               	movlw	81
  3782  0DE6  00A1               	movwf	___flmul@b+1
  3783  0DE7  30EC               	movlw	236
  3784  0DE8  00A0               	movwf	___flmul@b
  3785  0DE9  0860               	movf	_Grados,w
  3786  0DEA  00F0               	movwf	___xxtofl@val
  3787  0DEB  0861               	movf	_Grados+1,w
  3788  0DEC  00F1               	movwf	___xxtofl@val+1
  3789  0DED  3000               	movlw	0
  3790  0DEE  1BF1               	btfsc	___xxtofl@val+1,7
  3791  0DEF  30FF               	movlw	255
  3792  0DF0  00F2               	movwf	___xxtofl@val+2
  3793  0DF1  00F3               	movwf	___xxtofl@val+3
  3794  0DF2  3001               	movlw	1
  3795  0DF3  120A  158A  24DB  120A  158A  	fcall	___xxtofl
  3796  0DF8  0873               	movf	?___xxtofl+3,w
  3797  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  3798  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  3799  0DFB  00A7               	movwf	___flmul@a+3
  3800  0DFC  0872               	movf	?___xxtofl+2,w
  3801  0DFD  00A6               	movwf	___flmul@a+2
  3802  0DFE  0871               	movf	?___xxtofl+1,w
  3803  0DFF  00A5               	movwf	___flmul@a+1
  3804  0E00  0870               	movf	?___xxtofl,w
  3805  0E01  00A4               	movwf	___flmul@a
  3806  0E02  120A  118A  24C8  120A  158A  	fcall	___flmul
  3807  0E07  1283               	bcf	3,5	;RP0=0, select bank0
  3808  0E08  1303               	bcf	3,6	;RP1=0, select bank0
  3809  0E09  0823               	movf	?___flmul+3,w
  3810  0E0A  00BD               	movwf	___flge@ff1+3
  3811  0E0B  0822               	movf	?___flmul+2,w
  3812  0E0C  00BC               	movwf	___flge@ff1+2
  3813  0E0D  0821               	movf	?___flmul+1,w
  3814  0E0E  00BB               	movwf	___flge@ff1+1
  3815  0E0F  0820               	movf	?___flmul,w
  3816  0E10  00BA               	movwf	___flge@ff1
  3817  0E11  085C               	movf	_CmAntiHorario,w
  3818  0E12  00F0               	movwf	___xxtofl@val
  3819  0E13  085D               	movf	_CmAntiHorario+1,w
  3820  0E14  00F1               	movwf	___xxtofl@val+1
  3821  0E15  3000               	movlw	0
  3822  0E16  1BF1               	btfsc	___xxtofl@val+1,7
  3823  0E17  30FF               	movlw	255
  3824  0E18  00F2               	movwf	___xxtofl@val+2
  3825  0E19  00F3               	movwf	___xxtofl@val+3
  3826  0E1A  3001               	movlw	1
  3827  0E1B  120A  158A  24DB  120A  158A  	fcall	___xxtofl
  3828  0E20  0873               	movf	?___xxtofl+3,w
  3829  0E21  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  3831  0E23  00C1               	movwf	___flge@ff2+3
  3832  0E24  0872               	movf	?___xxtofl+2,w
  3833  0E25  00C0               	movwf	___flge@ff2+2
  3834  0E26  0871               	movf	?___xxtofl+1,w
  3835  0E27  00BF               	movwf	___flge@ff2+1
  3836  0E28  0870               	movf	?___xxtofl,w
  3837  0E29  00BE               	movwf	___flge@ff2
  3838  0E2A  120A  158A  2446  120A  158A  	fcall	___flge
  3839  0E2F  1C03               	btfss	3,0
  3840  0E30  0008               	return
  3841  0E31  2DD2               	goto	l2389
  3842  0E32                     __end_of_VerificarInversionGiro:	
  3843                           
  3844                           	psect	text12
  3845  0CDB                     __ptext12:	
  3846 ;; *************** function ___xxtofl *****************
  3847 ;; Defined at:
  3848 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  sign            1    wreg     unsigned char 
  3851 ;;  val             4    0[COMMON] long 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  sign            1    8[COMMON] unsigned char 
  3854 ;;  arg             4   10[COMMON] unsigned long 
  3855 ;;  exp             1    9[COMMON] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  4    0[COMMON] unsigned char 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3865 ;;      Params:         4       0       0       0       0
  3866 ;;      Locals:         6       0       0       0       0
  3867 ;;      Temps:          4       0       0       0       0
  3868 ;;      Totals:        14       0       0       0       0
  3869 ;;Total ram usage:       14 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_VerificarInversionGiro
  3875 ;;		_Encoder
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function ___xxtofl
  3881  0CDB                     ___xxtofl:	
  3882                           
  3883                           ;incstack = 0
  3884                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  3885                           ;___xxtofl@sign stored from wreg
  3886  0CDB  00F8               	movwf	___xxtofl@sign
  3887  0CDC  0878               	movf	___xxtofl@sign,w
  3888  0CDD  1D03               	btfss	3,2
  3889  0CDE  1FF3               	btfss	___xxtofl@val+3,7
  3890  0CDF  2CF0               	goto	l2261
  3891  0CE0  0970               	comf	___xxtofl@val,w
  3892  0CE1  00FA               	movwf	___xxtofl@arg
  3893  0CE2  0971               	comf	___xxtofl@val+1,w
  3894  0CE3  00FB               	movwf	___xxtofl@arg+1
  3895  0CE4  0972               	comf	___xxtofl@val+2,w
  3896  0CE5  00FC               	movwf	___xxtofl@arg+2
  3897  0CE6  0973               	comf	___xxtofl@val+3,w
  3898  0CE7  00FD               	movwf	___xxtofl@arg+3
  3899  0CE8  0AFA               	incf	___xxtofl@arg,f
  3900  0CE9  1903               	skipnz
  3901  0CEA  0AFB               	incf	___xxtofl@arg+1,f
  3902  0CEB  1903               	skipnz
  3903  0CEC  0AFC               	incf	___xxtofl@arg+2,f
  3904  0CED  1903               	skipnz
  3905  0CEE  0AFD               	incf	___xxtofl@arg+3,f
  3906  0CEF  2CF8               	goto	l788
  3907  0CF0                     l2261:	
  3908  0CF0  0873               	movf	___xxtofl@val+3,w
  3909  0CF1  00FD               	movwf	___xxtofl@arg+3
  3910  0CF2  0872               	movf	___xxtofl@val+2,w
  3911  0CF3  00FC               	movwf	___xxtofl@arg+2
  3912  0CF4  0871               	movf	___xxtofl@val+1,w
  3913  0CF5  00FB               	movwf	___xxtofl@arg+1
  3914  0CF6  0870               	movf	___xxtofl@val,w
  3915  0CF7  00FA               	movwf	___xxtofl@arg
  3916  0CF8                     l788:	
  3917  0CF8  0873               	movf	___xxtofl@val+3,w
  3918  0CF9  0472               	iorwf	___xxtofl@val+2,w
  3919  0CFA  0471               	iorwf	___xxtofl@val+1,w
  3920  0CFB  0470               	iorwf	___xxtofl@val,w
  3921  0CFC  1D03               	skipz
  3922  0CFD  2D07               	goto	l2267
  3923  0CFE  3000               	movlw	0
  3924  0CFF  00F3               	movwf	?___xxtofl+3
  3925  0D00  3000               	movlw	0
  3926  0D01  00F2               	movwf	?___xxtofl+2
  3927  0D02  3000               	movlw	0
  3928  0D03  00F1               	movwf	?___xxtofl+1
  3929  0D04  3000               	movlw	0
  3930  0D05  00F0               	movwf	?___xxtofl
  3931  0D06  0008               	return
  3932  0D07                     l2267:	
  3933  0D07  3096               	movlw	150
  3934  0D08  00F4               	movwf	??___xxtofl
  3935  0D09  0874               	movf	??___xxtofl,w
  3936  0D0A  00F9               	movwf	___xxtofl@exp
  3937  0D0B                     l2271:	
  3938  0D0B  30FE               	movlw	254
  3939  0D0C  057D               	andwf	___xxtofl@arg+3,w
  3940  0D0D  1903               	btfsc	3,2
  3941  0D0E  2D38               	goto	l794
  3942  0D0F  3001               	movlw	1
  3943  0D10  00F4               	movwf	??___xxtofl
  3944  0D11  0874               	movf	??___xxtofl,w
  3945  0D12  07F9               	addwf	___xxtofl@exp,f
  3946  0D13  3001               	movlw	1
  3947  0D14                     u2675:	
  3948  0D14  1003               	clrc
  3949  0D15  0CFD               	rrf	___xxtofl@arg+3,f
  3950  0D16  0CFC               	rrf	___xxtofl@arg+2,f
  3951  0D17  0CFB               	rrf	___xxtofl@arg+1,f
  3952  0D18  0CFA               	rrf	___xxtofl@arg,f
  3953  0D19  3EFF               	addlw	-1
  3954  0D1A  1D03               	skipz
  3955  0D1B  2D14               	goto	u2675
  3956  0D1C  2D0B               	goto	l2271
  3957  0D1D                     l2273:	
  3958  0D1D  3001               	movlw	1
  3959  0D1E  00F4               	movwf	??___xxtofl
  3960  0D1F  0874               	movf	??___xxtofl,w
  3961  0D20  07F9               	addwf	___xxtofl@exp,f
  3962  0D21  3001               	movlw	1
  3963  0D22  07FA               	addwf	___xxtofl@arg,f
  3964  0D23  3000               	movlw	0
  3965  0D24  1803               	skipnc
  3966  0D25  3001               	movlw	1
  3967  0D26  07FB               	addwf	___xxtofl@arg+1,f
  3968  0D27  3000               	movlw	0
  3969  0D28  1803               	skipnc
  3970  0D29  3001               	movlw	1
  3971  0D2A  07FC               	addwf	___xxtofl@arg+2,f
  3972  0D2B  3000               	movlw	0
  3973  0D2C  1803               	skipnc
  3974  0D2D  3001               	movlw	1
  3975  0D2E  07FD               	addwf	___xxtofl@arg+3,f
  3976  0D2F  3001               	movlw	1
  3977  0D30                     u2695:	
  3978  0D30  1003               	clrc
  3979  0D31  0CFD               	rrf	___xxtofl@arg+3,f
  3980  0D32  0CFC               	rrf	___xxtofl@arg+2,f
  3981  0D33  0CFB               	rrf	___xxtofl@arg+1,f
  3982  0D34  0CFA               	rrf	___xxtofl@arg,f
  3983  0D35  3EFF               	addlw	-1
  3984  0D36  1D03               	skipz
  3985  0D37  2D30               	goto	u2695
  3986  0D38                     l794:	
  3987  0D38  30FF               	movlw	255
  3988  0D39  057D               	andwf	___xxtofl@arg+3,w
  3989  0D3A  1903               	btfsc	3,2
  3990  0D3B  2D4C               	goto	l2281
  3991  0D3C  2D1D               	goto	l2273
  3992  0D3D                     l2283:	
  3993  0D3D  3002               	movlw	2
  3994  0D3E  0279               	subwf	___xxtofl@exp,w
  3995  0D3F  1C03               	btfss	3,0
  3996  0D40  2D4E               	goto	l801
  3997  0D41  3001               	movlw	1
  3998  0D42  02F9               	subwf	___xxtofl@exp,f
  3999  0D43  3001               	movlw	1
  4000  0D44  00F4               	movwf	??___xxtofl
  4001  0D45                     u2715:	
  4002  0D45  1003               	clrc
  4003  0D46  0DFA               	rlf	___xxtofl@arg,f
  4004  0D47  0DFB               	rlf	___xxtofl@arg+1,f
  4005  0D48  0DFC               	rlf	___xxtofl@arg+2,f
  4006  0D49  0DFD               	rlf	___xxtofl@arg+3,f
  4007  0D4A  0BF4               	decfsz	??___xxtofl,f
  4008  0D4B  2D45               	goto	u2715
  4009  0D4C                     l2281:	
  4010  0D4C  1FFC               	btfss	___xxtofl@arg+2,7
  4011  0D4D  2D3D               	goto	l2283
  4012  0D4E                     l801:	
  4013  0D4E  1879               	btfsc	___xxtofl@exp,0
  4014  0D4F  2D58               	goto	l802
  4015  0D50  30FF               	movlw	255
  4016  0D51  05FA               	andwf	___xxtofl@arg,f
  4017  0D52  30FF               	movlw	255
  4018  0D53  05FB               	andwf	___xxtofl@arg+1,f
  4019  0D54  307F               	movlw	127
  4020  0D55  05FC               	andwf	___xxtofl@arg+2,f
  4021  0D56  30FF               	movlw	255
  4022  0D57  05FD               	andwf	___xxtofl@arg+3,f
  4023  0D58                     l802:	
  4024  0D58  1003               	clrc
  4025  0D59  0CF9               	rrf	___xxtofl@exp,f
  4026  0D5A  0879               	movf	___xxtofl@exp,w
  4027  0D5B  00F4               	movwf	??___xxtofl
  4028  0D5C  01F5               	clrf	??___xxtofl+1
  4029  0D5D  01F6               	clrf	??___xxtofl+2
  4030  0D5E  01F7               	clrf	??___xxtofl+3
  4031  0D5F  3018               	movlw	24
  4032  0D60                     u2755:	
  4033  0D60  1003               	clrc
  4034  0D61  0DF4               	rlf	??___xxtofl,f
  4035  0D62  0DF5               	rlf	??___xxtofl+1,f
  4036  0D63  0DF6               	rlf	??___xxtofl+2,f
  4037  0D64  0DF7               	rlf	??___xxtofl+3,f
  4038  0D65  3EFF               	addlw	-1
  4039  0D66  1D03               	skipz
  4040  0D67  2D60               	goto	u2755
  4041  0D68  0874               	movf	??___xxtofl,w
  4042  0D69  04FA               	iorwf	___xxtofl@arg,f
  4043  0D6A  0875               	movf	??___xxtofl+1,w
  4044  0D6B  04FB               	iorwf	___xxtofl@arg+1,f
  4045  0D6C  0876               	movf	??___xxtofl+2,w
  4046  0D6D  04FC               	iorwf	___xxtofl@arg+2,f
  4047  0D6E  0877               	movf	??___xxtofl+3,w
  4048  0D6F  04FD               	iorwf	___xxtofl@arg+3,f
  4049  0D70  0878               	movf	___xxtofl@sign,w
  4050  0D71  1D03               	btfss	3,2
  4051  0D72  1FF3               	btfss	___xxtofl@val+3,7
  4052  0D73  2D75               	goto	l2295
  4053  0D74  17FD               	bsf	___xxtofl@arg+3,7
  4054  0D75                     l2295:	
  4055  0D75  087D               	movf	___xxtofl@arg+3,w
  4056  0D76  00F3               	movwf	?___xxtofl+3
  4057  0D77  087C               	movf	___xxtofl@arg+2,w
  4058  0D78  00F2               	movwf	?___xxtofl+2
  4059  0D79  087B               	movf	___xxtofl@arg+1,w
  4060  0D7A  00F1               	movwf	?___xxtofl+1
  4061  0D7B  087A               	movf	___xxtofl@arg,w
  4062  0D7C  00F0               	movwf	?___xxtofl
  4063  0D7D  0008               	return
  4064  0D7E                     __end_of___xxtofl:	
  4065                           
  4066                           	psect	text13
  4067  04C8                     __ptext13:	
  4068 ;; *************** function ___flmul *****************
  4069 ;; Defined at:
  4070 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  b               4    0[BANK0 ] unsigned char 
  4073 ;;  a               4    4[BANK0 ] unsigned char 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;  prod            4   20[BANK0 ] struct .
  4076 ;;  grs             4   14[BANK0 ] unsigned long 
  4077 ;;  temp            2   24[BANK0 ] struct .
  4078 ;;  bexp            1   19[BANK0 ] unsigned char 
  4079 ;;  aexp            1   18[BANK0 ] unsigned char 
  4080 ;;  sign            1   13[BANK0 ] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  4    0[BANK0 ] unsigned char 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4090 ;;      Params:         0       8       0       0       0
  4091 ;;      Locals:         0      13       0       0       0
  4092 ;;      Temps:          0       5       0       0       0
  4093 ;;      Totals:         0      26       0       0       0
  4094 ;;Total ram usage:       26 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    1
  4097 ;; This function calls:
  4098 ;;		__Umul8_16
  4099 ;; This function is called by:
  4100 ;;		_VerificarInversionGiro
  4101 ;;		_Encoder
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           
  4106                           ;psect for function ___flmul
  4107  04C8                     ___flmul:	
  4108                           
  4109                           ;incstack = 0
  4110                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4111  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  4112  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  4113  04CA  0823               	movf	___flmul@b+3,w
  4114  04CB  3980               	andlw	128
  4115  04CC  00A8               	movwf	??___flmul
  4116  04CD  0828               	movf	??___flmul,w
  4117  04CE  00AD               	movwf	___flmul@sign
  4118  04CF  0823               	movf	___flmul@b+3,w
  4119  04D0  00A8               	movwf	??___flmul
  4120  04D1  0728               	addwf	??___flmul,w
  4121  04D2  00A9               	movwf	??___flmul+1
  4122  04D3  0829               	movf	??___flmul+1,w
  4123  04D4  00B3               	movwf	___flmul@bexp
  4124  04D5  1BA2               	btfsc	___flmul@b+2,7
  4125  04D6  1433               	bsf	___flmul@bexp,0
  4126  04D7  0833               	movf	___flmul@bexp,w
  4127  04D8  1903               	btfsc	3,2
  4128  04D9  2CE7               	goto	l2131
  4129  04DA  0A33               	incf	___flmul@bexp,w
  4130  04DB  1D03               	btfss	3,2
  4131  04DC  2CE5               	goto	l2129
  4132  04DD  3000               	movlw	0
  4133  04DE  00A3               	movwf	___flmul@b+3
  4134  04DF  3000               	movlw	0
  4135  04E0  00A2               	movwf	___flmul@b+2
  4136  04E1  3000               	movlw	0
  4137  04E2  00A1               	movwf	___flmul@b+1
  4138  04E3  3000               	movlw	0
  4139  04E4  00A0               	movwf	___flmul@b
  4140  04E5                     l2129:	
  4141  04E5  17A2               	bsf	___flmul@b+2,7
  4142  04E6  2CEF               	goto	l2133
  4143  04E7                     l2131:	
  4144  04E7  3000               	movlw	0
  4145  04E8  00A3               	movwf	___flmul@b+3
  4146  04E9  3000               	movlw	0
  4147  04EA  00A2               	movwf	___flmul@b+2
  4148  04EB  3000               	movlw	0
  4149  04EC  00A1               	movwf	___flmul@b+1
  4150  04ED  3000               	movlw	0
  4151  04EE  00A0               	movwf	___flmul@b
  4152  04EF                     l2133:	
  4153  04EF  0827               	movf	___flmul@a+3,w
  4154  04F0  3980               	andlw	128
  4155  04F1  00A8               	movwf	??___flmul
  4156  04F2  0828               	movf	??___flmul,w
  4157  04F3  06AD               	xorwf	___flmul@sign,f
  4158  04F4  0827               	movf	___flmul@a+3,w
  4159  04F5  00A8               	movwf	??___flmul
  4160  04F6  0728               	addwf	??___flmul,w
  4161  04F7  00A9               	movwf	??___flmul+1
  4162  04F8  0829               	movf	??___flmul+1,w
  4163  04F9  00B2               	movwf	___flmul@aexp
  4164  04FA  1BA6               	btfsc	___flmul@a+2,7
  4165  04FB  1432               	bsf	___flmul@aexp,0
  4166  04FC  0832               	movf	___flmul@aexp,w
  4167  04FD  1903               	btfsc	3,2
  4168  04FE  2D0C               	goto	l2149
  4169  04FF  0A32               	incf	___flmul@aexp,w
  4170  0500  1D03               	btfss	3,2
  4171  0501  2D0A               	goto	l2147
  4172  0502  3000               	movlw	0
  4173  0503  00A7               	movwf	___flmul@a+3
  4174  0504  3000               	movlw	0
  4175  0505  00A6               	movwf	___flmul@a+2
  4176  0506  3000               	movlw	0
  4177  0507  00A5               	movwf	___flmul@a+1
  4178  0508  3000               	movlw	0
  4179  0509  00A4               	movwf	___flmul@a
  4180  050A                     l2147:	
  4181  050A  17A6               	bsf	___flmul@a+2,7
  4182  050B  2D14               	goto	l2151
  4183  050C                     l2149:	
  4184  050C  3000               	movlw	0
  4185  050D  00A7               	movwf	___flmul@a+3
  4186  050E  3000               	movlw	0
  4187  050F  00A6               	movwf	___flmul@a+2
  4188  0510  3000               	movlw	0
  4189  0511  00A5               	movwf	___flmul@a+1
  4190  0512  3000               	movlw	0
  4191  0513  00A4               	movwf	___flmul@a
  4192  0514                     l2151:	
  4193  0514  0832               	movf	___flmul@aexp,w
  4194  0515  1D03               	btfss	3,2
  4195  0516  0833               	movf	___flmul@bexp,w
  4196  0517  1D03               	btfss	3,2
  4197  0518  2D22               	goto	l2159
  4198  0519  3000               	movlw	0
  4199  051A  00A3               	movwf	?___flmul+3
  4200  051B  3000               	movlw	0
  4201  051C  00A2               	movwf	?___flmul+2
  4202  051D  3000               	movlw	0
  4203  051E  00A1               	movwf	?___flmul+1
  4204  051F  3000               	movlw	0
  4205  0520  00A0               	movwf	?___flmul
  4206  0521  0008               	return
  4207  0522                     l2159:	
  4208  0522  0820               	movf	___flmul@b,w
  4209  0523  00A8               	movwf	??___flmul
  4210  0524  0828               	movf	??___flmul,w
  4211  0525  00F0               	movwf	__Umul8_16@multiplicand
  4212  0526  0826               	movf	___flmul@a+2,w
  4213  0527  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4214  052C  0871               	movf	?__Umul8_16+1,w
  4215  052D  1283               	bcf	3,5	;RP0=0, select bank0
  4216  052E  1303               	bcf	3,6	;RP1=0, select bank0
  4217  052F  00B9               	movwf	___flmul@temp+1
  4218  0530  0870               	movf	?__Umul8_16,w
  4219  0531  00B8               	movwf	___flmul@temp
  4220  0532  0838               	movf	___flmul@temp,w
  4221  0533  00A8               	movwf	??___flmul
  4222  0534  01A9               	clrf	??___flmul+1
  4223  0535  01AA               	clrf	??___flmul+2
  4224  0536  01AB               	clrf	??___flmul+3
  4225  0537  082B               	movf	??___flmul+3,w
  4226  0538  00B1               	movwf	___flmul@grs+3
  4227  0539  082A               	movf	??___flmul+2,w
  4228  053A  00B0               	movwf	___flmul@grs+2
  4229  053B  0829               	movf	??___flmul+1,w
  4230  053C  00AF               	movwf	___flmul@grs+1
  4231  053D  0828               	movf	??___flmul,w
  4232  053E  00AE               	movwf	___flmul@grs
  4233  053F  0839               	movf	___flmul@temp+1,w
  4234  0540  00A8               	movwf	??___flmul
  4235  0541  01A9               	clrf	??___flmul+1
  4236  0542  01AA               	clrf	??___flmul+2
  4237  0543  01AB               	clrf	??___flmul+3
  4238  0544  082B               	movf	??___flmul+3,w
  4239  0545  00B7               	movwf	___flmul@prod+3
  4240  0546  082A               	movf	??___flmul+2,w
  4241  0547  00B6               	movwf	___flmul@prod+2
  4242  0548  0829               	movf	??___flmul+1,w
  4243  0549  00B5               	movwf	___flmul@prod+1
  4244  054A  0828               	movf	??___flmul,w
  4245  054B  00B4               	movwf	___flmul@prod
  4246  054C  0821               	movf	___flmul@b+1,w
  4247  054D  00A8               	movwf	??___flmul
  4248  054E  0828               	movf	??___flmul,w
  4249  054F  00F0               	movwf	__Umul8_16@multiplicand
  4250  0550  0825               	movf	___flmul@a+1,w
  4251  0551  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4252  0556  0871               	movf	?__Umul8_16+1,w
  4253  0557  1283               	bcf	3,5	;RP0=0, select bank0
  4254  0558  1303               	bcf	3,6	;RP1=0, select bank0
  4255  0559  00B9               	movwf	___flmul@temp+1
  4256  055A  0870               	movf	?__Umul8_16,w
  4257  055B  00B8               	movwf	___flmul@temp
  4258  055C  0838               	movf	___flmul@temp,w
  4259  055D  00A8               	movwf	??___flmul
  4260  055E  01A9               	clrf	??___flmul+1
  4261  055F  01AA               	clrf	??___flmul+2
  4262  0560  01AB               	clrf	??___flmul+3
  4263  0561  0828               	movf	??___flmul,w
  4264  0562  07AE               	addwf	___flmul@grs,f
  4265  0563  0829               	movf	??___flmul+1,w
  4266  0564  1103               	clrz
  4267  0565  1803               	skipnc
  4268  0566  3E01               	addlw	1
  4269  0567  1D03               	btfss	3,2
  4270  0568  07AF               	addwf	___flmul@grs+1,f
  4271  0569  082A               	movf	??___flmul+2,w
  4272  056A  1103               	clrz
  4273  056B  1803               	skipnc
  4274  056C  3E01               	addlw	1
  4275  056D  1D03               	btfss	3,2
  4276  056E  07B0               	addwf	___flmul@grs+2,f
  4277  056F  082B               	movf	??___flmul+3,w
  4278  0570  1103               	clrz
  4279  0571  1803               	skipnc
  4280  0572  3E01               	addlw	1
  4281  0573  1D03               	btfss	3,2
  4282  0574  07B1               	addwf	___flmul@grs+3,f
  4283  0575  0839               	movf	___flmul@temp+1,w
  4284  0576  00A8               	movwf	??___flmul
  4285  0577  01A9               	clrf	??___flmul+1
  4286  0578  01AA               	clrf	??___flmul+2
  4287  0579  01AB               	clrf	??___flmul+3
  4288  057A  0828               	movf	??___flmul,w
  4289  057B  07B4               	addwf	___flmul@prod,f
  4290  057C  0829               	movf	??___flmul+1,w
  4291  057D  1103               	clrz
  4292  057E  1803               	skipnc
  4293  057F  3E01               	addlw	1
  4294  0580  1D03               	btfss	3,2
  4295  0581  07B5               	addwf	___flmul@prod+1,f
  4296  0582  082A               	movf	??___flmul+2,w
  4297  0583  1103               	clrz
  4298  0584  1803               	skipnc
  4299  0585  3E01               	addlw	1
  4300  0586  1D03               	btfss	3,2
  4301  0587  07B6               	addwf	___flmul@prod+2,f
  4302  0588  082B               	movf	??___flmul+3,w
  4303  0589  1103               	clrz
  4304  058A  1803               	skipnc
  4305  058B  3E01               	addlw	1
  4306  058C  1D03               	btfss	3,2
  4307  058D  07B7               	addwf	___flmul@prod+3,f
  4308  058E  0822               	movf	___flmul@b+2,w
  4309  058F  00A8               	movwf	??___flmul
  4310  0590  0828               	movf	??___flmul,w
  4311  0591  00F0               	movwf	__Umul8_16@multiplicand
  4312  0592  0824               	movf	___flmul@a,w
  4313  0593  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4314  0598  0871               	movf	?__Umul8_16+1,w
  4315  0599  1283               	bcf	3,5	;RP0=0, select bank0
  4316  059A  1303               	bcf	3,6	;RP1=0, select bank0
  4317  059B  00B9               	movwf	___flmul@temp+1
  4318  059C  0870               	movf	?__Umul8_16,w
  4319  059D  00B8               	movwf	___flmul@temp
  4320  059E  0838               	movf	___flmul@temp,w
  4321  059F  00A8               	movwf	??___flmul
  4322  05A0  01A9               	clrf	??___flmul+1
  4323  05A1  01AA               	clrf	??___flmul+2
  4324  05A2  01AB               	clrf	??___flmul+3
  4325  05A3  0828               	movf	??___flmul,w
  4326  05A4  07AE               	addwf	___flmul@grs,f
  4327  05A5  0829               	movf	??___flmul+1,w
  4328  05A6  1103               	clrz
  4329  05A7  1803               	skipnc
  4330  05A8  3E01               	addlw	1
  4331  05A9  1D03               	btfss	3,2
  4332  05AA  07AF               	addwf	___flmul@grs+1,f
  4333  05AB  082A               	movf	??___flmul+2,w
  4334  05AC  1103               	clrz
  4335  05AD  1803               	skipnc
  4336  05AE  3E01               	addlw	1
  4337  05AF  1D03               	btfss	3,2
  4338  05B0  07B0               	addwf	___flmul@grs+2,f
  4339  05B1  082B               	movf	??___flmul+3,w
  4340  05B2  1103               	clrz
  4341  05B3  1803               	skipnc
  4342  05B4  3E01               	addlw	1
  4343  05B5  1D03               	btfss	3,2
  4344  05B6  07B1               	addwf	___flmul@grs+3,f
  4345  05B7  0839               	movf	___flmul@temp+1,w
  4346  05B8  00A8               	movwf	??___flmul
  4347  05B9  01A9               	clrf	??___flmul+1
  4348  05BA  01AA               	clrf	??___flmul+2
  4349  05BB  01AB               	clrf	??___flmul+3
  4350  05BC  0828               	movf	??___flmul,w
  4351  05BD  07B4               	addwf	___flmul@prod,f
  4352  05BE  0829               	movf	??___flmul+1,w
  4353  05BF  1103               	clrz
  4354  05C0  1803               	skipnc
  4355  05C1  3E01               	addlw	1
  4356  05C2  1D03               	btfss	3,2
  4357  05C3  07B5               	addwf	___flmul@prod+1,f
  4358  05C4  082A               	movf	??___flmul+2,w
  4359  05C5  1103               	clrz
  4360  05C6  1803               	skipnc
  4361  05C7  3E01               	addlw	1
  4362  05C8  1D03               	btfss	3,2
  4363  05C9  07B6               	addwf	___flmul@prod+2,f
  4364  05CA  082B               	movf	??___flmul+3,w
  4365  05CB  1103               	clrz
  4366  05CC  1803               	skipnc
  4367  05CD  3E01               	addlw	1
  4368  05CE  1D03               	btfss	3,2
  4369  05CF  07B7               	addwf	___flmul@prod+3,f
  4370  05D0  3008               	movlw	8
  4371  05D1  00A8               	movwf	??___flmul
  4372  05D2                     u2395:	
  4373  05D2  1003               	clrc
  4374  05D3  0DAE               	rlf	___flmul@grs,f
  4375  05D4  0DAF               	rlf	___flmul@grs+1,f
  4376  05D5  0DB0               	rlf	___flmul@grs+2,f
  4377  05D6  0DB1               	rlf	___flmul@grs+3,f
  4378  05D7  0BA8               	decfsz	??___flmul,f
  4379  05D8  2DD2               	goto	u2395
  4380  05D9  0821               	movf	___flmul@b+1,w
  4381  05DA  00A8               	movwf	??___flmul
  4382  05DB  0828               	movf	??___flmul,w
  4383  05DC  00F0               	movwf	__Umul8_16@multiplicand
  4384  05DD  0824               	movf	___flmul@a,w
  4385  05DE  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4386  05E3  0871               	movf	?__Umul8_16+1,w
  4387  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  4388  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  4389  05E6  00B9               	movwf	___flmul@temp+1
  4390  05E7  0870               	movf	?__Umul8_16,w
  4391  05E8  00B8               	movwf	___flmul@temp
  4392  05E9  0838               	movf	___flmul@temp,w
  4393  05EA  00A8               	movwf	??___flmul
  4394  05EB  0839               	movf	___flmul@temp+1,w
  4395  05EC  00A9               	movwf	??___flmul+1
  4396  05ED  01AA               	clrf	??___flmul+2
  4397  05EE  01AB               	clrf	??___flmul+3
  4398  05EF  0828               	movf	??___flmul,w
  4399  05F0  07AE               	addwf	___flmul@grs,f
  4400  05F1  0829               	movf	??___flmul+1,w
  4401  05F2  1103               	clrz
  4402  05F3  1803               	skipnc
  4403  05F4  3E01               	addlw	1
  4404  05F5  1D03               	btfss	3,2
  4405  05F6  07AF               	addwf	___flmul@grs+1,f
  4406  05F7  082A               	movf	??___flmul+2,w
  4407  05F8  1103               	clrz
  4408  05F9  1803               	skipnc
  4409  05FA  3E01               	addlw	1
  4410  05FB  1D03               	btfss	3,2
  4411  05FC  07B0               	addwf	___flmul@grs+2,f
  4412  05FD  082B               	movf	??___flmul+3,w
  4413  05FE  1103               	clrz
  4414  05FF  1803               	skipnc
  4415  0600  3E01               	addlw	1
  4416  0601  1D03               	btfss	3,2
  4417  0602  07B1               	addwf	___flmul@grs+3,f
  4418  0603  0820               	movf	___flmul@b,w
  4419  0604  00A8               	movwf	??___flmul
  4420  0605  0828               	movf	??___flmul,w
  4421  0606  00F0               	movwf	__Umul8_16@multiplicand
  4422  0607  0825               	movf	___flmul@a+1,w
  4423  0608  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4424  060D  0871               	movf	?__Umul8_16+1,w
  4425  060E  1283               	bcf	3,5	;RP0=0, select bank0
  4426  060F  1303               	bcf	3,6	;RP1=0, select bank0
  4427  0610  00B9               	movwf	___flmul@temp+1
  4428  0611  0870               	movf	?__Umul8_16,w
  4429  0612  00B8               	movwf	___flmul@temp
  4430  0613  0838               	movf	___flmul@temp,w
  4431  0614  00A8               	movwf	??___flmul
  4432  0615  0839               	movf	___flmul@temp+1,w
  4433  0616  00A9               	movwf	??___flmul+1
  4434  0617  01AA               	clrf	??___flmul+2
  4435  0618  01AB               	clrf	??___flmul+3
  4436  0619  0828               	movf	??___flmul,w
  4437  061A  07AE               	addwf	___flmul@grs,f
  4438  061B  0829               	movf	??___flmul+1,w
  4439  061C  1103               	clrz
  4440  061D  1803               	skipnc
  4441  061E  3E01               	addlw	1
  4442  061F  1D03               	btfss	3,2
  4443  0620  07AF               	addwf	___flmul@grs+1,f
  4444  0621  082A               	movf	??___flmul+2,w
  4445  0622  1103               	clrz
  4446  0623  1803               	skipnc
  4447  0624  3E01               	addlw	1
  4448  0625  1D03               	btfss	3,2
  4449  0626  07B0               	addwf	___flmul@grs+2,f
  4450  0627  082B               	movf	??___flmul+3,w
  4451  0628  1103               	clrz
  4452  0629  1803               	skipnc
  4453  062A  3E01               	addlw	1
  4454  062B  1D03               	btfss	3,2
  4455  062C  07B1               	addwf	___flmul@grs+3,f
  4456  062D  3008               	movlw	8
  4457  062E  00A8               	movwf	??___flmul
  4458  062F                     u2425:	
  4459  062F  1003               	clrc
  4460  0630  0DAE               	rlf	___flmul@grs,f
  4461  0631  0DAF               	rlf	___flmul@grs+1,f
  4462  0632  0DB0               	rlf	___flmul@grs+2,f
  4463  0633  0DB1               	rlf	___flmul@grs+3,f
  4464  0634  0BA8               	decfsz	??___flmul,f
  4465  0635  2E2F               	goto	u2425
  4466  0636  0820               	movf	___flmul@b,w
  4467  0637  00A8               	movwf	??___flmul
  4468  0638  0828               	movf	??___flmul,w
  4469  0639  00F0               	movwf	__Umul8_16@multiplicand
  4470  063A  0824               	movf	___flmul@a,w
  4471  063B  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4472  0640  0871               	movf	?__Umul8_16+1,w
  4473  0641  1283               	bcf	3,5	;RP0=0, select bank0
  4474  0642  1303               	bcf	3,6	;RP1=0, select bank0
  4475  0643  00B9               	movwf	___flmul@temp+1
  4476  0644  0870               	movf	?__Umul8_16,w
  4477  0645  00B8               	movwf	___flmul@temp
  4478  0646  0838               	movf	___flmul@temp,w
  4479  0647  00A8               	movwf	??___flmul
  4480  0648  0839               	movf	___flmul@temp+1,w
  4481  0649  00A9               	movwf	??___flmul+1
  4482  064A  01AA               	clrf	??___flmul+2
  4483  064B  01AB               	clrf	??___flmul+3
  4484  064C  0828               	movf	??___flmul,w
  4485  064D  07AE               	addwf	___flmul@grs,f
  4486  064E  0829               	movf	??___flmul+1,w
  4487  064F  1103               	clrz
  4488  0650  1803               	skipnc
  4489  0651  3E01               	addlw	1
  4490  0652  1D03               	btfss	3,2
  4491  0653  07AF               	addwf	___flmul@grs+1,f
  4492  0654  082A               	movf	??___flmul+2,w
  4493  0655  1103               	clrz
  4494  0656  1803               	skipnc
  4495  0657  3E01               	addlw	1
  4496  0658  1D03               	btfss	3,2
  4497  0659  07B0               	addwf	___flmul@grs+2,f
  4498  065A  082B               	movf	??___flmul+3,w
  4499  065B  1103               	clrz
  4500  065C  1803               	skipnc
  4501  065D  3E01               	addlw	1
  4502  065E  1D03               	btfss	3,2
  4503  065F  07B1               	addwf	___flmul@grs+3,f
  4504  0660  0821               	movf	___flmul@b+1,w
  4505  0661  00A8               	movwf	??___flmul
  4506  0662  0828               	movf	??___flmul,w
  4507  0663  00F0               	movwf	__Umul8_16@multiplicand
  4508  0664  0826               	movf	___flmul@a+2,w
  4509  0665  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4510  066A  0871               	movf	?__Umul8_16+1,w
  4511  066B  1283               	bcf	3,5	;RP0=0, select bank0
  4512  066C  1303               	bcf	3,6	;RP1=0, select bank0
  4513  066D  00B9               	movwf	___flmul@temp+1
  4514  066E  0870               	movf	?__Umul8_16,w
  4515  066F  00B8               	movwf	___flmul@temp
  4516  0670  0838               	movf	___flmul@temp,w
  4517  0671  00A8               	movwf	??___flmul
  4518  0672  0839               	movf	___flmul@temp+1,w
  4519  0673  00A9               	movwf	??___flmul+1
  4520  0674  01AA               	clrf	??___flmul+2
  4521  0675  01AB               	clrf	??___flmul+3
  4522  0676  0828               	movf	??___flmul,w
  4523  0677  07B4               	addwf	___flmul@prod,f
  4524  0678  0829               	movf	??___flmul+1,w
  4525  0679  1103               	clrz
  4526  067A  1803               	skipnc
  4527  067B  3E01               	addlw	1
  4528  067C  1D03               	btfss	3,2
  4529  067D  07B5               	addwf	___flmul@prod+1,f
  4530  067E  082A               	movf	??___flmul+2,w
  4531  067F  1103               	clrz
  4532  0680  1803               	skipnc
  4533  0681  3E01               	addlw	1
  4534  0682  1D03               	btfss	3,2
  4535  0683  07B6               	addwf	___flmul@prod+2,f
  4536  0684  082B               	movf	??___flmul+3,w
  4537  0685  1103               	clrz
  4538  0686  1803               	skipnc
  4539  0687  3E01               	addlw	1
  4540  0688  1D03               	btfss	3,2
  4541  0689  07B7               	addwf	___flmul@prod+3,f
  4542  068A  0822               	movf	___flmul@b+2,w
  4543  068B  00A8               	movwf	??___flmul
  4544  068C  0828               	movf	??___flmul,w
  4545  068D  00F0               	movwf	__Umul8_16@multiplicand
  4546  068E  0825               	movf	___flmul@a+1,w
  4547  068F  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4548  0694  0871               	movf	?__Umul8_16+1,w
  4549  0695  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0696  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0697  00B9               	movwf	___flmul@temp+1
  4552  0698  0870               	movf	?__Umul8_16,w
  4553  0699  00B8               	movwf	___flmul@temp
  4554  069A  0838               	movf	___flmul@temp,w
  4555  069B  00A8               	movwf	??___flmul
  4556  069C  0839               	movf	___flmul@temp+1,w
  4557  069D  00A9               	movwf	??___flmul+1
  4558  069E  01AA               	clrf	??___flmul+2
  4559  069F  01AB               	clrf	??___flmul+3
  4560  06A0  0828               	movf	??___flmul,w
  4561  06A1  07B4               	addwf	___flmul@prod,f
  4562  06A2  0829               	movf	??___flmul+1,w
  4563  06A3  1103               	clrz
  4564  06A4  1803               	skipnc
  4565  06A5  3E01               	addlw	1
  4566  06A6  1D03               	btfss	3,2
  4567  06A7  07B5               	addwf	___flmul@prod+1,f
  4568  06A8  082A               	movf	??___flmul+2,w
  4569  06A9  1103               	clrz
  4570  06AA  1803               	skipnc
  4571  06AB  3E01               	addlw	1
  4572  06AC  1D03               	btfss	3,2
  4573  06AD  07B6               	addwf	___flmul@prod+2,f
  4574  06AE  082B               	movf	??___flmul+3,w
  4575  06AF  1103               	clrz
  4576  06B0  1803               	skipnc
  4577  06B1  3E01               	addlw	1
  4578  06B2  1D03               	btfss	3,2
  4579  06B3  07B7               	addwf	___flmul@prod+3,f
  4580  06B4  0822               	movf	___flmul@b+2,w
  4581  06B5  00A8               	movwf	??___flmul
  4582  06B6  0828               	movf	??___flmul,w
  4583  06B7  00F0               	movwf	__Umul8_16@multiplicand
  4584  06B8  0826               	movf	___flmul@a+2,w
  4585  06B9  120A  158A  2135  120A  118A  	fcall	__Umul8_16
  4586  06BE  0871               	movf	?__Umul8_16+1,w
  4587  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  4588  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  4589  06C1  00B9               	movwf	___flmul@temp+1
  4590  06C2  0870               	movf	?__Umul8_16,w
  4591  06C3  00B8               	movwf	___flmul@temp
  4592  06C4  0838               	movf	___flmul@temp,w
  4593  06C5  00A8               	movwf	??___flmul
  4594  06C6  0839               	movf	___flmul@temp+1,w
  4595  06C7  00A9               	movwf	??___flmul+1
  4596  06C8  01AA               	clrf	??___flmul+2
  4597  06C9  01AB               	clrf	??___flmul+3
  4598  06CA  3008               	movlw	8
  4599  06CB                     u2465:	
  4600  06CB  1003               	clrc
  4601  06CC  0DA8               	rlf	??___flmul,f
  4602  06CD  0DA9               	rlf	??___flmul+1,f
  4603  06CE  0DAA               	rlf	??___flmul+2,f
  4604  06CF  0DAB               	rlf	??___flmul+3,f
  4605  06D0  3EFF               	addlw	-1
  4606  06D1  1D03               	skipz
  4607  06D2  2ECB               	goto	u2465
  4608  06D3  0828               	movf	??___flmul,w
  4609  06D4  07B4               	addwf	___flmul@prod,f
  4610  06D5  0829               	movf	??___flmul+1,w
  4611  06D6  1103               	clrz
  4612  06D7  1803               	skipnc
  4613  06D8  3E01               	addlw	1
  4614  06D9  1D03               	btfss	3,2
  4615  06DA  07B5               	addwf	___flmul@prod+1,f
  4616  06DB  082A               	movf	??___flmul+2,w
  4617  06DC  1103               	clrz
  4618  06DD  1803               	skipnc
  4619  06DE  3E01               	addlw	1
  4620  06DF  1D03               	btfss	3,2
  4621  06E0  07B6               	addwf	___flmul@prod+2,f
  4622  06E1  082B               	movf	??___flmul+3,w
  4623  06E2  1103               	clrz
  4624  06E3  1803               	skipnc
  4625  06E4  3E01               	addlw	1
  4626  06E5  1D03               	btfss	3,2
  4627  06E6  07B7               	addwf	___flmul@prod+3,f
  4628  06E7  082E               	movf	___flmul@grs,w
  4629  06E8  00A8               	movwf	??___flmul
  4630  06E9  082F               	movf	___flmul@grs+1,w
  4631  06EA  00A9               	movwf	??___flmul+1
  4632  06EB  0830               	movf	___flmul@grs+2,w
  4633  06EC  00AA               	movwf	??___flmul+2
  4634  06ED  0831               	movf	___flmul@grs+3,w
  4635  06EE  00AB               	movwf	??___flmul+3
  4636  06EF  3018               	movlw	24
  4637  06F0                     u2485:	
  4638  06F0  1003               	clrc
  4639  06F1  0CAB               	rrf	??___flmul+3,f
  4640  06F2  0CAA               	rrf	??___flmul+2,f
  4641  06F3  0CA9               	rrf	??___flmul+1,f
  4642  06F4  0CA8               	rrf	??___flmul,f
  4643  06F5  3EFF               	addlw	-1
  4644  06F6  1D03               	skipz
  4645  06F7  2EF0               	goto	u2485
  4646  06F8  0828               	movf	??___flmul,w
  4647  06F9  07B4               	addwf	___flmul@prod,f
  4648  06FA  0829               	movf	??___flmul+1,w
  4649  06FB  1103               	clrz
  4650  06FC  1803               	skipnc
  4651  06FD  3E01               	addlw	1
  4652  06FE  1D03               	btfss	3,2
  4653  06FF  07B5               	addwf	___flmul@prod+1,f
  4654  0700  082A               	movf	??___flmul+2,w
  4655  0701  1103               	clrz
  4656  0702  1803               	skipnc
  4657  0703  3E01               	addlw	1
  4658  0704  1D03               	btfss	3,2
  4659  0705  07B6               	addwf	___flmul@prod+2,f
  4660  0706  082B               	movf	??___flmul+3,w
  4661  0707  1103               	clrz
  4662  0708  1803               	skipnc
  4663  0709  3E01               	addlw	1
  4664  070A  1D03               	btfss	3,2
  4665  070B  07B7               	addwf	___flmul@prod+3,f
  4666  070C  3008               	movlw	8
  4667  070D  00A8               	movwf	??___flmul
  4668  070E                     u2505:	
  4669  070E  1003               	clrc
  4670  070F  0DAE               	rlf	___flmul@grs,f
  4671  0710  0DAF               	rlf	___flmul@grs+1,f
  4672  0711  0DB0               	rlf	___flmul@grs+2,f
  4673  0712  0DB1               	rlf	___flmul@grs+3,f
  4674  0713  0BA8               	decfsz	??___flmul,f
  4675  0714  2F0E               	goto	u2505
  4676  0715  0833               	movf	___flmul@bexp,w
  4677  0716  0732               	addwf	___flmul@aexp,w
  4678  0717  00A8               	movwf	??___flmul
  4679  0718  01A9               	clrf	??___flmul+1
  4680  0719  0DA9               	rlf	??___flmul+1,f
  4681  071A  0828               	movf	??___flmul,w
  4682  071B  3E82               	addlw	130
  4683  071C  00B8               	movwf	___flmul@temp
  4684  071D  0829               	movf	??___flmul+1,w
  4685  071E  1803               	skipnc
  4686  071F  3E01               	addlw	1
  4687  0720  3EFF               	addlw	255
  4688  0721  00B9               	movwf	___flmul@temp+1
  4689  0722                     l2211:	
  4690  0722  1BB6               	btfsc	___flmul@prod+2,7
  4691  0723  2F3F               	goto	l2213
  4692  0724  3001               	movlw	1
  4693  0725  00A8               	movwf	??___flmul
  4694  0726                     u2515:	
  4695  0726  1003               	clrc
  4696  0727  0DB4               	rlf	___flmul@prod,f
  4697  0728  0DB5               	rlf	___flmul@prod+1,f
  4698  0729  0DB6               	rlf	___flmul@prod+2,f
  4699  072A  0DB7               	rlf	___flmul@prod+3,f
  4700  072B  0BA8               	decfsz	??___flmul,f
  4701  072C  2F26               	goto	u2515
  4702  072D  1BB1               	btfsc	___flmul@grs+3,7
  4703  072E  1434               	bsf	___flmul@prod,0
  4704  072F  3001               	movlw	1
  4705  0730  00A8               	movwf	??___flmul
  4706  0731                     u2535:	
  4707  0731  1003               	clrc
  4708  0732  0DAE               	rlf	___flmul@grs,f
  4709  0733  0DAF               	rlf	___flmul@grs+1,f
  4710  0734  0DB0               	rlf	___flmul@grs+2,f
  4711  0735  0DB1               	rlf	___flmul@grs+3,f
  4712  0736  0BA8               	decfsz	??___flmul,f
  4713  0737  2F31               	goto	u2535
  4714  0738  30FF               	movlw	255
  4715  0739  07B8               	addwf	___flmul@temp,f
  4716  073A  1803               	skipnc
  4717  073B  0AB9               	incf	___flmul@temp+1,f
  4718  073C  30FF               	movlw	255
  4719  073D  07B9               	addwf	___flmul@temp+1,f
  4720  073E  2F22               	goto	l2211
  4721  073F                     l2213:	
  4722  073F  01B2               	clrf	___flmul@aexp
  4723  0740  1FB1               	btfss	___flmul@grs+3,7
  4724  0741  2F58               	goto	l2223
  4725  0742  30FF               	movlw	255
  4726  0743  052E               	andwf	___flmul@grs,w
  4727  0744  00A8               	movwf	??___flmul
  4728  0745  30FF               	movlw	255
  4729  0746  052F               	andwf	___flmul@grs+1,w
  4730  0747  00A9               	movwf	??___flmul+1
  4731  0748  30FF               	movlw	255
  4732  0749  0530               	andwf	___flmul@grs+2,w
  4733  074A  00AA               	movwf	??___flmul+2
  4734  074B  307F               	movlw	127
  4735  074C  0531               	andwf	___flmul@grs+3,w
  4736  074D  00AB               	movwf	??___flmul+3
  4737  074E  082B               	movf	??___flmul+3,w
  4738  074F  042A               	iorwf	??___flmul+2,w
  4739  0750  0429               	iorwf	??___flmul+1,w
  4740  0751  0428               	iorwf	??___flmul,w
  4741  0752  1903               	skipnz
  4742  0753  1834               	btfsc	___flmul@prod,0
  4743  0754  2F56               	goto	l2219
  4744  0755  2F58               	goto	l2223
  4745  0756                     l2219:	
  4746  0756  01B2               	clrf	___flmul@aexp
  4747  0757  0AB2               	incf	___flmul@aexp,f
  4748  0758                     l2223:	
  4749  0758  0832               	movf	___flmul@aexp,w
  4750  0759  1903               	btfsc	3,2
  4751  075A  2F8A               	goto	l2233
  4752  075B  3001               	movlw	1
  4753  075C  07B4               	addwf	___flmul@prod,f
  4754  075D  3000               	movlw	0
  4755  075E  1803               	skipnc
  4756  075F  3001               	movlw	1
  4757  0760  07B5               	addwf	___flmul@prod+1,f
  4758  0761  3000               	movlw	0
  4759  0762  1803               	skipnc
  4760  0763  3001               	movlw	1
  4761  0764  07B6               	addwf	___flmul@prod+2,f
  4762  0765  3000               	movlw	0
  4763  0766  1803               	skipnc
  4764  0767  3001               	movlw	1
  4765  0768  07B7               	addwf	___flmul@prod+3,f
  4766  0769  1C37               	btfss	___flmul@prod+3,0
  4767  076A  2F8A               	goto	l2233
  4768  076B  0834               	movf	___flmul@prod,w
  4769  076C  00A8               	movwf	??___flmul
  4770  076D  0835               	movf	___flmul@prod+1,w
  4771  076E  00A9               	movwf	??___flmul+1
  4772  076F  0836               	movf	___flmul@prod+2,w
  4773  0770  00AA               	movwf	??___flmul+2
  4774  0771  0837               	movf	___flmul@prod+3,w
  4775  0772  00AB               	movwf	??___flmul+3
  4776  0773  3001               	movlw	1
  4777  0774  00AC               	movwf	??___flmul+4
  4778  0775                     u2605:	
  4779  0775  0D2B               	rlf	??___flmul+3,w
  4780  0776  0CAB               	rrf	??___flmul+3,f
  4781  0777  0CAA               	rrf	??___flmul+2,f
  4782  0778  0CA9               	rrf	??___flmul+1,f
  4783  0779  0CA8               	rrf	??___flmul,f
  4784  077A  0BAC               	decfsz	??___flmul+4,f
  4785  077B  2F75               	goto	u2605
  4786  077C  082B               	movf	??___flmul+3,w
  4787  077D  00B7               	movwf	___flmul@prod+3
  4788  077E  082A               	movf	??___flmul+2,w
  4789  077F  00B6               	movwf	___flmul@prod+2
  4790  0780  0829               	movf	??___flmul+1,w
  4791  0781  00B5               	movwf	___flmul@prod+1
  4792  0782  0828               	movf	??___flmul,w
  4793  0783  00B4               	movwf	___flmul@prod
  4794  0784  3001               	movlw	1
  4795  0785  07B8               	addwf	___flmul@temp,f
  4796  0786  1803               	skipnc
  4797  0787  0AB9               	incf	___flmul@temp+1,f
  4798  0788  3000               	movlw	0
  4799  0789  07B9               	addwf	___flmul@temp+1,f
  4800  078A                     l2233:	
  4801  078A  0839               	movf	___flmul@temp+1,w
  4802  078B  3A80               	xorlw	128
  4803  078C  00FF               	movwf	127
  4804  078D  3080               	movlw	128
  4805  078E  027F               	subwf	127,w
  4806  078F  1D03               	skipz
  4807  0790  2F93               	goto	u2615
  4808  0791  30FF               	movlw	255
  4809  0792  0238               	subwf	___flmul@temp,w
  4810  0793                     u2615:	
  4811  0793  1C03               	skipc
  4812  0794  2FA0               	goto	l2237
  4813  0795  307F               	movlw	127
  4814  0796  1283               	bcf	3,5	;RP0=0, select bank0
  4815  0797  1303               	bcf	3,6	;RP1=0, select bank0
  4816  0798  00B7               	movwf	___flmul@prod+3
  4817  0799  3080               	movlw	128
  4818  079A  00B6               	movwf	___flmul@prod+2
  4819  079B  3000               	movlw	0
  4820  079C  00B5               	movwf	___flmul@prod+1
  4821  079D  3000               	movlw	0
  4822  079E  00B4               	movwf	___flmul@prod
  4823  079F  2FD0               	goto	l762
  4824  07A0                     l2237:	
  4825  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  4826  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  4827  07A2  0839               	movf	___flmul@temp+1,w
  4828  07A3  3A80               	xorlw	128
  4829  07A4  00FF               	movwf	127
  4830  07A5  3080               	movlw	128
  4831  07A6  027F               	subwf	127,w
  4832  07A7  1D03               	skipz
  4833  07A8  2FAB               	goto	u2625
  4834  07A9  3001               	movlw	1
  4835  07AA  0238               	subwf	___flmul@temp,w
  4836  07AB                     u2625:	
  4837  07AB  1803               	skipnc
  4838  07AC  2FB9               	goto	l2243
  4839  07AD  3000               	movlw	0
  4840  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  4841  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  4842  07B0  00B7               	movwf	___flmul@prod+3
  4843  07B1  3000               	movlw	0
  4844  07B2  00B6               	movwf	___flmul@prod+2
  4845  07B3  3000               	movlw	0
  4846  07B4  00B5               	movwf	___flmul@prod+1
  4847  07B5  3000               	movlw	0
  4848  07B6  00B4               	movwf	___flmul@prod
  4849  07B7  01AD               	clrf	___flmul@sign
  4850  07B8  2FD0               	goto	l762
  4851  07B9                     l2243:	
  4852  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  4853  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  4854  07BB  0838               	movf	___flmul@temp,w
  4855  07BC  00A8               	movwf	??___flmul
  4856  07BD  0828               	movf	??___flmul,w
  4857  07BE  00B3               	movwf	___flmul@bexp
  4858  07BF  30FF               	movlw	255
  4859  07C0  05B4               	andwf	___flmul@prod,f
  4860  07C1  30FF               	movlw	255
  4861  07C2  05B5               	andwf	___flmul@prod+1,f
  4862  07C3  307F               	movlw	127
  4863  07C4  05B6               	andwf	___flmul@prod+2,f
  4864  07C5  3000               	movlw	0
  4865  07C6  05B7               	andwf	___flmul@prod+3,f
  4866  07C7  1833               	btfsc	___flmul@bexp,0
  4867  07C8  17B6               	bsf	___flmul@prod+2,7
  4868  07C9  0833               	movf	___flmul@bexp,w
  4869  07CA  00A8               	movwf	??___flmul
  4870  07CB  1003               	clrc
  4871  07CC  0C28               	rrf	??___flmul,w
  4872  07CD  00A9               	movwf	??___flmul+1
  4873  07CE  0829               	movf	??___flmul+1,w
  4874  07CF  00B7               	movwf	___flmul@prod+3
  4875  07D0                     l762:	
  4876  07D0  082D               	movf	___flmul@sign,w
  4877  07D1  00A8               	movwf	??___flmul
  4878  07D2  0828               	movf	??___flmul,w
  4879  07D3  04B7               	iorwf	___flmul@prod+3,f
  4880  07D4  0837               	movf	___flmul@prod+3,w
  4881  07D5  00A3               	movwf	?___flmul+3
  4882  07D6  0836               	movf	___flmul@prod+2,w
  4883  07D7  00A2               	movwf	?___flmul+2
  4884  07D8  0835               	movf	___flmul@prod+1,w
  4885  07D9  00A1               	movwf	?___flmul+1
  4886  07DA  0834               	movf	___flmul@prod,w
  4887  07DB  00A0               	movwf	?___flmul
  4888  07DC  0008               	return
  4889  07DD                     __end_of___flmul:	
  4890                           
  4891                           	psect	text14
  4892  0935                     __ptext14:	
  4893 ;; *************** function __Umul8_16 *****************
  4894 ;; Defined at:
  4895 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8_16.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  multiplier      1    wreg     unsigned char 
  4898 ;;  multiplicand    1    0[COMMON] unsigned char 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  multiplier      1    8[COMMON] unsigned char 
  4901 ;;  word_mpld       2    6[COMMON] unsigned int 
  4902 ;;  product         2    4[COMMON] unsigned int 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  2    0[COMMON] unsigned int 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4912 ;;      Params:         2       0       0       0       0
  4913 ;;      Locals:         5       0       0       0       0
  4914 ;;      Temps:          2       0       0       0       0
  4915 ;;      Totals:         9       0       0       0       0
  4916 ;;Total ram usage:        9 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		___flmul
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           
  4926                           ;psect for function __Umul8_16
  4927  0935                     __Umul8_16:	
  4928                           
  4929                           ;incstack = 0
  4930                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4931                           ;__Umul8_16@multiplier stored from wreg
  4932  0935  00F8               	movwf	__Umul8_16@multiplier
  4933  0936  01F4               	clrf	__Umul8_16@product
  4934  0937  01F5               	clrf	__Umul8_16@product+1
  4935  0938  0870               	movf	__Umul8_16@multiplicand,w
  4936  0939  00F2               	movwf	??__Umul8_16
  4937  093A  01F3               	clrf	??__Umul8_16+1
  4938  093B  0872               	movf	??__Umul8_16,w
  4939  093C  00F6               	movwf	__Umul8_16@word_mpld
  4940  093D  0873               	movf	??__Umul8_16+1,w
  4941  093E  00F7               	movwf	__Umul8_16@word_mpld+1
  4942  093F                     l2005:	
  4943  093F  1C78               	btfss	__Umul8_16@multiplier,0
  4944  0940  2947               	goto	l807
  4945  0941  0876               	movf	__Umul8_16@word_mpld,w
  4946  0942  07F4               	addwf	__Umul8_16@product,f
  4947  0943  1803               	skipnc
  4948  0944  0AF5               	incf	__Umul8_16@product+1,f
  4949  0945  0877               	movf	__Umul8_16@word_mpld+1,w
  4950  0946  07F5               	addwf	__Umul8_16@product+1,f
  4951  0947                     l807:	
  4952  0947  3001               	movlw	1
  4953  0948                     u2085:	
  4954  0948  1003               	clrc
  4955  0949  0DF6               	rlf	__Umul8_16@word_mpld,f
  4956  094A  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  4957  094B  3EFF               	addlw	-1
  4958  094C  1D03               	skipz
  4959  094D  2948               	goto	u2085
  4960  094E  1003               	clrc
  4961  094F  0CF8               	rrf	__Umul8_16@multiplier,f
  4962  0950  0878               	movf	__Umul8_16@multiplier,w
  4963  0951  1D03               	btfss	3,2
  4964  0952  293F               	goto	l2005
  4965  0953  0875               	movf	__Umul8_16@product+1,w
  4966  0954  00F1               	movwf	?__Umul8_16+1
  4967  0955  0874               	movf	__Umul8_16@product,w
  4968  0956  00F0               	movwf	?__Umul8_16
  4969  0957  0008               	return
  4970  0958                     __end_of__Umul8_16:	
  4971                           
  4972                           	psect	text15
  4973  0C46                     __ptext15:	
  4974 ;; *************** function ___flge *****************
  4975 ;; Defined at:
  4976 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\flge.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  ff1             4   26[BANK0 ] unsigned int 
  4979 ;;  ff2             4   30[BANK0 ] unsigned int 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;		None
  4982 ;; Return value:  Size  Location     Type
  4983 ;;		None               void
  4984 ;; Registers used:
  4985 ;;		wreg, status,2, status,0
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4991 ;;      Params:         0       8       0       0       0
  4992 ;;      Locals:         0       0       0       0       0
  4993 ;;      Temps:          0       4       0       0       0
  4994 ;;      Totals:         0      12       0       0       0
  4995 ;;Total ram usage:       12 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; This function calls:
  4998 ;;		Nothing
  4999 ;; This function is called by:
  5000 ;;		_VerificarInversionGiro
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function ___flge
  5006  0C46                     ___flge:	
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5010  0C46  3000               	movlw	0
  5011  0C47  1283               	bcf	3,5	;RP0=0, select bank0
  5012  0C48  1303               	bcf	3,6	;RP1=0, select bank0
  5013  0C49  053A               	andwf	___flge@ff1,w
  5014  0C4A  00C2               	movwf	??___flge
  5015  0C4B  3000               	movlw	0
  5016  0C4C  053B               	andwf	___flge@ff1+1,w
  5017  0C4D  00C3               	movwf	??___flge+1
  5018  0C4E  3080               	movlw	128
  5019  0C4F  053C               	andwf	___flge@ff1+2,w
  5020  0C50  00C4               	movwf	??___flge+2
  5021  0C51  307F               	movlw	127
  5022  0C52  053D               	andwf	___flge@ff1+3,w
  5023  0C53  00C5               	movwf	??___flge+3
  5024  0C54  0845               	movf	??___flge+3,w
  5025  0C55  0444               	iorwf	??___flge+2,w
  5026  0C56  0443               	iorwf	??___flge+1,w
  5027  0C57  0442               	iorwf	??___flge,w
  5028  0C58  1D03               	skipz
  5029  0C59  2C62               	goto	l535
  5030  0C5A  3000               	movlw	0
  5031  0C5B  00BD               	movwf	___flge@ff1+3
  5032  0C5C  3000               	movlw	0
  5033  0C5D  00BC               	movwf	___flge@ff1+2
  5034  0C5E  3000               	movlw	0
  5035  0C5F  00BB               	movwf	___flge@ff1+1
  5036  0C60  3000               	movlw	0
  5037  0C61  00BA               	movwf	___flge@ff1
  5038  0C62                     l535:	
  5039  0C62  3000               	movlw	0
  5040  0C63  053E               	andwf	___flge@ff2,w
  5041  0C64  00C2               	movwf	??___flge
  5042  0C65  3000               	movlw	0
  5043  0C66  053F               	andwf	___flge@ff2+1,w
  5044  0C67  00C3               	movwf	??___flge+1
  5045  0C68  3080               	movlw	128
  5046  0C69  0540               	andwf	___flge@ff2+2,w
  5047  0C6A  00C4               	movwf	??___flge+2
  5048  0C6B  307F               	movlw	127
  5049  0C6C  0541               	andwf	___flge@ff2+3,w
  5050  0C6D  00C5               	movwf	??___flge+3
  5051  0C6E  0845               	movf	??___flge+3,w
  5052  0C6F  0444               	iorwf	??___flge+2,w
  5053  0C70  0443               	iorwf	??___flge+1,w
  5054  0C71  0442               	iorwf	??___flge,w
  5055  0C72  1D03               	skipz
  5056  0C73  2C7C               	goto	l2101
  5057  0C74  3000               	movlw	0
  5058  0C75  00C1               	movwf	___flge@ff2+3
  5059  0C76  3000               	movlw	0
  5060  0C77  00C0               	movwf	___flge@ff2+2
  5061  0C78  3000               	movlw	0
  5062  0C79  00BF               	movwf	___flge@ff2+1
  5063  0C7A  3000               	movlw	0
  5064  0C7B  00BE               	movwf	___flge@ff2
  5065  0C7C                     l2101:	
  5066  0C7C  1FBD               	btfss	___flge@ff1+3,7
  5067  0C7D  2CA2               	goto	l2105
  5068  0C7E  3000               	movlw	0
  5069  0C7F  00C2               	movwf	??___flge
  5070  0C80  3000               	movlw	0
  5071  0C81  00C3               	movwf	??___flge+1
  5072  0C82  3000               	movlw	0
  5073  0C83  00C4               	movwf	??___flge+2
  5074  0C84  3080               	movlw	128
  5075  0C85  00C5               	movwf	??___flge+3
  5076  0C86  083A               	movf	___flge@ff1,w
  5077  0C87  02C2               	subwf	??___flge,f
  5078  0C88  083B               	movf	___flge@ff1+1,w
  5079  0C89  1C03               	skipc
  5080  0C8A  0F3B               	incfsz	___flge@ff1+1,w
  5081  0C8B  2C8D               	goto	u2231
  5082  0C8C  2C8E               	goto	u2232
  5083  0C8D                     u2231:	
  5084  0C8D  02C3               	subwf	??___flge+1,f
  5085  0C8E                     u2232:	
  5086  0C8E  083C               	movf	___flge@ff1+2,w
  5087  0C8F  1C03               	skipc
  5088  0C90  0F3C               	incfsz	___flge@ff1+2,w
  5089  0C91  2C93               	goto	u2233
  5090  0C92  2C94               	goto	u2234
  5091  0C93                     u2233:	
  5092  0C93  02C4               	subwf	??___flge+2,f
  5093  0C94                     u2234:	
  5094  0C94  083D               	movf	___flge@ff1+3,w
  5095  0C95  1C03               	skipc
  5096  0C96  0F3D               	incfsz	___flge@ff1+3,w
  5097  0C97  2C99               	goto	u2235
  5098  0C98  2C9A               	goto	u2236
  5099  0C99                     u2235:	
  5100  0C99  02C5               	subwf	??___flge+3,f
  5101  0C9A                     u2236:	
  5102  0C9A  0845               	movf	??___flge+3,w
  5103  0C9B  00BD               	movwf	___flge@ff1+3
  5104  0C9C  0844               	movf	??___flge+2,w
  5105  0C9D  00BC               	movwf	___flge@ff1+2
  5106  0C9E  0843               	movf	??___flge+1,w
  5107  0C9F  00BB               	movwf	___flge@ff1+1
  5108  0CA0  0842               	movf	??___flge,w
  5109  0CA1  00BA               	movwf	___flge@ff1
  5110  0CA2                     l2105:	
  5111  0CA2  1FC1               	btfss	___flge@ff2+3,7
  5112  0CA3  2CC8               	goto	l538
  5113  0CA4  3000               	movlw	0
  5114  0CA5  00C2               	movwf	??___flge
  5115  0CA6  3000               	movlw	0
  5116  0CA7  00C3               	movwf	??___flge+1
  5117  0CA8  3000               	movlw	0
  5118  0CA9  00C4               	movwf	??___flge+2
  5119  0CAA  3080               	movlw	128
  5120  0CAB  00C5               	movwf	??___flge+3
  5121  0CAC  083E               	movf	___flge@ff2,w
  5122  0CAD  02C2               	subwf	??___flge,f
  5123  0CAE  083F               	movf	___flge@ff2+1,w
  5124  0CAF  1C03               	skipc
  5125  0CB0  0F3F               	incfsz	___flge@ff2+1,w
  5126  0CB1  2CB3               	goto	u2251
  5127  0CB2  2CB4               	goto	u2252
  5128  0CB3                     u2251:	
  5129  0CB3  02C3               	subwf	??___flge+1,f
  5130  0CB4                     u2252:	
  5131  0CB4  0840               	movf	___flge@ff2+2,w
  5132  0CB5  1C03               	skipc
  5133  0CB6  0F40               	incfsz	___flge@ff2+2,w
  5134  0CB7  2CB9               	goto	u2253
  5135  0CB8  2CBA               	goto	u2254
  5136  0CB9                     u2253:	
  5137  0CB9  02C4               	subwf	??___flge+2,f
  5138  0CBA                     u2254:	
  5139  0CBA  0841               	movf	___flge@ff2+3,w
  5140  0CBB  1C03               	skipc
  5141  0CBC  0F41               	incfsz	___flge@ff2+3,w
  5142  0CBD  2CBF               	goto	u2255
  5143  0CBE  2CC0               	goto	u2256
  5144  0CBF                     u2255:	
  5145  0CBF  02C5               	subwf	??___flge+3,f
  5146  0CC0                     u2256:	
  5147  0CC0  0845               	movf	??___flge+3,w
  5148  0CC1  00C1               	movwf	___flge@ff2+3
  5149  0CC2  0844               	movf	??___flge+2,w
  5150  0CC3  00C0               	movwf	___flge@ff2+2
  5151  0CC4  0843               	movf	??___flge+1,w
  5152  0CC5  00BF               	movwf	___flge@ff2+1
  5153  0CC6  0842               	movf	??___flge,w
  5154  0CC7  00BE               	movwf	___flge@ff2
  5155  0CC8                     l538:	
  5156  0CC8  3080               	movlw	128
  5157  0CC9  06BD               	xorwf	___flge@ff1+3,f
  5158  0CCA  3080               	movlw	128
  5159  0CCB  06C1               	xorwf	___flge@ff2+3,f
  5160  0CCC  0841               	movf	___flge@ff2+3,w
  5161  0CCD  023D               	subwf	___flge@ff1+3,w
  5162  0CCE  1D03               	skipz
  5163  0CCF  0008               	return
  5164  0CD0  0840               	movf	___flge@ff2+2,w
  5165  0CD1  023C               	subwf	___flge@ff1+2,w
  5166  0CD2  1D03               	skipz
  5167  0CD3  0008               	return
  5168  0CD4  083F               	movf	___flge@ff2+1,w
  5169  0CD5  023B               	subwf	___flge@ff1+1,w
  5170  0CD6  1D03               	skipz
  5171  0CD7  0008               	return
  5172  0CD8  083E               	movf	___flge@ff2,w
  5173  0CD9  023A               	subwf	___flge@ff1,w
  5174  0CDA  0008               	return
  5175  0CDB                     __end_of___flge:	
  5176                           
  5177                           	psect	text16
  5178  08AE                     __ptext16:	
  5179 ;; *************** function _Lcd_Write_Integer *****************
  5180 ;; Defined at:
  5181 ;;		line 98 in file "Lcd.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  a               2   37[BANK0 ] int 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  Data           10   40[BANK0 ] unsigned char [10]
  5186 ;; Return value:  Size  Location     Type
  5187 ;;                  1    wreg      void 
  5188 ;; Registers used:
  5189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5195 ;;      Params:         0       2       0       0       0
  5196 ;;      Locals:         0      10       0       0       0
  5197 ;;      Temps:          0       1       0       0       0
  5198 ;;      Totals:         0      13       0       0       0
  5199 ;;Total ram usage:       13 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; Hardware stack levels required when called:    3
  5202 ;; This function calls:
  5203 ;;		_Lcd_Write_String
  5204 ;;		_sprintf
  5205 ;; This function is called by:
  5206 ;;		_configurarAntiHorario
  5207 ;;		_configurarHorario
  5208 ;;		_Encoder
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           
  5213                           ;psect for function _Lcd_Write_Integer
  5214  08AE                     _Lcd_Write_Integer:	
  5215                           
  5216                           ;Lcd.c: 99:     char Data[10];;Lcd.c: 100:     sprintf(Data, "%d", a);
  5217                           
  5218                           ;incstack = 0
  5219                           ; Regs used in _Lcd_Write_Integer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5220  08AE  3067               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  5221  08AF  1283               	bcf	3,5	;RP0=0, select bank0
  5222  08B0  1303               	bcf	3,6	;RP1=0, select bank0
  5223  08B1  00C7               	movwf	??_Lcd_Write_Integer
  5224  08B2  0847               	movf	??_Lcd_Write_Integer,w
  5225  08B3  00A0               	movwf	sprintf@f
  5226  08B4  0846               	movf	Lcd_Write_Integer@a+1,w
  5227  08B5  00A2               	movwf	?_sprintf+2
  5228  08B6  0845               	movf	Lcd_Write_Integer@a,w
  5229  08B7  00A1               	movwf	?_sprintf+1
  5230  08B8  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5231  08B9  120A  158A  2632  120A  158A  	fcall	_sprintf
  5232                           
  5233                           ;Lcd.c: 101:     Lcd_Write_String(Data);
  5234  08BE  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5235  08BF  00F5               	movwf	Lcd_Write_String@a
  5236  08C0  3000               	movlw	0
  5237  08C1  00F6               	movwf	Lcd_Write_String@a+1
  5238  08C2  120A  158A  21FF   	fcall	_Lcd_Write_String
  5239  08C5  0008               	return
  5240  08C6                     __end_of_Lcd_Write_Integer:	
  5241                           
  5242                           	psect	text17
  5243  0E32                     __ptext17:	
  5244 ;; *************** function _sprintf *****************
  5245 ;; Defined at:
  5246 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  sp              1    wreg     PTR unsigned char 
  5249 ;;		 -> Lcd_Write_Integer@Data(10), 
  5250 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  5251 ;;		 -> STR_1(3), 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  5254 ;;		 -> Lcd_Write_Integer@Data(10), 
  5255 ;;  tmpval          4    0        struct .
  5256 ;;  val             2    9[BANK0 ] unsigned int 
  5257 ;;  cp              2    0        PTR const unsigned char 
  5258 ;;  len             2    0        unsigned int 
  5259 ;;  c               1   12[BANK0 ] unsigned char 
  5260 ;;  prec            1    8[BANK0 ] char 
  5261 ;;  flag            1    7[BANK0 ] unsigned char 
  5262 ;;  ap              1    6[BANK0 ] PTR void [1]
  5263 ;;		 -> ?_sprintf(2), 
  5264 ;; Return value:  Size  Location     Type
  5265 ;;                  2    0[BANK0 ] int 
  5266 ;; Registers used:
  5267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5268 ;; Tracked objects:
  5269 ;;		On entry : 0/0
  5270 ;;		On exit  : 0/0
  5271 ;;		Unchanged: 0/0
  5272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5273 ;;      Params:         0       3       0       0       0
  5274 ;;      Locals:         0       7       0       0       0
  5275 ;;      Temps:          0       3       0       0       0
  5276 ;;      Totals:         0      13       0       0       0
  5277 ;;Total ram usage:       13 bytes
  5278 ;; Hardware stack levels used:    1
  5279 ;; Hardware stack levels required when called:    1
  5280 ;; This function calls:
  5281 ;;		___lwdiv
  5282 ;;		___lwmod
  5283 ;; This function is called by:
  5284 ;;		_Lcd_Write_Integer
  5285 ;; This function uses a non-reentrant model
  5286 ;;
  5287                           
  5288                           
  5289                           ;psect for function _sprintf
  5290  0E32                     _sprintf:	
  5291                           
  5292                           ;incstack = 0
  5293                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5294                           ;sprintf@sp stored from wreg
  5295  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5296  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5297  0E34  00AB               	movwf	sprintf@sp
  5298                           
  5299                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5300  0E35  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  5301  0E36  00A3               	movwf	??_sprintf
  5302  0E37  0823               	movf	??_sprintf,w
  5303  0E38  00A6               	movwf	sprintf@ap
  5304  0E39                     l2085:	
  5305                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5306                           
  5307                           
  5308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5309  0E39  3001               	movlw	1
  5310  0E3A  07A0               	addwf	sprintf@f,f
  5311  0E3B  30FF               	movlw	-1
  5312  0E3C  0720               	addwf	sprintf@f,w
  5313  0E3D  0084               	movwf	4
  5314  0E3E  120A  158A  200A  120A  158A  	fcall	stringdir
  5315  0E43  00A3               	movwf	??_sprintf
  5316  0E44  0823               	movf	??_sprintf,w
  5317  0E45  00AC               	movwf	sprintf@c
  5318  0E46  082C               	movf	sprintf@c,w
  5319  0E47  1903               	btfsc	3,2
  5320  0E48  2F05               	goto	l2087
  5321                           
  5322                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5323  0E49  3025               	movlw	37
  5324  0E4A  062C               	xorwf	sprintf@c,w
  5325  0E4B  1903               	btfsc	3,2
  5326  0E4C  2E59               	goto	l2041
  5327                           
  5328                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5329  0E4D  082C               	movf	sprintf@c,w
  5330  0E4E  00A3               	movwf	??_sprintf
  5331  0E4F  082B               	movf	sprintf@sp,w
  5332  0E50  0084               	movwf	4
  5333  0E51  0823               	movf	??_sprintf,w
  5334  0E52  1383               	bcf	3,7	;select IRP bank0
  5335  0E53  0080               	movwf	0
  5336  0E54  3001               	movlw	1
  5337  0E55  00A3               	movwf	??_sprintf
  5338  0E56  0823               	movf	??_sprintf,w
  5339  0E57  07AB               	addwf	sprintf@sp,f
  5340                           
  5341                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5342  0E58  2E39               	goto	l2085
  5343  0E59                     l2041:	
  5344                           
  5345                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5346  0E59  01A7               	clrf	sprintf@flag
  5347                           
  5348                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5349  0E5A  3001               	movlw	1
  5350  0E5B  07A0               	addwf	sprintf@f,f
  5351  0E5C  30FF               	movlw	-1
  5352  0E5D  0720               	addwf	sprintf@f,w
  5353  0E5E  0084               	movwf	4
  5354  0E5F  120A  158A  200A  120A  158A  	fcall	stringdir
  5355  0E64  00AC               	movwf	sprintf@c
  5356  0E65  00A3               	movwf	??_sprintf
  5357  0E66  01A4               	clrf	??_sprintf+1
  5358                           
  5359                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5360                           ; Switch size 1, requested type "simple"
  5361                           ; Number of cases is 1, Range of values is 0 to 0
  5362                           ; switch strategies available:
  5363                           ; Name         Instructions Cycles
  5364                           ; simple_byte            4     3 (average)
  5365                           ; direct_byte           11     8 (fixed)
  5366                           ; jumptable            260     6 (fixed)
  5367                           ;	Chosen strategy is simple_byte
  5368  0E67  0824               	movf	??_sprintf+1,w
  5369  0E68  3A00               	xorlw	0	; case 0
  5370  0E69  1903               	skipnz
  5371  0E6A  2E6C               	goto	l2969
  5372  0E6B  2E39               	goto	l2085
  5373  0E6C                     l2969:	
  5374                           
  5375                           ; Switch size 1, requested type "simple"
  5376                           ; Number of cases is 3, Range of values is 0 to 105
  5377                           ; switch strategies available:
  5378                           ; Name         Instructions Cycles
  5379                           ; simple_byte           10     6 (average)
  5380                           ; jumptable            260     6 (fixed)
  5381                           ;	Chosen strategy is simple_byte
  5382  0E6C  0823               	movf	??_sprintf,w
  5383  0E6D  3A00               	xorlw	0	; case 0
  5384  0E6E  1903               	skipnz
  5385  0E6F  2F05               	goto	l2087
  5386  0E70  3A64               	xorlw	100	; case 100
  5387  0E71  1903               	skipnz
  5388  0E72  2E77               	goto	l2047
  5389  0E73  3A0D               	xorlw	13	; case 105
  5390  0E74  1903               	skipnz
  5391  0E75  2E77               	goto	l2047
  5392  0E76  2E39               	goto	l2085
  5393  0E77                     l2047:	
  5394                           
  5395                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5396  0E77  0826               	movf	sprintf@ap,w
  5397  0E78  0084               	movwf	4
  5398  0E79  1383               	bcf	3,7	;select IRP bank0
  5399  0E7A  0800               	movf	0,w
  5400  0E7B  00A9               	movwf	sprintf@val
  5401  0E7C  0A84               	incf	4,f
  5402  0E7D  0800               	movf	0,w
  5403  0E7E  00AA               	movwf	sprintf@val+1
  5404  0E7F  3002               	movlw	2
  5405  0E80  00A3               	movwf	??_sprintf
  5406  0E81  0823               	movf	??_sprintf,w
  5407  0E82  07A6               	addwf	sprintf@ap,f
  5408                           
  5409                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5410  0E83  1FAA               	btfss	sprintf@val+1,7
  5411  0E84  2E8E               	goto	l2057
  5412                           
  5413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5414  0E85  3003               	movlw	3
  5415  0E86  00A3               	movwf	??_sprintf
  5416  0E87  0823               	movf	??_sprintf,w
  5417  0E88  04A7               	iorwf	sprintf@flag,f
  5418                           
  5419                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5420  0E89  09A9               	comf	sprintf@val,f
  5421  0E8A  09AA               	comf	sprintf@val+1,f
  5422  0E8B  0AA9               	incf	sprintf@val,f
  5423  0E8C  1903               	skipnz
  5424  0E8D  0AAA               	incf	sprintf@val+1,f
  5425  0E8E                     l2057:	
  5426                           
  5427                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5428  0E8E  01AC               	clrf	sprintf@c
  5429  0E8F  0AAC               	incf	sprintf@c,f
  5430  0E90                     l2063:	
  5431                           
  5432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5433  0E90  082C               	movf	sprintf@c,w
  5434  0E91  00A3               	movwf	??_sprintf
  5435  0E92  0723               	addwf	??_sprintf,w
  5436  0E93  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5437  0E94  0084               	movwf	4
  5438  0E95  120A  158A  200A  120A  158A  	fcall	stringdir
  5439  0E9A  00A4               	movwf	??_sprintf+1
  5440  0E9B  120A  158A  200A  120A  158A  	fcall	stringdir
  5441  0EA0  00A5               	movwf	??_sprintf+2
  5442  0EA1  0825               	movf	??_sprintf+2,w
  5443  0EA2  022A               	subwf	sprintf@val+1,w
  5444  0EA3  1D03               	skipz
  5445  0EA4  2EA7               	goto	u2155
  5446  0EA5  0824               	movf	??_sprintf+1,w
  5447  0EA6  0229               	subwf	sprintf@val,w
  5448  0EA7                     u2155:	
  5449  0EA7  1C03               	btfss	3,0
  5450  0EA8  2EB1               	goto	l2069
  5451  0EA9  3001               	movlw	1
  5452  0EAA  00A3               	movwf	??_sprintf
  5453  0EAB  0823               	movf	??_sprintf,w
  5454  0EAC  07AC               	addwf	sprintf@c,f
  5455  0EAD  3005               	movlw	5
  5456  0EAE  062C               	xorwf	sprintf@c,w
  5457  0EAF  1D03               	btfss	3,2
  5458  0EB0  2E90               	goto	l2063
  5459  0EB1                     l2069:	
  5460                           
  5461                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5462  0EB1  0827               	movf	sprintf@flag,w
  5463  0EB2  3903               	andlw	3
  5464  0EB3  1903               	btfsc	3,2
  5465  0EB4  2EC0               	goto	l2075
  5466                           
  5467                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5468  0EB5  302D               	movlw	45
  5469  0EB6  00A3               	movwf	??_sprintf
  5470  0EB7  082B               	movf	sprintf@sp,w
  5471  0EB8  0084               	movwf	4
  5472  0EB9  0823               	movf	??_sprintf,w
  5473  0EBA  1383               	bcf	3,7	;select IRP bank0
  5474  0EBB  0080               	movwf	0
  5475  0EBC  3001               	movlw	1
  5476  0EBD  00A3               	movwf	??_sprintf
  5477  0EBE  0823               	movf	??_sprintf,w
  5478  0EBF  07AB               	addwf	sprintf@sp,f
  5479  0EC0                     l2075:	
  5480                           
  5481                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5482  0EC0  082C               	movf	sprintf@c,w
  5483  0EC1  00A3               	movwf	??_sprintf
  5484  0EC2  0823               	movf	??_sprintf,w
  5485  0EC3  00A8               	movwf	sprintf@prec
  5486  0EC4                     l2083:	
  5487                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5488                           
  5489                           
  5490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5491  0EC4  30FF               	movlw	255
  5492  0EC5  00A3               	movwf	??_sprintf
  5493  0EC6  0823               	movf	??_sprintf,w
  5494  0EC7  07A8               	addwf	sprintf@prec,f
  5495  0EC8  0A28               	incf	sprintf@prec,w
  5496  0EC9  1903               	btfsc	3,2
  5497  0ECA  2E39               	goto	l2085
  5498                           
  5499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5500  0ECB  300A               	movlw	10
  5501  0ECC  00F8               	movwf	___lwmod@divisor
  5502  0ECD  3000               	movlw	0
  5503  0ECE  00F9               	movwf	___lwmod@divisor+1
  5504  0ECF  0828               	movf	sprintf@prec,w
  5505  0ED0  00A3               	movwf	??_sprintf
  5506  0ED1  0723               	addwf	??_sprintf,w
  5507  0ED2  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5508  0ED3  0084               	movwf	4
  5509  0ED4  120A  158A  200A  120A  158A  	fcall	stringdir
  5510  0ED9  00F0               	movwf	___lwdiv@divisor
  5511  0EDA  120A  158A  200A  120A  158A  	fcall	stringdir
  5512  0EDF  00F1               	movwf	___lwdiv@divisor+1
  5513  0EE0  082A               	movf	sprintf@val+1,w
  5514  0EE1  00F3               	movwf	___lwdiv@dividend+1
  5515  0EE2  0829               	movf	sprintf@val,w
  5516  0EE3  00F2               	movwf	___lwdiv@dividend
  5517  0EE4  120A  158A  21C3  120A  158A  	fcall	___lwdiv
  5518  0EE9  0871               	movf	?___lwdiv+1,w
  5519  0EEA  00FB               	movwf	___lwmod@dividend+1
  5520  0EEB  0870               	movf	?___lwdiv,w
  5521  0EEC  00FA               	movwf	___lwmod@dividend
  5522  0EED  120A  158A  2158  120A  158A  	fcall	___lwmod
  5523  0EF2  0878               	movf	?___lwmod,w
  5524  0EF3  3E30               	addlw	48
  5525  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  5526  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  5527  0EF6  00A4               	movwf	??_sprintf+1
  5528  0EF7  0824               	movf	??_sprintf+1,w
  5529  0EF8  00AC               	movwf	sprintf@c
  5530                           
  5531                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5532  0EF9  082C               	movf	sprintf@c,w
  5533  0EFA  00A3               	movwf	??_sprintf
  5534  0EFB  082B               	movf	sprintf@sp,w
  5535  0EFC  0084               	movwf	4
  5536  0EFD  0823               	movf	??_sprintf,w
  5537  0EFE  1383               	bcf	3,7	;select IRP bank0
  5538  0EFF  0080               	movwf	0
  5539  0F00  3001               	movlw	1
  5540  0F01  00A3               	movwf	??_sprintf
  5541  0F02  0823               	movf	??_sprintf,w
  5542  0F03  07AB               	addwf	sprintf@sp,f
  5543  0F04  2EC4               	goto	l2083
  5544  0F05                     l2087:	
  5545                           
  5546                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5547  0F05  082B               	movf	sprintf@sp,w
  5548  0F06  0084               	movwf	4
  5549  0F07  1383               	bcf	3,7	;select IRP bank0
  5550  0F08  0180               	clrf	0
  5551  0F09  0008               	return
  5552  0F0A                     __end_of_sprintf:	
  5553                           
  5554                           	psect	text18
  5555  0958                     __ptext18:	
  5556 ;; *************** function ___lwmod *****************
  5557 ;; Defined at:
  5558 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  divisor         2    8[COMMON] unsigned int 
  5561 ;;  dividend        2   10[COMMON] unsigned int 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  counter         1   13[COMMON] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  2    8[COMMON] unsigned int 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5573 ;;      Params:         4       0       0       0       0
  5574 ;;      Locals:         1       0       0       0       0
  5575 ;;      Temps:          1       0       0       0       0
  5576 ;;      Totals:         6       0       0       0       0
  5577 ;;Total ram usage:        6 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_sprintf
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           
  5587                           ;psect for function ___lwmod
  5588  0958                     ___lwmod:	
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5592  0958  0878               	movf	___lwmod@divisor,w
  5593  0959  0479               	iorwf	___lwmod@divisor+1,w
  5594  095A  1903               	btfsc	3,2
  5595  095B  2985               	goto	l1997
  5596  095C  01FD               	clrf	___lwmod@counter
  5597  095D  0AFD               	incf	___lwmod@counter,f
  5598  095E                     l1987:	
  5599  095E  1BF9               	btfsc	___lwmod@divisor+1,7
  5600  095F  296C               	goto	l1989
  5601  0960  3001               	movlw	1
  5602  0961                     u2025:	
  5603  0961  1003               	clrc
  5604  0962  0DF8               	rlf	___lwmod@divisor,f
  5605  0963  0DF9               	rlf	___lwmod@divisor+1,f
  5606  0964  3EFF               	addlw	-1
  5607  0965  1D03               	skipz
  5608  0966  2961               	goto	u2025
  5609  0967  3001               	movlw	1
  5610  0968  00FC               	movwf	??___lwmod
  5611  0969  087C               	movf	??___lwmod,w
  5612  096A  07FD               	addwf	___lwmod@counter,f
  5613  096B  295E               	goto	l1987
  5614  096C                     l1989:	
  5615  096C  0879               	movf	___lwmod@divisor+1,w
  5616  096D  027B               	subwf	___lwmod@dividend+1,w
  5617  096E  1D03               	skipz
  5618  096F  2972               	goto	u2045
  5619  0970  0878               	movf	___lwmod@divisor,w
  5620  0971  027A               	subwf	___lwmod@dividend,w
  5621  0972                     u2045:	
  5622  0972  1C03               	skipc
  5623  0973  297A               	goto	l1993
  5624  0974  0878               	movf	___lwmod@divisor,w
  5625  0975  02FA               	subwf	___lwmod@dividend,f
  5626  0976  0879               	movf	___lwmod@divisor+1,w
  5627  0977  1C03               	skipc
  5628  0978  03FB               	decf	___lwmod@dividend+1,f
  5629  0979  02FB               	subwf	___lwmod@dividend+1,f
  5630  097A                     l1993:	
  5631  097A  3001               	movlw	1
  5632  097B                     u2055:	
  5633  097B  1003               	clrc
  5634  097C  0CF9               	rrf	___lwmod@divisor+1,f
  5635  097D  0CF8               	rrf	___lwmod@divisor,f
  5636  097E  3EFF               	addlw	-1
  5637  097F  1D03               	skipz
  5638  0980  297B               	goto	u2055
  5639  0981  3001               	movlw	1
  5640  0982  02FD               	subwf	___lwmod@counter,f
  5641  0983  1D03               	btfss	3,2
  5642  0984  296C               	goto	l1989
  5643  0985                     l1997:	
  5644  0985  087B               	movf	___lwmod@dividend+1,w
  5645  0986  00F9               	movwf	?___lwmod+1
  5646  0987  087A               	movf	___lwmod@dividend,w
  5647  0988  00F8               	movwf	?___lwmod
  5648  0989  0008               	return
  5649  098A                     __end_of___lwmod:	
  5650                           
  5651                           	psect	text19
  5652  09C3                     __ptext19:	
  5653 ;; *************** function ___lwdiv *****************
  5654 ;; Defined at:
  5655 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  divisor         2    0[COMMON] unsigned int 
  5658 ;;  dividend        2    2[COMMON] unsigned int 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  quotient        2    5[COMMON] unsigned int 
  5661 ;;  counter         1    7[COMMON] unsigned char 
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  2    0[COMMON] unsigned int 
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5671 ;;      Params:         4       0       0       0       0
  5672 ;;      Locals:         3       0       0       0       0
  5673 ;;      Temps:          1       0       0       0       0
  5674 ;;      Totals:         8       0       0       0       0
  5675 ;;Total ram usage:        8 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		_sprintf
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           
  5685                           ;psect for function ___lwdiv
  5686  09C3                     ___lwdiv:	
  5687                           
  5688                           ;incstack = 0
  5689                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5690  09C3  01F5               	clrf	___lwdiv@quotient
  5691  09C4  01F6               	clrf	___lwdiv@quotient+1
  5692  09C5  0870               	movf	___lwdiv@divisor,w
  5693  09C6  0471               	iorwf	___lwdiv@divisor+1,w
  5694  09C7  1903               	btfsc	3,2
  5695  09C8  29FA               	goto	l1975
  5696  09C9  01F7               	clrf	___lwdiv@counter
  5697  09CA  0AF7               	incf	___lwdiv@counter,f
  5698  09CB                     l1963:	
  5699  09CB  1BF1               	btfsc	___lwdiv@divisor+1,7
  5700  09CC  29D9               	goto	l1965
  5701  09CD  3001               	movlw	1
  5702  09CE                     u1955:	
  5703  09CE  1003               	clrc
  5704  09CF  0DF0               	rlf	___lwdiv@divisor,f
  5705  09D0  0DF1               	rlf	___lwdiv@divisor+1,f
  5706  09D1  3EFF               	addlw	-1
  5707  09D2  1D03               	skipz
  5708  09D3  29CE               	goto	u1955
  5709  09D4  3001               	movlw	1
  5710  09D5  00F4               	movwf	??___lwdiv
  5711  09D6  0874               	movf	??___lwdiv,w
  5712  09D7  07F7               	addwf	___lwdiv@counter,f
  5713  09D8  29CB               	goto	l1963
  5714  09D9                     l1965:	
  5715  09D9  3001               	movlw	1
  5716  09DA                     u1975:	
  5717  09DA  1003               	clrc
  5718  09DB  0DF5               	rlf	___lwdiv@quotient,f
  5719  09DC  0DF6               	rlf	___lwdiv@quotient+1,f
  5720  09DD  3EFF               	addlw	-1
  5721  09DE  1D03               	skipz
  5722  09DF  29DA               	goto	u1975
  5723  09E0  0871               	movf	___lwdiv@divisor+1,w
  5724  09E1  0273               	subwf	___lwdiv@dividend+1,w
  5725  09E2  1D03               	skipz
  5726  09E3  29E6               	goto	u1985
  5727  09E4  0870               	movf	___lwdiv@divisor,w
  5728  09E5  0272               	subwf	___lwdiv@dividend,w
  5729  09E6                     u1985:	
  5730  09E6  1C03               	skipc
  5731  09E7  29EF               	goto	l1971
  5732  09E8  0870               	movf	___lwdiv@divisor,w
  5733  09E9  02F2               	subwf	___lwdiv@dividend,f
  5734  09EA  0871               	movf	___lwdiv@divisor+1,w
  5735  09EB  1C03               	skipc
  5736  09EC  03F3               	decf	___lwdiv@dividend+1,f
  5737  09ED  02F3               	subwf	___lwdiv@dividend+1,f
  5738  09EE  1475               	bsf	___lwdiv@quotient,0
  5739  09EF                     l1971:	
  5740  09EF  3001               	movlw	1
  5741  09F0                     u1995:	
  5742  09F0  1003               	clrc
  5743  09F1  0CF1               	rrf	___lwdiv@divisor+1,f
  5744  09F2  0CF0               	rrf	___lwdiv@divisor,f
  5745  09F3  3EFF               	addlw	-1
  5746  09F4  1D03               	skipz
  5747  09F5  29F0               	goto	u1995
  5748  09F6  3001               	movlw	1
  5749  09F7  02F7               	subwf	___lwdiv@counter,f
  5750  09F8  1D03               	btfss	3,2
  5751  09F9  29D9               	goto	l1965
  5752  09FA                     l1975:	
  5753  09FA  0876               	movf	___lwdiv@quotient+1,w
  5754  09FB  00F1               	movwf	?___lwdiv+1
  5755  09FC  0875               	movf	___lwdiv@quotient,w
  5756  09FD  00F0               	movwf	?___lwdiv
  5757  09FE  0008               	return
  5758  09FF                     __end_of___lwdiv:	
  5759                           
  5760                           	psect	text20
  5761  09FF                     __ptext20:	
  5762 ;; *************** function _Lcd_Write_String *****************
  5763 ;; Defined at:
  5764 ;;		line 92 in file "Lcd.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  a               2    5[COMMON] PTR unsigned char 
  5767 ;;		 -> STR_15(9), STR_14(11), STR_13(9), STR_12(14), 
  5768 ;;		 -> STR_11(4), STR_10(5), STR_9(11), STR_8(5), 
  5769 ;;		 -> STR_7(11), STR_6(4), STR_5(5), STR_4(8), 
  5770 ;;		 -> STR_3(5), STR_2(8), Lcd_Write_Integer@Data(10), 
  5771 ;; Auto vars:     Size  Location     Type
  5772 ;;  i               2   10[COMMON] int 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      void 
  5775 ;; Registers used:
  5776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5782 ;;      Params:         2       0       0       0       0
  5783 ;;      Locals:         2       0       0       0       0
  5784 ;;      Temps:          3       0       0       0       0
  5785 ;;      Totals:         7       0       0       0       0
  5786 ;;Total ram usage:        7 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    2
  5789 ;; This function calls:
  5790 ;;		_Lcd_Write_Char
  5791 ;; This function is called by:
  5792 ;;		_Lcd_Write_Integer
  5793 ;;		_configurarAntiHorario
  5794 ;;		_configurarHorario
  5795 ;;		_Encoder
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _Lcd_Write_String
  5801  09FF                     _Lcd_Write_String:	
  5802                           
  5803                           ;Lcd.c: 93:     int i;;Lcd.c: 94:     for (i = 0; a[i] != '\0'; i++)
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5807  09FF  01FA               	clrf	Lcd_Write_String@i
  5808  0A00  01FB               	clrf	Lcd_Write_String@i+1
  5809  0A01                     l2031:	
  5810  0A01  087A               	movf	Lcd_Write_String@i,w
  5811  0A02  0775               	addwf	Lcd_Write_String@a,w
  5812  0A03  00F8               	movwf	??_Lcd_Write_String+1
  5813  0A04  0876               	movf	Lcd_Write_String@a+1,w
  5814  0A05  00F7               	movwf	??_Lcd_Write_String
  5815  0A06  1803               	skipnc
  5816  0A07  0AF7               	incf	??_Lcd_Write_String,f
  5817  0A08  1BFA               	btfsc	Lcd_Write_String@i,7
  5818  0A09  03F7               	decf	??_Lcd_Write_String,f
  5819  0A0A  0877               	movf	??_Lcd_Write_String,w
  5820  0A0B  00F9               	movwf	??_Lcd_Write_String+2
  5821  0A0C  0879               	movf	??_Lcd_Write_String+2,w
  5822  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
  5823  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
  5824  0A0F  00FF               	movwf	127
  5825  0A10  0878               	movf	??_Lcd_Write_String+1,w
  5826  0A11  0084               	movwf	4
  5827  0A12  120A  158A  2000  120A  158A  	fcall	stringtab
  5828  0A17  3A00               	xorlw	0
  5829  0A18  1903               	btfsc	3,2
  5830  0A19  0008               	return
  5831                           
  5832                           ;Lcd.c: 95:         Lcd_Write_Char(a[i]);
  5833  0A1A  087A               	movf	Lcd_Write_String@i,w
  5834  0A1B  0775               	addwf	Lcd_Write_String@a,w
  5835  0A1C  00F8               	movwf	??_Lcd_Write_String+1
  5836  0A1D  0876               	movf	Lcd_Write_String@a+1,w
  5837  0A1E  00F7               	movwf	??_Lcd_Write_String
  5838  0A1F  1803               	skipnc
  5839  0A20  0AF7               	incf	??_Lcd_Write_String,f
  5840  0A21  1BFA               	btfsc	Lcd_Write_String@i,7
  5841  0A22  03F7               	decf	??_Lcd_Write_String,f
  5842  0A23  0877               	movf	??_Lcd_Write_String,w
  5843  0A24  00F9               	movwf	??_Lcd_Write_String+2
  5844  0A25  0879               	movf	??_Lcd_Write_String+2,w
  5845  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  5846  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  5847  0A28  00FF               	movwf	127
  5848  0A29  0878               	movf	??_Lcd_Write_String+1,w
  5849  0A2A  0084               	movwf	4
  5850  0A2B  120A  158A  2000  120A  158A  	fcall	stringtab
  5851  0A30  120A  158A  218A  120A  158A  	fcall	_Lcd_Write_Char
  5852  0A35  3001               	movlw	1
  5853  0A36  07FA               	addwf	Lcd_Write_String@i,f
  5854  0A37  1803               	skipnc
  5855  0A38  0AFB               	incf	Lcd_Write_String@i+1,f
  5856  0A39  3000               	movlw	0
  5857  0A3A  07FB               	addwf	Lcd_Write_String@i+1,f
  5858  0A3B  2A01               	goto	l2031
  5859  0A3C                     __end_of_Lcd_Write_String:	
  5860                           
  5861                           	psect	text21
  5862  098A                     __ptext21:	
  5863 ;; *************** function _Lcd_Write_Char *****************
  5864 ;; Defined at:
  5865 ;;		line 77 in file "Lcd.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  a               1    wreg     unsigned char 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  a               1    4[COMMON] unsigned char 
  5870 ;;  y               1    3[COMMON] unsigned char 
  5871 ;;  temp            1    2[COMMON] unsigned char 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  1    wreg      void 
  5874 ;; Registers used:
  5875 ;;		wreg, status,2, status,0, pclath, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5881 ;;      Params:         0       0       0       0       0
  5882 ;;      Locals:         3       0       0       0       0
  5883 ;;      Temps:          1       0       0       0       0
  5884 ;;      Totals:         4       0       0       0       0
  5885 ;;Total ram usage:        4 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    1
  5888 ;; This function calls:
  5889 ;;		_Lcd_Port
  5890 ;; This function is called by:
  5891 ;;		_Lcd_Write_String
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           
  5896                           ;psect for function _Lcd_Write_Char
  5897  098A                     _Lcd_Write_Char:	
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5901                           ;Lcd_Write_Char@a stored from wreg
  5902  098A  00F4               	movwf	Lcd_Write_Char@a
  5903                           
  5904                           ;Lcd.c: 78:     char temp, y;;Lcd.c: 79:     temp = a & 0x0F;
  5905  098B  0874               	movf	Lcd_Write_Char@a,w
  5906  098C  390F               	andlw	15
  5907  098D  00F1               	movwf	??_Lcd_Write_Char
  5908  098E  0871               	movf	??_Lcd_Write_Char,w
  5909  098F  00F2               	movwf	Lcd_Write_Char@temp
  5910                           
  5911                           ;Lcd.c: 80:     y = a & 0xF0;
  5912  0990  0874               	movf	Lcd_Write_Char@a,w
  5913  0991  39F0               	andlw	240
  5914  0992  00F1               	movwf	??_Lcd_Write_Char
  5915  0993  0871               	movf	??_Lcd_Write_Char,w
  5916  0994  00F3               	movwf	Lcd_Write_Char@y
  5917                           
  5918                           ;Lcd.c: 81:     RB2 = 1;
  5919  0995  1283               	bcf	3,5	;RP0=0, select bank0
  5920  0996  1303               	bcf	3,6	;RP1=0, select bank0
  5921  0997  1506               	bsf	6,2	;volatile
  5922                           
  5923                           ;Lcd.c: 82:     Lcd_Port(y >> 4);
  5924  0998  0873               	movf	Lcd_Write_Char@y,w
  5925  0999  00F1               	movwf	??_Lcd_Write_Char
  5926  099A  3004               	movlw	4
  5927  099B                     u1935:	
  5928  099B  1003               	clrc
  5929  099C  0CF1               	rrf	??_Lcd_Write_Char,f
  5930  099D  3EFF               	addlw	-1
  5931  099E  1D03               	skipz
  5932  099F  299B               	goto	u1935
  5933  09A0  0871               	movf	??_Lcd_Write_Char,w
  5934  09A1  120A  158A  20E0  120A  158A  	fcall	_Lcd_Port
  5935                           
  5936                           ;Lcd.c: 83:     RB3 = 1;
  5937  09A6  1283               	bcf	3,5	;RP0=0, select bank0
  5938  09A7  1303               	bcf	3,6	;RP1=0, select bank0
  5939  09A8  1586               	bsf	6,3	;volatile
  5940                           
  5941                           ;Lcd.c: 84:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5942  09A9  301A               	movlw	26
  5943  09AA  00F1               	movwf	??_Lcd_Write_Char
  5944  09AB                     u3827:	
  5945  09AB  0BF1               	decfsz	??_Lcd_Write_Char,f
  5946  09AC  29AB               	goto	u3827
  5947  09AD  0000               	nop
  5948                           
  5949                           ;Lcd.c: 85:     RB3 = 0;
  5950  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  5951  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  5952  09B0  1186               	bcf	6,3	;volatile
  5953                           
  5954                           ;Lcd.c: 86:     Lcd_Port(temp);
  5955  09B1  0872               	movf	Lcd_Write_Char@temp,w
  5956  09B2  120A  158A  20E0  120A  158A  	fcall	_Lcd_Port
  5957                           
  5958                           ;Lcd.c: 87:     RB3 = 1;
  5959  09B7  1283               	bcf	3,5	;RP0=0, select bank0
  5960  09B8  1303               	bcf	3,6	;RP1=0, select bank0
  5961  09B9  1586               	bsf	6,3	;volatile
  5962                           
  5963                           ;Lcd.c: 88:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5964  09BA  301A               	movlw	26
  5965  09BB  00F1               	movwf	??_Lcd_Write_Char
  5966  09BC                     u3837:	
  5967  09BC  0BF1               	decfsz	??_Lcd_Write_Char,f
  5968  09BD  29BC               	goto	u3837
  5969  09BE  0000               	nop
  5970                           
  5971                           ;Lcd.c: 89:     RB3 = 0;
  5972  09BF  1283               	bcf	3,5	;RP0=0, select bank0
  5973  09C0  1303               	bcf	3,6	;RP1=0, select bank0
  5974  09C1  1186               	bcf	6,3	;volatile
  5975  09C2  0008               	return
  5976  09C3                     __end_of_Lcd_Write_Char:	
  5977                           
  5978                           	psect	text22
  5979  0A3C                     __ptext22:	
  5980 ;; *************** function _Lcd_Set_Cursor *****************
  5981 ;; Defined at:
  5982 ;;		line 43 in file "Lcd.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  a               1    wreg     unsigned char 
  5985 ;;  b               1    4[COMMON] unsigned char 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  a               1    7[COMMON] unsigned char 
  5988 ;;  temp            1   10[COMMON] unsigned char 
  5989 ;;  y               1    9[COMMON] unsigned char 
  5990 ;;  z               1    8[COMMON] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0, pclath, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6000 ;;      Params:         1       0       0       0       0
  6001 ;;      Locals:         4       0       0       0       0
  6002 ;;      Temps:          2       0       0       0       0
  6003 ;;      Totals:         7       0       0       0       0
  6004 ;;Total ram usage:        7 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    2
  6007 ;; This function calls:
  6008 ;;		_Lcd_Cmd
  6009 ;; This function is called by:
  6010 ;;		_configurarAntiHorario
  6011 ;;		_configurarHorario
  6012 ;;		_Encoder
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           
  6017                           ;psect for function _Lcd_Set_Cursor
  6018  0A3C                     _Lcd_Set_Cursor:	
  6019                           
  6020                           ;incstack = 0
  6021                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6022                           ;Lcd_Set_Cursor@a stored from wreg
  6023  0A3C  00F7               	movwf	Lcd_Set_Cursor@a
  6024                           
  6025                           ;Lcd.c: 44:     char temp, z, y;;Lcd.c: 45:     if (a == 1) {
  6026  0A3D  0377               	decf	Lcd_Set_Cursor@a,w
  6027  0A3E  1D03               	btfss	3,2
  6028  0A3F  2A61               	goto	l2373
  6029                           
  6030                           ;Lcd.c: 46:         temp = 0x80 + b - 1;
  6031  0A40  0874               	movf	Lcd_Set_Cursor@b,w
  6032  0A41  3E7F               	addlw	127
  6033  0A42  00F5               	movwf	??_Lcd_Set_Cursor
  6034  0A43  0875               	movf	??_Lcd_Set_Cursor,w
  6035  0A44  00FA               	movwf	Lcd_Set_Cursor@temp
  6036                           
  6037                           ;Lcd.c: 47:         z = temp >> 4;
  6038  0A45  087A               	movf	Lcd_Set_Cursor@temp,w
  6039  0A46  00F5               	movwf	??_Lcd_Set_Cursor
  6040  0A47  3004               	movlw	4
  6041  0A48                     u2985:	
  6042  0A48  1003               	clrc
  6043  0A49  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6044  0A4A  3EFF               	addlw	-1
  6045  0A4B  1D03               	skipz
  6046  0A4C  2A48               	goto	u2985
  6047  0A4D  0875               	movf	??_Lcd_Set_Cursor,w
  6048  0A4E  00F6               	movwf	??_Lcd_Set_Cursor+1
  6049  0A4F  0876               	movf	??_Lcd_Set_Cursor+1,w
  6050  0A50  00F8               	movwf	Lcd_Set_Cursor@z
  6051                           
  6052                           ;Lcd.c: 48:         y = temp & 0x0F;
  6053  0A51  087A               	movf	Lcd_Set_Cursor@temp,w
  6054  0A52  390F               	andlw	15
  6055  0A53  00F5               	movwf	??_Lcd_Set_Cursor
  6056  0A54  0875               	movf	??_Lcd_Set_Cursor,w
  6057  0A55  00F9               	movwf	Lcd_Set_Cursor@y
  6058                           
  6059                           ;Lcd.c: 49:         Lcd_Cmd(z);
  6060  0A56  0878               	movf	Lcd_Set_Cursor@z,w
  6061  0A57  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  6062                           
  6063                           ;Lcd.c: 50:         Lcd_Cmd(y);
  6064  0A5C  0879               	movf	Lcd_Set_Cursor@y,w
  6065  0A5D  120A  158A  20FA   	fcall	_Lcd_Cmd
  6066                           
  6067                           ;Lcd.c: 51:     } else if (a == 2) {
  6068  0A60  0008               	return
  6069  0A61                     l2373:	
  6070  0A61  3002               	movlw	2
  6071  0A62  0677               	xorwf	Lcd_Set_Cursor@a,w
  6072  0A63  1D03               	btfss	3,2
  6073  0A64  0008               	return
  6074                           
  6075                           ;Lcd.c: 52:         temp = 0xC0 + b - 1;
  6076  0A65  0874               	movf	Lcd_Set_Cursor@b,w
  6077  0A66  3EBF               	addlw	191
  6078  0A67  00F5               	movwf	??_Lcd_Set_Cursor
  6079  0A68  0875               	movf	??_Lcd_Set_Cursor,w
  6080  0A69  00FA               	movwf	Lcd_Set_Cursor@temp
  6081                           
  6082                           ;Lcd.c: 53:         z = temp >> 4;
  6083  0A6A  087A               	movf	Lcd_Set_Cursor@temp,w
  6084  0A6B  00F5               	movwf	??_Lcd_Set_Cursor
  6085  0A6C  3004               	movlw	4
  6086  0A6D                     u3005:	
  6087  0A6D  1003               	clrc
  6088  0A6E  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6089  0A6F  3EFF               	addlw	-1
  6090  0A70  1D03               	skipz
  6091  0A71  2A6D               	goto	u3005
  6092  0A72  0875               	movf	??_Lcd_Set_Cursor,w
  6093  0A73  00F6               	movwf	??_Lcd_Set_Cursor+1
  6094  0A74  0876               	movf	??_Lcd_Set_Cursor+1,w
  6095  0A75  00F8               	movwf	Lcd_Set_Cursor@z
  6096                           
  6097                           ;Lcd.c: 54:         y = temp & 0x0F;
  6098  0A76  087A               	movf	Lcd_Set_Cursor@temp,w
  6099  0A77  390F               	andlw	15
  6100  0A78  00F5               	movwf	??_Lcd_Set_Cursor
  6101  0A79  0875               	movf	??_Lcd_Set_Cursor,w
  6102  0A7A  00F9               	movwf	Lcd_Set_Cursor@y
  6103                           
  6104                           ;Lcd.c: 55:         Lcd_Cmd(z);
  6105  0A7B  0878               	movf	Lcd_Set_Cursor@z,w
  6106  0A7C  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  6107                           
  6108                           ;Lcd.c: 56:         Lcd_Cmd(y);
  6109  0A81  0879               	movf	Lcd_Set_Cursor@y,w
  6110  0A82  120A  158A  20FA   	fcall	_Lcd_Cmd
  6111  0A85  0008               	return
  6112  0A86                     __end_of_Lcd_Set_Cursor:	
  6113                           
  6114                           	psect	text23
  6115  0896                     __ptext23:	
  6116 ;; *************** function _Lcd_Clear *****************
  6117 ;; Defined at:
  6118 ;;		line 38 in file "Lcd.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;		None
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;		None
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6132 ;;      Params:         0       0       0       0       0
  6133 ;;      Locals:         0       0       0       0       0
  6134 ;;      Temps:          0       0       0       0       0
  6135 ;;      Totals:         0       0       0       0       0
  6136 ;;Total ram usage:        0 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    2
  6139 ;; This function calls:
  6140 ;;		_Lcd_Cmd
  6141 ;; This function is called by:
  6142 ;;		_configurarAntiHorario
  6143 ;;		_configurarHorario
  6144 ;;		_Encoder
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           
  6149                           ;psect for function _Lcd_Clear
  6150  0896                     _Lcd_Clear:	
  6151                           
  6152                           ;Lcd.c: 39:     Lcd_Cmd(0);
  6153                           
  6154                           ;incstack = 0
  6155                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6156  0896  3000               	movlw	0
  6157  0897  120A  158A  20FA  120A  158A  	fcall	_Lcd_Cmd
  6158                           
  6159                           ;Lcd.c: 40:     Lcd_Cmd(1);
  6160  089C  3001               	movlw	1
  6161  089D  120A  158A  20FA   	fcall	_Lcd_Cmd
  6162  08A0  0008               	return
  6163  08A1                     __end_of_Lcd_Clear:	
  6164                           
  6165                           	psect	text24
  6166  08FA                     __ptext24:	
  6167 ;; *************** function _Lcd_Cmd *****************
  6168 ;; Defined at:
  6169 ;;		line 30 in file "Lcd.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  a               1    wreg     unsigned char 
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  a               1    3[COMMON] unsigned char 
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  1    wreg      void 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2, status,0, pclath, cstack
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6183 ;;      Params:         0       0       0       0       0
  6184 ;;      Locals:         1       0       0       0       0
  6185 ;;      Temps:          2       0       0       0       0
  6186 ;;      Totals:         3       0       0       0       0
  6187 ;;Total ram usage:        3 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    1
  6190 ;; This function calls:
  6191 ;;		_Lcd_Port
  6192 ;; This function is called by:
  6193 ;;		_Lcd_Clear
  6194 ;;		_Lcd_Set_Cursor
  6195 ;;		_Lcd_Init
  6196 ;;		_Lcd_Shift_Right
  6197 ;;		_Lcd_Shift_Left
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           
  6202                           ;psect for function _Lcd_Cmd
  6203  08FA                     _Lcd_Cmd:	
  6204                           
  6205                           ;incstack = 0
  6206                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6207                           ;Lcd_Cmd@a stored from wreg
  6208  08FA  00F3               	movwf	Lcd_Cmd@a
  6209                           
  6210                           ;Lcd.c: 31:     RB2 = 0;
  6211  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  6212  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  6213  08FD  1106               	bcf	6,2	;volatile
  6214                           
  6215                           ;Lcd.c: 32:     Lcd_Port(a);
  6216  08FE  0873               	movf	Lcd_Cmd@a,w
  6217  08FF  120A  158A  20E0  120A  158A  	fcall	_Lcd_Port
  6218                           
  6219                           ;Lcd.c: 33:     RB3 = 1;
  6220  0904  1283               	bcf	3,5	;RP0=0, select bank0
  6221  0905  1303               	bcf	3,6	;RP1=0, select bank0
  6222  0906  1586               	bsf	6,3	;volatile
  6223                           
  6224                           ;Lcd.c: 34:     _delay((unsigned long)((4)*(8000000/4000.0)));
  6225  0907  300B               	movlw	11
  6226  0908  00F2               	movwf	??_Lcd_Cmd+1
  6227  0909  3062               	movlw	98
  6228  090A  00F1               	movwf	??_Lcd_Cmd
  6229  090B                     u3847:	
  6230  090B  0BF1               	decfsz	??_Lcd_Cmd,f
  6231  090C  290B               	goto	u3847
  6232  090D  0BF2               	decfsz	??_Lcd_Cmd+1,f
  6233  090E  290B               	goto	u3847
  6234  090F  0000               	nop
  6235                           
  6236                           ;Lcd.c: 35:     RB3 = 0;
  6237  0910  1283               	bcf	3,5	;RP0=0, select bank0
  6238  0911  1303               	bcf	3,6	;RP1=0, select bank0
  6239  0912  1186               	bcf	6,3	;volatile
  6240  0913  0008               	return
  6241  0914                     __end_of_Lcd_Cmd:	
  6242                           
  6243                           	psect	text25
  6244  08E0                     __ptext25:	
  6245 ;; *************** function _Lcd_Port *****************
  6246 ;; Defined at:
  6247 ;;		line 8 in file "Lcd.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;  a               1    wreg     unsigned char 
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;  a               1    0[COMMON] unsigned char 
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  1    wreg      void 
  6254 ;; Registers used:
  6255 ;;		wreg
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6261 ;;      Params:         0       0       0       0       0
  6262 ;;      Locals:         1       0       0       0       0
  6263 ;;      Temps:          0       0       0       0       0
  6264 ;;      Totals:         1       0       0       0       0
  6265 ;;Total ram usage:        1 bytes
  6266 ;; Hardware stack levels used:    1
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_Lcd_Cmd
  6271 ;;		_Lcd_Init
  6272 ;;		_Lcd_Write_Char
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           
  6277                           ;psect for function _Lcd_Port
  6278  08E0                     _Lcd_Port:	
  6279                           
  6280                           ;incstack = 0
  6281                           ; Regs used in _Lcd_Port: [wreg]
  6282                           ;Lcd_Port@a stored from wreg
  6283  08E0  00F0               	movwf	Lcd_Port@a
  6284                           
  6285                           ;Lcd.c: 9:     if (a & 1)
  6286  08E1  1C70               	btfss	Lcd_Port@a,0
  6287  08E2  28E7               	goto	l59
  6288                           
  6289                           ;Lcd.c: 10:         RB7 = 1;
  6290  08E3  1283               	bcf	3,5	;RP0=0, select bank0
  6291  08E4  1303               	bcf	3,6	;RP1=0, select bank0
  6292  08E5  1786               	bsf	6,7	;volatile
  6293  08E6  28EA               	goto	l60
  6294  08E7                     l59:	
  6295                           ;Lcd.c: 11:     else
  6296                           
  6297                           
  6298                           ;Lcd.c: 12:         RB7 = 0;
  6299  08E7  1283               	bcf	3,5	;RP0=0, select bank0
  6300  08E8  1303               	bcf	3,6	;RP1=0, select bank0
  6301  08E9  1386               	bcf	6,7	;volatile
  6302  08EA                     l60:	
  6303                           
  6304                           ;Lcd.c: 14:     if (a & 2)
  6305  08EA  1CF0               	btfss	Lcd_Port@a,1
  6306  08EB  28EE               	goto	l61
  6307                           
  6308                           ;Lcd.c: 15:         RB4 = 1;
  6309  08EC  1606               	bsf	6,4	;volatile
  6310  08ED  28EF               	goto	l62
  6311  08EE                     l61:	
  6312                           ;Lcd.c: 16:     else
  6313                           
  6314                           
  6315                           ;Lcd.c: 17:         RB4 = 0;
  6316  08EE  1206               	bcf	6,4	;volatile
  6317  08EF                     l62:	
  6318                           
  6319                           ;Lcd.c: 19:     if (a & 4)
  6320  08EF  1D70               	btfss	Lcd_Port@a,2
  6321  08F0  28F3               	goto	l63
  6322                           
  6323                           ;Lcd.c: 20:         RB6 = 1;
  6324  08F1  1706               	bsf	6,6	;volatile
  6325  08F2  28F4               	goto	l64
  6326  08F3                     l63:	
  6327                           ;Lcd.c: 21:     else
  6328                           
  6329                           
  6330                           ;Lcd.c: 22:         RB6 = 0;
  6331  08F3  1306               	bcf	6,6	;volatile
  6332  08F4                     l64:	
  6333                           
  6334                           ;Lcd.c: 24:     if (a & 8)
  6335  08F4  1DF0               	btfss	Lcd_Port@a,3
  6336  08F5  28F8               	goto	l65
  6337                           
  6338                           ;Lcd.c: 25:         RB5 = 1;
  6339  08F6  1686               	bsf	6,5	;volatile
  6340  08F7  0008               	return
  6341  08F8                     l65:	
  6342                           ;Lcd.c: 26:     else
  6343                           
  6344                           
  6345                           ;Lcd.c: 27:         RB5 = 0;
  6346  08F8  1286               	bcf	6,5	;volatile
  6347  08F9  0008               	return
  6348  08FA                     __end_of_Lcd_Port:	
  6349                           
  6350                           	psect	text26
  6351  08C6                     __ptext26:	
  6352 ;; *************** function _ConfigInit *****************
  6353 ;; Defined at:
  6354 ;;		line 21 in file "Controls.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;		None
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;		None
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  1    wreg      void 
  6361 ;; Registers used:
  6362 ;;		wreg, status,2, status,0
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : 0/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6368 ;;      Params:         0       0       0       0       0
  6369 ;;      Locals:         0       0       0       0       0
  6370 ;;      Temps:          0       0       0       0       0
  6371 ;;      Totals:         0       0       0       0       0
  6372 ;;Total ram usage:        0 bytes
  6373 ;; Hardware stack levels used:    1
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_main
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function _ConfigInit
  6383  08C6                     _ConfigInit:	
  6384                           
  6385                           ;Controls.c: 24:     OSCCONbits.IRCF = 0x7;
  6386                           
  6387                           ;incstack = 0
  6388                           ; Regs used in _ConfigInit: [wreg+status,2+status,0]
  6389  08C6  3070               	movlw	112
  6390  08C7  1683               	bsf	3,5	;RP0=1, select bank1
  6391  08C8  1303               	bcf	3,6	;RP1=0, select bank1
  6392  08C9  048F               	iorwf	15,f	;volatile
  6393                           
  6394                           ;Controls.c: 25:     OSCCONbits.SCS = 0;
  6395  08CA  100F               	bcf	15,0	;volatile
  6396                           
  6397                           ;Controls.c: 26:     OSCTUNE = 0x00;
  6398  08CB  0190               	clrf	16	;volatile
  6399                           
  6400                           ;Controls.c: 29:     ANSELH = ANSEL = 0;
  6401  08CC  1683               	bsf	3,5	;RP0=1, select bank3
  6402  08CD  1703               	bsf	3,6	;RP1=1, select bank3
  6403  08CE  0188               	clrf	8	;volatile
  6404  08CF  0189               	clrf	9	;volatile
  6405                           
  6406                           ;Controls.c: 32:     TRISB = 0x01;
  6407  08D0  3001               	movlw	1
  6408  08D1  1683               	bsf	3,5	;RP0=1, select bank1
  6409  08D2  1303               	bcf	3,6	;RP1=0, select bank1
  6410  08D3  0086               	movwf	6	;volatile
  6411                           
  6412                           ;Controls.c: 35:     TRISC = 0x00;
  6413  08D4  0187               	clrf	7	;volatile
  6414                           
  6415                           ;Controls.c: 36:     PORTC = 0x00;
  6416  08D5  1283               	bcf	3,5	;RP0=0, select bank0
  6417  08D6  1303               	bcf	3,6	;RP1=0, select bank0
  6418  08D7  0187               	clrf	7	;volatile
  6419                           
  6420                           ;Controls.c: 39:     TRISA = 0xE8;
  6421  08D8  30E8               	movlw	232
  6422  08D9  1683               	bsf	3,5	;RP0=1, select bank1
  6423  08DA  1303               	bcf	3,6	;RP1=0, select bank1
  6424  08DB  0085               	movwf	5	;volatile
  6425                           
  6426                           ;Controls.c: 40:     PORTA = 0x00;
  6427  08DC  1283               	bcf	3,5	;RP0=0, select bank0
  6428  08DD  1303               	bcf	3,6	;RP1=0, select bank0
  6429  08DE  0185               	clrf	5	;volatile
  6430  08DF  0008               	return
  6431  08E0                     __end_of_ConfigInit:	
  6432  007E                     btemp	set	126	;btemp
  6433  007E                     wtemp0	set	126


Data Sizes:
    Strings     61
    Constant    44
    Data        3
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     56      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Lcd_Write_Integer@Data(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_15(CODE[9]), STR_14(CODE[11]), STR_13(CODE[9]), STR_12(CODE[14]), 
		 -> STR_11(CODE[4]), STR_10(CODE[5]), STR_9(CODE[11]), STR_8(CODE[5]), 
		 -> STR_7(CODE[11]), STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[8]), 
		 -> STR_3(CODE[5]), STR_2(CODE[8]), Lcd_Write_Integer@Data(BANK0[10]), 


Critical Paths under _main in COMMON

    _Lcd_Init->_Lcd_Cmd
    _Encoder->___xxtofl
    ___fltol->___xxtofl
    ___fladd->___xxtofl
    _VerificarInversionGiro->___xxtofl
    ___flmul->___xxtofl
    ___flge->___xxtofl
    _Lcd_Write_Integer->___xxtofl
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_configurarAntiHorario
    _main->_configurarHorario
    _configurarHorario->_Lcd_Write_Integer
    _configurarAntiHorario->_Lcd_Write_Integer
    _Encoder->_Lcd_Write_Integer
    ___fltol->___flmul
    _VerificarInversionGiro->___flge
    ___flge->___flmul
    _Lcd_Write_Integer->___fltol

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   31515
                                             54 BANK0      2     2      0
                         _ConfigInit
                            _Encoder
                       _KeyPadGetKey
                           _Lcd_Init
                           _RunMotor
                          _StopMotor
              _configurarAntiHorario
                  _configurarHorario
 ---------------------------------------------------------------------------------
 (1) _configurarHorario                                    4     4      0    6714
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _configurarAntiHorario                                4     4      0    6714
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _StopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunMotor                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _KeyPadGetKey                                         6     4      2     205
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Encoder                                              1     1      0   17684
                                             50 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
             _VerificarInversionGiro
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             11     7      4     609
                                             26 BANK0     11     7      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             20    12      8    2414
                                              0 BANK0     20    12      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _VerificarInversionGiro                               0     0      0    4517
                             ___flge
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1006
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    3025
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     486
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   13    11      2    3151
                                             37 BANK0     13    11      2
                   _Lcd_Write_String
                            ___flmul (ARG)
                            ___fltol (ARG)
                           ___xxtofl (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2    1408
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1444
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ConfigInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigInit
   _Encoder
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _VerificarInversionGiro
       ___flge
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl
     ___fladd
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _KeyPadGetKey
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _RunMotor
   _StopMotor
   _configurarAntiHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul
   _configurarHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      12        0.0%
ABS                  0      0      58       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue May 21 09:21:59 2019

                              pc 0002                      __CFG_CP$OFF 0000                               l35 0B44  
                             l60 08EA                               l28 0B37                               l61 08EE  
                             l62 08EF                               l63 08F3                               l64 08F4  
                             l65 08F8                               l59 08E7                               _cm 005A  
                             fsr 0004              ___wmul@multiplicand 0072              __Umul8_16@word_mpld 0076  
                            l222 00C8                              l127 0BB8                              l128 0C1D  
                            l244 019E                              l238 0DDD                              l361 091E  
                            l535 0C62                              l801 0D4E                              l538 0CC8  
                            l802 0D58                              l554 0B97                              l660 0362  
                            l654 02EB                              l807 0947                              l762 07D0  
                            l658 0384                              l675 043D                              l696 04BD  
                            l688 04A5                              l794 0D38                              l788 0CF8  
                            _RA0 0028                              _RA1 0029                              _RB0 0030  
                            _RA2 002A                              _RA3 002B                              _RB2 0032  
                            _RA4 002C                              _RC0 0038                              _RB3 0033  
                            _RA5 002D                              _RC1 0039                              _RB4 0034  
                            _RA6 002E                              _RC2 003A                              _RB5 0035  
                            _RA7 002F                              _RB6 0036                              _RB7 0037  
                   __CFG_CPD$OFF 0000                              _key 0063                              fsr0 0004  
                            indf 0000                    _CmAntiHorario 005C                     ___flmul@aexp 0032  
                   ___flmul@bexp 0033                     ___flmul@sign 002D                     ___flmul@temp 0038  
                   ___flmul@prod 0034                     __CFG_LVP$OFF 0000                   ??_KeyPadGetKey 0072  
                   ___fltol@exp1 0044                             l2101 0C7C                             l2005 093F  
                           l2031 0A01                             l2041 0E59                             l2105 0CA2  
                           l2211 0722                             l2131 04E7                             l2213 073F  
                           l2133 04EF                             l2063 0E90                             l2047 0E77  
                           l2223 0758                             l2151 0514                             l2311 0BF4  
                           l2057 0E8E                             l2233 078A                             l2129 04E5  
                           l2083 0EC4                             l2075 0EC0                             l2243 07B9  
                           l2219 0756                             l2147 050A                             l2069 0EB1  
                           l2085 0E39                             l2237 07A0                             l2149 050C  
                           l2261 0CF0                             l2421 0B53                             l2309 0BC1  
                           l2087 0F05                             l2159 0522                             l2271 0D0B  
                           l2503 02F5                             l2351 0C39                             l2407 0916  
                           l2281 0D4C                             l2273 0D1D                             l2441 0B83  
                           l2425 0B5C                             l2283 0D3D                             l2267 0D07  
                           l2603 045E                             l2611 0467                             l2451 0BA6  
                           l2443 0B93                             l2373 0A61                             l2621 0472  
                           l2541 036D                             l2533 0331                             l2295 0D75  
                           l2543 036F                             l2551 037E                             l2617 0470  
                           l2609 0465                             l2473 02B9                             l2643 04B9  
                           l2475 02C1                             l2389 0DD2                             l2493 02E0  
                           l2469 02B6                             l2709 0039                             l2639 04B5  
                           l2567 03B3                             l2559 0392                             l2719 004B  
                           l2569 03B5                             l2577 03C5                             l2497 02E3  
                           l1971 09EF                             l1963 09CB                             l2595 044F  
                           l2587 042F                             l2755 0F66                             l2691 0084  
                           l2851 0AFA                             l1965 09D9                             l2749 0F3A  
                           l2861 0B15                             l1975 09FA                             l2767 0F90  
                           l2863 0B1B                             l1993 097A                             l2777 0FA2  
                           l2697 0036                             l2857 0B09                             l1987 095E  
                           l2787 0FDC                             l2963 0B29                             l2859 0B0F  
                           l2867 0B21                             l1989 096C                             l1997 0985  
                           l2789 0FF5                             l2965 00B4                             l2967 0FE1  
                           l2969 0E6C                             STR_1 0876                             STR_2 0869  
                           STR_3 0871                             STR_4 0869                             STR_5 0871  
                           STR_6 0872                             STR_7 084A                             STR_8 0871  
                           STR_9 084A                             u2025 0961                             u3005 0A6D  
                           u2045 0972                             u2055 097B                             u2231 0C8D  
                           u2232 0C8E                             u2233 0C93                             u3105 0B65  
                           u2234 0C94                             u2155 0EA7                             u2251 0CB3  
                           u2235 0C99                             u2252 0CB4                             u2236 0C9A  
                           u3300 0352                             u2253 0CB9                             u2085 0948  
                           u2254 0CBA                             u2255 0CBF                             u3135 0B84  
                           u2256 0CC0                             u2505 070E                             u2425 062F  
                           u3065 091F                             u2515 0726                             u3075 0926  
                           u2605 0775                             u3165 0B9C                             u2615 0793  
                           u2535 0731                             u3431 03F0                             u3423 03D7  
                           u3415 03B9                             u3335 0373                             u3440 0404  
                           u3432 03F1                             u2625 07AB                             u2465 06CB  
                           u3441 0405                             u3433 03F6                             u3442 040A  
                           u3434 03F7                             u3290 0351                             u2810 0BCF  
                           u2395 05D2                             u2715 0D45                             u3443 040B  
                           u3435 03FC                             u3436 03FD                             u2485 06F0  
                           u3285 0345                             u2805 0BC4                             u1935 099B  
                           u2840 0BE0                             u2824 0BD2                             u3705 0123  
                           u1955 09CE                             u2755 0D60                             u2675 0D14  
                           u2835 0BD5                             u2780 0BBE                             u3485 0451  
                           u3725 01AC                             u2870 0BF1                             u2854 0BE3  
                           u1975 09DA                             u2695 0D30                             u3807 0A9F  
                           u3655 00A6                             u1985 09E6                             u3585 048F  
                           u3817 0AAE                             u2865 0BE6                             u3827 09AB  
                           u1995 09F0                             u3675 0F5C                             u3837 09BC  
                           u3847 090B                             u2985 0A48                             u3777 0FFB  
                           u3787 0BF8                             u3797 0A90                     __CFG_WRT$OFF 0000  
              ?_Lcd_Write_String 0075                             _key2 0067                             _main 0AE1  
                           btemp 007E                    __CFG_BOREN$ON 0000                             start 0000  
             ??_Lcd_Write_String 0077                    __CFG_IESO$OFF 0000                  __end_of_Lcd_Cmd 0914  
                __end_of_Encoder 0299                _Lcd_Write_Integer 08AE                    ___fltol@sign1 0043  
                __end_of___fladd 04C8                            ?_main 0070                            STR_10 0871  
                          STR_11 0872                            STR_12 083C                            STR_13 0860  
                          STR_14 0855                            STR_15 0860                    __CFG_WDTE$OFF 0000  
                __end_of___flmul 07DD                  __end_of___fltol 0BB5                            _ANSEL 0188  
             ?_Lcd_Write_Integer 0045                  __end_of___lwdiv 09FF                  __end_of___lwmod 098A  
                     _ConfigInit 08C6                            _PORTA 0005                            _PORTC 0007  
        __size_of_Lcd_Set_Cursor 004A                            _TRISA 0085                            _TRISB 0086  
                          _TRISC 0087                    __CFG_PWRTE$ON 0000                   __CFG_FCMEN$OFF 0000  
                __end_of_dpowers 083C              ??_Lcd_Write_Integer 0047                            pclath 000A  
                          status 0003                            wtemp0 007E                  __end_of_sprintf 0F0A  
               __end_of_Lcd_Init 0AE1                 __end_of_Lcd_Port 08FA                   __CFG_MCLRE$OFF 0000  
                __initialization 07DD                     __end_of_main 0B48        __end_of_Lcd_Write_Integer 08C6  
                         ??_main 0056               __size_of_Lcd_Clear 000B                 __end_of_RunMotor 08AE  
                         _ANSELH 0189                        ??_Lcd_Cmd 0071          __size_of_Lcd_Write_Char 0039  
                      ??_Encoder 0052                 __end_of___xxtofl 0D7E                           _Grados 0060  
                         ___flge 0C46                        ??___fladd 0028                           ___wmul 0914  
                      ??___flmul 0028                        ??___fltol 003E                        ??___lwdiv 0074  
                      ??___lwmod 007C                           _buffer 0065                _configurarHorario 000D  
           __end_of_KeyPadGetKey 0C46                           _lastCm 0058               ?_configurarHorario 0070  
                KeyPadGetKey@key 0074                  KeyPadGetKey@row 0075                      ?_ConfigInit 0070  
             __size_of__Umul8_16 0023            _configurarAntiHorario 0F0A              ??_configurarHorario 0052  
                      ??_sprintf 0023                  Lcd_Set_Cursor@a 0077                  Lcd_Set_Cursor@b 0074  
                Lcd_Set_Cursor@y 0079                  Lcd_Set_Cursor@z 0078               __size_of_StopMotor 0005  
                     ___flge@ff1 003A                       ___flge@ff2 003E                     ___xxtofl@arg 007A  
                   ___xxtofl@exp 0079                     ___xxtofl@val 0070          __end_of__initialization 07FC  
              __end_of_Lcd_Clear 08A1                       ___fltol@f1 003A                   __pcstackCOMMON 0070  
      __end_of_configurarHorario 00C9                     __pidataBANK0 0005       __size_of_Lcd_Write_Integer 0018  
                 _Lcd_Set_Cursor 0A3C             __end_of_keyPadMatrix 0832                        ?_Lcd_Init 0070  
                      ?_Lcd_Port 0070                       __pbssBANK0 0058              __size_of_ConfigInit 001A  
              __end_of__Umul8_16 0958                       __pmaintext 0AE1                          ?___flge 003A  
                        ?___wmul 0070                        ?_RunMotor 0070                __end_of_StopMotor 000D  
      __size_of_Lcd_Write_String 003D           __end_of_Lcd_Set_Cursor 0A86           ?_configurarAntiHorario 0070  
                      ?___xxtofl 0070                          _OSCTUNE 0090                       ??_Lcd_Init 0074  
       ??_VerificarInversionGiro 007E                       ??_Lcd_Port 0070                       __stringtab 0800  
                 _Lcd_Write_Char 098A                          _Lcd_Cmd 08FA                          _Encoder 00C9  
          __size_of_KeyPadGetKey 0091       __size_of_configurarHorario 00BC                  __size_of___flge 0095  
                        ___fladd 0299                       ??_RunMotor 0070                          ___flmul 04C8  
                        ___fltol 0B48                  __size_of___wmul 0021                          ___lwdiv 09C3  
                        ___lwmod 0958                  ?_Lcd_Set_Cursor 0074                          __ptext1 000D  
                        __ptext2 0F0A                          __ptext3 0914                          __ptext4 0008  
                        __ptext5 08A1                          __ptext6 0BB5                          __ptext7 0A86  
                        __ptext8 00C9                          __ptext9 0B48                          _dpowers 0832  
                     ??___xxtofl 0074                          _old_key 0062                          _sprintf 0E32  
         __end_of_Lcd_Write_Char 09C3             end_of_initialization 07FC                     _KeyPadGetKey 0BB5  
                      Lcd_Port@a 0070                     ??_ConfigInit 0070                      ___fladd@grs 0033  
                  ___xxtofl@sign 0078  __size_of_VerificarInversionGiro 00B4                  ?_Lcd_Write_Char 0070  
                      _CmHorario 005E                Lcd_Write_String@a 0075                Lcd_Write_String@i 007A  
                    ___flmul@grs 002E               __end_of_ConfigInit 08E0                     _keyPadMatrix 0810  
                      _Lcd_Clear 0896                   __end_of___flge 0CDB                   __end_of___wmul 0935  
               _Lcd_Write_String 09FF              start_initialization 07DD                        _LastState 0064  
              __size_of_Lcd_Init 005B                __size_of_Lcd_Port 001A         __CFG_FOSC$INTRC_NOCLKOUT 0000  
                     ?_Lcd_Clear 0070                         ??___flge 0042           _VerificarInversionGiro 0D7E  
                       ??___wmul 0074                        __Umul8_16 0935                      __pdataBANK0 0067  
                Lcd_Write_Char@a 0074                  Lcd_Write_Char@y 0073          ??_configurarAntiHorario 0052  
              __size_of_RunMotor 000D                        ___fladd@a 0024                        ___fladd@b 0020  
                      _StopMotor 0008                        ___flmul@a 0024                        ___flmul@b 0020  
                      ___latbits 0002                    __pcstackBANK0 0020                __size_of___xxtofl 00A3  
                       ?_Lcd_Cmd 0070                      sprintf@flag 0027                         ?_Encoder 0070  
                    sprintf@prec 0028                 ___lwdiv@dividend 0072                 ??_Lcd_Set_Cursor 0075  
                       ?___fladd 0020                         ?___flmul 0020                         ?___fltol 003A  
                     ?__Umul8_16 0070                         ?___lwdiv 0070                         ?___lwmod 0078  
                      __pstrings 0800                       ?_StopMotor 0070                 ___lwdiv@quotient 0075  
                       ?_sprintf 0020                   ___wmul@product 0074                         Lcd_Cmd@a 0073  
                    ??_Lcd_Clear 0074            Lcd_Write_Integer@Data 0048                      __stringbase 080F  
              ___wmul@multiplier 0070                 ??_Lcd_Write_Char 0071                         _Lcd_Init 0A86  
                       _Lcd_Port 08E0         __end_of_Lcd_Write_String 0A3C                 __size_of_Lcd_Cmd 001A  
               __size_of_Encoder 01D0                         _RunMotor 08A1                      ??__Umul8_16 0072  
               __size_of___fladd 022F                 __size_of___flmul 0315                 __size_of___fltol 006D  
               __size_of___lwdiv 003C                 __size_of___lwmod 0032               __end_of__stringtab 0810  
                    ??_StopMotor 0070                       sprintf@val 0029                         ___xxtofl 0CDB  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0077                         __ptext10 0299  
                       __ptext11 0D7E                         __ptext20 09FF                         __ptext12 0CDB  
                       __ptext21 098A                         __ptext13 04C8                         __ptext22 0A3C  
                       __ptext14 0935                         __ptext23 0896                         __ptext15 0C46  
                       __ptext24 08FA                         __ptext16 08AE                         __ptext25 08E0  
                       __ptext17 0E32                         __ptext26 08C6                         __ptext18 0958  
                       __ptext19 09C3                __CFG_BOR4V$BOR40V 0000                 __size_of_sprintf 00D8  
                  __size_of_main 0067                         _keypress 0069          ?_VerificarInversionGiro 0070  
 __size_of_configurarAntiHorario 00F6    __end_of_configurarAntiHorario 1000               Lcd_Write_Char@temp 0072  
                      sprintf@ap 0026                        sprintf@sp 002B                 ___lwmod@dividend 007A  
 __end_of_VerificarInversionGiro 0E32                        stringcode 080A                       _OSCCONbits 008F  
             Lcd_Set_Cursor@temp 007A           __Umul8_16@multiplicand 0070                         sprintf@c 002C  
                       sprintf@f 0020                  ___lwmod@divisor 0078                  ___lwmod@counter 007D  
                       stringdir 080A                         stringtab 0800               Lcd_Write_Integer@a 0045  
                  ___fladd@signs 0030                    ?_KeyPadGetKey 0070                     ___fladd@aexp 0031  
                   ___fladd@bexp 0032             __Umul8_16@multiplier 0078                __Umul8_16@product 0074  
