

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 03 14:43:14 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 2.05
    44                           ; Generated 20/12/2018 GMT
    45                           ; 
    46                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F886 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  0105                     	;# 
   139  0107                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0187                     	;# 
   149  0188                     	;# 
   150  0189                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  0081                     	;# 
   188  0085                     	;# 
   189  0086                     	;# 
   190  0087                     	;# 
   191  0089                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  008F                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0095                     	;# 
   204  0096                     	;# 
   205  0097                     	;# 
   206  0098                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  0105                     	;# 
   215  0107                     	;# 
   216  0108                     	;# 
   217  0109                     	;# 
   218  010C                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  010F                     	;# 
   223  0185                     	;# 
   224  0187                     	;# 
   225  0188                     	;# 
   226  0189                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305                           
   306                           	psect	idataBANK0
   307  087A                     __pidataBANK0:	
   308                           
   309                           ;initializer for _key2
   310  087A  3430               	retlw	48
   311  087B  3400               	retlw	0
   312                           
   313                           	psect	strings
   314  0800                     __pstrings:	
   315  0800                     stringtab:	
   316  0800                     __stringtab:	
   317                           
   318                           ;	String table - string pointers are 1 byte each
   319  0800  1BFF               	btfsc	btemp+1,7
   320  0801  280A               	ljmp	stringcode
   321  0802  1383               	bcf	3,7
   322  0803  187F               	btfsc	btemp+1,0
   323  0804  1783               	bsf	3,7
   324  0805  0800               	movf	0,w
   325  0806  0A84               	incf	4,f
   326  0807  1903               	skipnz
   327  0808  0AFF               	incf	btemp+1,f
   328  0809  0008               	return
   329  080A                     stringcode:	
   330  080A                     stringdir:	
   331  080A  3008               	movlw	high stringdir
   332  080B  008A               	movwf	10
   333  080C  0804               	movf	4,w
   334  080D  0A84               	incf	4,f
   335  080E  0782               	addwf	2,f
   336  080F                     __stringbase:	
   337  080F  3400               	retlw	0
   338  0810                     __end_of__stringtab:	
   339  0810                     _keyPadMatrix:	
   340  0810  3441               	retlw	65
   341  0811  3400               	retlw	0
   342  0812  3431               	retlw	49
   343  0813  3400               	retlw	0
   344  0814  3432               	retlw	50
   345  0815  3400               	retlw	0
   346  0816  3433               	retlw	51
   347  0817  3400               	retlw	0
   348  0818  3442               	retlw	66
   349  0819  3400               	retlw	0
   350  081A  3434               	retlw	52
   351  081B  3400               	retlw	0
   352  081C  3435               	retlw	53
   353  081D  3400               	retlw	0
   354  081E  3436               	retlw	54
   355  081F  3400               	retlw	0
   356  0820  3443               	retlw	67
   357  0821  3400               	retlw	0
   358  0822  3437               	retlw	55
   359  0823  3400               	retlw	0
   360  0824  3438               	retlw	56
   361  0825  3400               	retlw	0
   362  0826  3439               	retlw	57
   363  0827  3400               	retlw	0
   364  0828  3444               	retlw	68
   365  0829  3400               	retlw	0
   366  082A  342A               	retlw	42
   367  082B  3400               	retlw	0
   368  082C  3430               	retlw	48
   369  082D  3400               	retlw	0
   370  082E  3423               	retlw	35
   371  082F  3400               	retlw	0
   372  0830  34FF               	retlw	255
   373  0831  3400               	retlw	0
   374  0832                     __end_of_keyPadMatrix:	
   375  0832                     _dpowers:	
   376  0832  3401               	retlw	1
   377  0833  3400               	retlw	0
   378  0834  340A               	retlw	10
   379  0835  3400               	retlw	0
   380  0836  3464               	retlw	100
   381  0837  3400               	retlw	0
   382  0838  34E8               	retlw	232
   383  0839  3403               	retlw	3
   384  083A  3410               	retlw	16
   385  083B  3427               	retlw	39
   386  083C                     __end_of_dpowers:	
   387  0005                     _PORTA	set	5
   388  0007                     _PORTC	set	7
   389  0019                     _TXREG	set	25
   390  001A                     _RCREG	set	26
   391  003A                     _RC2	set	58
   392  0039                     _RC1	set	57
   393  0038                     _RC0	set	56
   394  0033                     _RB3	set	51
   395  0032                     _RB2	set	50
   396  0035                     _RB5	set	53
   397  0036                     _RB6	set	54
   398  0034                     _RB4	set	52
   399  0037                     _RB7	set	55
   400  002E                     _RA6	set	46
   401  002F                     _RA7	set	47
   402  002D                     _RA5	set	45
   403  002B                     _RA3	set	43
   404  002C                     _RA4	set	44
   405  002A                     _RA2	set	42
   406  0029                     _RA1	set	41
   407  0028                     _RA0	set	40
   408  0065                     _RCIF	set	101
   409  00C4                     _CREN	set	196
   410  00C7                     _SPEN	set	199
   411  0030                     _RB0	set	48
   412  0085                     _TRISA	set	133
   413  0087                     _TRISC	set	135
   414  0086                     _TRISB	set	134
   415  0090                     _OSCTUNE	set	144
   416  008F                     _OSCCONbits	set	143
   417  0099                     _SPBRG	set	153
   418  040F                     _nRBPU	set	1039
   419  04C1                     _TRMT	set	1217
   420  04C5                     _TXEN	set	1221
   421  043E                     _TRISC6	set	1086
   422  043F                     _TRISC7	set	1087
   423  04C4                     _SYNC	set	1220
   424  04C2                     _BRGH	set	1218
   425  0188                     _ANSEL	set	392
   426  0189                     _ANSELH	set	393
   427  083C                     STR_13:	
   428  083C  3444               	retlw	68	;'D'
   429  083D  3469               	retlw	105	;'i'
   430  083E  3472               	retlw	114	;'r'
   431  083F  343A               	retlw	58	;':'
   432  0840  3420               	retlw	32	;' '
   433  0841  3441               	retlw	65	;'A'
   434  0842  3464               	retlw	100	;'d'
   435  0843  3465               	retlw	101	;'e'
   436  0844  346C               	retlw	108	;'l'
   437  0845  3461               	retlw	97	;'a'
   438  0846  346E               	retlw	110	;'n'
   439  0847  3474               	retlw	116	;'t'
   440  0848  3465               	retlw	101	;'e'
   441  0849  3400               	retlw	0
   442  084A                     STR_8:	
   443  084A  3441               	retlw	65	;'A'
   444  084B  3464               	retlw	100	;'d'
   445  084C  3465               	retlw	101	;'e'
   446  084D  346C               	retlw	108	;'l'
   447  084E  3461               	retlw	97	;'a'
   448  084F  346E               	retlw	110	;'n'
   449  0850  3474               	retlw	116	;'t'
   450  0851  3465               	retlw	101	;'e'
   451  0852  343A               	retlw	58	;':'
   452  0853  3420               	retlw	32	;' '
   453  0854  3400               	retlw	0
   454  0855                     STR_15:	
   455  0855  3444               	retlw	68	;'D'
   456  0856  3469               	retlw	105	;'i'
   457  0857  3472               	retlw	114	;'r'
   458  0858  343A               	retlw	58	;':'
   459  0859  3420               	retlw	32	;' '
   460  085A  3441               	retlw	65	;'A'
   461  085B  3474               	retlw	116	;'t'
   462  085C  3472               	retlw	114	;'r'
   463  085D  3461               	retlw	97	;'a'
   464  085E  3473               	retlw	115	;'s'
   465  085F  3400               	retlw	0
   466  0860                     STR_14:	
   467  0860  3420               	retlw	32	;' '
   468  0861  3443               	retlw	67	;'C'
   469  0862  346D               	retlw	109	;'m'
   470  0863  3420               	retlw	32	;' '
   471  0864  3464               	retlw	100	;'d'
   472  0865  3465               	retlw	101	;'e'
   473  0866  343A               	retlw	58	;':'
   474  0867  3420               	retlw	32	;' '
   475  0868  3400               	retlw	0
   476  0869                     STR_3:	
   477  0869  3441               	retlw	65	;'A'
   478  086A  3474               	retlw	116	;'t'
   479  086B  3472               	retlw	114	;'r'
   480  086C  3461               	retlw	97	;'a'
   481  086D  3473               	retlw	115	;'s'
   482  086E  343A               	retlw	58	;':'
   483  086F  3420               	retlw	32	;' '
   484  0870  3400               	retlw	0
   485  0871                     STR_4:	
   486  0871  3430               	retlw	48	;'0'
   487  0872  3420               	retlw	32	;' '
   488  0873  3443               	retlw	67	;'C'
   489  0874  346D               	retlw	109	;'m'
   490  0875  3400               	retlw	0
   491  0876                     STR_1:	
   492  0876  3425               	retlw	37	;'%'
   493  0877  3464               	retlw	100	;'d'
   494  0878  3400               	retlw	0
   495  0860                     
   496                           ; #config settings
   497  0000                     
   498                           	psect	cinit
   499  07E9                     start_initialization:	
   500  07E9                     __initialization:	
   501                           
   502                           ; Initialize objects allocated to BANK0
   503  07E9  120A  158A  207A  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   504  07EE  00E8               	movwf	__pdataBANK0& (0+127)
   505  07EF  120A  158A  207B  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   506  07F4  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   507                           
   508                           ; Clear objects allocated to BANK0
   509  07F5  1383               	bcf	3,7	;select IRP bank0
   510  07F6  3058               	movlw	low __pbssBANK0
   511  07F7  0084               	movwf	4
   512  07F8  3068               	movlw	low (__pbssBANK0+16)
   513  07F9  120A  118A  2004   	fcall	clear_ram0
   514  07FC                     end_of_initialization:	
   515                           ;End of C runtime variable initialization code
   516                           
   517  07FC                     __end_of__initialization:	
   518  07FC  0183               	clrf	3
   519  07FD  120A  158A  2981   	ljmp	_main	;jump to C main() function
   520                           
   521                           	psect	bssBANK0
   522  0058                     __pbssBANK0:	
   523  0058                     _lastCm:	
   524  0058                     	ds	2
   525  005A                     _cm:	
   526  005A                     	ds	2
   527  005C                     _CmAntiHorario:	
   528  005C                     	ds	2
   529  005E                     _CmHorario:	
   530  005E                     	ds	2
   531  0060                     _Grados:	
   532  0060                     	ds	2
   533  0062                     _old_key:	
   534  0062                     	ds	1
   535  0063                     _key:	
   536  0063                     	ds	1
   537  0064                     _keypress:	
   538  0064                     	ds	1
   539  0065                     _LastState:	
   540  0065                     	ds	1
   541  0066                     _buffer:	
   542  0066                     	ds	2
   543                           
   544                           	psect	dataBANK0
   545  0068                     __pdataBANK0:	
   546  0068                     _key2:	
   547  0068                     	ds	2
   548                           
   549                           	psect	clrtext
   550  0004                     clear_ram0:	
   551                           ;	Called with FSR containing the base address, and
   552                           ;	W with the last address+1
   553                           
   554  0004  0064               	clrwdt	;clear the watchdog before getting into this loop
   555  0005                     clrloop0:	
   556  0005  0180               	clrf	0	;clear RAM location pointed to by FSR
   557  0006  0A84               	incf	4,f	;increment pointer
   558  0007  0604               	xorwf	4,w	;XOR with final address
   559  0008  1903               	btfsc	3,2	;have we reached the end yet?
   560  0009  3400               	retlw	0	;all done for this memory range, return
   561  000A  0604               	xorwf	4,w	;XOR again to restore value
   562  000B  2805               	goto	clrloop0	;do the next byte
   563                           
   564                           	psect	cstackCOMMON
   565  0070                     __pcstackCOMMON:	
   566  0070                     ?_ConfigInit:	
   567  0070                     ??_StopMotor:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ??_RunMotor:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_Lcd_Port:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ??_Lcd_Port:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_Lcd_Cmd:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_Lcd_Clear:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_Lcd_Init:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_Lcd_Write_Char:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_StopMotor:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_configurarHorario:	
   595                           ; 2 bytes @ 0x0
   596                           
   597  0070                     ?_configurarAntiHorario:	
   598                           ; 2 bytes @ 0x0
   599                           
   600  0070                     ?_KeyPadGetKey:	
   601                           ; 2 bytes @ 0x0
   602                           
   603  0070                     ?_RunMotor:	
   604                           ; 2 bytes @ 0x0
   605                           
   606  0070                     ?_Encoder:	
   607                           ; 2 bytes @ 0x0
   608                           
   609  0070                     ?__Umul8_16:	
   610                           ; 2 bytes @ 0x0
   611                           
   612  0070                     ?_main:	
   613                           ; 2 bytes @ 0x0
   614                           
   615  0070                     ?_VerificarInversionGiro:	
   616                           ; 2 bytes @ 0x0
   617                           
   618  0070                     ?___wmul:	
   619                           ; 2 bytes @ 0x0
   620                           
   621  0070                     ?___lwdiv:	
   622                           ; 2 bytes @ 0x0
   623                           
   624  0070                     ?___aldiv:	
   625                           ; 2 bytes @ 0x0
   626                           
   627  0070                     ?___xxtofl:	
   628                           ; 4 bytes @ 0x0
   629                           
   630  0070                     Lcd_Port@a:	
   631                           ; 4 bytes @ 0x0
   632                           
   633  0070                     __Umul8_16@multiplicand:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ___wmul@multiplier:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ___lwdiv@divisor:	
   640                           ; 2 bytes @ 0x0
   641                           
   642  0070                     ___aldiv@divisor:	
   643                           ; 2 bytes @ 0x0
   644                           
   645  0070                     ___xxtofl@val:	
   646                           ; 4 bytes @ 0x0
   647                           
   648                           
   649                           ; 4 bytes @ 0x0
   650  0070                     	ds	1
   651  0071                     ??_Lcd_Cmd:	
   652  0071                     ??_Lcd_Write_Char:	
   653                           ; 1 bytes @ 0x1
   654                           
   655                           
   656                           ; 1 bytes @ 0x1
   657  0071                     	ds	1
   658  0072                     ??_KeyPadGetKey:	
   659  0072                     ??__Umul8_16:	
   660                           ; 1 bytes @ 0x2
   661                           
   662  0072                     Lcd_Write_Char@temp:	
   663                           ; 1 bytes @ 0x2
   664                           
   665  0072                     ___wmul@multiplicand:	
   666                           ; 1 bytes @ 0x2
   667                           
   668  0072                     ___lwdiv@dividend:	
   669                           ; 2 bytes @ 0x2
   670                           
   671                           
   672                           ; 2 bytes @ 0x2
   673  0072                     	ds	1
   674  0073                     Lcd_Cmd@a:	
   675  0073                     Lcd_Write_Char@y:	
   676                           ; 1 bytes @ 0x3
   677                           
   678                           
   679                           ; 1 bytes @ 0x3
   680  0073                     	ds	1
   681  0074                     ??_Lcd_Clear:	
   682  0074                     ?_Lcd_Set_Cursor:	
   683                           ; 1 bytes @ 0x4
   684                           
   685  0074                     ??_Lcd_Init:	
   686                           ; 1 bytes @ 0x4
   687                           
   688  0074                     ??___wmul:	
   689                           ; 1 bytes @ 0x4
   690                           
   691  0074                     ??___lwdiv:	
   692                           ; 1 bytes @ 0x4
   693                           
   694  0074                     ??___xxtofl:	
   695                           ; 1 bytes @ 0x4
   696                           
   697  0074                     KeyPadGetKey@key:	
   698                           ; 1 bytes @ 0x4
   699                           
   700  0074                     Lcd_Set_Cursor@b:	
   701                           ; 1 bytes @ 0x4
   702                           
   703  0074                     Lcd_Write_Char@a:	
   704                           ; 1 bytes @ 0x4
   705                           
   706  0074                     ___wmul@product:	
   707                           ; 1 bytes @ 0x4
   708                           
   709  0074                     __Umul8_16@product:	
   710                           ; 2 bytes @ 0x4
   711                           
   712  0074                     ___aldiv@dividend:	
   713                           ; 2 bytes @ 0x4
   714                           
   715                           
   716                           ; 4 bytes @ 0x4
   717  0074                     	ds	1
   718  0075                     ??_Lcd_Set_Cursor:	
   719  0075                     ?_Lcd_Write_String:	
   720                           ; 1 bytes @ 0x5
   721                           
   722  0075                     KeyPadGetKey@row:	
   723                           ; 1 bytes @ 0x5
   724                           
   725  0075                     Lcd_Write_String@a:	
   726                           ; 1 bytes @ 0x5
   727                           
   728  0075                     ___lwdiv@quotient:	
   729                           ; 2 bytes @ 0x5
   730                           
   731                           
   732                           ; 2 bytes @ 0x5
   733  0075                     	ds	1
   734  0076                     __Umul8_16@word_mpld:	
   735                           
   736                           ; 2 bytes @ 0x6
   737  0076                     	ds	1
   738  0077                     ??_Lcd_Write_String:	
   739  0077                     Lcd_Set_Cursor@a:	
   740                           ; 1 bytes @ 0x7
   741                           
   742  0077                     ___lwdiv@counter:	
   743                           ; 1 bytes @ 0x7
   744                           
   745                           
   746                           ; 1 bytes @ 0x7
   747  0077                     	ds	1
   748  0078                     ??___aldiv:	
   749  0078                     ?___lwmod:	
   750                           ; 1 bytes @ 0x8
   751                           
   752  0078                     Lcd_Set_Cursor@z:	
   753                           ; 2 bytes @ 0x8
   754                           
   755  0078                     ___xxtofl@sign:	
   756                           ; 1 bytes @ 0x8
   757                           
   758  0078                     __Umul8_16@multiplier:	
   759                           ; 1 bytes @ 0x8
   760                           
   761  0078                     ___lwmod@divisor:	
   762                           ; 1 bytes @ 0x8
   763                           
   764                           
   765                           ; 2 bytes @ 0x8
   766  0078                     	ds	1
   767  0079                     Lcd_Set_Cursor@y:	
   768  0079                     ___xxtofl@exp:	
   769                           ; 1 bytes @ 0x9
   770                           
   771  0079                     UART_Init@x:	
   772                           ; 1 bytes @ 0x9
   773                           
   774                           
   775                           ; 2 bytes @ 0x9
   776  0079                     	ds	1
   777  007A                     Lcd_Set_Cursor@temp:	
   778  007A                     Lcd_Write_String@i:	
   779                           ; 1 bytes @ 0xA
   780                           
   781  007A                     ___lwmod@dividend:	
   782                           ; 2 bytes @ 0xA
   783                           
   784  007A                     ___xxtofl@arg:	
   785                           ; 2 bytes @ 0xA
   786                           
   787                           
   788                           ; 4 bytes @ 0xA
   789  007A                     	ds	1
   790  007B                     ??_ConfigInit:	
   791                           
   792                           ; 1 bytes @ 0xB
   793  007B                     	ds	1
   794  007C                     ??___lwmod:	
   795                           
   796                           ; 1 bytes @ 0xC
   797  007C                     	ds	1
   798  007D                     ___lwmod@counter:	
   799                           
   800                           ; 1 bytes @ 0xD
   801  007D                     	ds	1
   802  007E                     ??_VerificarInversionGiro:	
   803                           
   804                           	psect	cstackBANK0
   805  0020                     __pcstackBANK0:	
   806                           ; 1 bytes @ 0xE
   807                           
   808  0020                     ?_sprintf:	
   809  0020                     ?___fladd:	
   810                           ; 2 bytes @ 0x0
   811                           
   812  0020                     ?___flmul:	
   813                           ; 4 bytes @ 0x0
   814                           
   815  0020                     sprintf@f:	
   816                           ; 4 bytes @ 0x0
   817                           
   818  0020                     ___aldiv@counter:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0020                     ___fladd@b:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0020                     ___flmul@b:	
   825                           ; 4 bytes @ 0x0
   826                           
   827                           
   828                           ; 4 bytes @ 0x0
   829  0020                     	ds	1
   830  0021                     ___aldiv@sign:	
   831                           
   832                           ; 1 bytes @ 0x1
   833  0021                     	ds	1
   834  0022                     ___aldiv@quotient:	
   835                           
   836                           ; 4 bytes @ 0x2
   837  0022                     	ds	1
   838  0023                     ??_sprintf:	
   839                           
   840                           ; 1 bytes @ 0x3
   841  0023                     	ds	1
   842  0024                     ___fladd@a:	
   843  0024                     ___flmul@a:	
   844                           ; 4 bytes @ 0x4
   845                           
   846                           
   847                           ; 4 bytes @ 0x4
   848  0024                     	ds	2
   849  0026                     ?_UART_Init:	
   850  0026                     sprintf@ap:	
   851                           ; 1 bytes @ 0x6
   852                           
   853  0026                     UART_Init@baudrate:	
   854                           ; 1 bytes @ 0x6
   855                           
   856                           
   857                           ; 4 bytes @ 0x6
   858  0026                     	ds	1
   859  0027                     sprintf@flag:	
   860                           
   861                           ; 1 bytes @ 0x7
   862  0027                     	ds	1
   863  0028                     ??___fladd:	
   864  0028                     ??___flmul:	
   865                           ; 1 bytes @ 0x8
   866                           
   867  0028                     sprintf@prec:	
   868                           ; 1 bytes @ 0x8
   869                           
   870                           
   871                           ; 1 bytes @ 0x8
   872  0028                     	ds	1
   873  0029                     sprintf@val:	
   874                           
   875                           ; 2 bytes @ 0x9
   876  0029                     	ds	1
   877  002A                     ??_UART_Init:	
   878                           
   879                           ; 1 bytes @ 0xA
   880  002A                     	ds	1
   881  002B                     sprintf@sp:	
   882                           
   883                           ; 1 bytes @ 0xB
   884  002B                     	ds	1
   885  002C                     sprintf@c:	
   886                           
   887                           ; 1 bytes @ 0xC
   888  002C                     	ds	1
   889  002D                     ___flmul@sign:	
   890                           
   891                           ; 1 bytes @ 0xD
   892  002D                     	ds	1
   893  002E                     ___flmul@grs:	
   894                           
   895                           ; 4 bytes @ 0xE
   896  002E                     	ds	2
   897  0030                     ___fladd@signs:	
   898                           
   899                           ; 1 bytes @ 0x10
   900  0030                     	ds	1
   901  0031                     ___fladd@aexp:	
   902                           
   903                           ; 1 bytes @ 0x11
   904  0031                     	ds	1
   905  0032                     ___fladd@bexp:	
   906  0032                     ___flmul@aexp:	
   907                           ; 1 bytes @ 0x12
   908                           
   909                           
   910                           ; 1 bytes @ 0x12
   911  0032                     	ds	1
   912  0033                     ___fladd@grs:	
   913  0033                     ___flmul@bexp:	
   914                           ; 1 bytes @ 0x13
   915                           
   916                           
   917                           ; 1 bytes @ 0x13
   918  0033                     	ds	1
   919  0034                     ___flmul@prod:	
   920                           
   921                           ; 4 bytes @ 0x14
   922  0034                     	ds	4
   923  0038                     ___flmul@temp:	
   924                           
   925                           ; 2 bytes @ 0x18
   926  0038                     	ds	2
   927  003A                     ?___flge:	
   928  003A                     ?___fltol:	
   929                           ; 1 bit 
   930                           
   931  003A                     ___flge@ff1:	
   932                           ; 4 bytes @ 0x1A
   933                           
   934  003A                     ___fltol@f1:	
   935                           ; 4 bytes @ 0x1A
   936                           
   937                           
   938                           ; 4 bytes @ 0x1A
   939  003A                     	ds	4
   940  003E                     ??___fltol:	
   941  003E                     ___flge@ff2:	
   942                           ; 1 bytes @ 0x1E
   943                           
   944                           
   945                           ; 4 bytes @ 0x1E
   946  003E                     	ds	4
   947  0042                     ??___flge:	
   948                           
   949                           ; 1 bytes @ 0x22
   950  0042                     	ds	1
   951  0043                     ___fltol@sign1:	
   952                           
   953                           ; 1 bytes @ 0x23
   954  0043                     	ds	1
   955  0044                     ___fltol@exp1:	
   956                           
   957                           ; 1 bytes @ 0x24
   958  0044                     	ds	1
   959  0045                     ?_Lcd_Write_Integer:	
   960  0045                     Lcd_Write_Integer@a:	
   961                           ; 1 bytes @ 0x25
   962                           
   963                           
   964                           ; 2 bytes @ 0x25
   965  0045                     	ds	2
   966  0047                     ??_Lcd_Write_Integer:	
   967                           
   968                           ; 1 bytes @ 0x27
   969  0047                     	ds	1
   970  0048                     Lcd_Write_Integer@Data:	
   971                           
   972                           ; 10 bytes @ 0x28
   973  0048                     	ds	10
   974  0052                     ??_configurarHorario:	
   975  0052                     ??_configurarAntiHorario:	
   976                           ; 1 bytes @ 0x32
   977                           
   978  0052                     ??_Encoder:	
   979                           ; 1 bytes @ 0x32
   980                           
   981                           
   982                           ; 1 bytes @ 0x32
   983  0052                     	ds	4
   984  0056                     ??_main:	
   985                           
   986                           ; 1 bytes @ 0x36
   987  0056                     	ds	2
   988                           
   989                           	psect	maintext
   990  0981                     __pmaintext:	
   991 ;;
   992 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   993 ;;
   994 ;; *************** function _main *****************
   995 ;; Defined at:
   996 ;;		line 8 in file "main.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  2   38[None  ] int 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : B00/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0
  1012 ;;      Temps:          0       2       0       0       0
  1013 ;;      Totals:         0       2       0       0       0
  1014 ;;Total ram usage:        2 bytes
  1015 ;; Hardware stack levels required when called:    5
  1016 ;; This function calls:
  1017 ;;		_ConfigInit
  1018 ;;		_Encoder
  1019 ;;		_KeyPadGetKey
  1020 ;;		_RunMotor
  1021 ;;		_StopMotor
  1022 ;;		_configurarAntiHorario
  1023 ;;		_configurarHorario
  1024 ;; This function is called by:
  1025 ;;		Startup code after reset
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           
  1030                           ;psect for function _main
  1031  0981                     _main:	
  1032                           
  1033                           ;main.c: 9:     ConfigInit();
  1034                           
  1035                           ;incstack = 0
  1036                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1037  0981  160A  118A  272A  120A  158A  	fcall	_ConfigInit
  1038                           
  1039                           ;main.c: 10:     StopMotor();
  1040  0986  160A  118A  26AD  120A  158A  	fcall	_StopMotor
  1041                           
  1042                           ;main.c: 11:     configurarHorario();
  1043  098B  120A  118A  2019  120A  158A  	fcall	_configurarHorario
  1044                           
  1045                           ;main.c: 12:     configurarAntiHorario();
  1046  0990  120A  158A  270A  120A  158A  	fcall	_configurarAntiHorario
  1047  0995                     l3089:	
  1048                           
  1049                           ;main.c: 16:         keypress = KeyPadGetKey();
  1050  0995  120A  158A  22DF  120A  158A  	fcall	_KeyPadGetKey
  1051  099A  0870               	movf	?_KeyPadGetKey,w
  1052  099B  1283               	bcf	3,5	;RP0=0, select bank0
  1053  099C  1303               	bcf	3,6	;RP1=0, select bank0
  1054  099D  00D6               	movwf	??_main
  1055  099E  0856               	movf	??_main,w
  1056  099F  00E4               	movwf	_keypress
  1057                           
  1058                           ;main.c: 19:         if (keypress != 0xFF) {
  1059  09A0  0A64               	incf	_keypress,w
  1060  09A1  1D03               	btfss	3,2
  1061  09A2  29BC               	goto	l3105
  1062  09A3  29D2               	goto	l40
  1063  09A4                     l3095:	
  1064                           
  1065                           ;main.c: 23:                     configurarHorario();
  1066  09A4  120A  118A  2019  120A  158A  	fcall	_configurarHorario
  1067                           
  1068                           ;main.c: 24:                     break;
  1069  09A9  29D2               	goto	l40
  1070  09AA                     l3097:	
  1071                           
  1072                           ;main.c: 26:                     configurarAntiHorario();
  1073  09AA  120A  158A  270A  120A  158A  	fcall	_configurarAntiHorario
  1074                           
  1075                           ;main.c: 27:                     break;
  1076  09AF  29D2               	goto	l40
  1077  09B0                     l3099:	
  1078                           
  1079                           ;main.c: 29:                     StopMotor();
  1080  09B0  160A  118A  26AD  120A  158A  	fcall	_StopMotor
  1081                           
  1082                           ;main.c: 30:                     break;
  1083  09B5  29D2               	goto	l40
  1084  09B6                     l3101:	
  1085                           
  1086                           ;main.c: 32:                     RunMotor();
  1087  09B6  120A  118A  200C  120A  158A  	fcall	_RunMotor
  1088                           
  1089                           ;main.c: 33:                     break;
  1090  09BB  29D2               	goto	l40
  1091  09BC                     l3105:	
  1092  09BC  0864               	movf	_keypress,w
  1093  09BD  00D6               	movwf	??_main
  1094  09BE  01D7               	clrf	??_main+1
  1095                           
  1096                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1097                           ; Switch size 1, requested type "simple"
  1098                           ; Number of cases is 1, Range of values is 0 to 0
  1099                           ; switch strategies available:
  1100                           ; Name         Instructions Cycles
  1101                           ; simple_byte            4     3 (average)
  1102                           ; direct_byte           11     8 (fixed)
  1103                           ; jumptable            260     6 (fixed)
  1104                           ;	Chosen strategy is simple_byte
  1105  09BF  0857               	movf	??_main+1,w
  1106  09C0  3A00               	xorlw	0	; case 0
  1107  09C1  1903               	skipnz
  1108  09C2  29C4               	goto	l3205
  1109  09C3  29D2               	goto	l40
  1110  09C4                     l3205:	
  1111                           
  1112                           ; Switch size 1, requested type "simple"
  1113                           ; Number of cases is 4, Range of values is 65 to 68
  1114                           ; switch strategies available:
  1115                           ; Name         Instructions Cycles
  1116                           ; simple_byte           13     7 (average)
  1117                           ; direct_byte           23    11 (fixed)
  1118                           ; jumptable            263     9 (fixed)
  1119                           ;	Chosen strategy is simple_byte
  1120  09C4  0856               	movf	??_main,w
  1121  09C5  3A41               	xorlw	65	; case 65
  1122  09C6  1903               	skipnz
  1123  09C7  29A4               	goto	l3095
  1124  09C8  3A03               	xorlw	3	; case 66
  1125  09C9  1903               	skipnz
  1126  09CA  29AA               	goto	l3097
  1127  09CB  3A01               	xorlw	1	; case 67
  1128  09CC  1903               	skipnz
  1129  09CD  29B0               	goto	l3099
  1130  09CE  3A07               	xorlw	7	; case 68
  1131  09CF  1903               	skipnz
  1132  09D0  29B6               	goto	l3101
  1133  09D1  29D2               	goto	l40
  1134  09D2                     l40:	
  1135                           ;main.c: 35:         }
  1136                           
  1137                           
  1138                           ;main.c: 38:         if (RB0 == 1 && LastState == 0) {
  1139  09D2  1283               	bcf	3,5	;RP0=0, select bank0
  1140  09D3  1303               	bcf	3,6	;RP1=0, select bank0
  1141  09D4  1C06               	btfss	6,0	;volatile
  1142  09D5  29DF               	goto	l47
  1143  09D6  0865               	movf	_LastState,w
  1144  09D7  1D03               	btfss	3,2
  1145  09D8  29DF               	goto	l47
  1146                           
  1147                           ;main.c: 39:             Encoder();
  1148  09D9  120A  118A  20D5  120A  158A  	fcall	_Encoder
  1149                           
  1150                           ;main.c: 40:         } else if (RB0 == 0) {
  1151  09DE  2995               	goto	l3089
  1152  09DF                     l47:	
  1153  09DF  1806               	btfsc	6,0	;volatile
  1154  09E0  2995               	goto	l3089
  1155                           
  1156                           ;main.c: 41:             LastState = 0;
  1157  09E1  01E5               	clrf	_LastState
  1158  09E2  2995               	goto	l3089
  1159  09E3                     __end_of_main:	
  1160                           
  1161                           	psect	text1
  1162  0019                     __ptext1:	
  1163 ;; *************** function _configurarHorario *****************
  1164 ;; Defined at:
  1165 ;;		line 104 in file "Config.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;		None
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;		None
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  2    6[None  ] int 
  1172 ;; Registers used:
  1173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1179 ;;      Params:         0       0       0       0       0
  1180 ;;      Locals:         0       0       0       0       0
  1181 ;;      Temps:          0       4       0       0       0
  1182 ;;      Totals:         0       4       0       0       0
  1183 ;;Total ram usage:        4 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    4
  1186 ;; This function calls:
  1187 ;;		_KeyPadGetKey
  1188 ;;		_Lcd_Clear
  1189 ;;		_Lcd_Set_Cursor
  1190 ;;		_Lcd_Write_Integer
  1191 ;;		_Lcd_Write_String
  1192 ;;		_RunMotor
  1193 ;;		_StopMotor
  1194 ;;		___wmul
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           
  1201                           ;psect for function _configurarHorario
  1202  0019                     _configurarHorario:	
  1203                           
  1204                           ;Config.c: 106:     buffer = 0;
  1205                           
  1206                           ;incstack = 0
  1207                           ; Regs used in _configurarHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1208  0019  1283               	bcf	3,5	;RP0=0, select bank0
  1209  001A  1303               	bcf	3,6	;RP1=0, select bank0
  1210  001B  01E6               	clrf	_buffer
  1211  001C  01E7               	clrf	_buffer+1
  1212                           
  1213                           ;Config.c: 107:     StopMotor();
  1214  001D  160A  118A  26AD  120A  118A  	fcall	_StopMotor
  1215  0022                     L2:	
  1216                           
  1217                           ;Config.c: 109:     Lcd_Clear();
  1218  0022  160A  118A  26B2  120A  118A  	fcall	_Lcd_Clear
  1219                           
  1220                           ;Config.c: 110:     Lcd_Set_Cursor(1, 1);
  1221  0027  01F4               	clrf	Lcd_Set_Cursor@b
  1222  0028  0AF4               	incf	Lcd_Set_Cursor@b,f
  1223  0029  3001               	movlw	1
  1224  002A  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  1225                           
  1226                           ;Config.c: 111:     Lcd_Write_String("Adelante: ");
  1227  002F  303B               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1228  0030  00F5               	movwf	Lcd_Write_String@a
  1229  0031  3080               	movlw	128
  1230  0032  00F6               	movwf	Lcd_Write_String@a+1
  1231  0033  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  1232                           
  1233                           ;Config.c: 112:     Lcd_Set_Cursor(2, 1);
  1234  0038  01F4               	clrf	Lcd_Set_Cursor@b
  1235  0039  0AF4               	incf	Lcd_Set_Cursor@b,f
  1236  003A  3002               	movlw	2
  1237  003B  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  1238                           
  1239                           ;Config.c: 113:     Lcd_Write_String("0 Cm");
  1240  0040  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1241                           
  1242                           ;Config.c: 120:             switch (key2) {
  1243  0041  2888               	goto	L3
  1244  0042                     l2935:	
  1245                           
  1246                           ;Config.c: 123:                     buffer = 0;
  1247  0042  01E6               	clrf	_buffer
  1248  0043  01E7               	clrf	_buffer+1
  1249  0044  2822               	goto	L2
  1250  0045                     l2947:	
  1251                           ;Config.c: 129:                     break;
  1252                           
  1253                           ;Config.c: 128:                     Lcd_Write_String("0 Cm");
  1254                           
  1255                           ;Config.c: 127:                     Lcd_Set_Cursor(2, 1);
  1256                           
  1257                           ;Config.c: 126:                     Lcd_Write_String("Adelante: ");
  1258                           
  1259                           ;Config.c: 125:                     Lcd_Set_Cursor(1, 1);
  1260                           
  1261                           ;Config.c: 124:                     Lcd_Clear();
  1262                           
  1263                           
  1264                           ;Config.c: 135:                     Grados = 0;
  1265  0045  01E0               	clrf	_Grados
  1266  0046  01E1               	clrf	_Grados+1
  1267                           
  1268                           ;Config.c: 136:                     CmHorario = buffer;
  1269  0047  0867               	movf	_buffer+1,w
  1270  0048  00DF               	movwf	_CmHorario+1
  1271  0049  0866               	movf	_buffer,w
  1272  004A  00DE               	movwf	_CmHorario
  1273                           
  1274                           ;Config.c: 137:                     RunMotor();
  1275  004B  120A  118A  200C  120A  118A  	fcall	_RunMotor
  1276                           
  1277                           ;Config.c: 138:                     if (CmHorario != 0) {
  1278  0050  1283               	bcf	3,5	;RP0=0, select bank0
  1279  0051  1303               	bcf	3,6	;RP1=0, select bank0
  1280  0052  085E               	movf	_CmHorario,w
  1281  0053  045F               	iorwf	_CmHorario+1,w
  1282  0054  1D03               	btfss	3,2
  1283  0055  0008               	return
  1284  0056  2890               	goto	l2929
  1285  0057                     l2957:	
  1286                           
  1287                           ;Config.c: 147:                     buffer = (10 * buffer + key2);
  1288  0057  0867               	movf	_buffer+1,w
  1289  0058  00F1               	movwf	___wmul@multiplier+1
  1290  0059  0866               	movf	_buffer,w
  1291  005A  00F0               	movwf	___wmul@multiplier
  1292  005B  300A               	movlw	10
  1293  005C  00F2               	movwf	___wmul@multiplicand
  1294  005D  3000               	movlw	0
  1295  005E  00F3               	movwf	___wmul@multiplicand+1
  1296  005F  160A  118A  2709  120A  118A  	fcall	___wmul
  1297  0064  1283               	bcf	3,5	;RP0=0, select bank0
  1298  0065  1303               	bcf	3,6	;RP1=0, select bank0
  1299  0066  0868               	movf	_key2,w
  1300  0067  0770               	addwf	?___wmul,w
  1301  0068  00E6               	movwf	_buffer
  1302  0069  0869               	movf	_key2+1,w
  1303  006A  1803               	skipnc
  1304  006B  0A69               	incf	_key2+1,w
  1305  006C  0771               	addwf	?___wmul+1,w
  1306  006D  00E7               	movwf	_buffer+1
  1307                           
  1308                           ;Config.c: 148:                     buffer -= 48;
  1309  006E  30D0               	movlw	208
  1310  006F  07E6               	addwf	_buffer,f
  1311  0070  1803               	skipnc
  1312  0071  0AE7               	incf	_buffer+1,f
  1313  0072  30FF               	movlw	255
  1314  0073  07E7               	addwf	_buffer+1,f
  1315                           
  1316                           ;Config.c: 149:                     Lcd_Set_Cursor(2, 1);
  1317  0074  01F4               	clrf	Lcd_Set_Cursor@b
  1318  0075  0AF4               	incf	Lcd_Set_Cursor@b,f
  1319  0076  3002               	movlw	2
  1320  0077  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  1321                           
  1322                           ;Config.c: 150:                     Lcd_Write_Integer(buffer);
  1323  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1324  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1325  007E  0867               	movf	_buffer+1,w
  1326  007F  00C6               	movwf	Lcd_Write_Integer@a+1
  1327  0080  0866               	movf	_buffer,w
  1328  0081  00C5               	movwf	Lcd_Write_Integer@a
  1329  0082  160A  118A  26BD  120A  118A  	fcall	_Lcd_Write_Integer
  1330                           
  1331                           ;Config.c: 151:                     Lcd_Write_String(" Cm");
  1332  0087  3063               	movlw	(low (((STR_4+1)-__stringbase)| (0+32768)))& (0+255)
  1333  0088                     L3:	
  1334  0088  00F5               	movwf	Lcd_Write_String@a
  1335  0089  3080               	movlw	128
  1336  008A  00F6               	movwf	Lcd_Write_String@a+1
  1337  008B  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  1338  0090                     l2929:	
  1339                           
  1340                           ;Config.c: 117:         keypress = KeyPadGetKey();
  1341  0090  120A  158A  22DF  120A  118A  	fcall	_KeyPadGetKey
  1342  0095  0870               	movf	?_KeyPadGetKey,w
  1343  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0098  00D2               	movwf	??_configurarHorario
  1346  0099  0852               	movf	??_configurarHorario,w
  1347  009A  00E4               	movwf	_keypress
  1348                           
  1349                           ;Config.c: 118:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1350  009B  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1351  009C  0084               	movwf	4
  1352  009D  120A  158A  200A  120A  118A  	fcall	stringdir
  1353  00A2  00D2               	movwf	??_configurarHorario
  1354  00A3  120A  158A  200A  120A  118A  	fcall	stringdir
  1355  00A8  00D3               	movwf	??_configurarHorario+1
  1356  00A9  0864               	movf	_keypress,w
  1357  00AA  00D4               	movwf	??_configurarHorario+2
  1358  00AB  01D5               	clrf	??_configurarHorario+3
  1359  00AC  0853               	movf	??_configurarHorario+1,w
  1360  00AD  0655               	xorwf	??_configurarHorario+3,w
  1361  00AE  1D03               	skipz
  1362  00AF  28B2               	goto	u4055
  1363  00B0  0852               	movf	??_configurarHorario,w
  1364  00B1  0654               	xorwf	??_configurarHorario+2,w
  1365  00B2                     u4055:	
  1366  00B2  1903               	skipnz
  1367  00B3  2890               	goto	l2929
  1368                           
  1369                           ;Config.c: 119:             key2 = keypress;
  1370  00B4  0864               	movf	_keypress,w
  1371  00B5  00D2               	movwf	??_configurarHorario
  1372  00B6  01D3               	clrf	??_configurarHorario+1
  1373  00B7  0852               	movf	??_configurarHorario,w
  1374  00B8  00E8               	movwf	_key2
  1375  00B9  0853               	movf	??_configurarHorario+1,w
  1376  00BA  00E9               	movwf	_key2+1
  1377                           
  1378                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1379                           ; Switch size 1, requested type "simple"
  1380                           ; Number of cases is 1, Range of values is 0 to 0
  1381                           ; switch strategies available:
  1382                           ; Name         Instructions Cycles
  1383                           ; simple_byte            4     3 (average)
  1384                           ; direct_byte           11     8 (fixed)
  1385                           ; jumptable            260     6 (fixed)
  1386                           ;	Chosen strategy is simple_byte
  1387                           
  1388                           ;Config.c: 152:             }
  1389  00BB  0869               	movf	_key2+1,w
  1390  00BC  3A00               	xorlw	0	; case 0
  1391  00BD  1903               	skipnz
  1392  00BE  28C0               	goto	l3207
  1393  00BF  2857               	goto	l2957
  1394  00C0                     l3207:	
  1395                           
  1396                           ; Switch size 1, requested type "simple"
  1397                           ; Number of cases is 6, Range of values is 35 to 68
  1398                           ; switch strategies available:
  1399                           ; Name         Instructions Cycles
  1400                           ; simple_byte           19    10 (average)
  1401                           ; direct_byte          113    11 (fixed)
  1402                           ; jumptable            263     9 (fixed)
  1403                           ;	Chosen strategy is simple_byte
  1404  00C0  0868               	movf	_key2,w
  1405  00C1  3A23               	xorlw	35	; case 35
  1406  00C2  1903               	skipnz
  1407  00C3  28D4               	goto	l282
  1408  00C4  3A09               	xorlw	9	; case 42
  1409  00C5  1903               	skipnz
  1410  00C6  28D4               	goto	l282
  1411  00C7  3A6B               	xorlw	107	; case 65
  1412  00C8  1903               	skipnz
  1413  00C9  2842               	goto	l2935
  1414  00CA  3A03               	xorlw	3	; case 66
  1415  00CB  1903               	skipnz
  1416  00CC  28D4               	goto	l282
  1417  00CD  3A01               	xorlw	1	; case 67
  1418  00CE  1903               	skipnz
  1419  00CF  28D4               	goto	l282
  1420  00D0  3A07               	xorlw	7	; case 68
  1421  00D1  1903               	skipnz
  1422  00D2  2845               	goto	l2947
  1423  00D3  2857               	goto	l2957
  1424  00D4                     l282:	
  1425                           ;Config.c: 153:         }
  1426                           
  1427  00D4  2890               	goto	l2929
  1428  00D5                     __end_of_configurarHorario:	
  1429                           
  1430                           	psect	text2
  1431  0F0A                     __ptext2:	
  1432 ;; *************** function _configurarAntiHorario *****************
  1433 ;; Defined at:
  1434 ;;		line 51 in file "Config.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  2    8[None  ] int 
  1441 ;; Registers used:
  1442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1448 ;;      Params:         0       0       0       0       0
  1449 ;;      Locals:         0       0       0       0       0
  1450 ;;      Temps:          0       4       0       0       0
  1451 ;;      Totals:         0       4       0       0       0
  1452 ;;Total ram usage:        4 bytes
  1453 ;; Hardware stack levels used:    1
  1454 ;; Hardware stack levels required when called:    4
  1455 ;; This function calls:
  1456 ;;		_KeyPadGetKey
  1457 ;;		_Lcd_Clear
  1458 ;;		_Lcd_Set_Cursor
  1459 ;;		_Lcd_Write_Integer
  1460 ;;		_Lcd_Write_String
  1461 ;;		_RunMotor
  1462 ;;		_StopMotor
  1463 ;;		___wmul
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           
  1470                           ;psect for function _configurarAntiHorario
  1471  0F0A                     _configurarAntiHorario:	
  1472                           
  1473                           ;Config.c: 53:     buffer = 0;
  1474                           
  1475                           ;incstack = 0
  1476                           ; Regs used in _configurarAntiHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1477  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  1478  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  1479  0F0C  01E6               	clrf	_buffer
  1480  0F0D  01E7               	clrf	_buffer+1
  1481                           
  1482                           ;Config.c: 54:     StopMotor();
  1483  0F0E  160A  118A  26AD  120A  158A  	fcall	_StopMotor
  1484                           
  1485                           ;Config.c: 56:     Lcd_Clear();
  1486  0F13  160A  118A  26B2  120A  158A  	fcall	_Lcd_Clear
  1487                           
  1488                           ;Config.c: 57:     Lcd_Set_Cursor(1, 1);
  1489  0F18  01F4               	clrf	Lcd_Set_Cursor@b
  1490  0F19  0AF4               	incf	Lcd_Set_Cursor@b,f
  1491  0F1A  3001               	movlw	1
  1492  0F1B  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1493                           
  1494                           ;Config.c: 58:     Lcd_Write_String("Atras: ");
  1495  0F20  305A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1496  0F21  00F5               	movwf	Lcd_Write_String@a
  1497  0F22  3080               	movlw	128
  1498  0F23  00F6               	movwf	Lcd_Write_String@a+1
  1499  0F24  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1500                           
  1501                           ;Config.c: 59:     Lcd_Set_Cursor(2, 1);
  1502  0F29  01F4               	clrf	Lcd_Set_Cursor@b
  1503  0F2A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1504  0F2B  3002               	movlw	2
  1505  0F2C  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1506                           
  1507                           ;Config.c: 60:     Lcd_Write_String("0 Cm");
  1508  0F31  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1509  0F32  00F5               	movwf	Lcd_Write_String@a
  1510  0F33  3080               	movlw	128
  1511  0F34  00F6               	movwf	Lcd_Write_String@a+1
  1512  0F35  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1513  0F3A                     l2987:	
  1514                           
  1515                           ;Config.c: 64:         keypress = KeyPadGetKey();
  1516  0F3A  120A  158A  22DF  120A  158A  	fcall	_KeyPadGetKey
  1517  0F3F  0870               	movf	?_KeyPadGetKey,w
  1518  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  1519  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  1520  0F42  00D2               	movwf	??_configurarAntiHorario
  1521  0F43  0852               	movf	??_configurarAntiHorario,w
  1522  0F44  00E4               	movwf	_keypress
  1523                           
  1524                           ;Config.c: 65:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1525  0F45  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1526  0F46  0084               	movwf	4
  1527  0F47  120A  158A  200A  120A  158A  	fcall	stringdir
  1528  0F4C  00D2               	movwf	??_configurarAntiHorario
  1529  0F4D  120A  158A  200A  120A  158A  	fcall	stringdir
  1530  0F52  00D3               	movwf	??_configurarAntiHorario+1
  1531  0F53  0864               	movf	_keypress,w
  1532  0F54  00D4               	movwf	??_configurarAntiHorario+2
  1533  0F55  01D5               	clrf	??_configurarAntiHorario+3
  1534  0F56  0853               	movf	??_configurarAntiHorario+1,w
  1535  0F57  0655               	xorwf	??_configurarAntiHorario+3,w
  1536  0F58  1D03               	skipz
  1537  0F59  2F5C               	goto	u4075
  1538  0F5A  0852               	movf	??_configurarAntiHorario,w
  1539  0F5B  0654               	xorwf	??_configurarAntiHorario+2,w
  1540  0F5C                     u4075:	
  1541  0F5C  1903               	skipnz
  1542  0F5D  2FF5               	goto	l3027
  1543                           
  1544                           ;Config.c: 66:             key2 = keypress;
  1545  0F5E  0864               	movf	_keypress,w
  1546  0F5F  00D2               	movwf	??_configurarAntiHorario
  1547  0F60  01D3               	clrf	??_configurarAntiHorario+1
  1548  0F61  0852               	movf	??_configurarAntiHorario,w
  1549  0F62  00E8               	movwf	_key2
  1550  0F63  0853               	movf	??_configurarAntiHorario+1,w
  1551  0F64  00E9               	movwf	_key2+1
  1552                           
  1553                           ;Config.c: 67:             switch (key2) {
  1554  0F65  2FDC               	goto	l3025
  1555  0F66                     l2993:	
  1556                           
  1557                           ;Config.c: 71:                     buffer = 0;
  1558  0F66  01E6               	clrf	_buffer
  1559  0F67  01E7               	clrf	_buffer+1
  1560                           
  1561                           ;Config.c: 72:                     Lcd_Clear();
  1562  0F68  160A  118A  26B2  120A  158A  	fcall	_Lcd_Clear
  1563                           
  1564                           ;Config.c: 73:                     Lcd_Set_Cursor(1, 1);
  1565  0F6D  01F4               	clrf	Lcd_Set_Cursor@b
  1566  0F6E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1567  0F6F  3001               	movlw	1
  1568  0F70  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1569                           
  1570                           ;Config.c: 74:                     Lcd_Write_String("Atras: ");
  1571  0F75  305A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1572  0F76  00F5               	movwf	Lcd_Write_String@a
  1573  0F77  3080               	movlw	128
  1574  0F78  00F6               	movwf	Lcd_Write_String@a+1
  1575  0F79  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1576                           
  1577                           ;Config.c: 75:                     Lcd_Set_Cursor(2, 1);
  1578  0F7E  01F4               	clrf	Lcd_Set_Cursor@b
  1579  0F7F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1580  0F80  3002               	movlw	2
  1581  0F81  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1582                           
  1583                           ;Config.c: 76:                     Lcd_Write_String("0 Cm");
  1584  0F86  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1585  0F87  00F5               	movwf	Lcd_Write_String@a
  1586  0F88  3080               	movlw	128
  1587  0F89  00F6               	movwf	Lcd_Write_String@a+1
  1588  0F8A  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1589                           
  1590                           ;Config.c: 77:                     break;
  1591  0F8F  2FF5               	goto	l3027
  1592  0F90                     l3005:	
  1593                           
  1594                           ;Config.c: 81:                     Grados = 0;
  1595  0F90  01E0               	clrf	_Grados
  1596  0F91  01E1               	clrf	_Grados+1
  1597                           
  1598                           ;Config.c: 82:                     CmAntiHorario = buffer;
  1599  0F92  0867               	movf	_buffer+1,w
  1600  0F93  00DD               	movwf	_CmAntiHorario+1
  1601  0F94  0866               	movf	_buffer,w
  1602  0F95  00DC               	movwf	_CmAntiHorario
  1603                           
  1604                           ;Config.c: 83:                     RunMotor();
  1605  0F96  120A  118A  200C  120A  158A  	fcall	_RunMotor
  1606                           
  1607                           ;Config.c: 84:                     if (CmAntiHorario != 0) {
  1608  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  1609  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  1610  0F9D  085C               	movf	_CmAntiHorario,w
  1611  0F9E  045D               	iorwf	_CmAntiHorario+1,w
  1612  0F9F  1D03               	btfss	3,2
  1613  0FA0  0008               	return
  1614  0FA1  2FF5               	goto	l3027
  1615  0FA2                     l3015:	
  1616                           
  1617                           ;Config.c: 93:                     buffer = (10 * buffer + key2);
  1618  0FA2  0867               	movf	_buffer+1,w
  1619  0FA3  00F1               	movwf	___wmul@multiplier+1
  1620  0FA4  0866               	movf	_buffer,w
  1621  0FA5  00F0               	movwf	___wmul@multiplier
  1622  0FA6  300A               	movlw	10
  1623  0FA7  00F2               	movwf	___wmul@multiplicand
  1624  0FA8  3000               	movlw	0
  1625  0FA9  00F3               	movwf	___wmul@multiplicand+1
  1626  0FAA  160A  118A  2709  120A  158A  	fcall	___wmul
  1627  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  1628  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  1629  0FB1  0868               	movf	_key2,w
  1630  0FB2  0770               	addwf	?___wmul,w
  1631  0FB3  00E6               	movwf	_buffer
  1632  0FB4  0869               	movf	_key2+1,w
  1633  0FB5  1803               	skipnc
  1634  0FB6  0A69               	incf	_key2+1,w
  1635  0FB7  0771               	addwf	?___wmul+1,w
  1636  0FB8  00E7               	movwf	_buffer+1
  1637                           
  1638                           ;Config.c: 94:                     buffer -= 48;
  1639  0FB9  30D0               	movlw	208
  1640  0FBA  07E6               	addwf	_buffer,f
  1641  0FBB  1803               	skipnc
  1642  0FBC  0AE7               	incf	_buffer+1,f
  1643  0FBD  30FF               	movlw	255
  1644  0FBE  07E7               	addwf	_buffer+1,f
  1645                           
  1646                           ;Config.c: 95:                     Lcd_Set_Cursor(2, 1);
  1647  0FBF  01F4               	clrf	Lcd_Set_Cursor@b
  1648  0FC0  0AF4               	incf	Lcd_Set_Cursor@b,f
  1649  0FC1  3002               	movlw	2
  1650  0FC2  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1651                           
  1652                           ;Config.c: 96:                     Lcd_Write_Integer(buffer);
  1653  0FC7  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0FC8  1303               	bcf	3,6	;RP1=0, select bank0
  1655  0FC9  0867               	movf	_buffer+1,w
  1656  0FCA  00C6               	movwf	Lcd_Write_Integer@a+1
  1657  0FCB  0866               	movf	_buffer,w
  1658  0FCC  00C5               	movwf	Lcd_Write_Integer@a
  1659  0FCD  160A  118A  26BD  120A  158A  	fcall	_Lcd_Write_Integer
  1660                           
  1661                           ;Config.c: 97:                     Lcd_Write_String(" Cm");
  1662  0FD2  3063               	movlw	(low (((STR_4+1)-__stringbase)| (0+32768)))& (0+255)
  1663  0FD3  00F5               	movwf	Lcd_Write_String@a
  1664  0FD4  3080               	movlw	128
  1665  0FD5  00F6               	movwf	Lcd_Write_String@a+1
  1666  0FD6  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1667                           
  1668                           ;Config.c: 98:             }
  1669  0FDB  2FF5               	goto	l3027
  1670  0FDC                     l3025:	
  1671                           
  1672                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1673                           ; Switch size 1, requested type "simple"
  1674                           ; Number of cases is 1, Range of values is 0 to 0
  1675                           ; switch strategies available:
  1676                           ; Name         Instructions Cycles
  1677                           ; simple_byte            4     3 (average)
  1678                           ; direct_byte           11     8 (fixed)
  1679                           ; jumptable            260     6 (fixed)
  1680                           ;	Chosen strategy is simple_byte
  1681  0FDC  0869               	movf	_key2+1,w
  1682  0FDD  3A00               	xorlw	0	; case 0
  1683  0FDE  1903               	skipnz
  1684  0FDF  2FE1               	goto	l3209
  1685  0FE0  2FA2               	goto	l3015
  1686  0FE1                     l3209:	
  1687                           
  1688                           ; Switch size 1, requested type "simple"
  1689                           ; Number of cases is 6, Range of values is 35 to 68
  1690                           ; switch strategies available:
  1691                           ; Name         Instructions Cycles
  1692                           ; simple_byte           19    10 (average)
  1693                           ; direct_byte          113    11 (fixed)
  1694                           ; jumptable            263     9 (fixed)
  1695                           ;	Chosen strategy is simple_byte
  1696  0FE1  0868               	movf	_key2,w
  1697  0FE2  3A23               	xorlw	35	; case 35
  1698  0FE3  1903               	skipnz
  1699  0FE4  2FF5               	goto	l3027
  1700  0FE5  3A09               	xorlw	9	; case 42
  1701  0FE6  1903               	skipnz
  1702  0FE7  2FF5               	goto	l3027
  1703  0FE8  3A6B               	xorlw	107	; case 65
  1704  0FE9  1903               	skipnz
  1705  0FEA  2FF5               	goto	l3027
  1706  0FEB  3A03               	xorlw	3	; case 66
  1707  0FEC  1903               	skipnz
  1708  0FED  2F66               	goto	l2993
  1709  0FEE  3A01               	xorlw	1	; case 67
  1710  0FEF  1903               	skipnz
  1711  0FF0  2FF5               	goto	l3027
  1712  0FF1  3A07               	xorlw	7	; case 68
  1713  0FF2  1903               	skipnz
  1714  0FF3  2F90               	goto	l3005
  1715  0FF4  2FA2               	goto	l3015
  1716  0FF5                     l3027:	
  1717                           
  1718                           ;Config.c: 100:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1719  0FF5  3003               	movlw	3
  1720  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  1721  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  1722  0FF8  00D3               	movwf	??_configurarAntiHorario+1
  1723  0FF9  3097               	movlw	151
  1724  0FFA  00D2               	movwf	??_configurarAntiHorario
  1725  0FFB                     u4177:	
  1726  0FFB  0BD2               	decfsz	??_configurarAntiHorario,f
  1727  0FFC  2FFB               	goto	u4177
  1728  0FFD  0BD3               	decfsz	??_configurarAntiHorario+1,f
  1729  0FFE  2FFB               	goto	u4177
  1730  0FFF  2F3A               	goto	l2987
  1731  1000                     __end_of_configurarAntiHorario:	
  1732                           
  1733                           	psect	text3
  1734  1709                     __ptext3:	
  1735 ;; *************** function ___wmul *****************
  1736 ;; Defined at:
  1737 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;  multiplier      2    0[COMMON] unsigned int 
  1740 ;;  multiplicand    2    2[COMMON] unsigned int 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  product         2    4[COMMON] unsigned int 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  2    0[COMMON] unsigned int 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1752 ;;      Params:         4       0       0       0       0
  1753 ;;      Locals:         2       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0
  1755 ;;      Totals:         6       0       0       0       0
  1756 ;;Total ram usage:        6 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_configurarAntiHorario
  1762 ;;		_configurarHorario
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           
  1767                           ;psect for function ___wmul
  1768  1709                     ___wmul:	
  1769                           
  1770                           ;incstack = 0
  1771                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1772  1709  01F4               	clrf	___wmul@product
  1773  170A  01F5               	clrf	___wmul@product+1
  1774  170B                     l2649:	
  1775  170B  1C70               	btfss	___wmul@multiplier,0
  1776  170C  2F13               	goto	l421
  1777  170D  0872               	movf	___wmul@multiplicand,w
  1778  170E  07F4               	addwf	___wmul@product,f
  1779  170F  1803               	skipnc
  1780  1710  0AF5               	incf	___wmul@product+1,f
  1781  1711  0873               	movf	___wmul@multiplicand+1,w
  1782  1712  07F5               	addwf	___wmul@product+1,f
  1783  1713                     l421:	
  1784  1713  3001               	movlw	1
  1785  1714                     u3465:	
  1786  1714  1003               	clrc
  1787  1715  0DF2               	rlf	___wmul@multiplicand,f
  1788  1716  0DF3               	rlf	___wmul@multiplicand+1,f
  1789  1717  3EFF               	addlw	-1
  1790  1718  1D03               	skipz
  1791  1719  2F14               	goto	u3465
  1792  171A  3001               	movlw	1
  1793  171B                     u3475:	
  1794  171B  1003               	clrc
  1795  171C  0CF1               	rrf	___wmul@multiplier+1,f
  1796  171D  0CF0               	rrf	___wmul@multiplier,f
  1797  171E  3EFF               	addlw	-1
  1798  171F  1D03               	skipz
  1799  1720  2F1B               	goto	u3475
  1800  1721  0870               	movf	___wmul@multiplier,w
  1801  1722  0471               	iorwf	___wmul@multiplier+1,w
  1802  1723  1D03               	btfss	3,2
  1803  1724  2F0B               	goto	l2649
  1804  1725  0875               	movf	___wmul@product+1,w
  1805  1726  00F1               	movwf	?___wmul+1
  1806  1727  0874               	movf	___wmul@product,w
  1807  1728  00F0               	movwf	?___wmul
  1808  1729  0008               	return
  1809  172A                     __end_of___wmul:	
  1810                           
  1811                           	psect	text4
  1812  16AD                     __ptext4:	
  1813 ;; *************** function _StopMotor *****************
  1814 ;; Defined at:
  1815 ;;		line 45 in file "Config.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2    4[None  ] int 
  1822 ;; Registers used:
  1823 ;;		None
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1829 ;;      Params:         0       0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0
  1832 ;;      Totals:         0       0       0       0       0
  1833 ;;Total ram usage:        0 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;;		_configurarAntiHorario
  1840 ;;		_configurarHorario
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           
  1845                           ;psect for function _StopMotor
  1846  16AD                     _StopMotor:	
  1847                           
  1848                           ;Config.c: 46:     RC1 = 0;
  1849                           
  1850                           ;incstack = 0
  1851                           ; Regs used in _StopMotor: []
  1852  16AD  1283               	bcf	3,5	;RP0=0, select bank0
  1853  16AE  1303               	bcf	3,6	;RP1=0, select bank0
  1854  16AF  1087               	bcf	7,1	;volatile
  1855                           
  1856                           ;Config.c: 47:     RC0 = 0;
  1857  16B0  1007               	bcf	7,0	;volatile
  1858                           
  1859                           ;Config.c: 48:     return 0;;	Return value of _StopMotor is never used
  1860  16B1  0008               	return
  1861  16B2                     __end_of_StopMotor:	
  1862                           
  1863                           	psect	text5
  1864  000C                     __ptext5:	
  1865 ;; *************** function _RunMotor *****************
  1866 ;; Defined at:
  1867 ;;		line 37 in file "Config.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  2   12[None  ] int 
  1874 ;; Registers used:
  1875 ;;		wreg, status,2, status,0
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1881 ;;      Params:         0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_main
  1891 ;;		_configurarAntiHorario
  1892 ;;		_configurarHorario
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function _RunMotor
  1898  000C                     _RunMotor:	
  1899                           
  1900                           ;Config.c: 38:     if (CmAntiHorario != 0 && CmHorario != 0) {
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _RunMotor: [wreg+status,2+status,0]
  1904  000C  1283               	bcf	3,5	;RP0=0, select bank0
  1905  000D  1303               	bcf	3,6	;RP1=0, select bank0
  1906  000E  085C               	movf	_CmAntiHorario,w
  1907  000F  045D               	iorwf	_CmAntiHorario+1,w
  1908  0010  1903               	btfsc	3,2
  1909  0011  0008               	return
  1910  0012  085E               	movf	_CmHorario,w
  1911  0013  045F               	iorwf	_CmHorario+1,w
  1912  0014  1903               	btfsc	3,2
  1913  0015  0008               	return
  1914                           
  1915                           ;Config.c: 39:         RC0 = 1;
  1916  0016  1407               	bsf	7,0	;volatile
  1917                           
  1918                           ;Config.c: 40:         RC1 = 0;
  1919  0017  1087               	bcf	7,1	;volatile
  1920  0018  0008               	return
  1921  0019                     __end_of_RunMotor:	
  1922                           
  1923                           	psect	text6
  1924  0ADF                     __ptext6:	
  1925 ;; *************** function _KeyPadGetKey *****************
  1926 ;; Defined at:
  1927 ;;		line 19 in file "./KeyPad.h"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  row             1    5[COMMON] unsigned char 
  1932 ;;  key             1    4[COMMON] unsigned char 
  1933 ;; Return value:  Size  Location     Type
  1934 ;;                  2    0[COMMON] int 
  1935 ;; Registers used:
  1936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1937 ;; Tracked objects:
  1938 ;;		On entry : 0/0
  1939 ;;		On exit  : 0/0
  1940 ;;		Unchanged: 0/0
  1941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1942 ;;      Params:         2       0       0       0       0
  1943 ;;      Locals:         2       0       0       0       0
  1944 ;;      Temps:          2       0       0       0       0
  1945 ;;      Totals:         6       0       0       0       0
  1946 ;;Total ram usage:        6 bytes
  1947 ;; Hardware stack levels used:    2
  1948 ;; This function calls:
  1949 ;;		Nothing
  1950 ;; This function is called by:
  1951 ;;		_main
  1952 ;;		_configurarAntiHorario
  1953 ;;		_configurarHorario
  1954 ;; This function uses a non-reentrant model
  1955 ;;
  1956                           
  1957                           
  1958                           ;psect for function _KeyPadGetKey
  1959  0ADF                     _KeyPadGetKey:	
  1960                           
  1961                           ;./KeyPad.h: 21:     char key = 0, row;
  1962                           
  1963                           ;incstack = 0
  1964                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  1965  0ADF  01F4               	clrf	KeyPadGetKey@key
  1966                           
  1967                           ;./KeyPad.h: 23:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  1968  0AE0  01F5               	clrf	KeyPadGetKey@row
  1969  0AE1  0AF5               	incf	KeyPadGetKey@row,f
  1970  0AE2                     l199:	
  1971                           
  1972                           ;./KeyPad.h: 24:         {;./KeyPad.h: 25:             RA0 = (row & 0x0001) >> 0;
  1973  0AE2  1C75               	btfss	KeyPadGetKey@row,0
  1974  0AE3  2AE8               	goto	u3100
  1975  0AE4  1283               	bcf	3,5	;RP0=0, select bank0
  1976  0AE5  1303               	bcf	3,6	;RP1=0, select bank0
  1977  0AE6  1405               	bsf	5,0	;volatile
  1978  0AE7  2AEB               	goto	l2515
  1979  0AE8                     u3100:	
  1980  0AE8  1283               	bcf	3,5	;RP0=0, select bank0
  1981  0AE9  1303               	bcf	3,6	;RP1=0, select bank0
  1982  0AEA  1005               	bcf	5,0	;volatile
  1983  0AEB                     l2515:	
  1984                           
  1985                           ;./KeyPad.h: 26:             RA1 = (row & 0x0002) >> 1;
  1986  0AEB  0875               	movf	KeyPadGetKey@row,w
  1987  0AEC  00F2               	movwf	??_KeyPadGetKey
  1988  0AED  3001               	movlw	1
  1989  0AEE                     u3125:	
  1990  0AEE  1003               	clrc
  1991  0AEF  0CF2               	rrf	??_KeyPadGetKey,f
  1992  0AF0  3EFF               	addlw	-1
  1993  0AF1  1D03               	skipz
  1994  0AF2  2AEE               	goto	u3125
  1995  0AF3  1C72               	btfss	??_KeyPadGetKey,0
  1996  0AF4  2AF9               	goto	u3130
  1997  0AF5  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0AF6  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0AF7  1485               	bsf	5,1	;volatile
  2000  0AF8  2AFC               	goto	u3144
  2001  0AF9                     u3130:	
  2002  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  2003  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  2004  0AFB  1085               	bcf	5,1	;volatile
  2005  0AFC                     u3144:	
  2006                           
  2007                           ;./KeyPad.h: 27:             RA2 = (row & 0x0004) >> 2;
  2008  0AFC  0875               	movf	KeyPadGetKey@row,w
  2009  0AFD  00F2               	movwf	??_KeyPadGetKey
  2010  0AFE  3002               	movlw	2
  2011  0AFF                     u3155:	
  2012  0AFF  1003               	clrc
  2013  0B00  0CF2               	rrf	??_KeyPadGetKey,f
  2014  0B01  3EFF               	addlw	-1
  2015  0B02  1D03               	skipz
  2016  0B03  2AFF               	goto	u3155
  2017  0B04  1C72               	btfss	??_KeyPadGetKey,0
  2018  0B05  2B0A               	goto	u3160
  2019  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  2020  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  2021  0B08  1505               	bsf	5,2	;volatile
  2022  0B09  2B0D               	goto	u3174
  2023  0B0A                     u3160:	
  2024  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  2025  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  2026  0B0C  1105               	bcf	5,2	;volatile
  2027  0B0D                     u3174:	
  2028                           
  2029                           ;./KeyPad.h: 28:             RA4 = (row & 0x0008) >> 3;
  2030  0B0D  0875               	movf	KeyPadGetKey@row,w
  2031  0B0E  00F2               	movwf	??_KeyPadGetKey
  2032  0B0F  3003               	movlw	3
  2033  0B10                     u3185:	
  2034  0B10  1003               	clrc
  2035  0B11  0CF2               	rrf	??_KeyPadGetKey,f
  2036  0B12  3EFF               	addlw	-1
  2037  0B13  1D03               	skipz
  2038  0B14  2B10               	goto	u3185
  2039  0B15  1C72               	btfss	??_KeyPadGetKey,0
  2040  0B16  2B1B               	goto	u3190
  2041  0B17  1283               	bcf	3,5	;RP0=0, select bank0
  2042  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  2043  0B19  1605               	bsf	5,4	;volatile
  2044  0B1A  2B1E               	goto	l2517
  2045  0B1B                     u3190:	
  2046  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  2047  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  2048  0B1D  1205               	bcf	5,4	;volatile
  2049  0B1E                     l2517:	
  2050                           
  2051                           ;./KeyPad.h: 29:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2052  0B1E  3003               	movlw	3
  2053  0B1F  00F3               	movwf	??_KeyPadGetKey+1
  2054  0B20  3097               	movlw	151
  2055  0B21  00F2               	movwf	??_KeyPadGetKey
  2056  0B22                     u4187:	
  2057  0B22  0BF2               	decfsz	??_KeyPadGetKey,f
  2058  0B23  2B22               	goto	u4187
  2059  0B24  0BF3               	decfsz	??_KeyPadGetKey+1,f
  2060  0B25  2B22               	goto	u4187
  2061  0B26  2B27               	nop2
  2062                           
  2063                           ;./KeyPad.h: 30:         };./KeyPad.h: 32:         if (RA3)break;
  2064  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  2066  0B29  1985               	btfsc	5,3	;volatile
  2067  0B2A  2B47               	goto	l200
  2068                           
  2069                           ;./KeyPad.h: 33:         key++;
  2070  0B2B  3001               	movlw	1
  2071  0B2C  00F2               	movwf	??_KeyPadGetKey
  2072  0B2D  0872               	movf	??_KeyPadGetKey,w
  2073  0B2E  07F4               	addwf	KeyPadGetKey@key,f
  2074                           
  2075                           ;./KeyPad.h: 34:         if (RA5)break;
  2076  0B2F  1A85               	btfsc	5,5	;volatile
  2077  0B30  2B47               	goto	l200
  2078                           
  2079                           ;./KeyPad.h: 35:         key++;
  2080  0B31  3001               	movlw	1
  2081  0B32  00F2               	movwf	??_KeyPadGetKey
  2082  0B33  0872               	movf	??_KeyPadGetKey,w
  2083  0B34  07F4               	addwf	KeyPadGetKey@key,f
  2084                           
  2085                           ;./KeyPad.h: 36:         if (RA7)break;
  2086  0B35  1B85               	btfsc	5,7	;volatile
  2087  0B36  2B47               	goto	l200
  2088                           
  2089                           ;./KeyPad.h: 37:         key++;
  2090  0B37  3001               	movlw	1
  2091  0B38  00F2               	movwf	??_KeyPadGetKey
  2092  0B39  0872               	movf	??_KeyPadGetKey,w
  2093  0B3A  07F4               	addwf	KeyPadGetKey@key,f
  2094                           
  2095                           ;./KeyPad.h: 38:         if (RA6)break;
  2096  0B3B  1B05               	btfsc	5,6	;volatile
  2097  0B3C  2B47               	goto	l200
  2098                           
  2099                           ;./KeyPad.h: 39:         key++;
  2100  0B3D  3001               	movlw	1
  2101  0B3E  00F2               	movwf	??_KeyPadGetKey
  2102  0B3F  0872               	movf	??_KeyPadGetKey,w
  2103  0B40  07F4               	addwf	KeyPadGetKey@key,f
  2104                           
  2105                           ;./KeyPad.h: 40:     }
  2106  0B41  1003               	clrc
  2107  0B42  0DF5               	rlf	KeyPadGetKey@row,f
  2108  0B43  3010               	movlw	16
  2109  0B44  0275               	subwf	KeyPadGetKey@row,w
  2110  0B45  1C03               	skipc
  2111  0B46  2AE2               	goto	l199
  2112  0B47                     l200:	
  2113                           
  2114                           ;./KeyPad.h: 41:     RA0 = 0;
  2115  0B47  1005               	bcf	5,0	;volatile
  2116                           
  2117                           ;./KeyPad.h: 42:     RA1 = 0;
  2118  0B48  1085               	bcf	5,1	;volatile
  2119                           
  2120                           ;./KeyPad.h: 43:     RA2 = 0;
  2121  0B49  1105               	bcf	5,2	;volatile
  2122                           
  2123                           ;./KeyPad.h: 44:     RA4 = 0;
  2124  0B4A  1205               	bcf	5,4	;volatile
  2125                           
  2126                           ;./KeyPad.h: 45:     if (key != old_key) {
  2127  0B4B  0874               	movf	KeyPadGetKey@key,w
  2128  0B4C  0662               	xorwf	_old_key,w
  2129  0B4D  1903               	skipnz
  2130  0B4E  2B63               	goto	l2557
  2131                           
  2132                           ;./KeyPad.h: 46:         old_key = key;
  2133  0B4F  0874               	movf	KeyPadGetKey@key,w
  2134  0B50  00F2               	movwf	??_KeyPadGetKey
  2135  0B51  0872               	movf	??_KeyPadGetKey,w
  2136  0B52  00E2               	movwf	_old_key
  2137                           
  2138                           ;./KeyPad.h: 47:         return keyPadMatrix[ key ];
  2139  0B53  0874               	movf	KeyPadGetKey@key,w
  2140  0B54  00F2               	movwf	??_KeyPadGetKey
  2141  0B55  0772               	addwf	??_KeyPadGetKey,w
  2142  0B56  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  2143  0B57  0084               	movwf	4
  2144  0B58  120A  158A  200A  120A  158A  	fcall	stringdir
  2145  0B5D  00F0               	movwf	?_KeyPadGetKey
  2146  0B5E  120A  158A  200A   	fcall	stringdir
  2147  0B61  00F1               	movwf	?_KeyPadGetKey+1
  2148  0B62  0008               	return
  2149  0B63                     l2557:	
  2150                           
  2151                           ;./KeyPad.h: 49:         return keyPadMatrix[ 0x10 ];
  2152  0B63  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  2153  0B64  0084               	movwf	4
  2154  0B65  120A  158A  200A  120A  158A  	fcall	stringdir
  2155  0B6A  00F0               	movwf	?_KeyPadGetKey
  2156  0B6B  120A  158A  200A   	fcall	stringdir
  2157  0B6E  00F1               	movwf	?_KeyPadGetKey+1
  2158  0B6F  0008               	return
  2159  0B70                     __end_of_KeyPadGetKey:	
  2160                           
  2161                           	psect	text7
  2162  00D5                     __ptext7:	
  2163 ;; *************** function _Encoder *****************
  2164 ;; Defined at:
  2165 ;;		line 173 in file "Config.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;		None
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  2   16[None  ] int 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2179 ;;      Params:         0       0       0       0       0
  2180 ;;      Locals:         0       0       0       0       0
  2181 ;;      Temps:          0       1       0       0       0
  2182 ;;      Totals:         0       1       0       0       0
  2183 ;;Total ram usage:        1 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    4
  2186 ;; This function calls:
  2187 ;;		_Lcd_Clear
  2188 ;;		_Lcd_Set_Cursor
  2189 ;;		_Lcd_Write_Integer
  2190 ;;		_Lcd_Write_String
  2191 ;;		_VerificarInversionGiro
  2192 ;;		___fladd
  2193 ;;		___flmul
  2194 ;;		___fltol
  2195 ;;		___xxtofl
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           
  2202                           ;psect for function _Encoder
  2203  00D5                     _Encoder:	
  2204                           
  2205                           ;Config.c: 174:     LastState = 1;
  2206                           
  2207                           ;incstack = 0
  2208                           ; Regs used in _Encoder: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2209  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  2210  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  2211  00D7  01E5               	clrf	_LastState
  2212  00D8  0AE5               	incf	_LastState,f
  2213                           
  2214                           ;Config.c: 175:     Grados++;
  2215  00D9  3001               	movlw	1
  2216  00DA  07E0               	addwf	_Grados,f
  2217  00DB  1803               	skipnc
  2218  00DC  0AE1               	incf	_Grados+1,f
  2219  00DD  3000               	movlw	0
  2220  00DE  07E1               	addwf	_Grados+1,f
  2221                           
  2222                           ;Config.c: 176:     VerificarInversionGiro();
  2223  00DF  120A  158A  24A8  120A  118A  	fcall	_VerificarInversionGiro
  2224                           
  2225                           ;Config.c: 177:     RC2=!RC2;
  2226  00E4  3004               	movlw	4
  2227  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  2228  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  2229  00E7  0687               	xorwf	7,f
  2230                           
  2231                           ;Config.c: 178:     cm = Grados * 0.97;
  2232  00E8  0860               	movf	_Grados,w
  2233  00E9  00F0               	movwf	___xxtofl@val
  2234  00EA  0861               	movf	_Grados+1,w
  2235  00EB  00F1               	movwf	___xxtofl@val+1
  2236  00EC  3000               	movlw	0
  2237  00ED  1BF1               	btfsc	___xxtofl@val+1,7
  2238  00EE  30FF               	movlw	255
  2239  00EF  00F2               	movwf	___xxtofl@val+2
  2240  00F0  00F3               	movwf	___xxtofl@val+3
  2241  00F1  3001               	movlw	1
  2242  00F2  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2243  00F7  0873               	movf	?___xxtofl+3,w
  2244  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  2245  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  2246  00FA  00A7               	movwf	___flmul@a+3
  2247  00FB  0872               	movf	?___xxtofl+2,w
  2248  00FC  00A6               	movwf	___flmul@a+2
  2249  00FD  0871               	movf	?___xxtofl+1,w
  2250  00FE  00A5               	movwf	___flmul@a+1
  2251  00FF  0870               	movf	?___xxtofl,w
  2252  0100  00A4               	movwf	___flmul@a
  2253  0101  303F               	movlw	63
  2254  0102  00A3               	movwf	___flmul@b+3
  2255  0103  3078               	movlw	120
  2256  0104  00A2               	movwf	___flmul@b+2
  2257  0105  3051               	movlw	81
  2258  0106  00A1               	movwf	___flmul@b+1
  2259  0107  30EC               	movlw	236
  2260  0108  00A0               	movwf	___flmul@b
  2261  0109  120A  118A  24D4  120A  118A  	fcall	___flmul
  2262  010E  1283               	bcf	3,5	;RP0=0, select bank0
  2263  010F  1303               	bcf	3,6	;RP1=0, select bank0
  2264  0110  0823               	movf	?___flmul+3,w
  2265  0111  00BD               	movwf	___fltol@f1+3
  2266  0112  0822               	movf	?___flmul+2,w
  2267  0113  00BC               	movwf	___fltol@f1+2
  2268  0114  0821               	movf	?___flmul+1,w
  2269  0115  00BB               	movwf	___fltol@f1+1
  2270  0116  0820               	movf	?___flmul,w
  2271  0117  00BA               	movwf	___fltol@f1
  2272  0118  120A  158A  21E3  120A  118A  	fcall	___fltol
  2273  011D  1283               	bcf	3,5	;RP0=0, select bank0
  2274  011E  1303               	bcf	3,6	;RP1=0, select bank0
  2275  011F  083B               	movf	?___fltol+1,w
  2276  0120  00DB               	movwf	_cm+1
  2277  0121  083A               	movf	?___fltol,w
  2278  0122  00DA               	movwf	_cm
  2279                           
  2280                           ;Config.c: 180:     if (RC0 && (cm > lastCm)) {
  2281  0123  1C07               	btfss	7,0	;volatile
  2282  0124  29AA               	goto	l304
  2283  0125  0859               	movf	_lastCm+1,w
  2284  0126  3A80               	xorlw	128
  2285  0127  00D2               	movwf	??_Encoder
  2286  0128  085B               	movf	_cm+1,w
  2287  0129  3A80               	xorlw	128
  2288  012A  0252               	subwf	??_Encoder,w
  2289  012B  1D03               	skipz
  2290  012C  292F               	goto	u4105
  2291  012D  085A               	movf	_cm,w
  2292  012E  0258               	subwf	_lastCm,w
  2293  012F                     u4105:	
  2294  012F  1803               	skipnc
  2295  0130  29AA               	goto	l304
  2296                           
  2297                           ;Config.c: 181:         lastCm = cm + 0.9;
  2298  0131  1283               	bcf	3,5	;RP0=0, select bank0
  2299  0132  1303               	bcf	3,6	;RP1=0, select bank0
  2300  0133  085A               	movf	_cm,w
  2301  0134  00F0               	movwf	___xxtofl@val
  2302  0135  085B               	movf	_cm+1,w
  2303  0136  00F1               	movwf	___xxtofl@val+1
  2304  0137  3000               	movlw	0
  2305  0138  1BF1               	btfsc	___xxtofl@val+1,7
  2306  0139  30FF               	movlw	255
  2307  013A  00F2               	movwf	___xxtofl@val+2
  2308  013B  00F3               	movwf	___xxtofl@val+3
  2309  013C  3001               	movlw	1
  2310  013D  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2311  0142  0873               	movf	?___xxtofl+3,w
  2312  0143  1283               	bcf	3,5	;RP0=0, select bank0
  2313  0144  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0145  00A7               	movwf	___fladd@a+3
  2315  0146  0872               	movf	?___xxtofl+2,w
  2316  0147  00A6               	movwf	___fladd@a+2
  2317  0148  0871               	movf	?___xxtofl+1,w
  2318  0149  00A5               	movwf	___fladd@a+1
  2319  014A  0870               	movf	?___xxtofl,w
  2320  014B  00A4               	movwf	___fladd@a
  2321  014C  303F               	movlw	63
  2322  014D  00A3               	movwf	___fladd@b+3
  2323  014E  3066               	movlw	102
  2324  014F  00A2               	movwf	___fladd@b+2
  2325  0150  3066               	movlw	102
  2326  0151  00A1               	movwf	___fladd@b+1
  2327  0152  3066               	movlw	102
  2328  0153  00A0               	movwf	___fladd@b
  2329  0154  120A  118A  22A5  120A  118A  	fcall	___fladd
  2330  0159  1283               	bcf	3,5	;RP0=0, select bank0
  2331  015A  1303               	bcf	3,6	;RP1=0, select bank0
  2332  015B  0823               	movf	?___fladd+3,w
  2333  015C  00BD               	movwf	___fltol@f1+3
  2334  015D  0822               	movf	?___fladd+2,w
  2335  015E  00BC               	movwf	___fltol@f1+2
  2336  015F  0821               	movf	?___fladd+1,w
  2337  0160  00BB               	movwf	___fltol@f1+1
  2338  0161  0820               	movf	?___fladd,w
  2339  0162  00BA               	movwf	___fltol@f1
  2340  0163  120A  158A  21E3  120A  118A  	fcall	___fltol
  2341  0168  1283               	bcf	3,5	;RP0=0, select bank0
  2342  0169  1303               	bcf	3,6	;RP1=0, select bank0
  2343  016A  083B               	movf	?___fltol+1,w
  2344  016B  00D9               	movwf	_lastCm+1
  2345  016C  083A               	movf	?___fltol,w
  2346  016D  00D8               	movwf	_lastCm
  2347                           
  2348                           ;Config.c: 182:         Lcd_Clear();
  2349  016E  160A  118A  26B2  120A  118A  	fcall	_Lcd_Clear
  2350                           
  2351                           ;Config.c: 183:         Lcd_Set_Cursor(1, 1);
  2352  0173  01F4               	clrf	Lcd_Set_Cursor@b
  2353  0174  0AF4               	incf	Lcd_Set_Cursor@b,f
  2354  0175  3001               	movlw	1
  2355  0176  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2356                           
  2357                           ;Config.c: 184:         Lcd_Write_String("Dir: Adelante");
  2358  017B  302D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2359  017C  00F5               	movwf	Lcd_Write_String@a
  2360  017D  3080               	movlw	128
  2361  017E  00F6               	movwf	Lcd_Write_String@a+1
  2362  017F  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2363                           
  2364                           ;Config.c: 185:         Lcd_Set_Cursor(2, 1);
  2365  0184  01F4               	clrf	Lcd_Set_Cursor@b
  2366  0185  0AF4               	incf	Lcd_Set_Cursor@b,f
  2367  0186  3002               	movlw	2
  2368  0187  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2369                           
  2370                           ;Config.c: 186:         Lcd_Write_Integer(cm);
  2371  018C  1283               	bcf	3,5	;RP0=0, select bank0
  2372  018D  1303               	bcf	3,6	;RP1=0, select bank0
  2373  018E  085B               	movf	_cm+1,w
  2374  018F  00C6               	movwf	Lcd_Write_Integer@a+1
  2375  0190  085A               	movf	_cm,w
  2376  0191  00C5               	movwf	Lcd_Write_Integer@a
  2377  0192  160A  118A  26BD  120A  118A  	fcall	_Lcd_Write_Integer
  2378                           
  2379                           ;Config.c: 187:         Lcd_Write_String(" Cm de: ");
  2380  0197  3051               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2381  0198  00F5               	movwf	Lcd_Write_String@a
  2382  0199  3080               	movlw	128
  2383  019A  00F6               	movwf	Lcd_Write_String@a+1
  2384  019B  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2385                           
  2386                           ;Config.c: 188:         Lcd_Write_Integer(CmHorario);
  2387  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2388  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  2389  01A2  085F               	movf	_CmHorario+1,w
  2390  01A3  00C6               	movwf	Lcd_Write_Integer@a+1
  2391  01A4  085E               	movf	_CmHorario,w
  2392  01A5  00C5               	movwf	Lcd_Write_Integer@a
  2393  01A6  160A  118A  26BD   	fcall	_Lcd_Write_Integer
  2394                           
  2395                           ;Config.c: 189:     } else if (RC1 && (cm > lastCm)) {
  2396  01A9  0008               	return
  2397  01AA                     l304:	
  2398  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  2399  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  2400  01AC  1C87               	btfss	7,1	;volatile
  2401  01AD  0008               	return
  2402  01AE  0859               	movf	_lastCm+1,w
  2403  01AF  3A80               	xorlw	128
  2404  01B0  00D2               	movwf	??_Encoder
  2405  01B1  085B               	movf	_cm+1,w
  2406  01B2  3A80               	xorlw	128
  2407  01B3  0252               	subwf	??_Encoder,w
  2408  01B4  1D03               	skipz
  2409  01B5  29B8               	goto	u4125
  2410  01B6  085A               	movf	_cm,w
  2411  01B7  0258               	subwf	_lastCm,w
  2412  01B8                     u4125:	
  2413  01B8  1803               	skipnc
  2414  01B9  0008               	return
  2415                           
  2416                           ;Config.c: 190:         lastCm = cm + 0.9;
  2417  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2418  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  2419  01BC  085A               	movf	_cm,w
  2420  01BD  00F0               	movwf	___xxtofl@val
  2421  01BE  085B               	movf	_cm+1,w
  2422  01BF  00F1               	movwf	___xxtofl@val+1
  2423  01C0  3000               	movlw	0
  2424  01C1  1BF1               	btfsc	___xxtofl@val+1,7
  2425  01C2  30FF               	movlw	255
  2426  01C3  00F2               	movwf	___xxtofl@val+2
  2427  01C4  00F3               	movwf	___xxtofl@val+3
  2428  01C5  3001               	movlw	1
  2429  01C6  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2430  01CB  0873               	movf	?___xxtofl+3,w
  2431  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  2432  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  2433  01CE  00A7               	movwf	___fladd@a+3
  2434  01CF  0872               	movf	?___xxtofl+2,w
  2435  01D0  00A6               	movwf	___fladd@a+2
  2436  01D1  0871               	movf	?___xxtofl+1,w
  2437  01D2  00A5               	movwf	___fladd@a+1
  2438  01D3  0870               	movf	?___xxtofl,w
  2439  01D4  00A4               	movwf	___fladd@a
  2440  01D5  303F               	movlw	63
  2441  01D6  00A3               	movwf	___fladd@b+3
  2442  01D7  3066               	movlw	102
  2443  01D8  00A2               	movwf	___fladd@b+2
  2444  01D9  3066               	movlw	102
  2445  01DA  00A1               	movwf	___fladd@b+1
  2446  01DB  3066               	movlw	102
  2447  01DC  00A0               	movwf	___fladd@b
  2448  01DD  120A  118A  22A5  120A  118A  	fcall	___fladd
  2449  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  2450  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  2451  01E4  0823               	movf	?___fladd+3,w
  2452  01E5  00BD               	movwf	___fltol@f1+3
  2453  01E6  0822               	movf	?___fladd+2,w
  2454  01E7  00BC               	movwf	___fltol@f1+2
  2455  01E8  0821               	movf	?___fladd+1,w
  2456  01E9  00BB               	movwf	___fltol@f1+1
  2457  01EA  0820               	movf	?___fladd,w
  2458  01EB  00BA               	movwf	___fltol@f1
  2459  01EC  120A  158A  21E3  120A  118A  	fcall	___fltol
  2460  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  2461  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  2462  01F3  083B               	movf	?___fltol+1,w
  2463  01F4  00D9               	movwf	_lastCm+1
  2464  01F5  083A               	movf	?___fltol,w
  2465  01F6  00D8               	movwf	_lastCm
  2466                           
  2467                           ;Config.c: 191:         cm = Grados * 0.97;
  2468  01F7  0860               	movf	_Grados,w
  2469  01F8  00F0               	movwf	___xxtofl@val
  2470  01F9  0861               	movf	_Grados+1,w
  2471  01FA  00F1               	movwf	___xxtofl@val+1
  2472  01FB  3000               	movlw	0
  2473  01FC  1BF1               	btfsc	___xxtofl@val+1,7
  2474  01FD  30FF               	movlw	255
  2475  01FE  00F2               	movwf	___xxtofl@val+2
  2476  01FF  00F3               	movwf	___xxtofl@val+3
  2477  0200  3001               	movlw	1
  2478  0201  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2479  0206  0873               	movf	?___xxtofl+3,w
  2480  0207  1283               	bcf	3,5	;RP0=0, select bank0
  2481  0208  1303               	bcf	3,6	;RP1=0, select bank0
  2482  0209  00A7               	movwf	___flmul@a+3
  2483  020A  0872               	movf	?___xxtofl+2,w
  2484  020B  00A6               	movwf	___flmul@a+2
  2485  020C  0871               	movf	?___xxtofl+1,w
  2486  020D  00A5               	movwf	___flmul@a+1
  2487  020E  0870               	movf	?___xxtofl,w
  2488  020F  00A4               	movwf	___flmul@a
  2489  0210  303F               	movlw	63
  2490  0211  00A3               	movwf	___flmul@b+3
  2491  0212  3078               	movlw	120
  2492  0213  00A2               	movwf	___flmul@b+2
  2493  0214  3051               	movlw	81
  2494  0215  00A1               	movwf	___flmul@b+1
  2495  0216  30EC               	movlw	236
  2496  0217  00A0               	movwf	___flmul@b
  2497  0218  120A  118A  24D4  120A  118A  	fcall	___flmul
  2498  021D  1283               	bcf	3,5	;RP0=0, select bank0
  2499  021E  1303               	bcf	3,6	;RP1=0, select bank0
  2500  021F  0823               	movf	?___flmul+3,w
  2501  0220  00BD               	movwf	___fltol@f1+3
  2502  0221  0822               	movf	?___flmul+2,w
  2503  0222  00BC               	movwf	___fltol@f1+2
  2504  0223  0821               	movf	?___flmul+1,w
  2505  0224  00BB               	movwf	___fltol@f1+1
  2506  0225  0820               	movf	?___flmul,w
  2507  0226  00BA               	movwf	___fltol@f1
  2508  0227  120A  158A  21E3  120A  118A  	fcall	___fltol
  2509  022C  1283               	bcf	3,5	;RP0=0, select bank0
  2510  022D  1303               	bcf	3,6	;RP1=0, select bank0
  2511  022E  083B               	movf	?___fltol+1,w
  2512  022F  00DB               	movwf	_cm+1
  2513  0230  083A               	movf	?___fltol,w
  2514  0231  00DA               	movwf	_cm
  2515                           
  2516                           ;Config.c: 192:         Lcd_Clear();
  2517  0232  160A  118A  26B2  120A  118A  	fcall	_Lcd_Clear
  2518                           
  2519                           ;Config.c: 193:         Lcd_Set_Cursor(1, 1);
  2520  0237  01F4               	clrf	Lcd_Set_Cursor@b
  2521  0238  0AF4               	incf	Lcd_Set_Cursor@b,f
  2522  0239  3001               	movlw	1
  2523  023A  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2524                           
  2525                           ;Config.c: 194:         Lcd_Write_String("Dir: Atras");
  2526  023F  3046               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2527  0240  00F5               	movwf	Lcd_Write_String@a
  2528  0241  3080               	movlw	128
  2529  0242  00F6               	movwf	Lcd_Write_String@a+1
  2530  0243  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2531                           
  2532                           ;Config.c: 195:         Lcd_Set_Cursor(2, 1);
  2533  0248  01F4               	clrf	Lcd_Set_Cursor@b
  2534  0249  0AF4               	incf	Lcd_Set_Cursor@b,f
  2535  024A  3002               	movlw	2
  2536  024B  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2537                           
  2538                           ;Config.c: 196:         Lcd_Write_Integer(Grados * 0.97);
  2539  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0251  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0252  0860               	movf	_Grados,w
  2542  0253  00F0               	movwf	___xxtofl@val
  2543  0254  0861               	movf	_Grados+1,w
  2544  0255  00F1               	movwf	___xxtofl@val+1
  2545  0256  3000               	movlw	0
  2546  0257  1BF1               	btfsc	___xxtofl@val+1,7
  2547  0258  30FF               	movlw	255
  2548  0259  00F2               	movwf	___xxtofl@val+2
  2549  025A  00F3               	movwf	___xxtofl@val+3
  2550  025B  3001               	movlw	1
  2551  025C  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2552  0261  0873               	movf	?___xxtofl+3,w
  2553  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2554  0263  1303               	bcf	3,6	;RP1=0, select bank0
  2555  0264  00A7               	movwf	___flmul@a+3
  2556  0265  0872               	movf	?___xxtofl+2,w
  2557  0266  00A6               	movwf	___flmul@a+2
  2558  0267  0871               	movf	?___xxtofl+1,w
  2559  0268  00A5               	movwf	___flmul@a+1
  2560  0269  0870               	movf	?___xxtofl,w
  2561  026A  00A4               	movwf	___flmul@a
  2562  026B  303F               	movlw	63
  2563  026C  00A3               	movwf	___flmul@b+3
  2564  026D  3078               	movlw	120
  2565  026E  00A2               	movwf	___flmul@b+2
  2566  026F  3051               	movlw	81
  2567  0270  00A1               	movwf	___flmul@b+1
  2568  0271  30EC               	movlw	236
  2569  0272  00A0               	movwf	___flmul@b
  2570  0273  120A  118A  24D4  120A  118A  	fcall	___flmul
  2571  0278  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0279  1303               	bcf	3,6	;RP1=0, select bank0
  2573  027A  0823               	movf	?___flmul+3,w
  2574  027B  00BD               	movwf	___fltol@f1+3
  2575  027C  0822               	movf	?___flmul+2,w
  2576  027D  00BC               	movwf	___fltol@f1+2
  2577  027E  0821               	movf	?___flmul+1,w
  2578  027F  00BB               	movwf	___fltol@f1+1
  2579  0280  0820               	movf	?___flmul,w
  2580  0281  00BA               	movwf	___fltol@f1
  2581  0282  120A  158A  21E3  120A  118A  	fcall	___fltol
  2582  0287  1283               	bcf	3,5	;RP0=0, select bank0
  2583  0288  1303               	bcf	3,6	;RP1=0, select bank0
  2584  0289  083B               	movf	?___fltol+1,w
  2585  028A  00C6               	movwf	Lcd_Write_Integer@a+1
  2586  028B  083A               	movf	?___fltol,w
  2587  028C  00C5               	movwf	Lcd_Write_Integer@a
  2588  028D  160A  118A  26BD  120A  118A  	fcall	_Lcd_Write_Integer
  2589                           
  2590                           ;Config.c: 197:         Lcd_Write_String(" Cm de: ");
  2591  0292  3051               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2592  0293  00F5               	movwf	Lcd_Write_String@a
  2593  0294  3080               	movlw	128
  2594  0295  00F6               	movwf	Lcd_Write_String@a+1
  2595  0296  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2596                           
  2597                           ;Config.c: 198:         Lcd_Write_Integer(CmAntiHorario);
  2598  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2599  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2600  029D  085D               	movf	_CmAntiHorario+1,w
  2601  029E  00C6               	movwf	Lcd_Write_Integer@a+1
  2602  029F  085C               	movf	_CmAntiHorario,w
  2603  02A0  00C5               	movwf	Lcd_Write_Integer@a
  2604  02A1  160A  118A  26BD   	fcall	_Lcd_Write_Integer
  2605  02A4  0008               	return
  2606  02A5                     __end_of_Encoder:	
  2607                           
  2608                           	psect	text8
  2609  09E3                     __ptext8:	
  2610 ;; *************** function ___fltol *****************
  2611 ;; Defined at:
  2612 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  f1              4   26[BANK0 ] int 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  exp1            1   36[BANK0 ] unsigned char 
  2617 ;;  sign1           1   35[BANK0 ] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  4   26[BANK0 ] long 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, status,0
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2627 ;;      Params:         0       4       0       0       0
  2628 ;;      Locals:         0       2       0       0       0
  2629 ;;      Temps:          0       5       0       0       0
  2630 ;;      Totals:         0      11       0       0       0
  2631 ;;Total ram usage:       11 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_Encoder
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           
  2641                           ;psect for function ___fltol
  2642  09E3                     ___fltol:	
  2643                           
  2644                           ;incstack = 0
  2645                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  2646  09E3  1003               	clrc
  2647  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  2648  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  2649  09E6  0D3C               	rlf	___fltol@f1+2,w
  2650  09E7  0D3D               	rlf	___fltol@f1+3,w
  2651  09E8  00BE               	movwf	??___fltol
  2652  09E9  083E               	movf	??___fltol,w
  2653  09EA  00C4               	movwf	___fltol@exp1
  2654  09EB  0844               	movf	___fltol@exp1,w
  2655  09EC  1D03               	btfss	3,2
  2656  09ED  29F7               	goto	l2667
  2657  09EE                     l2663:	
  2658  09EE  3000               	movlw	0
  2659  09EF  00BD               	movwf	?___fltol+3
  2660  09F0  3000               	movlw	0
  2661  09F1  00BC               	movwf	?___fltol+2
  2662  09F2  3000               	movlw	0
  2663  09F3  00BB               	movwf	?___fltol+1
  2664  09F4  3000               	movlw	0
  2665  09F5  00BA               	movwf	?___fltol
  2666  09F6  0008               	return
  2667  09F7                     l2667:	
  2668  09F7  083A               	movf	___fltol@f1,w
  2669  09F8  00BE               	movwf	??___fltol
  2670  09F9  083B               	movf	___fltol@f1+1,w
  2671  09FA  00BF               	movwf	??___fltol+1
  2672  09FB  083C               	movf	___fltol@f1+2,w
  2673  09FC  00C0               	movwf	??___fltol+2
  2674  09FD  083D               	movf	___fltol@f1+3,w
  2675  09FE  00C1               	movwf	??___fltol+3
  2676  09FF  301F               	movlw	31
  2677  0A00                     u3505:	
  2678  0A00  1003               	clrc
  2679  0A01  0CC1               	rrf	??___fltol+3,f
  2680  0A02  0CC0               	rrf	??___fltol+2,f
  2681  0A03  0CBF               	rrf	??___fltol+1,f
  2682  0A04  0CBE               	rrf	??___fltol,f
  2683  0A05  3EFF               	addlw	-1
  2684  0A06  1D03               	skipz
  2685  0A07  2A00               	goto	u3505
  2686  0A08  083E               	movf	??___fltol,w
  2687  0A09  00C2               	movwf	??___fltol+4
  2688  0A0A  0842               	movf	??___fltol+4,w
  2689  0A0B  00C3               	movwf	___fltol@sign1
  2690  0A0C  17BC               	bsf	___fltol@f1+2,7
  2691  0A0D  30FF               	movlw	255
  2692  0A0E  05BA               	andwf	___fltol@f1,f
  2693  0A0F  30FF               	movlw	255
  2694  0A10  05BB               	andwf	___fltol@f1+1,f
  2695  0A11  30FF               	movlw	255
  2696  0A12  05BC               	andwf	___fltol@f1+2,f
  2697  0A13  3000               	movlw	0
  2698  0A14  05BD               	andwf	___fltol@f1+3,f
  2699  0A15  3096               	movlw	150
  2700  0A16  02C4               	subwf	___fltol@exp1,f
  2701  0A17  1FC4               	btfss	___fltol@exp1,7
  2702  0A18  2A2E               	goto	l2685
  2703  0A19  0844               	movf	___fltol@exp1,w
  2704  0A1A  3A80               	xorlw	128
  2705  0A1B  3E97               	addlw	151
  2706  0A1C  1C03               	btfss	3,0
  2707  0A1D  29EE               	goto	l2663
  2708  0A1E                     l2683:	
  2709  0A1E  3001               	movlw	1
  2710  0A1F                     u3535:	
  2711  0A1F  1003               	clrc
  2712  0A20  0CBD               	rrf	___fltol@f1+3,f
  2713  0A21  0CBC               	rrf	___fltol@f1+2,f
  2714  0A22  0CBB               	rrf	___fltol@f1+1,f
  2715  0A23  0CBA               	rrf	___fltol@f1,f
  2716  0A24  3EFF               	addlw	-1
  2717  0A25  1D03               	skipz
  2718  0A26  2A1F               	goto	u3535
  2719  0A27  3001               	movlw	1
  2720  0A28  00BE               	movwf	??___fltol
  2721  0A29  083E               	movf	??___fltol,w
  2722  0A2A  07C4               	addwf	___fltol@exp1,f
  2723  0A2B  1903               	btfsc	3,2
  2724  0A2C  2A41               	goto	l2693
  2725  0A2D  2A1E               	goto	l2683
  2726  0A2E                     l2685:	
  2727  0A2E  3020               	movlw	32
  2728  0A2F  0244               	subwf	___fltol@exp1,w
  2729  0A30  1803               	btfsc	3,0
  2730  0A31  29EE               	goto	l2663
  2731  0A32                     l614:	
  2732  0A32  0844               	movf	___fltol@exp1,w
  2733  0A33  1903               	btfsc	3,2
  2734  0A34  2A41               	goto	l2693
  2735  0A35  3001               	movlw	1
  2736  0A36  00BE               	movwf	??___fltol
  2737  0A37                     u3565:	
  2738  0A37  1003               	clrc
  2739  0A38  0DBA               	rlf	___fltol@f1,f
  2740  0A39  0DBB               	rlf	___fltol@f1+1,f
  2741  0A3A  0DBC               	rlf	___fltol@f1+2,f
  2742  0A3B  0DBD               	rlf	___fltol@f1+3,f
  2743  0A3C  0BBE               	decfsz	??___fltol,f
  2744  0A3D  2A37               	goto	u3565
  2745  0A3E  3001               	movlw	1
  2746  0A3F  02C4               	subwf	___fltol@exp1,f
  2747  0A40  2A32               	goto	l614
  2748  0A41                     l2693:	
  2749  0A41  0843               	movf	___fltol@sign1,w
  2750  0A42  1903               	btfsc	3,2
  2751  0A43  0008               	return
  2752  0A44  09BA               	comf	___fltol@f1,f
  2753  0A45  09BB               	comf	___fltol@f1+1,f
  2754  0A46  09BC               	comf	___fltol@f1+2,f
  2755  0A47  09BD               	comf	___fltol@f1+3,f
  2756  0A48  0ABA               	incf	___fltol@f1,f
  2757  0A49  1903               	skipnz
  2758  0A4A  0ABB               	incf	___fltol@f1+1,f
  2759  0A4B  1903               	skipnz
  2760  0A4C  0ABC               	incf	___fltol@f1+2,f
  2761  0A4D  1903               	skipnz
  2762  0A4E  0ABD               	incf	___fltol@f1+3,f
  2763  0A4F  0008               	return
  2764  0A50                     __end_of___fltol:	
  2765                           
  2766                           	psect	text9
  2767  02A5                     __ptext9:	
  2768 ;; *************** function ___fladd *****************
  2769 ;; Defined at:
  2770 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  b               4    0[BANK0 ] long 
  2773 ;;  a               4    4[BANK0 ] long 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  grs             1   19[BANK0 ] unsigned char 
  2776 ;;  bexp            1   18[BANK0 ] unsigned char 
  2777 ;;  aexp            1   17[BANK0 ] unsigned char 
  2778 ;;  signs           1   16[BANK0 ] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  4    0[BANK0 ] unsigned char 
  2781 ;; Registers used:
  2782 ;;		wreg, status,2, status,0, btemp+1
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2788 ;;      Params:         0       8       0       0       0
  2789 ;;      Locals:         0       4       0       0       0
  2790 ;;      Temps:          0       8       0       0       0
  2791 ;;      Totals:         0      20       0       0       0
  2792 ;;Total ram usage:       20 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; This function calls:
  2795 ;;		Nothing
  2796 ;; This function is called by:
  2797 ;;		_Encoder
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           
  2802                           ;psect for function ___fladd
  2803  02A5                     ___fladd:	
  2804                           
  2805                           ;incstack = 0
  2806                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  2807  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2808  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  2809  02A7  0823               	movf	___fladd@b+3,w
  2810  02A8  3980               	andlw	128
  2811  02A9  00A8               	movwf	??___fladd
  2812  02AA  0828               	movf	??___fladd,w
  2813  02AB  00B0               	movwf	___fladd@signs
  2814  02AC  0823               	movf	___fladd@b+3,w
  2815  02AD  00A8               	movwf	??___fladd
  2816  02AE  0728               	addwf	??___fladd,w
  2817  02AF  00A9               	movwf	??___fladd+1
  2818  02B0  0829               	movf	??___fladd+1,w
  2819  02B1  00B2               	movwf	___fladd@bexp
  2820  02B2  1BA2               	btfsc	___fladd@b+2,7
  2821  02B3  1432               	bsf	___fladd@bexp,0
  2822  02B4  0832               	movf	___fladd@bexp,w
  2823  02B5  1903               	btfsc	3,2
  2824  02B6  2AC5               	goto	l2715
  2825  02B7  0A32               	incf	___fladd@bexp,w
  2826  02B8  1D03               	btfss	3,2
  2827  02B9  2AC2               	goto	l2711
  2828  02BA  3000               	movlw	0
  2829  02BB  00A3               	movwf	___fladd@b+3
  2830  02BC  3000               	movlw	0
  2831  02BD  00A2               	movwf	___fladd@b+2
  2832  02BE  3000               	movlw	0
  2833  02BF  00A1               	movwf	___fladd@b+1
  2834  02C0  3000               	movlw	0
  2835  02C1  00A0               	movwf	___fladd@b
  2836  02C2                     l2711:	
  2837  02C2  17A2               	bsf	___fladd@b+2,7
  2838  02C3  01A3               	clrf	___fladd@b+3
  2839  02C4  2ACD               	goto	l2717
  2840  02C5                     l2715:	
  2841  02C5  3000               	movlw	0
  2842  02C6  00A3               	movwf	___fladd@b+3
  2843  02C7  3000               	movlw	0
  2844  02C8  00A2               	movwf	___fladd@b+2
  2845  02C9  3000               	movlw	0
  2846  02CA  00A1               	movwf	___fladd@b+1
  2847  02CB  3000               	movlw	0
  2848  02CC  00A0               	movwf	___fladd@b
  2849  02CD                     l2717:	
  2850  02CD  0827               	movf	___fladd@a+3,w
  2851  02CE  3980               	andlw	128
  2852  02CF  00A8               	movwf	??___fladd
  2853  02D0  0828               	movf	??___fladd,w
  2854  02D1  00B1               	movwf	___fladd@aexp
  2855  02D2  0831               	movf	___fladd@aexp,w
  2856  02D3  0630               	xorwf	___fladd@signs,w
  2857  02D4  1D03               	btfss	3,2
  2858  02D5  1730               	bsf	___fladd@signs,6
  2859  02D6  0827               	movf	___fladd@a+3,w
  2860  02D7  00A8               	movwf	??___fladd
  2861  02D8  0728               	addwf	??___fladd,w
  2862  02D9  00A9               	movwf	??___fladd+1
  2863  02DA  0829               	movf	??___fladd+1,w
  2864  02DB  00B1               	movwf	___fladd@aexp
  2865  02DC  1BA6               	btfsc	___fladd@a+2,7
  2866  02DD  1431               	bsf	___fladd@aexp,0
  2867  02DE  0831               	movf	___fladd@aexp,w
  2868  02DF  1903               	btfsc	3,2
  2869  02E0  2AEF               	goto	l2739
  2870  02E1  0A31               	incf	___fladd@aexp,w
  2871  02E2  1D03               	btfss	3,2
  2872  02E3  2AEC               	goto	l2735
  2873  02E4  3000               	movlw	0
  2874  02E5  00A7               	movwf	___fladd@a+3
  2875  02E6  3000               	movlw	0
  2876  02E7  00A6               	movwf	___fladd@a+2
  2877  02E8  3000               	movlw	0
  2878  02E9  00A5               	movwf	___fladd@a+1
  2879  02EA  3000               	movlw	0
  2880  02EB  00A4               	movwf	___fladd@a
  2881  02EC                     l2735:	
  2882  02EC  17A6               	bsf	___fladd@a+2,7
  2883  02ED  01A7               	clrf	___fladd@a+3
  2884  02EE  2AF7               	goto	l714
  2885  02EF                     l2739:	
  2886  02EF  3000               	movlw	0
  2887  02F0  00A7               	movwf	___fladd@a+3
  2888  02F1  3000               	movlw	0
  2889  02F2  00A6               	movwf	___fladd@a+2
  2890  02F3  3000               	movlw	0
  2891  02F4  00A5               	movwf	___fladd@a+1
  2892  02F5  3000               	movlw	0
  2893  02F6  00A4               	movwf	___fladd@a
  2894  02F7                     l714:	
  2895  02F7  0832               	movf	___fladd@bexp,w
  2896  02F8  0231               	subwf	___fladd@aexp,w
  2897  02F9  1803               	skipnc
  2898  02FA  2B3D               	goto	l2775
  2899  02FB  1F30               	btfss	___fladd@signs,6
  2900  02FC  2B01               	goto	l2745
  2901  02FD  3080               	movlw	128
  2902  02FE  00A8               	movwf	??___fladd
  2903  02FF  0828               	movf	??___fladd,w
  2904  0300  06B0               	xorwf	___fladd@signs,f
  2905  0301                     l2745:	
  2906  0301  0832               	movf	___fladd@bexp,w
  2907  0302  00A8               	movwf	??___fladd
  2908  0303  0828               	movf	??___fladd,w
  2909  0304  00B3               	movwf	___fladd@grs
  2910  0305  0831               	movf	___fladd@aexp,w
  2911  0306  00A8               	movwf	??___fladd
  2912  0307  0828               	movf	??___fladd,w
  2913  0308  00B2               	movwf	___fladd@bexp
  2914  0309  0833               	movf	___fladd@grs,w
  2915  030A  00A8               	movwf	??___fladd
  2916  030B  0828               	movf	??___fladd,w
  2917  030C  00B1               	movwf	___fladd@aexp
  2918  030D  0820               	movf	___fladd@b,w
  2919  030E  00A8               	movwf	??___fladd
  2920  030F  0828               	movf	??___fladd,w
  2921  0310  00B3               	movwf	___fladd@grs
  2922  0311  0824               	movf	___fladd@a,w
  2923  0312  00A8               	movwf	??___fladd
  2924  0313  0828               	movf	??___fladd,w
  2925  0314  00A0               	movwf	___fladd@b
  2926  0315  0833               	movf	___fladd@grs,w
  2927  0316  00A8               	movwf	??___fladd
  2928  0317  0828               	movf	??___fladd,w
  2929  0318  00A4               	movwf	___fladd@a
  2930  0319  0821               	movf	___fladd@b+1,w
  2931  031A  00A8               	movwf	??___fladd
  2932  031B  0828               	movf	??___fladd,w
  2933  031C  00B3               	movwf	___fladd@grs
  2934  031D  0825               	movf	___fladd@a+1,w
  2935  031E  00A8               	movwf	??___fladd
  2936  031F  0828               	movf	??___fladd,w
  2937  0320  00A1               	movwf	___fladd@b+1
  2938  0321  0833               	movf	___fladd@grs,w
  2939  0322  00A8               	movwf	??___fladd
  2940  0323  0828               	movf	??___fladd,w
  2941  0324  00A5               	movwf	___fladd@a+1
  2942  0325  0822               	movf	___fladd@b+2,w
  2943  0326  00A8               	movwf	??___fladd
  2944  0327  0828               	movf	??___fladd,w
  2945  0328  00B3               	movwf	___fladd@grs
  2946  0329  0826               	movf	___fladd@a+2,w
  2947  032A  00A8               	movwf	??___fladd
  2948  032B  0828               	movf	??___fladd,w
  2949  032C  00A2               	movwf	___fladd@b+2
  2950  032D  0833               	movf	___fladd@grs,w
  2951  032E  00A8               	movwf	??___fladd
  2952  032F  0828               	movf	??___fladd,w
  2953  0330  00A6               	movwf	___fladd@a+2
  2954  0331  0823               	movf	___fladd@b+3,w
  2955  0332  00A8               	movwf	??___fladd
  2956  0333  0828               	movf	??___fladd,w
  2957  0334  00B3               	movwf	___fladd@grs
  2958  0335  0827               	movf	___fladd@a+3,w
  2959  0336  00A8               	movwf	??___fladd
  2960  0337  0828               	movf	??___fladd,w
  2961  0338  00A3               	movwf	___fladd@b+3
  2962  0339  0833               	movf	___fladd@grs,w
  2963  033A  00A8               	movwf	??___fladd
  2964  033B  0828               	movf	??___fladd,w
  2965  033C  00A7               	movwf	___fladd@a+3
  2966  033D                     l2775:	
  2967  033D  01B3               	clrf	___fladd@grs
  2968  033E  0831               	movf	___fladd@aexp,w
  2969  033F  00A8               	movwf	??___fladd
  2970  0340  01A9               	clrf	??___fladd+1
  2971  0341  0829               	movf	??___fladd+1,w
  2972  0342  00AB               	movwf	??___fladd+3
  2973  0343  0832               	movf	___fladd@bexp,w
  2974  0344  0228               	subwf	??___fladd,w
  2975  0345  00AA               	movwf	??___fladd+2
  2976  0346  1C03               	skipc
  2977  0347  03AB               	decf	??___fladd+3,f
  2978  0348  082B               	movf	??___fladd+3,w
  2979  0349  3A80               	xorlw	128
  2980  034A  00FF               	movwf	127
  2981  034B  3080               	movlw	128
  2982  034C  027F               	subwf	127,w
  2983  034D  1D03               	skipz
  2984  034E  2B51               	goto	u3685
  2985  034F  301A               	movlw	26
  2986  0350  022A               	subwf	??___fladd+2,w
  2987  0351                     u3685:	
  2988  0351  1C03               	skipc
  2989  0352  2B8A               	goto	l2793
  2990  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2992  0355  0823               	movf	___fladd@b+3,w
  2993  0356  0422               	iorwf	___fladd@b+2,w
  2994  0357  0421               	iorwf	___fladd@b+1,w
  2995  0358  0420               	iorwf	___fladd@b,w
  2996  0359  1903               	btfsc	3,2
  2997  035A  2B5D               	goto	u3690
  2998  035B  3001               	movlw	1
  2999  035C  2B5E               	goto	u3700
  3000  035D                     u3690:	
  3001  035D  3000               	movlw	0
  3002  035E                     u3700:	
  3003  035E  00A8               	movwf	??___fladd
  3004  035F  0828               	movf	??___fladd,w
  3005  0360  00B3               	movwf	___fladd@grs
  3006  0361  3000               	movlw	0
  3007  0362  00A3               	movwf	___fladd@b+3
  3008  0363  3000               	movlw	0
  3009  0364  00A2               	movwf	___fladd@b+2
  3010  0365  3000               	movlw	0
  3011  0366  00A1               	movwf	___fladd@b+1
  3012  0367  3000               	movlw	0
  3013  0368  00A0               	movwf	___fladd@b
  3014  0369  0831               	movf	___fladd@aexp,w
  3015  036A  00A8               	movwf	??___fladd
  3016  036B  0828               	movf	??___fladd,w
  3017  036C  00B2               	movwf	___fladd@bexp
  3018  036D  2B90               	goto	l718
  3019  036E                     l720:	
  3020  036E  1C33               	btfss	___fladd@grs,0
  3021  036F  2B79               	goto	l2783
  3022  0370  0833               	movf	___fladd@grs,w
  3023  0371  00A8               	movwf	??___fladd
  3024  0372  1003               	clrc
  3025  0373  0C28               	rrf	??___fladd,w
  3026  0374  3801               	iorlw	1
  3027  0375  00A9               	movwf	??___fladd+1
  3028  0376  0829               	movf	??___fladd+1,w
  3029  0377  00B3               	movwf	___fladd@grs
  3030  0378  2B7B               	goto	l2785
  3031  0379                     l2783:	
  3032  0379  1003               	clrc
  3033  037A  0CB3               	rrf	___fladd@grs,f
  3034  037B                     l2785:	
  3035  037B  1820               	btfsc	___fladd@b,0
  3036  037C  17B3               	bsf	___fladd@grs,7
  3037  037D  3001               	movlw	1
  3038  037E  00A8               	movwf	??___fladd
  3039  037F                     u3735:	
  3040  037F  0D23               	rlf	___fladd@b+3,w
  3041  0380  0CA3               	rrf	___fladd@b+3,f
  3042  0381  0CA2               	rrf	___fladd@b+2,f
  3043  0382  0CA1               	rrf	___fladd@b+1,f
  3044  0383  0CA0               	rrf	___fladd@b,f
  3045  0384  0BA8               	decfsz	??___fladd& (0+127),f
  3046  0385  2B7F               	goto	u3735
  3047  0386  3001               	movlw	1
  3048  0387  00A8               	movwf	??___fladd
  3049  0388  0828               	movf	??___fladd,w
  3050  0389  07B2               	addwf	___fladd@bexp,f
  3051  038A                     l2793:	
  3052  038A  1283               	bcf	3,5	;RP0=0, select bank0
  3053  038B  1303               	bcf	3,6	;RP1=0, select bank0
  3054  038C  0831               	movf	___fladd@aexp,w
  3055  038D  0232               	subwf	___fladd@bexp,w
  3056  038E  1C03               	skipc
  3057  038F  2B6E               	goto	l720
  3058  0390                     l718:	
  3059  0390  1B30               	btfsc	___fladd@signs,6
  3060  0391  2BD1               	goto	l2819
  3061  0392  0832               	movf	___fladd@bexp,w
  3062  0393  1D03               	btfss	3,2
  3063  0394  2B9E               	goto	l2801
  3064  0395  3000               	movlw	0
  3065  0396  00A3               	movwf	?___fladd+3
  3066  0397  3000               	movlw	0
  3067  0398  00A2               	movwf	?___fladd+2
  3068  0399  3000               	movlw	0
  3069  039A  00A1               	movwf	?___fladd+1
  3070  039B  3000               	movlw	0
  3071  039C  00A0               	movwf	?___fladd
  3072  039D  0008               	return
  3073  039E                     l2801:	
  3074  039E  0824               	movf	___fladd@a,w
  3075  039F  07A0               	addwf	___fladd@b,f
  3076  03A0  0825               	movf	___fladd@a+1,w
  3077  03A1  1103               	clrz
  3078  03A2  1803               	skipnc
  3079  03A3  3E01               	addlw	1
  3080  03A4  1D03               	btfss	3,2
  3081  03A5  07A1               	addwf	___fladd@b+1,f
  3082  03A6  0826               	movf	___fladd@a+2,w
  3083  03A7  1103               	clrz
  3084  03A8  1803               	skipnc
  3085  03A9  3E01               	addlw	1
  3086  03AA  1D03               	btfss	3,2
  3087  03AB  07A2               	addwf	___fladd@b+2,f
  3088  03AC  0827               	movf	___fladd@a+3,w
  3089  03AD  1103               	clrz
  3090  03AE  1803               	skipnc
  3091  03AF  3E01               	addlw	1
  3092  03B0  1D03               	btfss	3,2
  3093  03B1  07A3               	addwf	___fladd@b+3,f
  3094  03B2  1C23               	btfss	___fladd@b+3,0
  3095  03B3  2C73               	goto	l2853
  3096  03B4  1C33               	btfss	___fladd@grs,0
  3097  03B5  2BBF               	goto	l2809
  3098  03B6  0833               	movf	___fladd@grs,w
  3099  03B7  00A8               	movwf	??___fladd
  3100  03B8  1003               	clrc
  3101  03B9  0C28               	rrf	??___fladd,w
  3102  03BA  3801               	iorlw	1
  3103  03BB  00A9               	movwf	??___fladd+1
  3104  03BC  0829               	movf	??___fladd+1,w
  3105  03BD  00B3               	movwf	___fladd@grs
  3106  03BE  2BC1               	goto	l2811
  3107  03BF                     l2809:	
  3108  03BF  1003               	clrc
  3109  03C0  0CB3               	rrf	___fladd@grs,f
  3110  03C1                     l2811:	
  3111  03C1  1820               	btfsc	___fladd@b,0
  3112  03C2  17B3               	bsf	___fladd@grs,7
  3113  03C3  3001               	movlw	1
  3114  03C4  00A8               	movwf	??___fladd
  3115  03C5                     u3815:	
  3116  03C5  0D23               	rlf	___fladd@b+3,w
  3117  03C6  0CA3               	rrf	___fladd@b+3,f
  3118  03C7  0CA2               	rrf	___fladd@b+2,f
  3119  03C8  0CA1               	rrf	___fladd@b+1,f
  3120  03C9  0CA0               	rrf	___fladd@b,f
  3121  03CA  0BA8               	decfsz	??___fladd& (0+127),f
  3122  03CB  2BC5               	goto	u3815
  3123  03CC  3001               	movlw	1
  3124  03CD  00A8               	movwf	??___fladd
  3125  03CE  0828               	movf	??___fladd,w
  3126  03CF  07B2               	addwf	___fladd@bexp,f
  3127  03D0  2C73               	goto	l2853
  3128  03D1                     l2819:	
  3129  03D1  0823               	movf	___fladd@b+3,w
  3130  03D2  3A80               	xorlw	128
  3131  03D3  00FF               	movwf	127
  3132  03D4  0827               	movf	___fladd@a+3,w
  3133  03D5  3A80               	xorlw	128
  3134  03D6  027F               	subwf	127,w
  3135  03D7  1D03               	skipz
  3136  03D8  2BE3               	goto	u3823
  3137  03D9  0826               	movf	___fladd@a+2,w
  3138  03DA  0222               	subwf	___fladd@b+2,w
  3139  03DB  1D03               	skipz
  3140  03DC  2BE3               	goto	u3823
  3141  03DD  0825               	movf	___fladd@a+1,w
  3142  03DE  0221               	subwf	___fladd@b+1,w
  3143  03DF  1D03               	skipz
  3144  03E0  2BE3               	goto	u3823
  3145  03E1  0824               	movf	___fladd@a,w
  3146  03E2  0220               	subwf	___fladd@b,w
  3147  03E3                     u3823:	
  3148  03E3  1803               	skipnc
  3149  03E4  2C3B               	goto	l2829
  3150  03E5  30FF               	movlw	255
  3151  03E6  00A8               	movwf	??___fladd
  3152  03E7  30FF               	movlw	255
  3153  03E8  00A9               	movwf	??___fladd+1
  3154  03E9  30FF               	movlw	255
  3155  03EA  00AA               	movwf	??___fladd+2
  3156  03EB  30FF               	movlw	255
  3157  03EC  00AB               	movwf	??___fladd+3
  3158  03ED  0824               	movf	___fladd@a,w
  3159  03EE  00AC               	movwf	??___fladd+4
  3160  03EF  0825               	movf	___fladd@a+1,w
  3161  03F0  00AD               	movwf	??___fladd+5
  3162  03F1  0826               	movf	___fladd@a+2,w
  3163  03F2  00AE               	movwf	??___fladd+6
  3164  03F3  0827               	movf	___fladd@a+3,w
  3165  03F4  00AF               	movwf	??___fladd+7
  3166  03F5  0820               	movf	___fladd@b,w
  3167  03F6  02AC               	subwf	??___fladd+4,f
  3168  03F7  0821               	movf	___fladd@b+1,w
  3169  03F8  1C03               	skipc
  3170  03F9  0F21               	incfsz	___fladd@b+1,w
  3171  03FA  2BFC               	goto	u3831
  3172  03FB  2BFD               	goto	u3832
  3173  03FC                     u3831:	
  3174  03FC  02AD               	subwf	??___fladd+5,f
  3175  03FD                     u3832:	
  3176  03FD  0822               	movf	___fladd@b+2,w
  3177  03FE  1C03               	skipc
  3178  03FF  0F22               	incfsz	___fladd@b+2,w
  3179  0400  2C02               	goto	u3833
  3180  0401  2C03               	goto	u3834
  3181  0402                     u3833:	
  3182  0402  02AE               	subwf	??___fladd+6,f
  3183  0403                     u3834:	
  3184  0403  0823               	movf	___fladd@b+3,w
  3185  0404  1C03               	skipc
  3186  0405  0F23               	incfsz	___fladd@b+3,w
  3187  0406  2C08               	goto	u3835
  3188  0407  2C09               	goto	u3836
  3189  0408                     u3835:	
  3190  0408  02AF               	subwf	??___fladd+7,f
  3191  0409                     u3836:	
  3192  0409  082C               	movf	??___fladd+4,w
  3193  040A  07A8               	addwf	??___fladd,f
  3194  040B  082D               	movf	??___fladd+5,w
  3195  040C  1803               	skipnc
  3196  040D  0F2D               	incfsz	??___fladd+5,w
  3197  040E  2C10               	goto	u3840
  3198  040F  2C11               	goto	u3841
  3199  0410                     u3840:	
  3200  0410  07A9               	addwf	??___fladd+1,f
  3201  0411                     u3841:	
  3202  0411  082E               	movf	??___fladd+6,w
  3203  0412  1803               	skipnc
  3204  0413  0F2E               	incfsz	??___fladd+6,w
  3205  0414  2C16               	goto	u3842
  3206  0415  2C17               	goto	u3843
  3207  0416                     u3842:	
  3208  0416  07AA               	addwf	??___fladd+2,f
  3209  0417                     u3843:	
  3210  0417  082F               	movf	??___fladd+7,w
  3211  0418  1803               	skipnc
  3212  0419  0A2F               	incf	??___fladd+7,w
  3213  041A  07AB               	addwf	??___fladd+3,f
  3214  041B  082B               	movf	??___fladd+3,w
  3215  041C  00A3               	movwf	___fladd@b+3
  3216  041D  082A               	movf	??___fladd+2,w
  3217  041E  00A2               	movwf	___fladd@b+2
  3218  041F  0829               	movf	??___fladd+1,w
  3219  0420  00A1               	movwf	___fladd@b+1
  3220  0421  0828               	movf	??___fladd,w
  3221  0422  00A0               	movwf	___fladd@b
  3222  0423  3080               	movlw	128
  3223  0424  00A8               	movwf	??___fladd
  3224  0425  0828               	movf	??___fladd,w
  3225  0426  06B0               	xorwf	___fladd@signs,f
  3226  0427  09B3               	comf	___fladd@grs,f
  3227  0428  0AB3               	incf	___fladd@grs,f
  3228  0429  0833               	movf	___fladd@grs,w
  3229  042A  1D03               	btfss	3,2
  3230  042B  2C49               	goto	l735
  3231  042C  3001               	movlw	1
  3232  042D  07A0               	addwf	___fladd@b,f
  3233  042E  3000               	movlw	0
  3234  042F  1803               	skipnc
  3235  0430  3001               	movlw	1
  3236  0431  07A1               	addwf	___fladd@b+1,f
  3237  0432  3000               	movlw	0
  3238  0433  1803               	skipnc
  3239  0434  3001               	movlw	1
  3240  0435  07A2               	addwf	___fladd@b+2,f
  3241  0436  3000               	movlw	0
  3242  0437  1803               	skipnc
  3243  0438  3001               	movlw	1
  3244  0439  07A3               	addwf	___fladd@b+3,f
  3245  043A  2C49               	goto	l735
  3246  043B                     l2829:	
  3247  043B  0824               	movf	___fladd@a,w
  3248  043C  02A0               	subwf	___fladd@b,f
  3249  043D  0825               	movf	___fladd@a+1,w
  3250  043E  1C03               	skipc
  3251  043F  0F25               	incfsz	___fladd@a+1,w
  3252  0440  02A1               	subwf	___fladd@b+1,f
  3253  0441  0826               	movf	___fladd@a+2,w
  3254  0442  1C03               	skipc
  3255  0443  0F26               	incfsz	___fladd@a+2,w
  3256  0444  02A2               	subwf	___fladd@b+2,f
  3257  0445  0827               	movf	___fladd@a+3,w
  3258  0446  1C03               	skipc
  3259  0447  0F27               	incfsz	___fladd@a+3,w
  3260  0448  02A3               	subwf	___fladd@b+3,f
  3261  0449                     l735:	
  3262  0449  0823               	movf	___fladd@b+3,w
  3263  044A  0422               	iorwf	___fladd@b+2,w
  3264  044B  0421               	iorwf	___fladd@b+1,w
  3265  044C  0420               	iorwf	___fladd@b,w
  3266  044D  1D03               	skipz
  3267  044E  2C71               	goto	l2851
  3268  044F  0833               	movf	___fladd@grs,w
  3269  0450  1D03               	btfss	3,2
  3270  0451  2C71               	goto	l2851
  3271  0452  3000               	movlw	0
  3272  0453  00A3               	movwf	?___fladd+3
  3273  0454  3000               	movlw	0
  3274  0455  00A2               	movwf	?___fladd+2
  3275  0456  3000               	movlw	0
  3276  0457  00A1               	movwf	?___fladd+1
  3277  0458  3000               	movlw	0
  3278  0459  00A0               	movwf	?___fladd
  3279  045A  0008               	return
  3280  045B                     l2837:	
  3281  045B  3001               	movlw	1
  3282  045C  00A8               	movwf	??___fladd
  3283  045D                     u3885:	
  3284  045D  1003               	clrc
  3285  045E  0DA0               	rlf	___fladd@b,f
  3286  045F  0DA1               	rlf	___fladd@b+1,f
  3287  0460  0DA2               	rlf	___fladd@b+2,f
  3288  0461  0DA3               	rlf	___fladd@b+3,f
  3289  0462  0BA8               	decfsz	??___fladd,f
  3290  0463  2C5D               	goto	u3885
  3291  0464  1BB3               	btfsc	___fladd@grs,7
  3292  0465  1420               	bsf	___fladd@b,0
  3293  0466  1C33               	btfss	___fladd@grs,0
  3294  0467  2C6A               	goto	l2845
  3295  0468  1403               	setc
  3296  0469  2C6B               	goto	L4
  3297  046A                     l2845:	
  3298  046A  1003               	clrc
  3299  046B                     L4:	
  3300  046B  0DB3               	rlf	___fladd@grs,f
  3301  046C  0832               	movf	___fladd@bexp,w
  3302  046D  1903               	btfsc	3,2
  3303  046E  2C71               	goto	l2851
  3304  046F  3001               	movlw	1
  3305  0470  02B2               	subwf	___fladd@bexp,f
  3306  0471                     l2851:	
  3307  0471  1FA2               	btfss	___fladd@b+2,7
  3308  0472  2C5B               	goto	l2837
  3309  0473                     l2853:	
  3310  0473  01B1               	clrf	___fladd@aexp
  3311  0474  1FB3               	btfss	___fladd@grs,7
  3312  0475  2C7E               	goto	l2863
  3313  0476  0833               	movf	___fladd@grs,w
  3314  0477  397F               	andlw	127
  3315  0478  1903               	btfsc	3,2
  3316  0479  1820               	btfsc	___fladd@b,0
  3317  047A  2C7C               	goto	l2859
  3318  047B  2C7E               	goto	l2863
  3319  047C                     l2859:	
  3320  047C  01B1               	clrf	___fladd@aexp
  3321  047D  0AB1               	incf	___fladd@aexp,f
  3322  047E                     l2863:	
  3323  047E  0831               	movf	___fladd@aexp,w
  3324  047F  1903               	btfsc	3,2
  3325  0480  2CB1               	goto	l748
  3326  0481  3001               	movlw	1
  3327  0482  07A0               	addwf	___fladd@b,f
  3328  0483  3000               	movlw	0
  3329  0484  1803               	skipnc
  3330  0485  3001               	movlw	1
  3331  0486  07A1               	addwf	___fladd@b+1,f
  3332  0487  3000               	movlw	0
  3333  0488  1803               	skipnc
  3334  0489  3001               	movlw	1
  3335  048A  07A2               	addwf	___fladd@b+2,f
  3336  048B  3000               	movlw	0
  3337  048C  1803               	skipnc
  3338  048D  3001               	movlw	1
  3339  048E  07A3               	addwf	___fladd@b+3,f
  3340  048F  1C23               	btfss	___fladd@b+3,0
  3341  0490  2CB1               	goto	l748
  3342  0491  0820               	movf	___fladd@b,w
  3343  0492  00A8               	movwf	??___fladd
  3344  0493  0821               	movf	___fladd@b+1,w
  3345  0494  00A9               	movwf	??___fladd+1
  3346  0495  0822               	movf	___fladd@b+2,w
  3347  0496  00AA               	movwf	??___fladd+2
  3348  0497  0823               	movf	___fladd@b+3,w
  3349  0498  00AB               	movwf	??___fladd+3
  3350  0499  3001               	movlw	1
  3351  049A  00AC               	movwf	??___fladd+4
  3352  049B                     u3985:	
  3353  049B  0D2B               	rlf	??___fladd+3,w
  3354  049C  0CAB               	rrf	??___fladd+3,f
  3355  049D  0CAA               	rrf	??___fladd+2,f
  3356  049E  0CA9               	rrf	??___fladd+1,f
  3357  049F  0CA8               	rrf	??___fladd,f
  3358  04A0  0BAC               	decfsz	??___fladd+4,f
  3359  04A1  2C9B               	goto	u3985
  3360  04A2  082B               	movf	??___fladd+3,w
  3361  04A3  00A3               	movwf	___fladd@b+3
  3362  04A4  082A               	movf	??___fladd+2,w
  3363  04A5  00A2               	movwf	___fladd@b+2
  3364  04A6  0829               	movf	??___fladd+1,w
  3365  04A7  00A1               	movwf	___fladd@b+1
  3366  04A8  0828               	movf	??___fladd,w
  3367  04A9  00A0               	movwf	___fladd@b
  3368  04AA  0A32               	incf	___fladd@bexp,w
  3369  04AB  1903               	btfsc	3,2
  3370  04AC  2CB1               	goto	l748
  3371  04AD  3001               	movlw	1
  3372  04AE  00A8               	movwf	??___fladd
  3373  04AF  0828               	movf	??___fladd,w
  3374  04B0  07B2               	addwf	___fladd@bexp,f
  3375  04B1                     l748:	
  3376  04B1  0A32               	incf	___fladd@bexp,w
  3377  04B2  1D03               	btfss	3,2
  3378  04B3  0832               	movf	___fladd@bexp,w
  3379  04B4  1D03               	btfss	3,2
  3380  04B5  2CC1               	goto	l2881
  3381  04B6  3000               	movlw	0
  3382  04B7  00A3               	movwf	___fladd@b+3
  3383  04B8  3000               	movlw	0
  3384  04B9  00A2               	movwf	___fladd@b+2
  3385  04BA  3000               	movlw	0
  3386  04BB  00A1               	movwf	___fladd@b+1
  3387  04BC  3000               	movlw	0
  3388  04BD  00A0               	movwf	___fladd@b
  3389  04BE  0832               	movf	___fladd@bexp,w
  3390  04BF  1903               	btfsc	3,2
  3391  04C0  01B0               	clrf	___fladd@signs
  3392  04C1                     l2881:	
  3393  04C1  1C32               	btfss	___fladd@bexp,0
  3394  04C2  2CC5               	goto	l2885
  3395  04C3  17A2               	bsf	___fladd@b+2,7
  3396  04C4  2CC9               	goto	l756
  3397  04C5                     l2885:	
  3398  04C5  307F               	movlw	127
  3399  04C6  00A8               	movwf	??___fladd
  3400  04C7  0828               	movf	??___fladd,w
  3401  04C8  05A2               	andwf	___fladd@b+2,f
  3402  04C9                     l756:	
  3403  04C9  0832               	movf	___fladd@bexp,w
  3404  04CA  00A8               	movwf	??___fladd
  3405  04CB  1003               	clrc
  3406  04CC  0C28               	rrf	??___fladd,w
  3407  04CD  00A9               	movwf	??___fladd+1
  3408  04CE  0829               	movf	??___fladd+1,w
  3409  04CF  00A3               	movwf	___fladd@b+3
  3410  04D0  1FB0               	btfss	___fladd@signs,7
  3411  04D1  0008               	return
  3412  04D2  17A3               	bsf	___fladd@b+3,7
  3413  04D3  0008               	return
  3414  04D4                     __end_of___fladd:	
  3415                           
  3416                           	psect	text10
  3417  0CA8                     __ptext10:	
  3418 ;; *************** function _VerificarInversionGiro *****************
  3419 ;; Defined at:
  3420 ;;		line 158 in file "Config.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  2  297[None  ] int 
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3434 ;;      Params:         0       0       0       0       0
  3435 ;;      Locals:         0       0       0       0       0
  3436 ;;      Temps:          0       0       0       0       0
  3437 ;;      Totals:         0       0       0       0       0
  3438 ;;Total ram usage:        0 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; Hardware stack levels required when called:    2
  3441 ;; This function calls:
  3442 ;;		___flge
  3443 ;;		___flmul
  3444 ;;		___xxtofl
  3445 ;; This function is called by:
  3446 ;;		_Encoder
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           
  3451                           ;psect for function _VerificarInversionGiro
  3452  0CA8                     _VerificarInversionGiro:	
  3453                           
  3454                           ;Config.c: 159:     if (RC0 && (Grados * 0.97 >= CmHorario)) {
  3455                           
  3456                           ;incstack = 0
  3457                           ; Regs used in _VerificarInversionGiro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3458  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  3459  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  3460  0CAA  1C07               	btfss	7,0	;volatile
  3461  0CAB  2D07               	goto	l298
  3462  0CAC  303F               	movlw	63
  3463  0CAD  00A3               	movwf	___flmul@b+3
  3464  0CAE  3078               	movlw	120
  3465  0CAF  00A2               	movwf	___flmul@b+2
  3466  0CB0  3051               	movlw	81
  3467  0CB1  00A1               	movwf	___flmul@b+1
  3468  0CB2  30EC               	movlw	236
  3469  0CB3  00A0               	movwf	___flmul@b
  3470  0CB4  0860               	movf	_Grados,w
  3471  0CB5  00F0               	movwf	___xxtofl@val
  3472  0CB6  0861               	movf	_Grados+1,w
  3473  0CB7  00F1               	movwf	___xxtofl@val+1
  3474  0CB8  3000               	movlw	0
  3475  0CB9  1BF1               	btfsc	___xxtofl@val+1,7
  3476  0CBA  30FF               	movlw	255
  3477  0CBB  00F2               	movwf	___xxtofl@val+2
  3478  0CBC  00F3               	movwf	___xxtofl@val+3
  3479  0CBD  3001               	movlw	1
  3480  0CBE  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3481  0CC3  0873               	movf	?___xxtofl+3,w
  3482  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  3483  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  3484  0CC6  00A7               	movwf	___flmul@a+3
  3485  0CC7  0872               	movf	?___xxtofl+2,w
  3486  0CC8  00A6               	movwf	___flmul@a+2
  3487  0CC9  0871               	movf	?___xxtofl+1,w
  3488  0CCA  00A5               	movwf	___flmul@a+1
  3489  0CCB  0870               	movf	?___xxtofl,w
  3490  0CCC  00A4               	movwf	___flmul@a
  3491  0CCD  120A  118A  24D4  120A  158A  	fcall	___flmul
  3492  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  3493  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  3494  0CD4  0823               	movf	?___flmul+3,w
  3495  0CD5  00BD               	movwf	___flge@ff1+3
  3496  0CD6  0822               	movf	?___flmul+2,w
  3497  0CD7  00BC               	movwf	___flge@ff1+2
  3498  0CD8  0821               	movf	?___flmul+1,w
  3499  0CD9  00BB               	movwf	___flge@ff1+1
  3500  0CDA  0820               	movf	?___flmul,w
  3501  0CDB  00BA               	movwf	___flge@ff1
  3502  0CDC  085E               	movf	_CmHorario,w
  3503  0CDD  00F0               	movwf	___xxtofl@val
  3504  0CDE  085F               	movf	_CmHorario+1,w
  3505  0CDF  00F1               	movwf	___xxtofl@val+1
  3506  0CE0  3000               	movlw	0
  3507  0CE1  1BF1               	btfsc	___xxtofl@val+1,7
  3508  0CE2  30FF               	movlw	255
  3509  0CE3  00F2               	movwf	___xxtofl@val+2
  3510  0CE4  00F3               	movwf	___xxtofl@val+3
  3511  0CE5  3001               	movlw	1
  3512  0CE6  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3513  0CEB  0873               	movf	?___xxtofl+3,w
  3514  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  3515  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  3516  0CEE  00C1               	movwf	___flge@ff2+3
  3517  0CEF  0872               	movf	?___xxtofl+2,w
  3518  0CF0  00C0               	movwf	___flge@ff2+2
  3519  0CF1  0871               	movf	?___xxtofl+1,w
  3520  0CF2  00BF               	movwf	___flge@ff2+1
  3521  0CF3  0870               	movf	?___xxtofl,w
  3522  0CF4  00BE               	movwf	___flge@ff2
  3523  0CF5  120A  158A  2370  120A  158A  	fcall	___flge
  3524  0CFA  1C03               	btfss	3,0
  3525  0CFB  2D07               	goto	l298
  3526  0CFC                     l2631:	
  3527                           
  3528                           ;Config.c: 160:         Grados = 0;
  3529  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  3530  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0CFE  01E0               	clrf	_Grados
  3532  0CFF  01E1               	clrf	_Grados+1
  3533                           
  3534                           ;Config.c: 161:         RC0 = !RC0;
  3535  0D00  3001               	movlw	1
  3536  0D01  0687               	xorwf	7,f
  3537                           
  3538                           ;Config.c: 162:         RC1 = !RC1;
  3539  0D02  3002               	movlw	2
  3540  0D03  0687               	xorwf	7,f
  3541                           
  3542                           ;Config.c: 163:         lastCm = 0;
  3543  0D04  01D8               	clrf	_lastCm
  3544  0D05  01D9               	clrf	_lastCm+1
  3545                           
  3546                           ;Config.c: 164:     } else if (RC1 && Grados * 0.97 >= CmAntiHorario) {
  3547  0D06  0008               	return
  3548  0D07                     l298:	
  3549  0D07  1283               	bcf	3,5	;RP0=0, select bank0
  3550  0D08  1303               	bcf	3,6	;RP1=0, select bank0
  3551  0D09  1C87               	btfss	7,1	;volatile
  3552  0D0A  0008               	return
  3553  0D0B  303F               	movlw	63
  3554  0D0C  00A3               	movwf	___flmul@b+3
  3555  0D0D  3078               	movlw	120
  3556  0D0E  00A2               	movwf	___flmul@b+2
  3557  0D0F  3051               	movlw	81
  3558  0D10  00A1               	movwf	___flmul@b+1
  3559  0D11  30EC               	movlw	236
  3560  0D12  00A0               	movwf	___flmul@b
  3561  0D13  0860               	movf	_Grados,w
  3562  0D14  00F0               	movwf	___xxtofl@val
  3563  0D15  0861               	movf	_Grados+1,w
  3564  0D16  00F1               	movwf	___xxtofl@val+1
  3565  0D17  3000               	movlw	0
  3566  0D18  1BF1               	btfsc	___xxtofl@val+1,7
  3567  0D19  30FF               	movlw	255
  3568  0D1A  00F2               	movwf	___xxtofl@val+2
  3569  0D1B  00F3               	movwf	___xxtofl@val+3
  3570  0D1C  3001               	movlw	1
  3571  0D1D  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3572  0D22  0873               	movf	?___xxtofl+3,w
  3573  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  3574  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0D25  00A7               	movwf	___flmul@a+3
  3576  0D26  0872               	movf	?___xxtofl+2,w
  3577  0D27  00A6               	movwf	___flmul@a+2
  3578  0D28  0871               	movf	?___xxtofl+1,w
  3579  0D29  00A5               	movwf	___flmul@a+1
  3580  0D2A  0870               	movf	?___xxtofl,w
  3581  0D2B  00A4               	movwf	___flmul@a
  3582  0D2C  120A  118A  24D4  120A  158A  	fcall	___flmul
  3583  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  3584  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  3585  0D33  0823               	movf	?___flmul+3,w
  3586  0D34  00BD               	movwf	___flge@ff1+3
  3587  0D35  0822               	movf	?___flmul+2,w
  3588  0D36  00BC               	movwf	___flge@ff1+2
  3589  0D37  0821               	movf	?___flmul+1,w
  3590  0D38  00BB               	movwf	___flge@ff1+1
  3591  0D39  0820               	movf	?___flmul,w
  3592  0D3A  00BA               	movwf	___flge@ff1
  3593  0D3B  085C               	movf	_CmAntiHorario,w
  3594  0D3C  00F0               	movwf	___xxtofl@val
  3595  0D3D  085D               	movf	_CmAntiHorario+1,w
  3596  0D3E  00F1               	movwf	___xxtofl@val+1
  3597  0D3F  3000               	movlw	0
  3598  0D40  1BF1               	btfsc	___xxtofl@val+1,7
  3599  0D41  30FF               	movlw	255
  3600  0D42  00F2               	movwf	___xxtofl@val+2
  3601  0D43  00F3               	movwf	___xxtofl@val+3
  3602  0D44  3001               	movlw	1
  3603  0D45  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3604  0D4A  0873               	movf	?___xxtofl+3,w
  3605  0D4B  1283               	bcf	3,5	;RP0=0, select bank0
  3606  0D4C  1303               	bcf	3,6	;RP1=0, select bank0
  3607  0D4D  00C1               	movwf	___flge@ff2+3
  3608  0D4E  0872               	movf	?___xxtofl+2,w
  3609  0D4F  00C0               	movwf	___flge@ff2+2
  3610  0D50  0871               	movf	?___xxtofl+1,w
  3611  0D51  00BF               	movwf	___flge@ff2+1
  3612  0D52  0870               	movf	?___xxtofl,w
  3613  0D53  00BE               	movwf	___flge@ff2
  3614  0D54  120A  158A  2370  120A  158A  	fcall	___flge
  3615  0D59  1C03               	btfss	3,0
  3616  0D5A  0008               	return
  3617  0D5B  2CFC               	goto	l2631
  3618  0D5C                     __end_of_VerificarInversionGiro:	
  3619                           
  3620                           	psect	text11
  3621  0C05                     __ptext11:	
  3622 ;; *************** function ___xxtofl *****************
  3623 ;; Defined at:
  3624 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  sign            1    wreg     unsigned char 
  3627 ;;  val             4    0[COMMON] long 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  sign            1    8[COMMON] unsigned char 
  3630 ;;  arg             4   10[COMMON] unsigned long 
  3631 ;;  exp             1    9[COMMON] unsigned char 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  4    0[COMMON] unsigned char 
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3641 ;;      Params:         4       0       0       0       0
  3642 ;;      Locals:         6       0       0       0       0
  3643 ;;      Temps:          4       0       0       0       0
  3644 ;;      Totals:        14       0       0       0       0
  3645 ;;Total ram usage:       14 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; This function calls:
  3648 ;;		Nothing
  3649 ;; This function is called by:
  3650 ;;		_VerificarInversionGiro
  3651 ;;		_Encoder
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           
  3656                           ;psect for function ___xxtofl
  3657  0C05                     ___xxtofl:	
  3658                           
  3659                           ;incstack = 0
  3660                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  3661                           ;___xxtofl@sign stored from wreg
  3662  0C05  00F8               	movwf	___xxtofl@sign
  3663  0C06  0878               	movf	___xxtofl@sign,w
  3664  0C07  1D03               	btfss	3,2
  3665  0C08  1FF3               	btfss	___xxtofl@val+3,7
  3666  0C09  2C1A               	goto	l2467
  3667  0C0A  0970               	comf	___xxtofl@val,w
  3668  0C0B  00FA               	movwf	___xxtofl@arg
  3669  0C0C  0971               	comf	___xxtofl@val+1,w
  3670  0C0D  00FB               	movwf	___xxtofl@arg+1
  3671  0C0E  0972               	comf	___xxtofl@val+2,w
  3672  0C0F  00FC               	movwf	___xxtofl@arg+2
  3673  0C10  0973               	comf	___xxtofl@val+3,w
  3674  0C11  00FD               	movwf	___xxtofl@arg+3
  3675  0C12  0AFA               	incf	___xxtofl@arg,f
  3676  0C13  1903               	skipnz
  3677  0C14  0AFB               	incf	___xxtofl@arg+1,f
  3678  0C15  1903               	skipnz
  3679  0C16  0AFC               	incf	___xxtofl@arg+2,f
  3680  0C17  1903               	skipnz
  3681  0C18  0AFD               	incf	___xxtofl@arg+3,f
  3682  0C19  2C22               	goto	l848
  3683  0C1A                     l2467:	
  3684  0C1A  0873               	movf	___xxtofl@val+3,w
  3685  0C1B  00FD               	movwf	___xxtofl@arg+3
  3686  0C1C  0872               	movf	___xxtofl@val+2,w
  3687  0C1D  00FC               	movwf	___xxtofl@arg+2
  3688  0C1E  0871               	movf	___xxtofl@val+1,w
  3689  0C1F  00FB               	movwf	___xxtofl@arg+1
  3690  0C20  0870               	movf	___xxtofl@val,w
  3691  0C21  00FA               	movwf	___xxtofl@arg
  3692  0C22                     l848:	
  3693  0C22  0873               	movf	___xxtofl@val+3,w
  3694  0C23  0472               	iorwf	___xxtofl@val+2,w
  3695  0C24  0471               	iorwf	___xxtofl@val+1,w
  3696  0C25  0470               	iorwf	___xxtofl@val,w
  3697  0C26  1D03               	skipz
  3698  0C27  2C31               	goto	l2473
  3699  0C28  3000               	movlw	0
  3700  0C29  00F3               	movwf	?___xxtofl+3
  3701  0C2A  3000               	movlw	0
  3702  0C2B  00F2               	movwf	?___xxtofl+2
  3703  0C2C  3000               	movlw	0
  3704  0C2D  00F1               	movwf	?___xxtofl+1
  3705  0C2E  3000               	movlw	0
  3706  0C2F  00F0               	movwf	?___xxtofl
  3707  0C30  0008               	return
  3708  0C31                     l2473:	
  3709  0C31  3096               	movlw	150
  3710  0C32  00F4               	movwf	??___xxtofl
  3711  0C33  0874               	movf	??___xxtofl,w
  3712  0C34  00F9               	movwf	___xxtofl@exp
  3713  0C35                     l2477:	
  3714  0C35  30FE               	movlw	254
  3715  0C36  057D               	andwf	___xxtofl@arg+3,w
  3716  0C37  1903               	btfsc	3,2
  3717  0C38  2C62               	goto	l854
  3718  0C39  3001               	movlw	1
  3719  0C3A  00F4               	movwf	??___xxtofl
  3720  0C3B  0874               	movf	??___xxtofl,w
  3721  0C3C  07F9               	addwf	___xxtofl@exp,f
  3722  0C3D  3001               	movlw	1
  3723  0C3E                     u2995:	
  3724  0C3E  1003               	clrc
  3725  0C3F  0CFD               	rrf	___xxtofl@arg+3,f
  3726  0C40  0CFC               	rrf	___xxtofl@arg+2,f
  3727  0C41  0CFB               	rrf	___xxtofl@arg+1,f
  3728  0C42  0CFA               	rrf	___xxtofl@arg,f
  3729  0C43  3EFF               	addlw	-1
  3730  0C44  1D03               	skipz
  3731  0C45  2C3E               	goto	u2995
  3732  0C46  2C35               	goto	l2477
  3733  0C47                     l2479:	
  3734  0C47  3001               	movlw	1
  3735  0C48  00F4               	movwf	??___xxtofl
  3736  0C49  0874               	movf	??___xxtofl,w
  3737  0C4A  07F9               	addwf	___xxtofl@exp,f
  3738  0C4B  3001               	movlw	1
  3739  0C4C  07FA               	addwf	___xxtofl@arg,f
  3740  0C4D  3000               	movlw	0
  3741  0C4E  1803               	skipnc
  3742  0C4F  3001               	movlw	1
  3743  0C50  07FB               	addwf	___xxtofl@arg+1,f
  3744  0C51  3000               	movlw	0
  3745  0C52  1803               	skipnc
  3746  0C53  3001               	movlw	1
  3747  0C54  07FC               	addwf	___xxtofl@arg+2,f
  3748  0C55  3000               	movlw	0
  3749  0C56  1803               	skipnc
  3750  0C57  3001               	movlw	1
  3751  0C58  07FD               	addwf	___xxtofl@arg+3,f
  3752  0C59  3001               	movlw	1
  3753  0C5A                     u3015:	
  3754  0C5A  1003               	clrc
  3755  0C5B  0CFD               	rrf	___xxtofl@arg+3,f
  3756  0C5C  0CFC               	rrf	___xxtofl@arg+2,f
  3757  0C5D  0CFB               	rrf	___xxtofl@arg+1,f
  3758  0C5E  0CFA               	rrf	___xxtofl@arg,f
  3759  0C5F  3EFF               	addlw	-1
  3760  0C60  1D03               	skipz
  3761  0C61  2C5A               	goto	u3015
  3762  0C62                     l854:	
  3763  0C62  30FF               	movlw	255
  3764  0C63  057D               	andwf	___xxtofl@arg+3,w
  3765  0C64  1903               	btfsc	3,2
  3766  0C65  2C76               	goto	l2487
  3767  0C66  2C47               	goto	l2479
  3768  0C67                     l2489:	
  3769  0C67  3002               	movlw	2
  3770  0C68  0279               	subwf	___xxtofl@exp,w
  3771  0C69  1C03               	btfss	3,0
  3772  0C6A  2C78               	goto	l861
  3773  0C6B  3001               	movlw	1
  3774  0C6C  02F9               	subwf	___xxtofl@exp,f
  3775  0C6D  3001               	movlw	1
  3776  0C6E  00F4               	movwf	??___xxtofl
  3777  0C6F                     u3035:	
  3778  0C6F  1003               	clrc
  3779  0C70  0DFA               	rlf	___xxtofl@arg,f
  3780  0C71  0DFB               	rlf	___xxtofl@arg+1,f
  3781  0C72  0DFC               	rlf	___xxtofl@arg+2,f
  3782  0C73  0DFD               	rlf	___xxtofl@arg+3,f
  3783  0C74  0BF4               	decfsz	??___xxtofl,f
  3784  0C75  2C6F               	goto	u3035
  3785  0C76                     l2487:	
  3786  0C76  1FFC               	btfss	___xxtofl@arg+2,7
  3787  0C77  2C67               	goto	l2489
  3788  0C78                     l861:	
  3789  0C78  1879               	btfsc	___xxtofl@exp,0
  3790  0C79  2C82               	goto	l862
  3791  0C7A  30FF               	movlw	255
  3792  0C7B  05FA               	andwf	___xxtofl@arg,f
  3793  0C7C  30FF               	movlw	255
  3794  0C7D  05FB               	andwf	___xxtofl@arg+1,f
  3795  0C7E  307F               	movlw	127
  3796  0C7F  05FC               	andwf	___xxtofl@arg+2,f
  3797  0C80  30FF               	movlw	255
  3798  0C81  05FD               	andwf	___xxtofl@arg+3,f
  3799  0C82                     l862:	
  3800  0C82  1003               	clrc
  3801  0C83  0CF9               	rrf	___xxtofl@exp,f
  3802  0C84  0879               	movf	___xxtofl@exp,w
  3803  0C85  00F4               	movwf	??___xxtofl
  3804  0C86  01F5               	clrf	??___xxtofl+1
  3805  0C87  01F6               	clrf	??___xxtofl+2
  3806  0C88  01F7               	clrf	??___xxtofl+3
  3807  0C89  3018               	movlw	24
  3808  0C8A                     u3075:	
  3809  0C8A  1003               	clrc
  3810  0C8B  0DF4               	rlf	??___xxtofl,f
  3811  0C8C  0DF5               	rlf	??___xxtofl+1,f
  3812  0C8D  0DF6               	rlf	??___xxtofl+2,f
  3813  0C8E  0DF7               	rlf	??___xxtofl+3,f
  3814  0C8F  3EFF               	addlw	-1
  3815  0C90  1D03               	skipz
  3816  0C91  2C8A               	goto	u3075
  3817  0C92  0874               	movf	??___xxtofl,w
  3818  0C93  04FA               	iorwf	___xxtofl@arg,f
  3819  0C94  0875               	movf	??___xxtofl+1,w
  3820  0C95  04FB               	iorwf	___xxtofl@arg+1,f
  3821  0C96  0876               	movf	??___xxtofl+2,w
  3822  0C97  04FC               	iorwf	___xxtofl@arg+2,f
  3823  0C98  0877               	movf	??___xxtofl+3,w
  3824  0C99  04FD               	iorwf	___xxtofl@arg+3,f
  3825  0C9A  0878               	movf	___xxtofl@sign,w
  3826  0C9B  1D03               	btfss	3,2
  3827  0C9C  1FF3               	btfss	___xxtofl@val+3,7
  3828  0C9D  2C9F               	goto	l2501
  3829  0C9E  17FD               	bsf	___xxtofl@arg+3,7
  3830  0C9F                     l2501:	
  3831  0C9F  087D               	movf	___xxtofl@arg+3,w
  3832  0CA0  00F3               	movwf	?___xxtofl+3
  3833  0CA1  087C               	movf	___xxtofl@arg+2,w
  3834  0CA2  00F2               	movwf	?___xxtofl+2
  3835  0CA3  087B               	movf	___xxtofl@arg+1,w
  3836  0CA4  00F1               	movwf	?___xxtofl+1
  3837  0CA5  087A               	movf	___xxtofl@arg,w
  3838  0CA6  00F0               	movwf	?___xxtofl
  3839  0CA7  0008               	return
  3840  0CA8                     __end_of___xxtofl:	
  3841                           
  3842                           	psect	text12
  3843  04D4                     __ptext12:	
  3844 ;; *************** function ___flmul *****************
  3845 ;; Defined at:
  3846 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  b               4    0[BANK0 ] unsigned char 
  3849 ;;  a               4    4[BANK0 ] unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  prod            4   20[BANK0 ] struct .
  3852 ;;  grs             4   14[BANK0 ] unsigned long 
  3853 ;;  temp            2   24[BANK0 ] struct .
  3854 ;;  bexp            1   19[BANK0 ] unsigned char 
  3855 ;;  aexp            1   18[BANK0 ] unsigned char 
  3856 ;;  sign            1   13[BANK0 ] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  4    0[BANK0 ] unsigned char 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3866 ;;      Params:         0       8       0       0       0
  3867 ;;      Locals:         0      13       0       0       0
  3868 ;;      Temps:          0       5       0       0       0
  3869 ;;      Totals:         0      26       0       0       0
  3870 ;;Total ram usage:       26 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    1
  3873 ;; This function calls:
  3874 ;;		__Umul8_16
  3875 ;; This function is called by:
  3876 ;;		_VerificarInversionGiro
  3877 ;;		_Encoder
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           
  3882                           ;psect for function ___flmul
  3883  04D4                     ___flmul:	
  3884                           
  3885                           ;incstack = 0
  3886                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3887  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  3888  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  3889  04D6  0823               	movf	___flmul@b+3,w
  3890  04D7  3980               	andlw	128
  3891  04D8  00A8               	movwf	??___flmul
  3892  04D9  0828               	movf	??___flmul,w
  3893  04DA  00AD               	movwf	___flmul@sign
  3894  04DB  0823               	movf	___flmul@b+3,w
  3895  04DC  00A8               	movwf	??___flmul
  3896  04DD  0728               	addwf	??___flmul,w
  3897  04DE  00A9               	movwf	??___flmul+1
  3898  04DF  0829               	movf	??___flmul+1,w
  3899  04E0  00B3               	movwf	___flmul@bexp
  3900  04E1  1BA2               	btfsc	___flmul@b+2,7
  3901  04E2  1433               	bsf	___flmul@bexp,0
  3902  04E3  0833               	movf	___flmul@bexp,w
  3903  04E4  1903               	btfsc	3,2
  3904  04E5  2CF3               	goto	l2337
  3905  04E6  0A33               	incf	___flmul@bexp,w
  3906  04E7  1D03               	btfss	3,2
  3907  04E8  2CF1               	goto	l2335
  3908  04E9  3000               	movlw	0
  3909  04EA  00A3               	movwf	___flmul@b+3
  3910  04EB  3000               	movlw	0
  3911  04EC  00A2               	movwf	___flmul@b+2
  3912  04ED  3000               	movlw	0
  3913  04EE  00A1               	movwf	___flmul@b+1
  3914  04EF  3000               	movlw	0
  3915  04F0  00A0               	movwf	___flmul@b
  3916  04F1                     l2335:	
  3917  04F1  17A2               	bsf	___flmul@b+2,7
  3918  04F2  2CFB               	goto	l2339
  3919  04F3                     l2337:	
  3920  04F3  3000               	movlw	0
  3921  04F4  00A3               	movwf	___flmul@b+3
  3922  04F5  3000               	movlw	0
  3923  04F6  00A2               	movwf	___flmul@b+2
  3924  04F7  3000               	movlw	0
  3925  04F8  00A1               	movwf	___flmul@b+1
  3926  04F9  3000               	movlw	0
  3927  04FA  00A0               	movwf	___flmul@b
  3928  04FB                     l2339:	
  3929  04FB  0827               	movf	___flmul@a+3,w
  3930  04FC  3980               	andlw	128
  3931  04FD  00A8               	movwf	??___flmul
  3932  04FE  0828               	movf	??___flmul,w
  3933  04FF  06AD               	xorwf	___flmul@sign,f
  3934  0500  0827               	movf	___flmul@a+3,w
  3935  0501  00A8               	movwf	??___flmul
  3936  0502  0728               	addwf	??___flmul,w
  3937  0503  00A9               	movwf	??___flmul+1
  3938  0504  0829               	movf	??___flmul+1,w
  3939  0505  00B2               	movwf	___flmul@aexp
  3940  0506  1BA6               	btfsc	___flmul@a+2,7
  3941  0507  1432               	bsf	___flmul@aexp,0
  3942  0508  0832               	movf	___flmul@aexp,w
  3943  0509  1903               	btfsc	3,2
  3944  050A  2D18               	goto	l2355
  3945  050B  0A32               	incf	___flmul@aexp,w
  3946  050C  1D03               	btfss	3,2
  3947  050D  2D16               	goto	l2353
  3948  050E  3000               	movlw	0
  3949  050F  00A7               	movwf	___flmul@a+3
  3950  0510  3000               	movlw	0
  3951  0511  00A6               	movwf	___flmul@a+2
  3952  0512  3000               	movlw	0
  3953  0513  00A5               	movwf	___flmul@a+1
  3954  0514  3000               	movlw	0
  3955  0515  00A4               	movwf	___flmul@a
  3956  0516                     l2353:	
  3957  0516  17A6               	bsf	___flmul@a+2,7
  3958  0517  2D20               	goto	l2357
  3959  0518                     l2355:	
  3960  0518  3000               	movlw	0
  3961  0519  00A7               	movwf	___flmul@a+3
  3962  051A  3000               	movlw	0
  3963  051B  00A6               	movwf	___flmul@a+2
  3964  051C  3000               	movlw	0
  3965  051D  00A5               	movwf	___flmul@a+1
  3966  051E  3000               	movlw	0
  3967  051F  00A4               	movwf	___flmul@a
  3968  0520                     l2357:	
  3969  0520  0832               	movf	___flmul@aexp,w
  3970  0521  1D03               	btfss	3,2
  3971  0522  0833               	movf	___flmul@bexp,w
  3972  0523  1D03               	btfss	3,2
  3973  0524  2D2E               	goto	l2365
  3974  0525  3000               	movlw	0
  3975  0526  00A3               	movwf	?___flmul+3
  3976  0527  3000               	movlw	0
  3977  0528  00A2               	movwf	?___flmul+2
  3978  0529  3000               	movlw	0
  3979  052A  00A1               	movwf	?___flmul+1
  3980  052B  3000               	movlw	0
  3981  052C  00A0               	movwf	?___flmul
  3982  052D  0008               	return
  3983  052E                     l2365:	
  3984  052E  0820               	movf	___flmul@b,w
  3985  052F  00A8               	movwf	??___flmul
  3986  0530  0828               	movf	??___flmul,w
  3987  0531  00F0               	movwf	__Umul8_16@multiplicand
  3988  0532  0826               	movf	___flmul@a+2,w
  3989  0533  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  3990  0538  0871               	movf	?__Umul8_16+1,w
  3991  0539  1283               	bcf	3,5	;RP0=0, select bank0
  3992  053A  1303               	bcf	3,6	;RP1=0, select bank0
  3993  053B  00B9               	movwf	___flmul@temp+1
  3994  053C  0870               	movf	?__Umul8_16,w
  3995  053D  00B8               	movwf	___flmul@temp
  3996  053E  0838               	movf	___flmul@temp,w
  3997  053F  00A8               	movwf	??___flmul
  3998  0540  01A9               	clrf	??___flmul+1
  3999  0541  01AA               	clrf	??___flmul+2
  4000  0542  01AB               	clrf	??___flmul+3
  4001  0543  082B               	movf	??___flmul+3,w
  4002  0544  00B1               	movwf	___flmul@grs+3
  4003  0545  082A               	movf	??___flmul+2,w
  4004  0546  00B0               	movwf	___flmul@grs+2
  4005  0547  0829               	movf	??___flmul+1,w
  4006  0548  00AF               	movwf	___flmul@grs+1
  4007  0549  0828               	movf	??___flmul,w
  4008  054A  00AE               	movwf	___flmul@grs
  4009  054B  0839               	movf	___flmul@temp+1,w
  4010  054C  00A8               	movwf	??___flmul
  4011  054D  01A9               	clrf	??___flmul+1
  4012  054E  01AA               	clrf	??___flmul+2
  4013  054F  01AB               	clrf	??___flmul+3
  4014  0550  082B               	movf	??___flmul+3,w
  4015  0551  00B7               	movwf	___flmul@prod+3
  4016  0552  082A               	movf	??___flmul+2,w
  4017  0553  00B6               	movwf	___flmul@prod+2
  4018  0554  0829               	movf	??___flmul+1,w
  4019  0555  00B5               	movwf	___flmul@prod+1
  4020  0556  0828               	movf	??___flmul,w
  4021  0557  00B4               	movwf	___flmul@prod
  4022  0558  0821               	movf	___flmul@b+1,w
  4023  0559  00A8               	movwf	??___flmul
  4024  055A  0828               	movf	??___flmul,w
  4025  055B  00F0               	movwf	__Umul8_16@multiplicand
  4026  055C  0825               	movf	___flmul@a+1,w
  4027  055D  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4028  0562  0871               	movf	?__Umul8_16+1,w
  4029  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0564  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0565  00B9               	movwf	___flmul@temp+1
  4032  0566  0870               	movf	?__Umul8_16,w
  4033  0567  00B8               	movwf	___flmul@temp
  4034  0568  0838               	movf	___flmul@temp,w
  4035  0569  00A8               	movwf	??___flmul
  4036  056A  01A9               	clrf	??___flmul+1
  4037  056B  01AA               	clrf	??___flmul+2
  4038  056C  01AB               	clrf	??___flmul+3
  4039  056D  0828               	movf	??___flmul,w
  4040  056E  07AE               	addwf	___flmul@grs,f
  4041  056F  0829               	movf	??___flmul+1,w
  4042  0570  1103               	clrz
  4043  0571  1803               	skipnc
  4044  0572  3E01               	addlw	1
  4045  0573  1D03               	btfss	3,2
  4046  0574  07AF               	addwf	___flmul@grs+1,f
  4047  0575  082A               	movf	??___flmul+2,w
  4048  0576  1103               	clrz
  4049  0577  1803               	skipnc
  4050  0578  3E01               	addlw	1
  4051  0579  1D03               	btfss	3,2
  4052  057A  07B0               	addwf	___flmul@grs+2,f
  4053  057B  082B               	movf	??___flmul+3,w
  4054  057C  1103               	clrz
  4055  057D  1803               	skipnc
  4056  057E  3E01               	addlw	1
  4057  057F  1D03               	btfss	3,2
  4058  0580  07B1               	addwf	___flmul@grs+3,f
  4059  0581  0839               	movf	___flmul@temp+1,w
  4060  0582  00A8               	movwf	??___flmul
  4061  0583  01A9               	clrf	??___flmul+1
  4062  0584  01AA               	clrf	??___flmul+2
  4063  0585  01AB               	clrf	??___flmul+3
  4064  0586  0828               	movf	??___flmul,w
  4065  0587  07B4               	addwf	___flmul@prod,f
  4066  0588  0829               	movf	??___flmul+1,w
  4067  0589  1103               	clrz
  4068  058A  1803               	skipnc
  4069  058B  3E01               	addlw	1
  4070  058C  1D03               	btfss	3,2
  4071  058D  07B5               	addwf	___flmul@prod+1,f
  4072  058E  082A               	movf	??___flmul+2,w
  4073  058F  1103               	clrz
  4074  0590  1803               	skipnc
  4075  0591  3E01               	addlw	1
  4076  0592  1D03               	btfss	3,2
  4077  0593  07B6               	addwf	___flmul@prod+2,f
  4078  0594  082B               	movf	??___flmul+3,w
  4079  0595  1103               	clrz
  4080  0596  1803               	skipnc
  4081  0597  3E01               	addlw	1
  4082  0598  1D03               	btfss	3,2
  4083  0599  07B7               	addwf	___flmul@prod+3,f
  4084  059A  0822               	movf	___flmul@b+2,w
  4085  059B  00A8               	movwf	??___flmul
  4086  059C  0828               	movf	??___flmul,w
  4087  059D  00F0               	movwf	__Umul8_16@multiplicand
  4088  059E  0824               	movf	___flmul@a,w
  4089  059F  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4090  05A4  0871               	movf	?__Umul8_16+1,w
  4091  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  4092  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  4093  05A7  00B9               	movwf	___flmul@temp+1
  4094  05A8  0870               	movf	?__Umul8_16,w
  4095  05A9  00B8               	movwf	___flmul@temp
  4096  05AA  0838               	movf	___flmul@temp,w
  4097  05AB  00A8               	movwf	??___flmul
  4098  05AC  01A9               	clrf	??___flmul+1
  4099  05AD  01AA               	clrf	??___flmul+2
  4100  05AE  01AB               	clrf	??___flmul+3
  4101  05AF  0828               	movf	??___flmul,w
  4102  05B0  07AE               	addwf	___flmul@grs,f
  4103  05B1  0829               	movf	??___flmul+1,w
  4104  05B2  1103               	clrz
  4105  05B3  1803               	skipnc
  4106  05B4  3E01               	addlw	1
  4107  05B5  1D03               	btfss	3,2
  4108  05B6  07AF               	addwf	___flmul@grs+1,f
  4109  05B7  082A               	movf	??___flmul+2,w
  4110  05B8  1103               	clrz
  4111  05B9  1803               	skipnc
  4112  05BA  3E01               	addlw	1
  4113  05BB  1D03               	btfss	3,2
  4114  05BC  07B0               	addwf	___flmul@grs+2,f
  4115  05BD  082B               	movf	??___flmul+3,w
  4116  05BE  1103               	clrz
  4117  05BF  1803               	skipnc
  4118  05C0  3E01               	addlw	1
  4119  05C1  1D03               	btfss	3,2
  4120  05C2  07B1               	addwf	___flmul@grs+3,f
  4121  05C3  0839               	movf	___flmul@temp+1,w
  4122  05C4  00A8               	movwf	??___flmul
  4123  05C5  01A9               	clrf	??___flmul+1
  4124  05C6  01AA               	clrf	??___flmul+2
  4125  05C7  01AB               	clrf	??___flmul+3
  4126  05C8  0828               	movf	??___flmul,w
  4127  05C9  07B4               	addwf	___flmul@prod,f
  4128  05CA  0829               	movf	??___flmul+1,w
  4129  05CB  1103               	clrz
  4130  05CC  1803               	skipnc
  4131  05CD  3E01               	addlw	1
  4132  05CE  1D03               	btfss	3,2
  4133  05CF  07B5               	addwf	___flmul@prod+1,f
  4134  05D0  082A               	movf	??___flmul+2,w
  4135  05D1  1103               	clrz
  4136  05D2  1803               	skipnc
  4137  05D3  3E01               	addlw	1
  4138  05D4  1D03               	btfss	3,2
  4139  05D5  07B6               	addwf	___flmul@prod+2,f
  4140  05D6  082B               	movf	??___flmul+3,w
  4141  05D7  1103               	clrz
  4142  05D8  1803               	skipnc
  4143  05D9  3E01               	addlw	1
  4144  05DA  1D03               	btfss	3,2
  4145  05DB  07B7               	addwf	___flmul@prod+3,f
  4146  05DC  3008               	movlw	8
  4147  05DD  00A8               	movwf	??___flmul
  4148  05DE                     u2715:	
  4149  05DE  1003               	clrc
  4150  05DF  0DAE               	rlf	___flmul@grs,f
  4151  05E0  0DAF               	rlf	___flmul@grs+1,f
  4152  05E1  0DB0               	rlf	___flmul@grs+2,f
  4153  05E2  0DB1               	rlf	___flmul@grs+3,f
  4154  05E3  0BA8               	decfsz	??___flmul,f
  4155  05E4  2DDE               	goto	u2715
  4156  05E5  0821               	movf	___flmul@b+1,w
  4157  05E6  00A8               	movwf	??___flmul
  4158  05E7  0828               	movf	??___flmul,w
  4159  05E8  00F0               	movwf	__Umul8_16@multiplicand
  4160  05E9  0824               	movf	___flmul@a,w
  4161  05EA  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4162  05EF  0871               	movf	?__Umul8_16+1,w
  4163  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  4164  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  4165  05F2  00B9               	movwf	___flmul@temp+1
  4166  05F3  0870               	movf	?__Umul8_16,w
  4167  05F4  00B8               	movwf	___flmul@temp
  4168  05F5  0838               	movf	___flmul@temp,w
  4169  05F6  00A8               	movwf	??___flmul
  4170  05F7  0839               	movf	___flmul@temp+1,w
  4171  05F8  00A9               	movwf	??___flmul+1
  4172  05F9  01AA               	clrf	??___flmul+2
  4173  05FA  01AB               	clrf	??___flmul+3
  4174  05FB  0828               	movf	??___flmul,w
  4175  05FC  07AE               	addwf	___flmul@grs,f
  4176  05FD  0829               	movf	??___flmul+1,w
  4177  05FE  1103               	clrz
  4178  05FF  1803               	skipnc
  4179  0600  3E01               	addlw	1
  4180  0601  1D03               	btfss	3,2
  4181  0602  07AF               	addwf	___flmul@grs+1,f
  4182  0603  082A               	movf	??___flmul+2,w
  4183  0604  1103               	clrz
  4184  0605  1803               	skipnc
  4185  0606  3E01               	addlw	1
  4186  0607  1D03               	btfss	3,2
  4187  0608  07B0               	addwf	___flmul@grs+2,f
  4188  0609  082B               	movf	??___flmul+3,w
  4189  060A  1103               	clrz
  4190  060B  1803               	skipnc
  4191  060C  3E01               	addlw	1
  4192  060D  1D03               	btfss	3,2
  4193  060E  07B1               	addwf	___flmul@grs+3,f
  4194  060F  0820               	movf	___flmul@b,w
  4195  0610  00A8               	movwf	??___flmul
  4196  0611  0828               	movf	??___flmul,w
  4197  0612  00F0               	movwf	__Umul8_16@multiplicand
  4198  0613  0825               	movf	___flmul@a+1,w
  4199  0614  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4200  0619  0871               	movf	?__Umul8_16+1,w
  4201  061A  1283               	bcf	3,5	;RP0=0, select bank0
  4202  061B  1303               	bcf	3,6	;RP1=0, select bank0
  4203  061C  00B9               	movwf	___flmul@temp+1
  4204  061D  0870               	movf	?__Umul8_16,w
  4205  061E  00B8               	movwf	___flmul@temp
  4206  061F  0838               	movf	___flmul@temp,w
  4207  0620  00A8               	movwf	??___flmul
  4208  0621  0839               	movf	___flmul@temp+1,w
  4209  0622  00A9               	movwf	??___flmul+1
  4210  0623  01AA               	clrf	??___flmul+2
  4211  0624  01AB               	clrf	??___flmul+3
  4212  0625  0828               	movf	??___flmul,w
  4213  0626  07AE               	addwf	___flmul@grs,f
  4214  0627  0829               	movf	??___flmul+1,w
  4215  0628  1103               	clrz
  4216  0629  1803               	skipnc
  4217  062A  3E01               	addlw	1
  4218  062B  1D03               	btfss	3,2
  4219  062C  07AF               	addwf	___flmul@grs+1,f
  4220  062D  082A               	movf	??___flmul+2,w
  4221  062E  1103               	clrz
  4222  062F  1803               	skipnc
  4223  0630  3E01               	addlw	1
  4224  0631  1D03               	btfss	3,2
  4225  0632  07B0               	addwf	___flmul@grs+2,f
  4226  0633  082B               	movf	??___flmul+3,w
  4227  0634  1103               	clrz
  4228  0635  1803               	skipnc
  4229  0636  3E01               	addlw	1
  4230  0637  1D03               	btfss	3,2
  4231  0638  07B1               	addwf	___flmul@grs+3,f
  4232  0639  3008               	movlw	8
  4233  063A  00A8               	movwf	??___flmul
  4234  063B                     u2745:	
  4235  063B  1003               	clrc
  4236  063C  0DAE               	rlf	___flmul@grs,f
  4237  063D  0DAF               	rlf	___flmul@grs+1,f
  4238  063E  0DB0               	rlf	___flmul@grs+2,f
  4239  063F  0DB1               	rlf	___flmul@grs+3,f
  4240  0640  0BA8               	decfsz	??___flmul,f
  4241  0641  2E3B               	goto	u2745
  4242  0642  0820               	movf	___flmul@b,w
  4243  0643  00A8               	movwf	??___flmul
  4244  0644  0828               	movf	??___flmul,w
  4245  0645  00F0               	movwf	__Umul8_16@multiplicand
  4246  0646  0824               	movf	___flmul@a,w
  4247  0647  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4248  064C  0871               	movf	?__Umul8_16+1,w
  4249  064D  1283               	bcf	3,5	;RP0=0, select bank0
  4250  064E  1303               	bcf	3,6	;RP1=0, select bank0
  4251  064F  00B9               	movwf	___flmul@temp+1
  4252  0650  0870               	movf	?__Umul8_16,w
  4253  0651  00B8               	movwf	___flmul@temp
  4254  0652  0838               	movf	___flmul@temp,w
  4255  0653  00A8               	movwf	??___flmul
  4256  0654  0839               	movf	___flmul@temp+1,w
  4257  0655  00A9               	movwf	??___flmul+1
  4258  0656  01AA               	clrf	??___flmul+2
  4259  0657  01AB               	clrf	??___flmul+3
  4260  0658  0828               	movf	??___flmul,w
  4261  0659  07AE               	addwf	___flmul@grs,f
  4262  065A  0829               	movf	??___flmul+1,w
  4263  065B  1103               	clrz
  4264  065C  1803               	skipnc
  4265  065D  3E01               	addlw	1
  4266  065E  1D03               	btfss	3,2
  4267  065F  07AF               	addwf	___flmul@grs+1,f
  4268  0660  082A               	movf	??___flmul+2,w
  4269  0661  1103               	clrz
  4270  0662  1803               	skipnc
  4271  0663  3E01               	addlw	1
  4272  0664  1D03               	btfss	3,2
  4273  0665  07B0               	addwf	___flmul@grs+2,f
  4274  0666  082B               	movf	??___flmul+3,w
  4275  0667  1103               	clrz
  4276  0668  1803               	skipnc
  4277  0669  3E01               	addlw	1
  4278  066A  1D03               	btfss	3,2
  4279  066B  07B1               	addwf	___flmul@grs+3,f
  4280  066C  0821               	movf	___flmul@b+1,w
  4281  066D  00A8               	movwf	??___flmul
  4282  066E  0828               	movf	??___flmul,w
  4283  066F  00F0               	movwf	__Umul8_16@multiplicand
  4284  0670  0826               	movf	___flmul@a+2,w
  4285  0671  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4286  0676  0871               	movf	?__Umul8_16+1,w
  4287  0677  1283               	bcf	3,5	;RP0=0, select bank0
  4288  0678  1303               	bcf	3,6	;RP1=0, select bank0
  4289  0679  00B9               	movwf	___flmul@temp+1
  4290  067A  0870               	movf	?__Umul8_16,w
  4291  067B  00B8               	movwf	___flmul@temp
  4292  067C  0838               	movf	___flmul@temp,w
  4293  067D  00A8               	movwf	??___flmul
  4294  067E  0839               	movf	___flmul@temp+1,w
  4295  067F  00A9               	movwf	??___flmul+1
  4296  0680  01AA               	clrf	??___flmul+2
  4297  0681  01AB               	clrf	??___flmul+3
  4298  0682  0828               	movf	??___flmul,w
  4299  0683  07B4               	addwf	___flmul@prod,f
  4300  0684  0829               	movf	??___flmul+1,w
  4301  0685  1103               	clrz
  4302  0686  1803               	skipnc
  4303  0687  3E01               	addlw	1
  4304  0688  1D03               	btfss	3,2
  4305  0689  07B5               	addwf	___flmul@prod+1,f
  4306  068A  082A               	movf	??___flmul+2,w
  4307  068B  1103               	clrz
  4308  068C  1803               	skipnc
  4309  068D  3E01               	addlw	1
  4310  068E  1D03               	btfss	3,2
  4311  068F  07B6               	addwf	___flmul@prod+2,f
  4312  0690  082B               	movf	??___flmul+3,w
  4313  0691  1103               	clrz
  4314  0692  1803               	skipnc
  4315  0693  3E01               	addlw	1
  4316  0694  1D03               	btfss	3,2
  4317  0695  07B7               	addwf	___flmul@prod+3,f
  4318  0696  0822               	movf	___flmul@b+2,w
  4319  0697  00A8               	movwf	??___flmul
  4320  0698  0828               	movf	??___flmul,w
  4321  0699  00F0               	movwf	__Umul8_16@multiplicand
  4322  069A  0825               	movf	___flmul@a+1,w
  4323  069B  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4324  06A0  0871               	movf	?__Umul8_16+1,w
  4325  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  4326  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  4327  06A3  00B9               	movwf	___flmul@temp+1
  4328  06A4  0870               	movf	?__Umul8_16,w
  4329  06A5  00B8               	movwf	___flmul@temp
  4330  06A6  0838               	movf	___flmul@temp,w
  4331  06A7  00A8               	movwf	??___flmul
  4332  06A8  0839               	movf	___flmul@temp+1,w
  4333  06A9  00A9               	movwf	??___flmul+1
  4334  06AA  01AA               	clrf	??___flmul+2
  4335  06AB  01AB               	clrf	??___flmul+3
  4336  06AC  0828               	movf	??___flmul,w
  4337  06AD  07B4               	addwf	___flmul@prod,f
  4338  06AE  0829               	movf	??___flmul+1,w
  4339  06AF  1103               	clrz
  4340  06B0  1803               	skipnc
  4341  06B1  3E01               	addlw	1
  4342  06B2  1D03               	btfss	3,2
  4343  06B3  07B5               	addwf	___flmul@prod+1,f
  4344  06B4  082A               	movf	??___flmul+2,w
  4345  06B5  1103               	clrz
  4346  06B6  1803               	skipnc
  4347  06B7  3E01               	addlw	1
  4348  06B8  1D03               	btfss	3,2
  4349  06B9  07B6               	addwf	___flmul@prod+2,f
  4350  06BA  082B               	movf	??___flmul+3,w
  4351  06BB  1103               	clrz
  4352  06BC  1803               	skipnc
  4353  06BD  3E01               	addlw	1
  4354  06BE  1D03               	btfss	3,2
  4355  06BF  07B7               	addwf	___flmul@prod+3,f
  4356  06C0  0822               	movf	___flmul@b+2,w
  4357  06C1  00A8               	movwf	??___flmul
  4358  06C2  0828               	movf	??___flmul,w
  4359  06C3  00F0               	movwf	__Umul8_16@multiplicand
  4360  06C4  0826               	movf	___flmul@a+2,w
  4361  06C5  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4362  06CA  0871               	movf	?__Umul8_16+1,w
  4363  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  4364  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  4365  06CD  00B9               	movwf	___flmul@temp+1
  4366  06CE  0870               	movf	?__Umul8_16,w
  4367  06CF  00B8               	movwf	___flmul@temp
  4368  06D0  0838               	movf	___flmul@temp,w
  4369  06D1  00A8               	movwf	??___flmul
  4370  06D2  0839               	movf	___flmul@temp+1,w
  4371  06D3  00A9               	movwf	??___flmul+1
  4372  06D4  01AA               	clrf	??___flmul+2
  4373  06D5  01AB               	clrf	??___flmul+3
  4374  06D6  3008               	movlw	8
  4375  06D7                     u2785:	
  4376  06D7  1003               	clrc
  4377  06D8  0DA8               	rlf	??___flmul,f
  4378  06D9  0DA9               	rlf	??___flmul+1,f
  4379  06DA  0DAA               	rlf	??___flmul+2,f
  4380  06DB  0DAB               	rlf	??___flmul+3,f
  4381  06DC  3EFF               	addlw	-1
  4382  06DD  1D03               	skipz
  4383  06DE  2ED7               	goto	u2785
  4384  06DF  0828               	movf	??___flmul,w
  4385  06E0  07B4               	addwf	___flmul@prod,f
  4386  06E1  0829               	movf	??___flmul+1,w
  4387  06E2  1103               	clrz
  4388  06E3  1803               	skipnc
  4389  06E4  3E01               	addlw	1
  4390  06E5  1D03               	btfss	3,2
  4391  06E6  07B5               	addwf	___flmul@prod+1,f
  4392  06E7  082A               	movf	??___flmul+2,w
  4393  06E8  1103               	clrz
  4394  06E9  1803               	skipnc
  4395  06EA  3E01               	addlw	1
  4396  06EB  1D03               	btfss	3,2
  4397  06EC  07B6               	addwf	___flmul@prod+2,f
  4398  06ED  082B               	movf	??___flmul+3,w
  4399  06EE  1103               	clrz
  4400  06EF  1803               	skipnc
  4401  06F0  3E01               	addlw	1
  4402  06F1  1D03               	btfss	3,2
  4403  06F2  07B7               	addwf	___flmul@prod+3,f
  4404  06F3  082E               	movf	___flmul@grs,w
  4405  06F4  00A8               	movwf	??___flmul
  4406  06F5  082F               	movf	___flmul@grs+1,w
  4407  06F6  00A9               	movwf	??___flmul+1
  4408  06F7  0830               	movf	___flmul@grs+2,w
  4409  06F8  00AA               	movwf	??___flmul+2
  4410  06F9  0831               	movf	___flmul@grs+3,w
  4411  06FA  00AB               	movwf	??___flmul+3
  4412  06FB  3018               	movlw	24
  4413  06FC                     u2805:	
  4414  06FC  1003               	clrc
  4415  06FD  0CAB               	rrf	??___flmul+3,f
  4416  06FE  0CAA               	rrf	??___flmul+2,f
  4417  06FF  0CA9               	rrf	??___flmul+1,f
  4418  0700  0CA8               	rrf	??___flmul,f
  4419  0701  3EFF               	addlw	-1
  4420  0702  1D03               	skipz
  4421  0703  2EFC               	goto	u2805
  4422  0704  0828               	movf	??___flmul,w
  4423  0705  07B4               	addwf	___flmul@prod,f
  4424  0706  0829               	movf	??___flmul+1,w
  4425  0707  1103               	clrz
  4426  0708  1803               	skipnc
  4427  0709  3E01               	addlw	1
  4428  070A  1D03               	btfss	3,2
  4429  070B  07B5               	addwf	___flmul@prod+1,f
  4430  070C  082A               	movf	??___flmul+2,w
  4431  070D  1103               	clrz
  4432  070E  1803               	skipnc
  4433  070F  3E01               	addlw	1
  4434  0710  1D03               	btfss	3,2
  4435  0711  07B6               	addwf	___flmul@prod+2,f
  4436  0712  082B               	movf	??___flmul+3,w
  4437  0713  1103               	clrz
  4438  0714  1803               	skipnc
  4439  0715  3E01               	addlw	1
  4440  0716  1D03               	btfss	3,2
  4441  0717  07B7               	addwf	___flmul@prod+3,f
  4442  0718  3008               	movlw	8
  4443  0719  00A8               	movwf	??___flmul
  4444  071A                     u2825:	
  4445  071A  1003               	clrc
  4446  071B  0DAE               	rlf	___flmul@grs,f
  4447  071C  0DAF               	rlf	___flmul@grs+1,f
  4448  071D  0DB0               	rlf	___flmul@grs+2,f
  4449  071E  0DB1               	rlf	___flmul@grs+3,f
  4450  071F  0BA8               	decfsz	??___flmul,f
  4451  0720  2F1A               	goto	u2825
  4452  0721  0833               	movf	___flmul@bexp,w
  4453  0722  0732               	addwf	___flmul@aexp,w
  4454  0723  00A8               	movwf	??___flmul
  4455  0724  01A9               	clrf	??___flmul+1
  4456  0725  0DA9               	rlf	??___flmul+1,f
  4457  0726  0828               	movf	??___flmul,w
  4458  0727  3E82               	addlw	130
  4459  0728  00B8               	movwf	___flmul@temp
  4460  0729  0829               	movf	??___flmul+1,w
  4461  072A  1803               	skipnc
  4462  072B  3E01               	addlw	1
  4463  072C  3EFF               	addlw	255
  4464  072D  00B9               	movwf	___flmul@temp+1
  4465  072E                     l2417:	
  4466  072E  1BB6               	btfsc	___flmul@prod+2,7
  4467  072F  2F4B               	goto	l2419
  4468  0730  3001               	movlw	1
  4469  0731  00A8               	movwf	??___flmul
  4470  0732                     u2835:	
  4471  0732  1003               	clrc
  4472  0733  0DB4               	rlf	___flmul@prod,f
  4473  0734  0DB5               	rlf	___flmul@prod+1,f
  4474  0735  0DB6               	rlf	___flmul@prod+2,f
  4475  0736  0DB7               	rlf	___flmul@prod+3,f
  4476  0737  0BA8               	decfsz	??___flmul,f
  4477  0738  2F32               	goto	u2835
  4478  0739  1BB1               	btfsc	___flmul@grs+3,7
  4479  073A  1434               	bsf	___flmul@prod,0
  4480  073B  3001               	movlw	1
  4481  073C  00A8               	movwf	??___flmul
  4482  073D                     u2855:	
  4483  073D  1003               	clrc
  4484  073E  0DAE               	rlf	___flmul@grs,f
  4485  073F  0DAF               	rlf	___flmul@grs+1,f
  4486  0740  0DB0               	rlf	___flmul@grs+2,f
  4487  0741  0DB1               	rlf	___flmul@grs+3,f
  4488  0742  0BA8               	decfsz	??___flmul,f
  4489  0743  2F3D               	goto	u2855
  4490  0744  30FF               	movlw	255
  4491  0745  07B8               	addwf	___flmul@temp,f
  4492  0746  1803               	skipnc
  4493  0747  0AB9               	incf	___flmul@temp+1,f
  4494  0748  30FF               	movlw	255
  4495  0749  07B9               	addwf	___flmul@temp+1,f
  4496  074A  2F2E               	goto	l2417
  4497  074B                     l2419:	
  4498  074B  01B2               	clrf	___flmul@aexp
  4499  074C  1FB1               	btfss	___flmul@grs+3,7
  4500  074D  2F64               	goto	l2429
  4501  074E  30FF               	movlw	255
  4502  074F  052E               	andwf	___flmul@grs,w
  4503  0750  00A8               	movwf	??___flmul
  4504  0751  30FF               	movlw	255
  4505  0752  052F               	andwf	___flmul@grs+1,w
  4506  0753  00A9               	movwf	??___flmul+1
  4507  0754  30FF               	movlw	255
  4508  0755  0530               	andwf	___flmul@grs+2,w
  4509  0756  00AA               	movwf	??___flmul+2
  4510  0757  307F               	movlw	127
  4511  0758  0531               	andwf	___flmul@grs+3,w
  4512  0759  00AB               	movwf	??___flmul+3
  4513  075A  082B               	movf	??___flmul+3,w
  4514  075B  042A               	iorwf	??___flmul+2,w
  4515  075C  0429               	iorwf	??___flmul+1,w
  4516  075D  0428               	iorwf	??___flmul,w
  4517  075E  1903               	skipnz
  4518  075F  1834               	btfsc	___flmul@prod,0
  4519  0760  2F62               	goto	l2425
  4520  0761  2F64               	goto	l2429
  4521  0762                     l2425:	
  4522  0762  01B2               	clrf	___flmul@aexp
  4523  0763  0AB2               	incf	___flmul@aexp,f
  4524  0764                     l2429:	
  4525  0764  0832               	movf	___flmul@aexp,w
  4526  0765  1903               	btfsc	3,2
  4527  0766  2F96               	goto	l2439
  4528  0767  3001               	movlw	1
  4529  0768  07B4               	addwf	___flmul@prod,f
  4530  0769  3000               	movlw	0
  4531  076A  1803               	skipnc
  4532  076B  3001               	movlw	1
  4533  076C  07B5               	addwf	___flmul@prod+1,f
  4534  076D  3000               	movlw	0
  4535  076E  1803               	skipnc
  4536  076F  3001               	movlw	1
  4537  0770  07B6               	addwf	___flmul@prod+2,f
  4538  0771  3000               	movlw	0
  4539  0772  1803               	skipnc
  4540  0773  3001               	movlw	1
  4541  0774  07B7               	addwf	___flmul@prod+3,f
  4542  0775  1C37               	btfss	___flmul@prod+3,0
  4543  0776  2F96               	goto	l2439
  4544  0777  0834               	movf	___flmul@prod,w
  4545  0778  00A8               	movwf	??___flmul
  4546  0779  0835               	movf	___flmul@prod+1,w
  4547  077A  00A9               	movwf	??___flmul+1
  4548  077B  0836               	movf	___flmul@prod+2,w
  4549  077C  00AA               	movwf	??___flmul+2
  4550  077D  0837               	movf	___flmul@prod+3,w
  4551  077E  00AB               	movwf	??___flmul+3
  4552  077F  3001               	movlw	1
  4553  0780  00AC               	movwf	??___flmul+4
  4554  0781                     u2925:	
  4555  0781  0D2B               	rlf	??___flmul+3,w
  4556  0782  0CAB               	rrf	??___flmul+3,f
  4557  0783  0CAA               	rrf	??___flmul+2,f
  4558  0784  0CA9               	rrf	??___flmul+1,f
  4559  0785  0CA8               	rrf	??___flmul,f
  4560  0786  0BAC               	decfsz	??___flmul+4,f
  4561  0787  2F81               	goto	u2925
  4562  0788  082B               	movf	??___flmul+3,w
  4563  0789  00B7               	movwf	___flmul@prod+3
  4564  078A  082A               	movf	??___flmul+2,w
  4565  078B  00B6               	movwf	___flmul@prod+2
  4566  078C  0829               	movf	??___flmul+1,w
  4567  078D  00B5               	movwf	___flmul@prod+1
  4568  078E  0828               	movf	??___flmul,w
  4569  078F  00B4               	movwf	___flmul@prod
  4570  0790  3001               	movlw	1
  4571  0791  07B8               	addwf	___flmul@temp,f
  4572  0792  1803               	skipnc
  4573  0793  0AB9               	incf	___flmul@temp+1,f
  4574  0794  3000               	movlw	0
  4575  0795  07B9               	addwf	___flmul@temp+1,f
  4576  0796                     l2439:	
  4577  0796  0839               	movf	___flmul@temp+1,w
  4578  0797  3A80               	xorlw	128
  4579  0798  00FF               	movwf	127
  4580  0799  3080               	movlw	128
  4581  079A  027F               	subwf	127,w
  4582  079B  1D03               	skipz
  4583  079C  2F9F               	goto	u2935
  4584  079D  30FF               	movlw	255
  4585  079E  0238               	subwf	___flmul@temp,w
  4586  079F                     u2935:	
  4587  079F  1C03               	skipc
  4588  07A0  2FAC               	goto	l2443
  4589  07A1  307F               	movlw	127
  4590  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  4591  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  4592  07A4  00B7               	movwf	___flmul@prod+3
  4593  07A5  3080               	movlw	128
  4594  07A6  00B6               	movwf	___flmul@prod+2
  4595  07A7  3000               	movlw	0
  4596  07A8  00B5               	movwf	___flmul@prod+1
  4597  07A9  3000               	movlw	0
  4598  07AA  00B4               	movwf	___flmul@prod
  4599  07AB  2FDC               	goto	l822
  4600  07AC                     l2443:	
  4601  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  4602  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  4603  07AE  0839               	movf	___flmul@temp+1,w
  4604  07AF  3A80               	xorlw	128
  4605  07B0  00FF               	movwf	127
  4606  07B1  3080               	movlw	128
  4607  07B2  027F               	subwf	127,w
  4608  07B3  1D03               	skipz
  4609  07B4  2FB7               	goto	u2945
  4610  07B5  3001               	movlw	1
  4611  07B6  0238               	subwf	___flmul@temp,w
  4612  07B7                     u2945:	
  4613  07B7  1803               	skipnc
  4614  07B8  2FC5               	goto	l2449
  4615  07B9  3000               	movlw	0
  4616  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  4617  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  4618  07BC  00B7               	movwf	___flmul@prod+3
  4619  07BD  3000               	movlw	0
  4620  07BE  00B6               	movwf	___flmul@prod+2
  4621  07BF  3000               	movlw	0
  4622  07C0  00B5               	movwf	___flmul@prod+1
  4623  07C1  3000               	movlw	0
  4624  07C2  00B4               	movwf	___flmul@prod
  4625  07C3  01AD               	clrf	___flmul@sign
  4626  07C4  2FDC               	goto	l822
  4627  07C5                     l2449:	
  4628  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  4629  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  4630  07C7  0838               	movf	___flmul@temp,w
  4631  07C8  00A8               	movwf	??___flmul
  4632  07C9  0828               	movf	??___flmul,w
  4633  07CA  00B3               	movwf	___flmul@bexp
  4634  07CB  30FF               	movlw	255
  4635  07CC  05B4               	andwf	___flmul@prod,f
  4636  07CD  30FF               	movlw	255
  4637  07CE  05B5               	andwf	___flmul@prod+1,f
  4638  07CF  307F               	movlw	127
  4639  07D0  05B6               	andwf	___flmul@prod+2,f
  4640  07D1  3000               	movlw	0
  4641  07D2  05B7               	andwf	___flmul@prod+3,f
  4642  07D3  1833               	btfsc	___flmul@bexp,0
  4643  07D4  17B6               	bsf	___flmul@prod+2,7
  4644  07D5  0833               	movf	___flmul@bexp,w
  4645  07D6  00A8               	movwf	??___flmul
  4646  07D7  1003               	clrc
  4647  07D8  0C28               	rrf	??___flmul,w
  4648  07D9  00A9               	movwf	??___flmul+1
  4649  07DA  0829               	movf	??___flmul+1,w
  4650  07DB  00B7               	movwf	___flmul@prod+3
  4651  07DC                     l822:	
  4652  07DC  082D               	movf	___flmul@sign,w
  4653  07DD  00A8               	movwf	??___flmul
  4654  07DE  0828               	movf	??___flmul,w
  4655  07DF  04B7               	iorwf	___flmul@prod+3,f
  4656  07E0  0837               	movf	___flmul@prod+3,w
  4657  07E1  00A3               	movwf	?___flmul+3
  4658  07E2  0836               	movf	___flmul@prod+2,w
  4659  07E3  00A2               	movwf	?___flmul+2
  4660  07E4  0835               	movf	___flmul@prod+1,w
  4661  07E5  00A1               	movwf	?___flmul+1
  4662  07E6  0834               	movf	___flmul@prod,w
  4663  07E7  00A0               	movwf	?___flmul
  4664  07E8  0008               	return
  4665  07E9                     __end_of___flmul:	
  4666                           
  4667                           	psect	text13
  4668  087C                     __ptext13:	
  4669 ;; *************** function __Umul8_16 *****************
  4670 ;; Defined at:
  4671 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8_16.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  multiplier      1    wreg     unsigned char 
  4674 ;;  multiplicand    1    0[COMMON] unsigned char 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;  multiplier      1    8[COMMON] unsigned char 
  4677 ;;  word_mpld       2    6[COMMON] unsigned int 
  4678 ;;  product         2    4[COMMON] unsigned int 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  2    0[COMMON] unsigned int 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4688 ;;      Params:         2       0       0       0       0
  4689 ;;      Locals:         5       0       0       0       0
  4690 ;;      Temps:          2       0       0       0       0
  4691 ;;      Totals:         9       0       0       0       0
  4692 ;;Total ram usage:        9 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; This function calls:
  4695 ;;		Nothing
  4696 ;; This function is called by:
  4697 ;;		___flmul
  4698 ;; This function uses a non-reentrant model
  4699 ;;
  4700                           
  4701                           
  4702                           ;psect for function __Umul8_16
  4703  087C                     __Umul8_16:	
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4707                           ;__Umul8_16@multiplier stored from wreg
  4708  087C  00F8               	movwf	__Umul8_16@multiplier
  4709  087D  01F4               	clrf	__Umul8_16@product
  4710  087E  01F5               	clrf	__Umul8_16@product+1
  4711  087F  0870               	movf	__Umul8_16@multiplicand,w
  4712  0880  00F2               	movwf	??__Umul8_16
  4713  0881  01F3               	clrf	??__Umul8_16+1
  4714  0882  0872               	movf	??__Umul8_16,w
  4715  0883  00F6               	movwf	__Umul8_16@word_mpld
  4716  0884  0873               	movf	??__Umul8_16+1,w
  4717  0885  00F7               	movwf	__Umul8_16@word_mpld+1
  4718  0886                     l2171:	
  4719  0886  1C78               	btfss	__Umul8_16@multiplier,0
  4720  0887  288E               	goto	l867
  4721  0888  0876               	movf	__Umul8_16@word_mpld,w
  4722  0889  07F4               	addwf	__Umul8_16@product,f
  4723  088A  1803               	skipnc
  4724  088B  0AF5               	incf	__Umul8_16@product+1,f
  4725  088C  0877               	movf	__Umul8_16@word_mpld+1,w
  4726  088D  07F5               	addwf	__Umul8_16@product+1,f
  4727  088E                     l867:	
  4728  088E  3001               	movlw	1
  4729  088F                     u2305:	
  4730  088F  1003               	clrc
  4731  0890  0DF6               	rlf	__Umul8_16@word_mpld,f
  4732  0891  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  4733  0892  3EFF               	addlw	-1
  4734  0893  1D03               	skipz
  4735  0894  288F               	goto	u2305
  4736  0895  1003               	clrc
  4737  0896  0CF8               	rrf	__Umul8_16@multiplier,f
  4738  0897  0878               	movf	__Umul8_16@multiplier,w
  4739  0898  1D03               	btfss	3,2
  4740  0899  2886               	goto	l2171
  4741  089A  0875               	movf	__Umul8_16@product+1,w
  4742  089B  00F1               	movwf	?__Umul8_16+1
  4743  089C  0874               	movf	__Umul8_16@product,w
  4744  089D  00F0               	movwf	?__Umul8_16
  4745  089E  0008               	return
  4746  089F                     __end_of__Umul8_16:	
  4747                           
  4748                           	psect	text14
  4749  0B70                     __ptext14:	
  4750 ;; *************** function ___flge *****************
  4751 ;; Defined at:
  4752 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\flge.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  ff1             4   26[BANK0 ] unsigned int 
  4755 ;;  ff2             4   30[BANK0 ] unsigned int 
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;		None
  4758 ;; Return value:  Size  Location     Type
  4759 ;;		None               void
  4760 ;; Registers used:
  4761 ;;		wreg, status,2, status,0
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4767 ;;      Params:         0       8       0       0       0
  4768 ;;      Locals:         0       0       0       0       0
  4769 ;;      Temps:          0       4       0       0       0
  4770 ;;      Totals:         0      12       0       0       0
  4771 ;;Total ram usage:       12 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_VerificarInversionGiro
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function ___flge
  4782  0B70                     ___flge:	
  4783                           
  4784                           ;incstack = 0
  4785                           ; Regs used in ___flge: [wreg+status,2+status,0]
  4786  0B70  3000               	movlw	0
  4787  0B71  1283               	bcf	3,5	;RP0=0, select bank0
  4788  0B72  1303               	bcf	3,6	;RP1=0, select bank0
  4789  0B73  053A               	andwf	___flge@ff1,w
  4790  0B74  00C2               	movwf	??___flge
  4791  0B75  3000               	movlw	0
  4792  0B76  053B               	andwf	___flge@ff1+1,w
  4793  0B77  00C3               	movwf	??___flge+1
  4794  0B78  3080               	movlw	128
  4795  0B79  053C               	andwf	___flge@ff1+2,w
  4796  0B7A  00C4               	movwf	??___flge+2
  4797  0B7B  307F               	movlw	127
  4798  0B7C  053D               	andwf	___flge@ff1+3,w
  4799  0B7D  00C5               	movwf	??___flge+3
  4800  0B7E  0845               	movf	??___flge+3,w
  4801  0B7F  0444               	iorwf	??___flge+2,w
  4802  0B80  0443               	iorwf	??___flge+1,w
  4803  0B81  0442               	iorwf	??___flge,w
  4804  0B82  1D03               	skipz
  4805  0B83  2B8C               	goto	l595
  4806  0B84  3000               	movlw	0
  4807  0B85  00BD               	movwf	___flge@ff1+3
  4808  0B86  3000               	movlw	0
  4809  0B87  00BC               	movwf	___flge@ff1+2
  4810  0B88  3000               	movlw	0
  4811  0B89  00BB               	movwf	___flge@ff1+1
  4812  0B8A  3000               	movlw	0
  4813  0B8B  00BA               	movwf	___flge@ff1
  4814  0B8C                     l595:	
  4815  0B8C  3000               	movlw	0
  4816  0B8D  053E               	andwf	___flge@ff2,w
  4817  0B8E  00C2               	movwf	??___flge
  4818  0B8F  3000               	movlw	0
  4819  0B90  053F               	andwf	___flge@ff2+1,w
  4820  0B91  00C3               	movwf	??___flge+1
  4821  0B92  3080               	movlw	128
  4822  0B93  0540               	andwf	___flge@ff2+2,w
  4823  0B94  00C4               	movwf	??___flge+2
  4824  0B95  307F               	movlw	127
  4825  0B96  0541               	andwf	___flge@ff2+3,w
  4826  0B97  00C5               	movwf	??___flge+3
  4827  0B98  0845               	movf	??___flge+3,w
  4828  0B99  0444               	iorwf	??___flge+2,w
  4829  0B9A  0443               	iorwf	??___flge+1,w
  4830  0B9B  0442               	iorwf	??___flge,w
  4831  0B9C  1D03               	skipz
  4832  0B9D  2BA6               	goto	l2307
  4833  0B9E  3000               	movlw	0
  4834  0B9F  00C1               	movwf	___flge@ff2+3
  4835  0BA0  3000               	movlw	0
  4836  0BA1  00C0               	movwf	___flge@ff2+2
  4837  0BA2  3000               	movlw	0
  4838  0BA3  00BF               	movwf	___flge@ff2+1
  4839  0BA4  3000               	movlw	0
  4840  0BA5  00BE               	movwf	___flge@ff2
  4841  0BA6                     l2307:	
  4842  0BA6  1FBD               	btfss	___flge@ff1+3,7
  4843  0BA7  2BCC               	goto	l2311
  4844  0BA8  3000               	movlw	0
  4845  0BA9  00C2               	movwf	??___flge
  4846  0BAA  3000               	movlw	0
  4847  0BAB  00C3               	movwf	??___flge+1
  4848  0BAC  3000               	movlw	0
  4849  0BAD  00C4               	movwf	??___flge+2
  4850  0BAE  3080               	movlw	128
  4851  0BAF  00C5               	movwf	??___flge+3
  4852  0BB0  083A               	movf	___flge@ff1,w
  4853  0BB1  02C2               	subwf	??___flge,f
  4854  0BB2  083B               	movf	___flge@ff1+1,w
  4855  0BB3  1C03               	skipc
  4856  0BB4  0F3B               	incfsz	___flge@ff1+1,w
  4857  0BB5  2BB7               	goto	u2551
  4858  0BB6  2BB8               	goto	u2552
  4859  0BB7                     u2551:	
  4860  0BB7  02C3               	subwf	??___flge+1,f
  4861  0BB8                     u2552:	
  4862  0BB8  083C               	movf	___flge@ff1+2,w
  4863  0BB9  1C03               	skipc
  4864  0BBA  0F3C               	incfsz	___flge@ff1+2,w
  4865  0BBB  2BBD               	goto	u2553
  4866  0BBC  2BBE               	goto	u2554
  4867  0BBD                     u2553:	
  4868  0BBD  02C4               	subwf	??___flge+2,f
  4869  0BBE                     u2554:	
  4870  0BBE  083D               	movf	___flge@ff1+3,w
  4871  0BBF  1C03               	skipc
  4872  0BC0  0F3D               	incfsz	___flge@ff1+3,w
  4873  0BC1  2BC3               	goto	u2555
  4874  0BC2  2BC4               	goto	u2556
  4875  0BC3                     u2555:	
  4876  0BC3  02C5               	subwf	??___flge+3,f
  4877  0BC4                     u2556:	
  4878  0BC4  0845               	movf	??___flge+3,w
  4879  0BC5  00BD               	movwf	___flge@ff1+3
  4880  0BC6  0844               	movf	??___flge+2,w
  4881  0BC7  00BC               	movwf	___flge@ff1+2
  4882  0BC8  0843               	movf	??___flge+1,w
  4883  0BC9  00BB               	movwf	___flge@ff1+1
  4884  0BCA  0842               	movf	??___flge,w
  4885  0BCB  00BA               	movwf	___flge@ff1
  4886  0BCC                     l2311:	
  4887  0BCC  1FC1               	btfss	___flge@ff2+3,7
  4888  0BCD  2BF2               	goto	l598
  4889  0BCE  3000               	movlw	0
  4890  0BCF  00C2               	movwf	??___flge
  4891  0BD0  3000               	movlw	0
  4892  0BD1  00C3               	movwf	??___flge+1
  4893  0BD2  3000               	movlw	0
  4894  0BD3  00C4               	movwf	??___flge+2
  4895  0BD4  3080               	movlw	128
  4896  0BD5  00C5               	movwf	??___flge+3
  4897  0BD6  083E               	movf	___flge@ff2,w
  4898  0BD7  02C2               	subwf	??___flge,f
  4899  0BD8  083F               	movf	___flge@ff2+1,w
  4900  0BD9  1C03               	skipc
  4901  0BDA  0F3F               	incfsz	___flge@ff2+1,w
  4902  0BDB  2BDD               	goto	u2571
  4903  0BDC  2BDE               	goto	u2572
  4904  0BDD                     u2571:	
  4905  0BDD  02C3               	subwf	??___flge+1,f
  4906  0BDE                     u2572:	
  4907  0BDE  0840               	movf	___flge@ff2+2,w
  4908  0BDF  1C03               	skipc
  4909  0BE0  0F40               	incfsz	___flge@ff2+2,w
  4910  0BE1  2BE3               	goto	u2573
  4911  0BE2  2BE4               	goto	u2574
  4912  0BE3                     u2573:	
  4913  0BE3  02C4               	subwf	??___flge+2,f
  4914  0BE4                     u2574:	
  4915  0BE4  0841               	movf	___flge@ff2+3,w
  4916  0BE5  1C03               	skipc
  4917  0BE6  0F41               	incfsz	___flge@ff2+3,w
  4918  0BE7  2BE9               	goto	u2575
  4919  0BE8  2BEA               	goto	u2576
  4920  0BE9                     u2575:	
  4921  0BE9  02C5               	subwf	??___flge+3,f
  4922  0BEA                     u2576:	
  4923  0BEA  0845               	movf	??___flge+3,w
  4924  0BEB  00C1               	movwf	___flge@ff2+3
  4925  0BEC  0844               	movf	??___flge+2,w
  4926  0BED  00C0               	movwf	___flge@ff2+2
  4927  0BEE  0843               	movf	??___flge+1,w
  4928  0BEF  00BF               	movwf	___flge@ff2+1
  4929  0BF0  0842               	movf	??___flge,w
  4930  0BF1  00BE               	movwf	___flge@ff2
  4931  0BF2                     l598:	
  4932  0BF2  3080               	movlw	128
  4933  0BF3  06BD               	xorwf	___flge@ff1+3,f
  4934  0BF4  3080               	movlw	128
  4935  0BF5  06C1               	xorwf	___flge@ff2+3,f
  4936  0BF6  0841               	movf	___flge@ff2+3,w
  4937  0BF7  023D               	subwf	___flge@ff1+3,w
  4938  0BF8  1D03               	skipz
  4939  0BF9  0008               	return
  4940  0BFA  0840               	movf	___flge@ff2+2,w
  4941  0BFB  023C               	subwf	___flge@ff1+2,w
  4942  0BFC  1D03               	skipz
  4943  0BFD  0008               	return
  4944  0BFE  083F               	movf	___flge@ff2+1,w
  4945  0BFF  023B               	subwf	___flge@ff1+1,w
  4946  0C00  1D03               	skipz
  4947  0C01  0008               	return
  4948  0C02  083E               	movf	___flge@ff2,w
  4949  0C03  023A               	subwf	___flge@ff1,w
  4950  0C04  0008               	return
  4951  0C05                     __end_of___flge:	
  4952                           
  4953                           	psect	text15
  4954  16BD                     __ptext15:	
  4955 ;; *************** function _Lcd_Write_Integer *****************
  4956 ;; Defined at:
  4957 ;;		line 99 in file "./lcd.h"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  a               2   37[BANK0 ] int 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  Data           10   40[BANK0 ] unsigned char [10]
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4971 ;;      Params:         0       2       0       0       0
  4972 ;;      Locals:         0      10       0       0       0
  4973 ;;      Temps:          0       1       0       0       0
  4974 ;;      Totals:         0      13       0       0       0
  4975 ;;Total ram usage:       13 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    3
  4978 ;; This function calls:
  4979 ;;		_Lcd_Write_String
  4980 ;;		_sprintf
  4981 ;; This function is called by:
  4982 ;;		_configurarAntiHorario
  4983 ;;		_configurarHorario
  4984 ;;		_Encoder
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           
  4989                           ;psect for function _Lcd_Write_Integer
  4990  16BD                     _Lcd_Write_Integer:	
  4991                           
  4992                           ;./lcd.h: 100:     char Data[10];;./lcd.h: 101:     sprintf(Data, "%d", a);
  4993                           
  4994                           ;incstack = 0
  4995                           ; Regs used in _Lcd_Write_Integer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4996  16BD  3067               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4997  16BE  1283               	bcf	3,5	;RP0=0, select bank0
  4998  16BF  1303               	bcf	3,6	;RP1=0, select bank0
  4999  16C0  00C7               	movwf	??_Lcd_Write_Integer
  5000  16C1  0847               	movf	??_Lcd_Write_Integer,w
  5001  16C2  00A0               	movwf	sprintf@f
  5002  16C3  0846               	movf	Lcd_Write_Integer@a+1,w
  5003  16C4  00A2               	movwf	?_sprintf+2
  5004  16C5  0845               	movf	Lcd_Write_Integer@a,w
  5005  16C6  00A1               	movwf	?_sprintf+1
  5006  16C7  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5007  16C8  120A  158A  2632  160A  118A  	fcall	_sprintf
  5008                           
  5009                           ;./lcd.h: 102:     Lcd_Write_String(Data);
  5010  16CD  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5011  16CE  00F5               	movwf	Lcd_Write_String@a
  5012  16CF  3000               	movlw	0
  5013  16D0  00F6               	movwf	Lcd_Write_String@a+1
  5014  16D1  120A  158A  209F   	fcall	_Lcd_Write_String
  5015  16D4  0008               	return
  5016  16D5                     __end_of_Lcd_Write_Integer:	
  5017                           
  5018                           	psect	text16
  5019  0E32                     __ptext16:	
  5020 ;; *************** function _sprintf *****************
  5021 ;; Defined at:
  5022 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  sp              1    wreg     PTR unsigned char 
  5025 ;;		 -> Lcd_Write_Integer@Data(10), UART_Write_Integer@Data(10), 
  5026 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  5027 ;;		 -> STR_2(3), STR_1(3), 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  5030 ;;		 -> Lcd_Write_Integer@Data(10), UART_Write_Integer@Data(10), 
  5031 ;;  tmpval          4    0        struct .
  5032 ;;  val             2    9[BANK0 ] unsigned int 
  5033 ;;  cp              2    0        PTR const unsigned char 
  5034 ;;  len             2    0        unsigned int 
  5035 ;;  c               1   12[BANK0 ] unsigned char 
  5036 ;;  prec            1    8[BANK0 ] char 
  5037 ;;  flag            1    7[BANK0 ] unsigned char 
  5038 ;;  ap              1    6[BANK0 ] PTR void [1]
  5039 ;;		 -> ?_sprintf(2), 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  2    0[BANK0 ] int 
  5042 ;; Registers used:
  5043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5049 ;;      Params:         0       3       0       0       0
  5050 ;;      Locals:         0       7       0       0       0
  5051 ;;      Temps:          0       3       0       0       0
  5052 ;;      Totals:         0      13       0       0       0
  5053 ;;Total ram usage:       13 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    1
  5056 ;; This function calls:
  5057 ;;		___lwdiv
  5058 ;;		___lwmod
  5059 ;; This function is called by:
  5060 ;;		_Lcd_Write_Integer
  5061 ;;		_UART_Write_Integer
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           
  5066                           ;psect for function _sprintf
  5067  0E32                     _sprintf:	
  5068                           
  5069                           ;incstack = 0
  5070                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5071                           ;sprintf@sp stored from wreg
  5072  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5073  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5074  0E34  00AB               	movwf	sprintf@sp
  5075                           
  5076                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5077  0E35  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  5078  0E36  00A3               	movwf	??_sprintf
  5079  0E37  0823               	movf	??_sprintf,w
  5080  0E38  00A6               	movwf	sprintf@ap
  5081  0E39                     l2233:	
  5082                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5083                           
  5084                           
  5085                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5086  0E39  3001               	movlw	1
  5087  0E3A  07A0               	addwf	sprintf@f,f
  5088  0E3B  30FF               	movlw	-1
  5089  0E3C  0720               	addwf	sprintf@f,w
  5090  0E3D  0084               	movwf	4
  5091  0E3E  120A  158A  200A  120A  158A  	fcall	stringdir
  5092  0E43  00A3               	movwf	??_sprintf
  5093  0E44  0823               	movf	??_sprintf,w
  5094  0E45  00AC               	movwf	sprintf@c
  5095  0E46  082C               	movf	sprintf@c,w
  5096  0E47  1903               	btfsc	3,2
  5097  0E48  2F05               	goto	l2235
  5098                           
  5099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5100  0E49  3025               	movlw	37
  5101  0E4A  062C               	xorwf	sprintf@c,w
  5102  0E4B  1903               	btfsc	3,2
  5103  0E4C  2E59               	goto	l2189
  5104                           
  5105                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5106  0E4D  082C               	movf	sprintf@c,w
  5107  0E4E  00A3               	movwf	??_sprintf
  5108  0E4F  082B               	movf	sprintf@sp,w
  5109  0E50  0084               	movwf	4
  5110  0E51  0823               	movf	??_sprintf,w
  5111  0E52  1383               	bcf	3,7	;select IRP bank0
  5112  0E53  0080               	movwf	0
  5113  0E54  3001               	movlw	1
  5114  0E55  00A3               	movwf	??_sprintf
  5115  0E56  0823               	movf	??_sprintf,w
  5116  0E57  07AB               	addwf	sprintf@sp,f
  5117                           
  5118                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5119  0E58  2E39               	goto	l2233
  5120  0E59                     l2189:	
  5121                           
  5122                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5123  0E59  01A7               	clrf	sprintf@flag
  5124                           
  5125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5126  0E5A  3001               	movlw	1
  5127  0E5B  07A0               	addwf	sprintf@f,f
  5128  0E5C  30FF               	movlw	-1
  5129  0E5D  0720               	addwf	sprintf@f,w
  5130  0E5E  0084               	movwf	4
  5131  0E5F  120A  158A  200A  120A  158A  	fcall	stringdir
  5132  0E64  00AC               	movwf	sprintf@c
  5133  0E65  00A3               	movwf	??_sprintf
  5134  0E66  01A4               	clrf	??_sprintf+1
  5135                           
  5136                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5137                           ; Switch size 1, requested type "simple"
  5138                           ; Number of cases is 1, Range of values is 0 to 0
  5139                           ; switch strategies available:
  5140                           ; Name         Instructions Cycles
  5141                           ; simple_byte            4     3 (average)
  5142                           ; direct_byte           11     8 (fixed)
  5143                           ; jumptable            260     6 (fixed)
  5144                           ;	Chosen strategy is simple_byte
  5145  0E67  0824               	movf	??_sprintf+1,w
  5146  0E68  3A00               	xorlw	0	; case 0
  5147  0E69  1903               	skipnz
  5148  0E6A  2E6C               	goto	l3211
  5149  0E6B  2E39               	goto	l2233
  5150  0E6C                     l3211:	
  5151                           
  5152                           ; Switch size 1, requested type "simple"
  5153                           ; Number of cases is 3, Range of values is 0 to 105
  5154                           ; switch strategies available:
  5155                           ; Name         Instructions Cycles
  5156                           ; simple_byte           10     6 (average)
  5157                           ; jumptable            260     6 (fixed)
  5158                           ;	Chosen strategy is simple_byte
  5159  0E6C  0823               	movf	??_sprintf,w
  5160  0E6D  3A00               	xorlw	0	; case 0
  5161  0E6E  1903               	skipnz
  5162  0E6F  2F05               	goto	l2235
  5163  0E70  3A64               	xorlw	100	; case 100
  5164  0E71  1903               	skipnz
  5165  0E72  2E77               	goto	l2195
  5166  0E73  3A0D               	xorlw	13	; case 105
  5167  0E74  1903               	skipnz
  5168  0E75  2E77               	goto	l2195
  5169  0E76  2E39               	goto	l2233
  5170  0E77                     l2195:	
  5171                           
  5172                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5173  0E77  0826               	movf	sprintf@ap,w
  5174  0E78  0084               	movwf	4
  5175  0E79  1383               	bcf	3,7	;select IRP bank0
  5176  0E7A  0800               	movf	0,w
  5177  0E7B  00A9               	movwf	sprintf@val
  5178  0E7C  0A84               	incf	4,f
  5179  0E7D  0800               	movf	0,w
  5180  0E7E  00AA               	movwf	sprintf@val+1
  5181  0E7F  3002               	movlw	2
  5182  0E80  00A3               	movwf	??_sprintf
  5183  0E81  0823               	movf	??_sprintf,w
  5184  0E82  07A6               	addwf	sprintf@ap,f
  5185                           
  5186                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5187  0E83  1FAA               	btfss	sprintf@val+1,7
  5188  0E84  2E8E               	goto	l2205
  5189                           
  5190                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5191  0E85  3003               	movlw	3
  5192  0E86  00A3               	movwf	??_sprintf
  5193  0E87  0823               	movf	??_sprintf,w
  5194  0E88  04A7               	iorwf	sprintf@flag,f
  5195                           
  5196                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5197  0E89  09A9               	comf	sprintf@val,f
  5198  0E8A  09AA               	comf	sprintf@val+1,f
  5199  0E8B  0AA9               	incf	sprintf@val,f
  5200  0E8C  1903               	skipnz
  5201  0E8D  0AAA               	incf	sprintf@val+1,f
  5202  0E8E                     l2205:	
  5203                           
  5204                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5205  0E8E  01AC               	clrf	sprintf@c
  5206  0E8F  0AAC               	incf	sprintf@c,f
  5207  0E90                     l2211:	
  5208                           
  5209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5210  0E90  082C               	movf	sprintf@c,w
  5211  0E91  00A3               	movwf	??_sprintf
  5212  0E92  0723               	addwf	??_sprintf,w
  5213  0E93  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5214  0E94  0084               	movwf	4
  5215  0E95  120A  158A  200A  120A  158A  	fcall	stringdir
  5216  0E9A  00A4               	movwf	??_sprintf+1
  5217  0E9B  120A  158A  200A  120A  158A  	fcall	stringdir
  5218  0EA0  00A5               	movwf	??_sprintf+2
  5219  0EA1  0825               	movf	??_sprintf+2,w
  5220  0EA2  022A               	subwf	sprintf@val+1,w
  5221  0EA3  1D03               	skipz
  5222  0EA4  2EA7               	goto	u2345
  5223  0EA5  0824               	movf	??_sprintf+1,w
  5224  0EA6  0229               	subwf	sprintf@val,w
  5225  0EA7                     u2345:	
  5226  0EA7  1C03               	btfss	3,0
  5227  0EA8  2EB1               	goto	l2217
  5228  0EA9  3001               	movlw	1
  5229  0EAA  00A3               	movwf	??_sprintf
  5230  0EAB  0823               	movf	??_sprintf,w
  5231  0EAC  07AC               	addwf	sprintf@c,f
  5232  0EAD  3005               	movlw	5
  5233  0EAE  062C               	xorwf	sprintf@c,w
  5234  0EAF  1D03               	btfss	3,2
  5235  0EB0  2E90               	goto	l2211
  5236  0EB1                     l2217:	
  5237                           
  5238                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5239  0EB1  0827               	movf	sprintf@flag,w
  5240  0EB2  3903               	andlw	3
  5241  0EB3  1903               	btfsc	3,2
  5242  0EB4  2EC0               	goto	l2223
  5243                           
  5244                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5245  0EB5  302D               	movlw	45
  5246  0EB6  00A3               	movwf	??_sprintf
  5247  0EB7  082B               	movf	sprintf@sp,w
  5248  0EB8  0084               	movwf	4
  5249  0EB9  0823               	movf	??_sprintf,w
  5250  0EBA  1383               	bcf	3,7	;select IRP bank0
  5251  0EBB  0080               	movwf	0
  5252  0EBC  3001               	movlw	1
  5253  0EBD  00A3               	movwf	??_sprintf
  5254  0EBE  0823               	movf	??_sprintf,w
  5255  0EBF  07AB               	addwf	sprintf@sp,f
  5256  0EC0                     l2223:	
  5257                           
  5258                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5259  0EC0  082C               	movf	sprintf@c,w
  5260  0EC1  00A3               	movwf	??_sprintf
  5261  0EC2  0823               	movf	??_sprintf,w
  5262  0EC3  00A8               	movwf	sprintf@prec
  5263  0EC4                     l2231:	
  5264                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5265                           
  5266                           
  5267                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5268  0EC4  30FF               	movlw	255
  5269  0EC5  00A3               	movwf	??_sprintf
  5270  0EC6  0823               	movf	??_sprintf,w
  5271  0EC7  07A8               	addwf	sprintf@prec,f
  5272  0EC8  0A28               	incf	sprintf@prec,w
  5273  0EC9  1903               	btfsc	3,2
  5274  0ECA  2E39               	goto	l2233
  5275                           
  5276                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5277  0ECB  300A               	movlw	10
  5278  0ECC  00F8               	movwf	___lwmod@divisor
  5279  0ECD  3000               	movlw	0
  5280  0ECE  00F9               	movwf	___lwmod@divisor+1
  5281  0ECF  0828               	movf	sprintf@prec,w
  5282  0ED0  00A3               	movwf	??_sprintf
  5283  0ED1  0723               	addwf	??_sprintf,w
  5284  0ED2  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5285  0ED3  0084               	movwf	4
  5286  0ED4  120A  158A  200A  120A  158A  	fcall	stringdir
  5287  0ED9  00F0               	movwf	___lwdiv@divisor
  5288  0EDA  120A  158A  200A  120A  158A  	fcall	stringdir
  5289  0EDF  00F1               	movwf	___lwdiv@divisor+1
  5290  0EE0  082A               	movf	sprintf@val+1,w
  5291  0EE1  00F3               	movwf	___lwdiv@dividend+1
  5292  0EE2  0829               	movf	sprintf@val,w
  5293  0EE3  00F2               	movwf	___lwdiv@dividend
  5294  0EE4  160A  118A  27C4  120A  158A  	fcall	___lwdiv
  5295  0EE9  0871               	movf	?___lwdiv+1,w
  5296  0EEA  00FB               	movwf	___lwmod@dividend+1
  5297  0EEB  0870               	movf	?___lwdiv,w
  5298  0EEC  00FA               	movwf	___lwmod@dividend
  5299  0EED  160A  118A  2759  120A  158A  	fcall	___lwmod
  5300  0EF2  0878               	movf	?___lwmod,w
  5301  0EF3  3E30               	addlw	48
  5302  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  5303  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  5304  0EF6  00A4               	movwf	??_sprintf+1
  5305  0EF7  0824               	movf	??_sprintf+1,w
  5306  0EF8  00AC               	movwf	sprintf@c
  5307                           
  5308                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5309  0EF9  082C               	movf	sprintf@c,w
  5310  0EFA  00A3               	movwf	??_sprintf
  5311  0EFB  082B               	movf	sprintf@sp,w
  5312  0EFC  0084               	movwf	4
  5313  0EFD  0823               	movf	??_sprintf,w
  5314  0EFE  1383               	bcf	3,7	;select IRP bank0
  5315  0EFF  0080               	movwf	0
  5316  0F00  3001               	movlw	1
  5317  0F01  00A3               	movwf	??_sprintf
  5318  0F02  0823               	movf	??_sprintf,w
  5319  0F03  07AB               	addwf	sprintf@sp,f
  5320  0F04  2EC4               	goto	l2231
  5321  0F05                     l2235:	
  5322                           
  5323                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5324  0F05  082B               	movf	sprintf@sp,w
  5325  0F06  0084               	movwf	4
  5326  0F07  1383               	bcf	3,7	;select IRP bank0
  5327  0F08  0180               	clrf	0
  5328  0F09  0008               	return
  5329  0F0A                     __end_of_sprintf:	
  5330                           
  5331                           	psect	text17
  5332  1759                     __ptext17:	
  5333 ;; *************** function ___lwmod *****************
  5334 ;; Defined at:
  5335 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  divisor         2    8[COMMON] unsigned int 
  5338 ;;  dividend        2   10[COMMON] unsigned int 
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  counter         1   13[COMMON] unsigned char 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  2    8[COMMON] unsigned int 
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5350 ;;      Params:         4       0       0       0       0
  5351 ;;      Locals:         1       0       0       0       0
  5352 ;;      Temps:          1       0       0       0       0
  5353 ;;      Totals:         6       0       0       0       0
  5354 ;;Total ram usage:        6 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_sprintf
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function ___lwmod
  5365  1759                     ___lwmod:	
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5369  1759  0878               	movf	___lwmod@divisor,w
  5370  175A  0479               	iorwf	___lwmod@divisor+1,w
  5371  175B  1903               	btfsc	3,2
  5372  175C  2F86               	goto	l2163
  5373  175D  01FD               	clrf	___lwmod@counter
  5374  175E  0AFD               	incf	___lwmod@counter,f
  5375  175F                     l2153:	
  5376  175F  1BF9               	btfsc	___lwmod@divisor+1,7
  5377  1760  2F6D               	goto	l2155
  5378  1761  3001               	movlw	1
  5379  1762                     u2245:	
  5380  1762  1003               	clrc
  5381  1763  0DF8               	rlf	___lwmod@divisor,f
  5382  1764  0DF9               	rlf	___lwmod@divisor+1,f
  5383  1765  3EFF               	addlw	-1
  5384  1766  1D03               	skipz
  5385  1767  2F62               	goto	u2245
  5386  1768  3001               	movlw	1
  5387  1769  00FC               	movwf	??___lwmod
  5388  176A  087C               	movf	??___lwmod,w
  5389  176B  07FD               	addwf	___lwmod@counter,f
  5390  176C  2F5F               	goto	l2153
  5391  176D                     l2155:	
  5392  176D  0879               	movf	___lwmod@divisor+1,w
  5393  176E  027B               	subwf	___lwmod@dividend+1,w
  5394  176F  1D03               	skipz
  5395  1770  2F73               	goto	u2265
  5396  1771  0878               	movf	___lwmod@divisor,w
  5397  1772  027A               	subwf	___lwmod@dividend,w
  5398  1773                     u2265:	
  5399  1773  1C03               	skipc
  5400  1774  2F7B               	goto	l2159
  5401  1775  0878               	movf	___lwmod@divisor,w
  5402  1776  02FA               	subwf	___lwmod@dividend,f
  5403  1777  0879               	movf	___lwmod@divisor+1,w
  5404  1778  1C03               	skipc
  5405  1779  03FB               	decf	___lwmod@dividend+1,f
  5406  177A  02FB               	subwf	___lwmod@dividend+1,f
  5407  177B                     l2159:	
  5408  177B  3001               	movlw	1
  5409  177C                     u2275:	
  5410  177C  1003               	clrc
  5411  177D  0CF9               	rrf	___lwmod@divisor+1,f
  5412  177E  0CF8               	rrf	___lwmod@divisor,f
  5413  177F  3EFF               	addlw	-1
  5414  1780  1D03               	skipz
  5415  1781  2F7C               	goto	u2275
  5416  1782  3001               	movlw	1
  5417  1783  02FD               	subwf	___lwmod@counter,f
  5418  1784  1D03               	btfss	3,2
  5419  1785  2F6D               	goto	l2155
  5420  1786                     l2163:	
  5421  1786  087B               	movf	___lwmod@dividend+1,w
  5422  1787  00F9               	movwf	?___lwmod+1
  5423  1788  087A               	movf	___lwmod@dividend,w
  5424  1789  00F8               	movwf	?___lwmod
  5425  178A  0008               	return
  5426  178B                     __end_of___lwmod:	
  5427                           
  5428                           	psect	text18
  5429  17C4                     __ptext18:	
  5430 ;; *************** function ___lwdiv *****************
  5431 ;; Defined at:
  5432 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  divisor         2    0[COMMON] unsigned int 
  5435 ;;  dividend        2    2[COMMON] unsigned int 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  quotient        2    5[COMMON] unsigned int 
  5438 ;;  counter         1    7[COMMON] unsigned char 
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  2    0[COMMON] unsigned int 
  5441 ;; Registers used:
  5442 ;;		wreg, status,2, status,0
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5448 ;;      Params:         4       0       0       0       0
  5449 ;;      Locals:         3       0       0       0       0
  5450 ;;      Temps:          1       0       0       0       0
  5451 ;;      Totals:         8       0       0       0       0
  5452 ;;Total ram usage:        8 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; This function calls:
  5455 ;;		Nothing
  5456 ;; This function is called by:
  5457 ;;		_sprintf
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function ___lwdiv
  5463  17C4                     ___lwdiv:	
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5467  17C4  01F5               	clrf	___lwdiv@quotient
  5468  17C5  01F6               	clrf	___lwdiv@quotient+1
  5469  17C6  0870               	movf	___lwdiv@divisor,w
  5470  17C7  0471               	iorwf	___lwdiv@divisor+1,w
  5471  17C8  1903               	btfsc	3,2
  5472  17C9  2FFB               	goto	l2141
  5473  17CA  01F7               	clrf	___lwdiv@counter
  5474  17CB  0AF7               	incf	___lwdiv@counter,f
  5475  17CC                     l2129:	
  5476  17CC  1BF1               	btfsc	___lwdiv@divisor+1,7
  5477  17CD  2FDA               	goto	l2131
  5478  17CE  3001               	movlw	1
  5479  17CF                     u2175:	
  5480  17CF  1003               	clrc
  5481  17D0  0DF0               	rlf	___lwdiv@divisor,f
  5482  17D1  0DF1               	rlf	___lwdiv@divisor+1,f
  5483  17D2  3EFF               	addlw	-1
  5484  17D3  1D03               	skipz
  5485  17D4  2FCF               	goto	u2175
  5486  17D5  3001               	movlw	1
  5487  17D6  00F4               	movwf	??___lwdiv
  5488  17D7  0874               	movf	??___lwdiv,w
  5489  17D8  07F7               	addwf	___lwdiv@counter,f
  5490  17D9  2FCC               	goto	l2129
  5491  17DA                     l2131:	
  5492  17DA  3001               	movlw	1
  5493  17DB                     u2195:	
  5494  17DB  1003               	clrc
  5495  17DC  0DF5               	rlf	___lwdiv@quotient,f
  5496  17DD  0DF6               	rlf	___lwdiv@quotient+1,f
  5497  17DE  3EFF               	addlw	-1
  5498  17DF  1D03               	skipz
  5499  17E0  2FDB               	goto	u2195
  5500  17E1  0871               	movf	___lwdiv@divisor+1,w
  5501  17E2  0273               	subwf	___lwdiv@dividend+1,w
  5502  17E3  1D03               	skipz
  5503  17E4  2FE7               	goto	u2205
  5504  17E5  0870               	movf	___lwdiv@divisor,w
  5505  17E6  0272               	subwf	___lwdiv@dividend,w
  5506  17E7                     u2205:	
  5507  17E7  1C03               	skipc
  5508  17E8  2FF0               	goto	l2137
  5509  17E9  0870               	movf	___lwdiv@divisor,w
  5510  17EA  02F2               	subwf	___lwdiv@dividend,f
  5511  17EB  0871               	movf	___lwdiv@divisor+1,w
  5512  17EC  1C03               	skipc
  5513  17ED  03F3               	decf	___lwdiv@dividend+1,f
  5514  17EE  02F3               	subwf	___lwdiv@dividend+1,f
  5515  17EF  1475               	bsf	___lwdiv@quotient,0
  5516  17F0                     l2137:	
  5517  17F0  3001               	movlw	1
  5518  17F1                     u2215:	
  5519  17F1  1003               	clrc
  5520  17F2  0CF1               	rrf	___lwdiv@divisor+1,f
  5521  17F3  0CF0               	rrf	___lwdiv@divisor,f
  5522  17F4  3EFF               	addlw	-1
  5523  17F5  1D03               	skipz
  5524  17F6  2FF1               	goto	u2215
  5525  17F7  3001               	movlw	1
  5526  17F8  02F7               	subwf	___lwdiv@counter,f
  5527  17F9  1D03               	btfss	3,2
  5528  17FA  2FDA               	goto	l2131
  5529  17FB                     l2141:	
  5530  17FB  0876               	movf	___lwdiv@quotient+1,w
  5531  17FC  00F1               	movwf	?___lwdiv+1
  5532  17FD  0875               	movf	___lwdiv@quotient,w
  5533  17FE  00F0               	movwf	?___lwdiv
  5534  17FF  0008               	return
  5535  1800                     __end_of___lwdiv:	
  5536                           
  5537                           	psect	text19
  5538  089F                     __ptext19:	
  5539 ;; *************** function _Lcd_Write_String *****************
  5540 ;; Defined at:
  5541 ;;		line 93 in file "./lcd.h"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;  a               2    5[COMMON] PTR unsigned char 
  5544 ;;		 -> STR_16(9), STR_15(11), STR_14(9), STR_13(14), 
  5545 ;;		 -> STR_12(4), STR_11(5), STR_10(11), STR_9(5), 
  5546 ;;		 -> STR_8(11), STR_7(4), STR_6(5), STR_5(8), 
  5547 ;;		 -> STR_4(5), STR_3(8), Lcd_Write_Integer@Data(10), 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  i               2   10[COMMON] int 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5559 ;;      Params:         2       0       0       0       0
  5560 ;;      Locals:         2       0       0       0       0
  5561 ;;      Temps:          3       0       0       0       0
  5562 ;;      Totals:         7       0       0       0       0
  5563 ;;Total ram usage:        7 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    2
  5566 ;; This function calls:
  5567 ;;		_Lcd_Write_Char
  5568 ;; This function is called by:
  5569 ;;		_Lcd_Write_Integer
  5570 ;;		_configurarAntiHorario
  5571 ;;		_configurarHorario
  5572 ;;		_Encoder
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _Lcd_Write_String
  5578  089F                     _Lcd_Write_String:	
  5579                           
  5580                           ;./lcd.h: 94:     int i;;./lcd.h: 95:     for (i = 0; a[i] != '\0'; i++)
  5581                           
  5582                           ;incstack = 0
  5583                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5584  089F  01FA               	clrf	Lcd_Write_String@i
  5585  08A0  01FB               	clrf	Lcd_Write_String@i+1
  5586  08A1                     l2259:	
  5587  08A1  087A               	movf	Lcd_Write_String@i,w
  5588  08A2  0775               	addwf	Lcd_Write_String@a,w
  5589  08A3  00F8               	movwf	??_Lcd_Write_String+1
  5590  08A4  0876               	movf	Lcd_Write_String@a+1,w
  5591  08A5  00F7               	movwf	??_Lcd_Write_String
  5592  08A6  1803               	skipnc
  5593  08A7  0AF7               	incf	??_Lcd_Write_String,f
  5594  08A8  1BFA               	btfsc	Lcd_Write_String@i,7
  5595  08A9  03F7               	decf	??_Lcd_Write_String,f
  5596  08AA  0877               	movf	??_Lcd_Write_String,w
  5597  08AB  00F9               	movwf	??_Lcd_Write_String+2
  5598  08AC  0879               	movf	??_Lcd_Write_String+2,w
  5599  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  5600  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  5601  08AF  00FF               	movwf	127
  5602  08B0  0878               	movf	??_Lcd_Write_String+1,w
  5603  08B1  0084               	movwf	4
  5604  08B2  120A  158A  2000  120A  158A  	fcall	stringtab
  5605  08B7  3A00               	xorlw	0
  5606  08B8  1903               	btfsc	3,2
  5607  08B9  0008               	return
  5608                           
  5609                           ;./lcd.h: 96:         Lcd_Write_Char(a[i]);
  5610  08BA  087A               	movf	Lcd_Write_String@i,w
  5611  08BB  0775               	addwf	Lcd_Write_String@a,w
  5612  08BC  00F8               	movwf	??_Lcd_Write_String+1
  5613  08BD  0876               	movf	Lcd_Write_String@a+1,w
  5614  08BE  00F7               	movwf	??_Lcd_Write_String
  5615  08BF  1803               	skipnc
  5616  08C0  0AF7               	incf	??_Lcd_Write_String,f
  5617  08C1  1BFA               	btfsc	Lcd_Write_String@i,7
  5618  08C2  03F7               	decf	??_Lcd_Write_String,f
  5619  08C3  0877               	movf	??_Lcd_Write_String,w
  5620  08C4  00F9               	movwf	??_Lcd_Write_String+2
  5621  08C5  0879               	movf	??_Lcd_Write_String+2,w
  5622  08C6  1283               	bcf	3,5	;RP0=0, select bank0
  5623  08C7  1303               	bcf	3,6	;RP1=0, select bank0
  5624  08C8  00FF               	movwf	127
  5625  08C9  0878               	movf	??_Lcd_Write_String+1,w
  5626  08CA  0084               	movwf	4
  5627  08CB  120A  158A  2000  120A  158A  	fcall	stringtab
  5628  08D0  160A  118A  278B  120A  158A  	fcall	_Lcd_Write_Char
  5629  08D5  3001               	movlw	1
  5630  08D6  07FA               	addwf	Lcd_Write_String@i,f
  5631  08D7  1803               	skipnc
  5632  08D8  0AFB               	incf	Lcd_Write_String@i+1,f
  5633  08D9  3000               	movlw	0
  5634  08DA  07FB               	addwf	Lcd_Write_String@i+1,f
  5635  08DB  28A1               	goto	l2259
  5636  08DC                     __end_of_Lcd_Write_String:	
  5637                           
  5638                           	psect	text20
  5639  178B                     __ptext20:	
  5640 ;; *************** function _Lcd_Write_Char *****************
  5641 ;; Defined at:
  5642 ;;		line 78 in file "./lcd.h"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  a               1    wreg     unsigned char 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  a               1    4[COMMON] unsigned char 
  5647 ;;  y               1    3[COMMON] unsigned char 
  5648 ;;  temp            1    2[COMMON] unsigned char 
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      void 
  5651 ;; Registers used:
  5652 ;;		wreg, status,2, status,0, pclath, cstack
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5658 ;;      Params:         0       0       0       0       0
  5659 ;;      Locals:         3       0       0       0       0
  5660 ;;      Temps:          1       0       0       0       0
  5661 ;;      Totals:         4       0       0       0       0
  5662 ;;Total ram usage:        4 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    1
  5665 ;; This function calls:
  5666 ;;		_Lcd_Port
  5667 ;; This function is called by:
  5668 ;;		_Lcd_Write_String
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           
  5673                           ;psect for function _Lcd_Write_Char
  5674  178B                     _Lcd_Write_Char:	
  5675                           
  5676                           ;incstack = 0
  5677                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5678                           ;Lcd_Write_Char@a stored from wreg
  5679  178B  00F4               	movwf	Lcd_Write_Char@a
  5680                           
  5681                           ;./lcd.h: 79:     char temp, y;;./lcd.h: 80:     temp = a & 0x0F;
  5682  178C  0874               	movf	Lcd_Write_Char@a,w
  5683  178D  390F               	andlw	15
  5684  178E  00F1               	movwf	??_Lcd_Write_Char
  5685  178F  0871               	movf	??_Lcd_Write_Char,w
  5686  1790  00F2               	movwf	Lcd_Write_Char@temp
  5687                           
  5688                           ;./lcd.h: 81:     y = a & 0xF0;
  5689  1791  0874               	movf	Lcd_Write_Char@a,w
  5690  1792  39F0               	andlw	240
  5691  1793  00F1               	movwf	??_Lcd_Write_Char
  5692  1794  0871               	movf	??_Lcd_Write_Char,w
  5693  1795  00F3               	movwf	Lcd_Write_Char@y
  5694                           
  5695                           ;./lcd.h: 82:     RB2 = 1;
  5696  1796  1283               	bcf	3,5	;RP0=0, select bank0
  5697  1797  1303               	bcf	3,6	;RP1=0, select bank0
  5698  1798  1506               	bsf	6,2	;volatile
  5699                           
  5700                           ;./lcd.h: 83:     Lcd_Port(y >> 4);
  5701  1799  0873               	movf	Lcd_Write_Char@y,w
  5702  179A  00F1               	movwf	??_Lcd_Write_Char
  5703  179B  3004               	movlw	4
  5704  179C                     u2155:	
  5705  179C  1003               	clrc
  5706  179D  0CF1               	rrf	??_Lcd_Write_Char,f
  5707  179E  3EFF               	addlw	-1
  5708  179F  1D03               	skipz
  5709  17A0  2F9C               	goto	u2155
  5710  17A1  0871               	movf	??_Lcd_Write_Char,w
  5711  17A2  160A  118A  26D5  160A  118A  	fcall	_Lcd_Port
  5712                           
  5713                           ;./lcd.h: 84:     RB3 = 1;
  5714  17A7  1283               	bcf	3,5	;RP0=0, select bank0
  5715  17A8  1303               	bcf	3,6	;RP1=0, select bank0
  5716  17A9  1586               	bsf	6,3	;volatile
  5717                           
  5718                           ;./lcd.h: 85:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5719  17AA  301A               	movlw	26
  5720  17AB  00F1               	movwf	??_Lcd_Write_Char
  5721  17AC                     u4197:	
  5722  17AC  0BF1               	decfsz	??_Lcd_Write_Char,f
  5723  17AD  2FAC               	goto	u4197
  5724  17AE  0000               	nop
  5725                           
  5726                           ;./lcd.h: 86:     RB3 = 0;
  5727  17AF  1283               	bcf	3,5	;RP0=0, select bank0
  5728  17B0  1303               	bcf	3,6	;RP1=0, select bank0
  5729  17B1  1186               	bcf	6,3	;volatile
  5730                           
  5731                           ;./lcd.h: 87:     Lcd_Port(temp);
  5732  17B2  0872               	movf	Lcd_Write_Char@temp,w
  5733  17B3  160A  118A  26D5  160A  118A  	fcall	_Lcd_Port
  5734                           
  5735                           ;./lcd.h: 88:     RB3 = 1;
  5736  17B8  1283               	bcf	3,5	;RP0=0, select bank0
  5737  17B9  1303               	bcf	3,6	;RP1=0, select bank0
  5738  17BA  1586               	bsf	6,3	;volatile
  5739                           
  5740                           ;./lcd.h: 89:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5741  17BB  301A               	movlw	26
  5742  17BC  00F1               	movwf	??_Lcd_Write_Char
  5743  17BD                     u4207:	
  5744  17BD  0BF1               	decfsz	??_Lcd_Write_Char,f
  5745  17BE  2FBD               	goto	u4207
  5746  17BF  0000               	nop
  5747                           
  5748                           ;./lcd.h: 90:     RB3 = 0;
  5749  17C0  1283               	bcf	3,5	;RP0=0, select bank0
  5750  17C1  1303               	bcf	3,6	;RP1=0, select bank0
  5751  17C2  1186               	bcf	6,3	;volatile
  5752  17C3  0008               	return
  5753  17C4                     __end_of_Lcd_Write_Char:	
  5754                           
  5755                           	psect	text21
  5756  08DC                     __ptext21:	
  5757 ;; *************** function _Lcd_Set_Cursor *****************
  5758 ;; Defined at:
  5759 ;;		line 43 in file "./lcd.h"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  a               1    wreg     unsigned char 
  5762 ;;  b               1    4[COMMON] unsigned char 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  a               1    7[COMMON] unsigned char 
  5765 ;;  temp            1   10[COMMON] unsigned char 
  5766 ;;  y               1    9[COMMON] unsigned char 
  5767 ;;  z               1    8[COMMON] unsigned char 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      void 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, pclath, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5777 ;;      Params:         1       0       0       0       0
  5778 ;;      Locals:         4       0       0       0       0
  5779 ;;      Temps:          2       0       0       0       0
  5780 ;;      Totals:         7       0       0       0       0
  5781 ;;Total ram usage:        7 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    2
  5784 ;; This function calls:
  5785 ;;		_Lcd_Cmd
  5786 ;; This function is called by:
  5787 ;;		_configurarAntiHorario
  5788 ;;		_configurarHorario
  5789 ;;		_Encoder
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           
  5794                           ;psect for function _Lcd_Set_Cursor
  5795  08DC                     _Lcd_Set_Cursor:	
  5796                           
  5797                           ;incstack = 0
  5798                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5799                           ;Lcd_Set_Cursor@a stored from wreg
  5800  08DC  00F7               	movwf	Lcd_Set_Cursor@a
  5801                           
  5802                           ;./lcd.h: 44:     char temp, z, y;;./lcd.h: 45:     if (a == 1) {
  5803  08DD  0377               	decf	Lcd_Set_Cursor@a,w
  5804  08DE  1D03               	btfss	3,2
  5805  08DF  2901               	goto	l2605
  5806                           
  5807                           ;./lcd.h: 46:         temp = 0x80 + b - 1;
  5808  08E0  0874               	movf	Lcd_Set_Cursor@b,w
  5809  08E1  3E7F               	addlw	127
  5810  08E2  00F5               	movwf	??_Lcd_Set_Cursor
  5811  08E3  0875               	movf	??_Lcd_Set_Cursor,w
  5812  08E4  00FA               	movwf	Lcd_Set_Cursor@temp
  5813                           
  5814                           ;./lcd.h: 47:         z = temp >> 4;
  5815  08E5  087A               	movf	Lcd_Set_Cursor@temp,w
  5816  08E6  00F5               	movwf	??_Lcd_Set_Cursor
  5817  08E7  3004               	movlw	4
  5818  08E8                     u3385:	
  5819  08E8  1003               	clrc
  5820  08E9  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5821  08EA  3EFF               	addlw	-1
  5822  08EB  1D03               	skipz
  5823  08EC  28E8               	goto	u3385
  5824  08ED  0875               	movf	??_Lcd_Set_Cursor,w
  5825  08EE  00F6               	movwf	??_Lcd_Set_Cursor+1
  5826  08EF  0876               	movf	??_Lcd_Set_Cursor+1,w
  5827  08F0  00F8               	movwf	Lcd_Set_Cursor@z
  5828                           
  5829                           ;./lcd.h: 48:         y = temp & 0x0F;
  5830  08F1  087A               	movf	Lcd_Set_Cursor@temp,w
  5831  08F2  390F               	andlw	15
  5832  08F3  00F5               	movwf	??_Lcd_Set_Cursor
  5833  08F4  0875               	movf	??_Lcd_Set_Cursor,w
  5834  08F5  00F9               	movwf	Lcd_Set_Cursor@y
  5835                           
  5836                           ;./lcd.h: 49:         Lcd_Cmd(z);
  5837  08F6  0878               	movf	Lcd_Set_Cursor@z,w
  5838  08F7  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  5839                           
  5840                           ;./lcd.h: 50:         Lcd_Cmd(y);
  5841  08FC  0879               	movf	Lcd_Set_Cursor@y,w
  5842  08FD  160A  118A  26EF   	fcall	_Lcd_Cmd
  5843                           
  5844                           ;./lcd.h: 51:     } else if (a == 2) {
  5845  0900  0008               	return
  5846  0901                     l2605:	
  5847  0901  3002               	movlw	2
  5848  0902  0677               	xorwf	Lcd_Set_Cursor@a,w
  5849  0903  1D03               	btfss	3,2
  5850  0904  0008               	return
  5851                           
  5852                           ;./lcd.h: 52:         temp = 0xC0 + b - 1;
  5853  0905  0874               	movf	Lcd_Set_Cursor@b,w
  5854  0906  3EBF               	addlw	191
  5855  0907  00F5               	movwf	??_Lcd_Set_Cursor
  5856  0908  0875               	movf	??_Lcd_Set_Cursor,w
  5857  0909  00FA               	movwf	Lcd_Set_Cursor@temp
  5858                           
  5859                           ;./lcd.h: 53:         z = temp >> 4;
  5860  090A  087A               	movf	Lcd_Set_Cursor@temp,w
  5861  090B  00F5               	movwf	??_Lcd_Set_Cursor
  5862  090C  3004               	movlw	4
  5863  090D                     u3405:	
  5864  090D  1003               	clrc
  5865  090E  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5866  090F  3EFF               	addlw	-1
  5867  0910  1D03               	skipz
  5868  0911  290D               	goto	u3405
  5869  0912  0875               	movf	??_Lcd_Set_Cursor,w
  5870  0913  00F6               	movwf	??_Lcd_Set_Cursor+1
  5871  0914  0876               	movf	??_Lcd_Set_Cursor+1,w
  5872  0915  00F8               	movwf	Lcd_Set_Cursor@z
  5873                           
  5874                           ;./lcd.h: 54:         y = temp & 0x0F;
  5875  0916  087A               	movf	Lcd_Set_Cursor@temp,w
  5876  0917  390F               	andlw	15
  5877  0918  00F5               	movwf	??_Lcd_Set_Cursor
  5878  0919  0875               	movf	??_Lcd_Set_Cursor,w
  5879  091A  00F9               	movwf	Lcd_Set_Cursor@y
  5880                           
  5881                           ;./lcd.h: 55:         Lcd_Cmd(z);
  5882  091B  0878               	movf	Lcd_Set_Cursor@z,w
  5883  091C  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  5884                           
  5885                           ;./lcd.h: 56:         Lcd_Cmd(y);
  5886  0921  0879               	movf	Lcd_Set_Cursor@y,w
  5887  0922  160A  118A  26EF   	fcall	_Lcd_Cmd
  5888  0925  0008               	return
  5889  0926                     __end_of_Lcd_Set_Cursor:	
  5890                           
  5891                           	psect	text22
  5892  16B2                     __ptext22:	
  5893 ;; *************** function _Lcd_Clear *****************
  5894 ;; Defined at:
  5895 ;;		line 38 in file "./lcd.h"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;		None
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;		None
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  1    wreg      void 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, pclath, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5909 ;;      Params:         0       0       0       0       0
  5910 ;;      Locals:         0       0       0       0       0
  5911 ;;      Temps:          0       0       0       0       0
  5912 ;;      Totals:         0       0       0       0       0
  5913 ;;Total ram usage:        0 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    2
  5916 ;; This function calls:
  5917 ;;		_Lcd_Cmd
  5918 ;; This function is called by:
  5919 ;;		_configurarAntiHorario
  5920 ;;		_configurarHorario
  5921 ;;		_Encoder
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           
  5926                           ;psect for function _Lcd_Clear
  5927  16B2                     _Lcd_Clear:	
  5928                           
  5929                           ;./lcd.h: 39:     Lcd_Cmd(0);
  5930                           
  5931                           ;incstack = 0
  5932                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5933  16B2  3000               	movlw	0
  5934  16B3  160A  118A  26EF  160A  118A  	fcall	_Lcd_Cmd
  5935                           
  5936                           ;./lcd.h: 40:     Lcd_Cmd(1);
  5937  16B8  3001               	movlw	1
  5938  16B9  160A  118A  26EF   	fcall	_Lcd_Cmd
  5939  16BC  0008               	return
  5940  16BD                     __end_of_Lcd_Clear:	
  5941                           
  5942                           	psect	text23
  5943  172A                     __ptext23:	
  5944 ;; *************** function _ConfigInit *****************
  5945 ;; Defined at:
  5946 ;;		line 9 in file "Config.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      void 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0, pclath, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5960 ;;      Params:         0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0
  5963 ;;      Totals:         0       0       0       0       0
  5964 ;;Total ram usage:        0 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    3
  5967 ;; This function calls:
  5968 ;;		_Lcd_Init
  5969 ;;		_UART_Init
  5970 ;; This function is called by:
  5971 ;;		_main
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           
  5976                           ;psect for function _ConfigInit
  5977  172A                     _ConfigInit:	
  5978                           
  5979                           ;Config.c: 12:     OSCCONbits.IRCF = 0x7;
  5980                           
  5981                           ;incstack = 0
  5982                           ; Regs used in _ConfigInit: [wreg+status,2+status,0+pclath+cstack]
  5983  172A  3070               	movlw	112
  5984  172B  1683               	bsf	3,5	;RP0=1, select bank1
  5985  172C  1303               	bcf	3,6	;RP1=0, select bank1
  5986  172D  048F               	iorwf	15,f	;volatile
  5987                           
  5988                           ;Config.c: 13:     OSCCONbits.SCS = 0;
  5989  172E  100F               	bcf	15,0	;volatile
  5990                           
  5991                           ;Config.c: 14:     OSCTUNE = 0x00;
  5992  172F  0190               	clrf	16	;volatile
  5993                           
  5994                           ;Config.c: 17:     ANSELH = ANSEL = 0;
  5995  1730  1683               	bsf	3,5	;RP0=1, select bank3
  5996  1731  1703               	bsf	3,6	;RP1=1, select bank3
  5997  1732  0188               	clrf	8	;volatile
  5998  1733  0189               	clrf	9	;volatile
  5999                           
  6000                           ;Config.c: 20:     TRISB = 0x01;
  6001  1734  3001               	movlw	1
  6002  1735  1683               	bsf	3,5	;RP0=1, select bank1
  6003  1736  1303               	bcf	3,6	;RP1=0, select bank1
  6004  1737  0086               	movwf	6	;volatile
  6005                           
  6006                           ;Config.c: 23:     TRISC = 0x00;
  6007  1738  0187               	clrf	7	;volatile
  6008                           
  6009                           ;Config.c: 24:     PORTC = 0x00;
  6010  1739  1283               	bcf	3,5	;RP0=0, select bank0
  6011  173A  1303               	bcf	3,6	;RP1=0, select bank0
  6012  173B  0187               	clrf	7	;volatile
  6013                           
  6014                           ;Config.c: 27:     TRISA = 0xE8;
  6015  173C  30E8               	movlw	232
  6016  173D  1683               	bsf	3,5	;RP0=1, select bank1
  6017  173E  1303               	bcf	3,6	;RP1=0, select bank1
  6018  173F  0085               	movwf	5	;volatile
  6019                           
  6020                           ;Config.c: 28:     PORTA = 0x00;
  6021  1740  1283               	bcf	3,5	;RP0=0, select bank0
  6022  1741  1303               	bcf	3,6	;RP1=0, select bank0
  6023  1742  0185               	clrf	5	;volatile
  6024                           
  6025                           ;Config.c: 31:     nRBPU = 0;
  6026  1743  1683               	bsf	3,5	;RP0=1, select bank1
  6027  1744  1303               	bcf	3,6	;RP1=0, select bank1
  6028  1745  1381               	bcf	1,7	;volatile
  6029                           
  6030                           ;Config.c: 32:     UART_Init(9600);
  6031  1746  3000               	movlw	0
  6032  1747  1283               	bcf	3,5	;RP0=0, select bank0
  6033  1748  1303               	bcf	3,6	;RP1=0, select bank0
  6034  1749  00A9               	movwf	UART_Init@baudrate+3
  6035  174A  3000               	movlw	0
  6036  174B  00A8               	movwf	UART_Init@baudrate+2
  6037  174C  3025               	movlw	37
  6038  174D  00A7               	movwf	UART_Init@baudrate+1
  6039  174E  3080               	movlw	128
  6040  174F  00A6               	movwf	UART_Init@baudrate
  6041  1750  120A  158A  255C  160A  118A  	fcall	_UART_Init
  6042                           
  6043                           ;Config.c: 33:     Lcd_Init();
  6044  1755  120A  158A  2126   	fcall	_Lcd_Init
  6045  1758  0008               	return
  6046  1759                     __end_of_ConfigInit:	
  6047                           
  6048                           	psect	text24
  6049  0D5C                     __ptext24:	
  6050 ;; *************** function _UART_Init *****************
  6051 ;; Defined at:
  6052 ;;		line 3 in file "./uart.h"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  baudrate        4    6[BANK0 ] const long 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  x               2    9[COMMON] unsigned int 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  1    wreg      unsigned char 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0, pclath, cstack
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6066 ;;      Params:         0       4       0       0       0
  6067 ;;      Locals:         2       0       0       0       0
  6068 ;;      Temps:          0      12       0       0       0
  6069 ;;      Totals:         2      16       0       0       0
  6070 ;;Total ram usage:       18 bytes
  6071 ;; Hardware stack levels used:    1
  6072 ;; Hardware stack levels required when called:    1
  6073 ;; This function calls:
  6074 ;;		___aldiv
  6075 ;; This function is called by:
  6076 ;;		_ConfigInit
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           
  6081                           ;psect for function _UART_Init
  6082  0D5C                     _UART_Init:	
  6083                           
  6084                           ;./uart.h: 4:     unsigned int x;;./uart.h: 5:     x = (8000000 - baudrate * 64) / (baud
      +                          rate * 64);
  6085                           
  6086                           ;incstack = 0
  6087                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  6088  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  6089  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  6090  0D5E  0826               	movf	UART_Init@baudrate,w
  6091  0D5F  00AA               	movwf	??_UART_Init
  6092  0D60  0827               	movf	UART_Init@baudrate+1,w
  6093  0D61  00AB               	movwf	??_UART_Init+1
  6094  0D62  0828               	movf	UART_Init@baudrate+2,w
  6095  0D63  00AC               	movwf	??_UART_Init+2
  6096  0D64  0829               	movf	UART_Init@baudrate+3,w
  6097  0D65  00AD               	movwf	??_UART_Init+3
  6098  0D66  3006               	movlw	6
  6099  0D67                     u3295:	
  6100  0D67  1003               	clrc
  6101  0D68  0DAA               	rlf	??_UART_Init,f
  6102  0D69  0DAB               	rlf	??_UART_Init+1,f
  6103  0D6A  0DAC               	rlf	??_UART_Init+2,f
  6104  0D6B  0DAD               	rlf	??_UART_Init+3,f
  6105  0D6C  3EFF               	addlw	-1
  6106  0D6D  1D03               	skipz
  6107  0D6E  2D67               	goto	u3295
  6108  0D6F  082D               	movf	??_UART_Init+3,w
  6109  0D70  00F3               	movwf	___aldiv@divisor+3
  6110  0D71  082C               	movf	??_UART_Init+2,w
  6111  0D72  00F2               	movwf	___aldiv@divisor+2
  6112  0D73  082B               	movf	??_UART_Init+1,w
  6113  0D74  00F1               	movwf	___aldiv@divisor+1
  6114  0D75  082A               	movf	??_UART_Init,w
  6115  0D76  00F0               	movwf	___aldiv@divisor
  6116  0D77  0826               	movf	UART_Init@baudrate,w
  6117  0D78  00AE               	movwf	??_UART_Init+4
  6118  0D79  0827               	movf	UART_Init@baudrate+1,w
  6119  0D7A  00AF               	movwf	??_UART_Init+5
  6120  0D7B  0828               	movf	UART_Init@baudrate+2,w
  6121  0D7C  00B0               	movwf	??_UART_Init+6
  6122  0D7D  0829               	movf	UART_Init@baudrate+3,w
  6123  0D7E  00B1               	movwf	??_UART_Init+7
  6124  0D7F  3006               	movlw	6
  6125  0D80                     u3305:	
  6126  0D80  1003               	clrc
  6127  0D81  0DAE               	rlf	??_UART_Init+4,f
  6128  0D82  0DAF               	rlf	??_UART_Init+5,f
  6129  0D83  0DB0               	rlf	??_UART_Init+6,f
  6130  0D84  0DB1               	rlf	??_UART_Init+7,f
  6131  0D85  3EFF               	addlw	-1
  6132  0D86  1D03               	skipz
  6133  0D87  2D80               	goto	u3305
  6134  0D88  3000               	movlw	0
  6135  0D89  00B2               	movwf	??_UART_Init+8
  6136  0D8A  3012               	movlw	18
  6137  0D8B  00B3               	movwf	??_UART_Init+9
  6138  0D8C  307A               	movlw	122
  6139  0D8D  00B4               	movwf	??_UART_Init+10
  6140  0D8E  3000               	movlw	0
  6141  0D8F  00B5               	movwf	??_UART_Init+11
  6142  0D90  082E               	movf	??_UART_Init+4,w
  6143  0D91  02B2               	subwf	??_UART_Init+8,f
  6144  0D92  082F               	movf	??_UART_Init+5,w
  6145  0D93  1C03               	skipc
  6146  0D94  0F2F               	incfsz	??_UART_Init+5,w
  6147  0D95  2D97               	goto	u3311
  6148  0D96  2D98               	goto	u3312
  6149  0D97                     u3311:	
  6150  0D97  02B3               	subwf	??_UART_Init+9,f
  6151  0D98                     u3312:	
  6152  0D98  0830               	movf	??_UART_Init+6,w
  6153  0D99  1C03               	skipc
  6154  0D9A  0F30               	incfsz	??_UART_Init+6,w
  6155  0D9B  2D9D               	goto	u3313
  6156  0D9C  2D9E               	goto	u3314
  6157  0D9D                     u3313:	
  6158  0D9D  02B4               	subwf	??_UART_Init+10,f
  6159  0D9E                     u3314:	
  6160  0D9E  0831               	movf	??_UART_Init+7,w
  6161  0D9F  1C03               	skipc
  6162  0DA0  0F31               	incfsz	??_UART_Init+7,w
  6163  0DA1  2DA3               	goto	u3315
  6164  0DA2  2DA4               	goto	u3316
  6165  0DA3                     u3315:	
  6166  0DA3  02B5               	subwf	??_UART_Init+11,f
  6167  0DA4                     u3316:	
  6168  0DA4  0835               	movf	??_UART_Init+11,w
  6169  0DA5  00F7               	movwf	___aldiv@dividend+3
  6170  0DA6  0834               	movf	??_UART_Init+10,w
  6171  0DA7  00F6               	movwf	___aldiv@dividend+2
  6172  0DA8  0833               	movf	??_UART_Init+9,w
  6173  0DA9  00F5               	movwf	___aldiv@dividend+1
  6174  0DAA  0832               	movf	??_UART_Init+8,w
  6175  0DAB  00F4               	movwf	___aldiv@dividend
  6176  0DAC  120A  158A  2250  120A  158A  	fcall	___aldiv
  6177  0DB1  0871               	movf	?___aldiv+1,w
  6178  0DB2  00FA               	movwf	UART_Init@x+1
  6179  0DB3  0870               	movf	?___aldiv,w
  6180  0DB4  00F9               	movwf	UART_Init@x
  6181                           
  6182                           ;./uart.h: 6:     if (x > 255) {
  6183  0DB5  3001               	movlw	1
  6184  0DB6  027A               	subwf	UART_Init@x+1,w
  6185  0DB7  3000               	movlw	0
  6186  0DB8  1903               	skipnz
  6187  0DB9  0279               	subwf	UART_Init@x,w
  6188  0DBA  1C03               	skipc
  6189  0DBB  2E18               	goto	l2575
  6190                           
  6191                           ;./uart.h: 7:         x = (8000000 - baudrate * 16) / (baudrate * 16);
  6192  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  6193  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  6194  0DBE  0826               	movf	UART_Init@baudrate,w
  6195  0DBF  00AA               	movwf	??_UART_Init
  6196  0DC0  0827               	movf	UART_Init@baudrate+1,w
  6197  0DC1  00AB               	movwf	??_UART_Init+1
  6198  0DC2  0828               	movf	UART_Init@baudrate+2,w
  6199  0DC3  00AC               	movwf	??_UART_Init+2
  6200  0DC4  0829               	movf	UART_Init@baudrate+3,w
  6201  0DC5  00AD               	movwf	??_UART_Init+3
  6202  0DC6  3004               	movlw	4
  6203  0DC7                     u3335:	
  6204  0DC7  1003               	clrc
  6205  0DC8  0DAA               	rlf	??_UART_Init,f
  6206  0DC9  0DAB               	rlf	??_UART_Init+1,f
  6207  0DCA  0DAC               	rlf	??_UART_Init+2,f
  6208  0DCB  0DAD               	rlf	??_UART_Init+3,f
  6209  0DCC  3EFF               	addlw	-1
  6210  0DCD  1D03               	skipz
  6211  0DCE  2DC7               	goto	u3335
  6212  0DCF  082D               	movf	??_UART_Init+3,w
  6213  0DD0  00F3               	movwf	___aldiv@divisor+3
  6214  0DD1  082C               	movf	??_UART_Init+2,w
  6215  0DD2  00F2               	movwf	___aldiv@divisor+2
  6216  0DD3  082B               	movf	??_UART_Init+1,w
  6217  0DD4  00F1               	movwf	___aldiv@divisor+1
  6218  0DD5  082A               	movf	??_UART_Init,w
  6219  0DD6  00F0               	movwf	___aldiv@divisor
  6220  0DD7  0826               	movf	UART_Init@baudrate,w
  6221  0DD8  00AE               	movwf	??_UART_Init+4
  6222  0DD9  0827               	movf	UART_Init@baudrate+1,w
  6223  0DDA  00AF               	movwf	??_UART_Init+5
  6224  0DDB  0828               	movf	UART_Init@baudrate+2,w
  6225  0DDC  00B0               	movwf	??_UART_Init+6
  6226  0DDD  0829               	movf	UART_Init@baudrate+3,w
  6227  0DDE  00B1               	movwf	??_UART_Init+7
  6228  0DDF  3004               	movlw	4
  6229  0DE0                     u3345:	
  6230  0DE0  1003               	clrc
  6231  0DE1  0DAE               	rlf	??_UART_Init+4,f
  6232  0DE2  0DAF               	rlf	??_UART_Init+5,f
  6233  0DE3  0DB0               	rlf	??_UART_Init+6,f
  6234  0DE4  0DB1               	rlf	??_UART_Init+7,f
  6235  0DE5  3EFF               	addlw	-1
  6236  0DE6  1D03               	skipz
  6237  0DE7  2DE0               	goto	u3345
  6238  0DE8  3000               	movlw	0
  6239  0DE9  00B2               	movwf	??_UART_Init+8
  6240  0DEA  3012               	movlw	18
  6241  0DEB  00B3               	movwf	??_UART_Init+9
  6242  0DEC  307A               	movlw	122
  6243  0DED  00B4               	movwf	??_UART_Init+10
  6244  0DEE  3000               	movlw	0
  6245  0DEF  00B5               	movwf	??_UART_Init+11
  6246  0DF0  082E               	movf	??_UART_Init+4,w
  6247  0DF1  02B2               	subwf	??_UART_Init+8,f
  6248  0DF2  082F               	movf	??_UART_Init+5,w
  6249  0DF3  1C03               	skipc
  6250  0DF4  0F2F               	incfsz	??_UART_Init+5,w
  6251  0DF5  2DF7               	goto	u3351
  6252  0DF6  2DF8               	goto	u3352
  6253  0DF7                     u3351:	
  6254  0DF7  02B3               	subwf	??_UART_Init+9,f
  6255  0DF8                     u3352:	
  6256  0DF8  0830               	movf	??_UART_Init+6,w
  6257  0DF9  1C03               	skipc
  6258  0DFA  0F30               	incfsz	??_UART_Init+6,w
  6259  0DFB  2DFD               	goto	u3353
  6260  0DFC  2DFE               	goto	u3354
  6261  0DFD                     u3353:	
  6262  0DFD  02B4               	subwf	??_UART_Init+10,f
  6263  0DFE                     u3354:	
  6264  0DFE  0831               	movf	??_UART_Init+7,w
  6265  0DFF  1C03               	skipc
  6266  0E00  0F31               	incfsz	??_UART_Init+7,w
  6267  0E01  2E03               	goto	u3355
  6268  0E02  2E04               	goto	u3356
  6269  0E03                     u3355:	
  6270  0E03  02B5               	subwf	??_UART_Init+11,f
  6271  0E04                     u3356:	
  6272  0E04  0835               	movf	??_UART_Init+11,w
  6273  0E05  00F7               	movwf	___aldiv@dividend+3
  6274  0E06  0834               	movf	??_UART_Init+10,w
  6275  0E07  00F6               	movwf	___aldiv@dividend+2
  6276  0E08  0833               	movf	??_UART_Init+9,w
  6277  0E09  00F5               	movwf	___aldiv@dividend+1
  6278  0E0A  0832               	movf	??_UART_Init+8,w
  6279  0E0B  00F4               	movwf	___aldiv@dividend
  6280  0E0C  120A  158A  2250  120A  158A  	fcall	___aldiv
  6281  0E11  0871               	movf	?___aldiv+1,w
  6282  0E12  00FA               	movwf	UART_Init@x+1
  6283  0E13  0870               	movf	?___aldiv,w
  6284  0E14  00F9               	movwf	UART_Init@x
  6285                           
  6286                           ;./uart.h: 8:         BRGH = 1;
  6287  0E15  1683               	bsf	3,5	;RP0=1, select bank1
  6288  0E16  1303               	bcf	3,6	;RP1=0, select bank1
  6289  0E17  1518               	bsf	24,2	;volatile
  6290  0E18                     l2575:	
  6291                           
  6292                           ;./uart.h: 10:     if (x < 256) {
  6293  0E18  3001               	movlw	1
  6294  0E19  027A               	subwf	UART_Init@x+1,w
  6295  0E1A  3000               	movlw	0
  6296  0E1B  1903               	skipnz
  6297  0E1C  0279               	subwf	UART_Init@x,w
  6298  0E1D  1803               	skipnc
  6299  0E1E  0008               	return
  6300                           
  6301                           ;./uart.h: 11:         SPBRG = x;
  6302  0E1F  0879               	movf	UART_Init@x,w
  6303  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  6304  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  6305  0E22  0099               	movwf	25	;volatile
  6306                           
  6307                           ;./uart.h: 12:         SYNC = 0;
  6308  0E23  1218               	bcf	24,4	;volatile
  6309                           
  6310                           ;./uart.h: 13:         SPEN = 1;
  6311  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  6312  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  6313  0E26  1798               	bsf	24,7	;volatile
  6314                           
  6315                           ;./uart.h: 14:         TRISC7 = 1;
  6316  0E27  1683               	bsf	3,5	;RP0=1, select bank1
  6317  0E28  1303               	bcf	3,6	;RP1=0, select bank1
  6318  0E29  1787               	bsf	7,7	;volatile
  6319                           
  6320                           ;./uart.h: 15:         TRISC6 = 1;
  6321  0E2A  1707               	bsf	7,6	;volatile
  6322                           
  6323                           ;./uart.h: 16:         CREN = 1;
  6324  0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  6325  0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  6326  0E2D  1618               	bsf	24,4	;volatile
  6327                           
  6328                           ;./uart.h: 17:         TXEN = 1;
  6329  0E2E  1683               	bsf	3,5	;RP0=1, select bank1
  6330  0E2F  1303               	bcf	3,6	;RP1=0, select bank1
  6331  0E30  1698               	bsf	24,5	;volatile
  6332  0E31  0008               	return
  6333  0E32                     __end_of_UART_Init:	
  6334                           
  6335                           	psect	text25
  6336  0A50                     __ptext25:	
  6337 ;; *************** function ___aldiv *****************
  6338 ;; Defined at:
  6339 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;  divisor         4    0[COMMON] long 
  6342 ;;  dividend        4    4[COMMON] long 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  quotient        4    2[BANK0 ] long 
  6345 ;;  sign            1    1[BANK0 ] unsigned char 
  6346 ;;  counter         1    0[BANK0 ] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  4    0[COMMON] long 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6356 ;;      Params:         8       0       0       0       0
  6357 ;;      Locals:         0       6       0       0       0
  6358 ;;      Temps:          1       0       0       0       0
  6359 ;;      Totals:         9       6       0       0       0
  6360 ;;Total ram usage:       15 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; This function calls:
  6363 ;;		Nothing
  6364 ;; This function is called by:
  6365 ;;		_UART_Init
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           
  6370                           ;psect for function ___aldiv
  6371  0A50                     ___aldiv:	
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6375  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  6376  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  6377  0A52  01A1               	clrf	___aldiv@sign
  6378  0A53  1FF3               	btfss	___aldiv@divisor+3,7
  6379  0A54  2A62               	goto	l486
  6380  0A55  09F0               	comf	___aldiv@divisor,f
  6381  0A56  09F1               	comf	___aldiv@divisor+1,f
  6382  0A57  09F2               	comf	___aldiv@divisor+2,f
  6383  0A58  09F3               	comf	___aldiv@divisor+3,f
  6384  0A59  0AF0               	incf	___aldiv@divisor,f
  6385  0A5A  1903               	skipnz
  6386  0A5B  0AF1               	incf	___aldiv@divisor+1,f
  6387  0A5C  1903               	skipnz
  6388  0A5D  0AF2               	incf	___aldiv@divisor+2,f
  6389  0A5E  1903               	skipnz
  6390  0A5F  0AF3               	incf	___aldiv@divisor+3,f
  6391  0A60  01A1               	clrf	___aldiv@sign
  6392  0A61  0AA1               	incf	___aldiv@sign,f
  6393  0A62                     l486:	
  6394  0A62  1FF7               	btfss	___aldiv@dividend+3,7
  6395  0A63  2A73               	goto	l2271
  6396  0A64  09F4               	comf	___aldiv@dividend,f
  6397  0A65  09F5               	comf	___aldiv@dividend+1,f
  6398  0A66  09F6               	comf	___aldiv@dividend+2,f
  6399  0A67  09F7               	comf	___aldiv@dividend+3,f
  6400  0A68  0AF4               	incf	___aldiv@dividend,f
  6401  0A69  1903               	skipnz
  6402  0A6A  0AF5               	incf	___aldiv@dividend+1,f
  6403  0A6B  1903               	skipnz
  6404  0A6C  0AF6               	incf	___aldiv@dividend+2,f
  6405  0A6D  1903               	skipnz
  6406  0A6E  0AF7               	incf	___aldiv@dividend+3,f
  6407  0A6F  3001               	movlw	1
  6408  0A70  00F8               	movwf	??___aldiv
  6409  0A71  0878               	movf	??___aldiv,w
  6410  0A72  06A1               	xorwf	___aldiv@sign,f
  6411  0A73                     l2271:	
  6412  0A73  3000               	movlw	0
  6413  0A74  00A5               	movwf	___aldiv@quotient+3
  6414  0A75  3000               	movlw	0
  6415  0A76  00A4               	movwf	___aldiv@quotient+2
  6416  0A77  3000               	movlw	0
  6417  0A78  00A3               	movwf	___aldiv@quotient+1
  6418  0A79  3000               	movlw	0
  6419  0A7A  00A2               	movwf	___aldiv@quotient
  6420  0A7B  0873               	movf	___aldiv@divisor+3,w
  6421  0A7C  0472               	iorwf	___aldiv@divisor+2,w
  6422  0A7D  0471               	iorwf	___aldiv@divisor+1,w
  6423  0A7E  0470               	iorwf	___aldiv@divisor,w
  6424  0A7F  1903               	skipnz
  6425  0A80  2AC8               	goto	l2293
  6426  0A81  01A0               	clrf	___aldiv@counter
  6427  0A82  0AA0               	incf	___aldiv@counter,f
  6428  0A83                     l2279:	
  6429  0A83  1BF3               	btfsc	___aldiv@divisor+3,7
  6430  0A84  2A93               	goto	l2281
  6431  0A85  3001               	movlw	1
  6432  0A86  00F8               	movwf	??___aldiv
  6433  0A87                     u2455:	
  6434  0A87  1003               	clrc
  6435  0A88  0DF0               	rlf	___aldiv@divisor,f
  6436  0A89  0DF1               	rlf	___aldiv@divisor+1,f
  6437  0A8A  0DF2               	rlf	___aldiv@divisor+2,f
  6438  0A8B  0DF3               	rlf	___aldiv@divisor+3,f
  6439  0A8C  0BF8               	decfsz	??___aldiv,f
  6440  0A8D  2A87               	goto	u2455
  6441  0A8E  3001               	movlw	1
  6442  0A8F  00F8               	movwf	??___aldiv
  6443  0A90  0878               	movf	??___aldiv,w
  6444  0A91  07A0               	addwf	___aldiv@counter,f
  6445  0A92  2A83               	goto	l2279
  6446  0A93                     l2281:	
  6447  0A93  3001               	movlw	1
  6448  0A94  00F8               	movwf	??___aldiv
  6449  0A95                     u2475:	
  6450  0A95  1003               	clrc
  6451  0A96  0DA2               	rlf	___aldiv@quotient,f
  6452  0A97  0DA3               	rlf	___aldiv@quotient+1,f
  6453  0A98  0DA4               	rlf	___aldiv@quotient+2,f
  6454  0A99  0DA5               	rlf	___aldiv@quotient+3,f
  6455  0A9A  0BF8               	decfsz	??___aldiv,f
  6456  0A9B  2A95               	goto	u2475
  6457  0A9C  0873               	movf	___aldiv@divisor+3,w
  6458  0A9D  0277               	subwf	___aldiv@dividend+3,w
  6459  0A9E  1D03               	skipz
  6460  0A9F  2AAA               	goto	u2485
  6461  0AA0  0872               	movf	___aldiv@divisor+2,w
  6462  0AA1  0276               	subwf	___aldiv@dividend+2,w
  6463  0AA2  1D03               	skipz
  6464  0AA3  2AAA               	goto	u2485
  6465  0AA4  0871               	movf	___aldiv@divisor+1,w
  6466  0AA5  0275               	subwf	___aldiv@dividend+1,w
  6467  0AA6  1D03               	skipz
  6468  0AA7  2AAA               	goto	u2485
  6469  0AA8  0870               	movf	___aldiv@divisor,w
  6470  0AA9  0274               	subwf	___aldiv@dividend,w
  6471  0AAA                     u2485:	
  6472  0AAA  1C03               	skipc
  6473  0AAB  2ABB               	goto	l2289
  6474  0AAC  0870               	movf	___aldiv@divisor,w
  6475  0AAD  02F4               	subwf	___aldiv@dividend,f
  6476  0AAE  0871               	movf	___aldiv@divisor+1,w
  6477  0AAF  1C03               	skipc
  6478  0AB0  0F71               	incfsz	___aldiv@divisor+1,w
  6479  0AB1  02F5               	subwf	___aldiv@dividend+1,f
  6480  0AB2  0872               	movf	___aldiv@divisor+2,w
  6481  0AB3  1C03               	skipc
  6482  0AB4  0F72               	incfsz	___aldiv@divisor+2,w
  6483  0AB5  02F6               	subwf	___aldiv@dividend+2,f
  6484  0AB6  0873               	movf	___aldiv@divisor+3,w
  6485  0AB7  1C03               	skipc
  6486  0AB8  0F73               	incfsz	___aldiv@divisor+3,w
  6487  0AB9  02F7               	subwf	___aldiv@dividend+3,f
  6488  0ABA  1422               	bsf	___aldiv@quotient,0
  6489  0ABB                     l2289:	
  6490  0ABB  3001               	movlw	1
  6491  0ABC                     u2495:	
  6492  0ABC  1003               	clrc
  6493  0ABD  0CF3               	rrf	___aldiv@divisor+3,f
  6494  0ABE  0CF2               	rrf	___aldiv@divisor+2,f
  6495  0ABF  0CF1               	rrf	___aldiv@divisor+1,f
  6496  0AC0  0CF0               	rrf	___aldiv@divisor,f
  6497  0AC1  3EFF               	addlw	-1
  6498  0AC2  1D03               	skipz
  6499  0AC3  2ABC               	goto	u2495
  6500  0AC4  3001               	movlw	1
  6501  0AC5  02A0               	subwf	___aldiv@counter,f
  6502  0AC6  1D03               	btfss	3,2
  6503  0AC7  2A93               	goto	l2281
  6504  0AC8                     l2293:	
  6505  0AC8  0821               	movf	___aldiv@sign,w
  6506  0AC9  1903               	btfsc	3,2
  6507  0ACA  2AD6               	goto	l2297
  6508  0ACB  09A2               	comf	___aldiv@quotient,f
  6509  0ACC  09A3               	comf	___aldiv@quotient+1,f
  6510  0ACD  09A4               	comf	___aldiv@quotient+2,f
  6511  0ACE  09A5               	comf	___aldiv@quotient+3,f
  6512  0ACF  0AA2               	incf	___aldiv@quotient,f
  6513  0AD0  1903               	skipnz
  6514  0AD1  0AA3               	incf	___aldiv@quotient+1,f
  6515  0AD2  1903               	skipnz
  6516  0AD3  0AA4               	incf	___aldiv@quotient+2,f
  6517  0AD4  1903               	skipnz
  6518  0AD5  0AA5               	incf	___aldiv@quotient+3,f
  6519  0AD6                     l2297:	
  6520  0AD6  0825               	movf	___aldiv@quotient+3,w
  6521  0AD7  00F3               	movwf	?___aldiv+3
  6522  0AD8  0824               	movf	___aldiv@quotient+2,w
  6523  0AD9  00F2               	movwf	?___aldiv+2
  6524  0ADA  0823               	movf	___aldiv@quotient+1,w
  6525  0ADB  00F1               	movwf	?___aldiv+1
  6526  0ADC  0822               	movf	___aldiv@quotient,w
  6527  0ADD  00F0               	movwf	?___aldiv
  6528  0ADE  0008               	return
  6529  0ADF                     __end_of___aldiv:	
  6530                           
  6531                           	psect	text26
  6532  0926                     __ptext26:	
  6533 ;; *************** function _Lcd_Init *****************
  6534 ;; Defined at:
  6535 ;;		line 60 in file "./lcd.h"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;		None
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6549 ;;      Params:         0       0       0       0       0
  6550 ;;      Locals:         0       0       0       0       0
  6551 ;;      Temps:          2       0       0       0       0
  6552 ;;      Totals:         2       0       0       0       0
  6553 ;;Total ram usage:        2 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    2
  6556 ;; This function calls:
  6557 ;;		_Lcd_Cmd
  6558 ;;		_Lcd_Port
  6559 ;; This function is called by:
  6560 ;;		_ConfigInit
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _Lcd_Init
  6566  0926                     _Lcd_Init:	
  6567                           
  6568                           ;./lcd.h: 61:     Lcd_Port(0x00);
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6572  0926  3000               	movlw	0
  6573  0927  160A  118A  26D5  120A  158A  	fcall	_Lcd_Port
  6574                           
  6575                           ;./lcd.h: 62:     _delay((unsigned long)((20)*(8000000/4000.0)));
  6576  092C  3034               	movlw	52
  6577  092D  00F5               	movwf	??_Lcd_Init+1
  6578  092E  30F1               	movlw	241
  6579  092F  00F4               	movwf	??_Lcd_Init
  6580  0930                     u4217:	
  6581  0930  0BF4               	decfsz	??_Lcd_Init,f
  6582  0931  2930               	goto	u4217
  6583  0932  0BF5               	decfsz	??_Lcd_Init+1,f
  6584  0933  2930               	goto	u4217
  6585  0934  2935               	nop2
  6586                           
  6587                           ;./lcd.h: 63:     Lcd_Cmd(0x03);
  6588  0935  3003               	movlw	3
  6589  0936  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6590                           
  6591                           ;./lcd.h: 64:     _delay((unsigned long)((5)*(8000000/4000.0)));
  6592  093B  300D               	movlw	13
  6593  093C  00F5               	movwf	??_Lcd_Init+1
  6594  093D  30FB               	movlw	251
  6595  093E  00F4               	movwf	??_Lcd_Init
  6596  093F                     u4227:	
  6597  093F  0BF4               	decfsz	??_Lcd_Init,f
  6598  0940  293F               	goto	u4227
  6599  0941  0BF5               	decfsz	??_Lcd_Init+1,f
  6600  0942  293F               	goto	u4227
  6601  0943  2944               	nop2
  6602                           
  6603                           ;./lcd.h: 65:     Lcd_Cmd(0x03);
  6604  0944  3003               	movlw	3
  6605  0945  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6606                           
  6607                           ;./lcd.h: 66:     _delay((unsigned long)((11)*(8000000/4000.0)));
  6608  094A  301D               	movlw	29
  6609  094B  00F5               	movwf	??_Lcd_Init+1
  6610  094C  3091               	movlw	145
  6611  094D  00F4               	movwf	??_Lcd_Init
  6612  094E                     u4237:	
  6613  094E  0BF4               	decfsz	??_Lcd_Init,f
  6614  094F  294E               	goto	u4237
  6615  0950  0BF5               	decfsz	??_Lcd_Init+1,f
  6616  0951  294E               	goto	u4237
  6617                           
  6618                           ;./lcd.h: 67:     Lcd_Cmd(0x03);
  6619  0952  3003               	movlw	3
  6620  0953  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6621                           
  6622                           ;./lcd.h: 69:     Lcd_Cmd(0x02);
  6623  0958  3002               	movlw	2
  6624  0959  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6625                           
  6626                           ;./lcd.h: 70:     Lcd_Cmd(0x02);
  6627  095E  3002               	movlw	2
  6628  095F  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6629                           
  6630                           ;./lcd.h: 71:     Lcd_Cmd(0x08);
  6631  0964  3008               	movlw	8
  6632  0965  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6633                           
  6634                           ;./lcd.h: 72:     Lcd_Cmd(0x00);
  6635  096A  3000               	movlw	0
  6636  096B  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6637                           
  6638                           ;./lcd.h: 73:     Lcd_Cmd(0x0C);
  6639  0970  300C               	movlw	12
  6640  0971  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6641                           
  6642                           ;./lcd.h: 74:     Lcd_Cmd(0x00);
  6643  0976  3000               	movlw	0
  6644  0977  160A  118A  26EF  120A  158A  	fcall	_Lcd_Cmd
  6645                           
  6646                           ;./lcd.h: 75:     Lcd_Cmd(0x06);
  6647  097C  3006               	movlw	6
  6648  097D  160A  118A  26EF   	fcall	_Lcd_Cmd
  6649  0980  0008               	return
  6650  0981                     __end_of_Lcd_Init:	
  6651                           
  6652                           	psect	text27
  6653  16EF                     __ptext27:	
  6654 ;; *************** function _Lcd_Cmd *****************
  6655 ;; Defined at:
  6656 ;;		line 30 in file "./lcd.h"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;  a               1    wreg     unsigned char 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  a               1    3[COMMON] unsigned char 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      void 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, status,0, pclath, cstack
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6670 ;;      Params:         0       0       0       0       0
  6671 ;;      Locals:         1       0       0       0       0
  6672 ;;      Temps:          2       0       0       0       0
  6673 ;;      Totals:         3       0       0       0       0
  6674 ;;Total ram usage:        3 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    1
  6677 ;; This function calls:
  6678 ;;		_Lcd_Port
  6679 ;; This function is called by:
  6680 ;;		_Lcd_Clear
  6681 ;;		_Lcd_Set_Cursor
  6682 ;;		_Lcd_Init
  6683 ;;		_Lcd_Shift_Right
  6684 ;;		_Lcd_Shift_Left
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           
  6689                           ;psect for function _Lcd_Cmd
  6690  16EF                     _Lcd_Cmd:	
  6691                           
  6692                           ;incstack = 0
  6693                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6694                           ;Lcd_Cmd@a stored from wreg
  6695  16EF  00F3               	movwf	Lcd_Cmd@a
  6696                           
  6697                           ;./lcd.h: 31:     RB2 = 0;
  6698  16F0  1283               	bcf	3,5	;RP0=0, select bank0
  6699  16F1  1303               	bcf	3,6	;RP1=0, select bank0
  6700  16F2  1106               	bcf	6,2	;volatile
  6701                           
  6702                           ;./lcd.h: 32:     Lcd_Port(a);
  6703  16F3  0873               	movf	Lcd_Cmd@a,w
  6704  16F4  160A  118A  26D5  160A  118A  	fcall	_Lcd_Port
  6705                           
  6706                           ;./lcd.h: 33:     RB3 = 1;
  6707  16F9  1283               	bcf	3,5	;RP0=0, select bank0
  6708  16FA  1303               	bcf	3,6	;RP1=0, select bank0
  6709  16FB  1586               	bsf	6,3	;volatile
  6710                           
  6711                           ;./lcd.h: 34:     _delay((unsigned long)((4)*(8000000/4000.0)));
  6712  16FC  300B               	movlw	11
  6713  16FD  00F2               	movwf	??_Lcd_Cmd+1
  6714  16FE  3062               	movlw	98
  6715  16FF  00F1               	movwf	??_Lcd_Cmd
  6716  1700                     u4247:	
  6717  1700  0BF1               	decfsz	??_Lcd_Cmd,f
  6718  1701  2F00               	goto	u4247
  6719  1702  0BF2               	decfsz	??_Lcd_Cmd+1,f
  6720  1703  2F00               	goto	u4247
  6721  1704  0000               	nop
  6722                           
  6723                           ;./lcd.h: 35:     RB3 = 0;
  6724  1705  1283               	bcf	3,5	;RP0=0, select bank0
  6725  1706  1303               	bcf	3,6	;RP1=0, select bank0
  6726  1707  1186               	bcf	6,3	;volatile
  6727  1708  0008               	return
  6728  1709                     __end_of_Lcd_Cmd:	
  6729                           
  6730                           	psect	text28
  6731  16D5                     __ptext28:	
  6732 ;; *************** function _Lcd_Port *****************
  6733 ;; Defined at:
  6734 ;;		line 8 in file "./lcd.h"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  a               1    wreg     unsigned char 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;  a               1    0[COMMON] unsigned char 
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  1    wreg      void 
  6741 ;; Registers used:
  6742 ;;		wreg
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6748 ;;      Params:         0       0       0       0       0
  6749 ;;      Locals:         1       0       0       0       0
  6750 ;;      Temps:          0       0       0       0       0
  6751 ;;      Totals:         1       0       0       0       0
  6752 ;;Total ram usage:        1 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_Lcd_Cmd
  6758 ;;		_Lcd_Init
  6759 ;;		_Lcd_Write_Char
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           
  6764                           ;psect for function _Lcd_Port
  6765  16D5                     _Lcd_Port:	
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _Lcd_Port: [wreg]
  6769                           ;Lcd_Port@a stored from wreg
  6770  16D5  00F0               	movwf	Lcd_Port@a
  6771                           
  6772                           ;./lcd.h: 9:     if (a & 1)
  6773  16D6  1C70               	btfss	Lcd_Port@a,0
  6774  16D7  2EDC               	goto	l210
  6775                           
  6776                           ;./lcd.h: 10:         RB7 = 1;
  6777  16D8  1283               	bcf	3,5	;RP0=0, select bank0
  6778  16D9  1303               	bcf	3,6	;RP1=0, select bank0
  6779  16DA  1786               	bsf	6,7	;volatile
  6780  16DB  2EDF               	goto	l211
  6781  16DC                     l210:	
  6782                           ;./lcd.h: 11:     else
  6783                           
  6784                           
  6785                           ;./lcd.h: 12:         RB7 = 0;
  6786  16DC  1283               	bcf	3,5	;RP0=0, select bank0
  6787  16DD  1303               	bcf	3,6	;RP1=0, select bank0
  6788  16DE  1386               	bcf	6,7	;volatile
  6789  16DF                     l211:	
  6790                           
  6791                           ;./lcd.h: 14:     if (a & 2)
  6792  16DF  1CF0               	btfss	Lcd_Port@a,1
  6793  16E0  2EE3               	goto	l212
  6794                           
  6795                           ;./lcd.h: 15:         RB4 = 1;
  6796  16E1  1606               	bsf	6,4	;volatile
  6797  16E2  2EE4               	goto	l213
  6798  16E3                     l212:	
  6799                           ;./lcd.h: 16:     else
  6800                           
  6801                           
  6802                           ;./lcd.h: 17:         RB4 = 0;
  6803  16E3  1206               	bcf	6,4	;volatile
  6804  16E4                     l213:	
  6805                           
  6806                           ;./lcd.h: 19:     if (a & 4)
  6807  16E4  1D70               	btfss	Lcd_Port@a,2
  6808  16E5  2EE8               	goto	l214
  6809                           
  6810                           ;./lcd.h: 20:         RB6 = 1;
  6811  16E6  1706               	bsf	6,6	;volatile
  6812  16E7  2EE9               	goto	l215
  6813  16E8                     l214:	
  6814                           ;./lcd.h: 21:     else
  6815                           
  6816                           
  6817                           ;./lcd.h: 22:         RB6 = 0;
  6818  16E8  1306               	bcf	6,6	;volatile
  6819  16E9                     l215:	
  6820                           
  6821                           ;./lcd.h: 24:     if (a & 8)
  6822  16E9  1DF0               	btfss	Lcd_Port@a,3
  6823  16EA  2EED               	goto	l216
  6824                           
  6825                           ;./lcd.h: 25:         RB5 = 1;
  6826  16EB  1686               	bsf	6,5	;volatile
  6827  16EC  0008               	return
  6828  16ED                     l216:	
  6829                           ;./lcd.h: 26:     else
  6830                           
  6831                           
  6832                           ;./lcd.h: 27:         RB5 = 0;
  6833  16ED  1286               	bcf	6,5	;volatile
  6834  16EE  0008               	return
  6835  16EF                     __end_of_Lcd_Port:	
  6836  007E                     btemp	set	126	;btemp
  6837  007E                     wtemp0	set	126


Data Sizes:
    Strings     61
    Constant    44
    Data        2
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     56      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Lcd_Write_Integer@Data(BANK0[10]), UART_Write_Integer@Data(COMMON[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[9]), STR_15(CODE[11]), STR_14(CODE[9]), STR_13(CODE[14]), 
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[11]), STR_9(CODE[5]), 
		 -> STR_8(CODE[11]), STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[8]), 
		 -> STR_4(CODE[5]), STR_3(CODE[8]), Lcd_Write_Integer@Data(BANK0[10]), 


Critical Paths under _main in COMMON

    _Encoder->___xxtofl
    ___fltol->___xxtofl
    ___fladd->___xxtofl
    _VerificarInversionGiro->___xxtofl
    ___flmul->___xxtofl
    ___flge->___xxtofl
    _Lcd_Write_Integer->___xxtofl
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _ConfigInit->_UART_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_configurarAntiHorario
    _main->_configurarHorario
    _configurarHorario->_Lcd_Write_Integer
    _configurarAntiHorario->_Lcd_Write_Integer
    _Encoder->_Lcd_Write_Integer
    ___fltol->___flmul
    _VerificarInversionGiro->___flge
    ___flge->___flmul
    _Lcd_Write_Integer->___fltol
    _ConfigInit->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   32678
                                             54 BANK0      2     2      0
                         _ConfigInit
                            _Encoder
                       _KeyPadGetKey
                           _RunMotor
                          _StopMotor
              _configurarAntiHorario
                  _configurarHorario
 ---------------------------------------------------------------------------------
 (1) _configurarHorario                                    4     4      0    6823
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _configurarAntiHorario                                4     4      0    6823
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _StopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunMotor                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _KeyPadGetKey                                         6     4      2     205
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Encoder                                              1     1      0   17793
                                             50 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
             _VerificarInversionGiro
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             11     7      4     609
                                             26 BANK0     11     7      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             20    12      8    2414
                                              0 BANK0     20    12      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _VerificarInversionGiro                               0     0      0    4517
                             ___flge
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1006
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    3025
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     486
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   13    11      2    3260
                                             37 BANK0     13    11      2
                   _Lcd_Write_String
                            ___flmul (ARG)
                            ___fltol (ARG)
                           ___xxtofl (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2    1408
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1444
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ConfigInit                                           0     0      0    1034
                           _Lcd_Init
                          _UART_Init
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigInit
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
   _Encoder
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _VerificarInversionGiro
       ___flge
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl
     ___fladd
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _KeyPadGetKey
   _RunMotor
   _StopMotor
   _configurarAntiHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul
   _configurarHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      12        0.0%
ABS                  0      0      58       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 03 14:43:14 2019

                              pc 0002                      __CFG_CP$OFF 0000                               l40 09D2  
                             l47 09DF                               _cm 005A                               fsr 0004  
            ___wmul@multiplicand 0072              __Umul8_16@word_mpld 0076                              l200 0B47  
                            l210 16DC                              l211 16DF                              l212 16E3  
                            l213 16E4                              l214 16E8                              l215 16E9  
                            l216 16ED                              l304 01AA                              l421 1713  
                            l282 00D4                              l614 0A32                              l199 0AE2  
                            l720 036E                              l298 0D07                              l714 02F7  
                            l486 0A62                              l822 07DC                              l718 0390  
                            l735 0449                              l595 0B8C                              l756 04C9  
                            l748 04B1                              l861 0C78                              l598 0BF2  
                            l862 0C82                              l854 0C62                              l848 0C22  
                            l867 088E                              _RA0 0028                              _RA1 0029  
                            _RB0 0030                              _RA2 002A                              _RA3 002B  
                            _RA4 002C                              _RB2 0032                              _RC0 0038  
                            _RA5 002D                              _RB3 0033                              _RC1 0039  
                            _RA6 002E                              _RB4 0034                              _RC2 003A  
                            _RA7 002F                              _RB5 0035                              _RB6 0036  
                            _RB7 0037                     __CFG_CPD$OFF 0000                              _key 0063  
                            fsr0 0004                              indf 0000                    _CmAntiHorario 005C  
                   __CFG_IESO$ON 0000                     ___flmul@aexp 0032                     ___flmul@bexp 0033  
                   ___flmul@sign 002D                     ___flmul@temp 0038                     ___flmul@prod 0034  
                   __CFG_LVP$OFF 0000                   ??_KeyPadGetKey 0072                     ___fltol@exp1 0044  
                           l2131 17DA                             l2211 0E90                             l2141 17FB  
                           l2205 0E8E                             l3005 0F90                             l3101 09B6  
                           l2231 0EC4                             l2223 0EC0                             l2311 0BCC  
                           l3015 0FA2                             l2137 17F0                             l2129 17CC  
                           l2153 175F                             l2217 0EB1                             l2233 0E39  
                           l3025 0FDC                             l3105 09BC                             l2155 176D  
                           l2163 1786                             l2235 0F05                             l3211 0E6C  
                           l2307 0BA6                             l2171 0886                             l3027 0FF5  
                           l2501 0C9F                             l3205 09C4                             l2271 0A73  
                           l2159 177B                             l2335 04F1                             l3207 00C0  
                           l2281 0A93                             l2425 0762                             l2417 072E  
                           l2353 0516                             l2337 04F3                             l3209 0FE1  
                           l2259 08A1                             l2195 0E77                             l2443 07AC  
                           l2419 074B                             l2355 0518                             l2339 04FB  
                           l2515 0AEB                             l2293 0AC8                             l2605 0901  
                           l2189 0E59                             l2429 0764                             l2365 052E  
                           l2357 0520                             l2517 0B1E                             l2279 0A83  
                           l2439 0796                             l2631 0CFC                             l2711 02C2  
                           l3095 09A4                             l2297 0AD6                             l2289 0ABB  
                           l2449 07C5                             l2473 0C31                             l2801 039E  
                           l3097 09AA                             l3089 0995                             l2467 0C1A  
                           l2811 03C1                             l2715 02C5                             l3099 09B0  
                           l2477 0C35                             l2717 02CD                             l2557 0B63  
                           l2575 0E18                             l2487 0C76                             l2479 0C47  
                           l2735 02EC                             l2663 09EE                             l2489 0C67  
                           l2809 03BF                             l2745 0301                             l2649 170B  
                           l2851 0471                             l2819 03D1                             l2739 02EF  
                           l2683 0A1E                             l2667 09F7                             l2845 046A  
                           l2837 045B                             l2829 043B                             l2853 0473  
                           l2693 0A41                             l2685 0A2E                             l2863 047E  
                           l2783 0379                             l2775 033D                             l2935 0042  
                           l2881 04C1                             l2785 037B                             l2793 038A  
                           l2929 0090                             l2859 047C                             l2947 0045  
                           l2885 04C5                             l2957 0057                             l2993 0F66  
                           l2987 0F3A                             STR_1 0876                             STR_2 0876  
                           STR_3 0869                             STR_4 0871                             STR_5 0869  
                           STR_6 0871                             STR_7 0872                             STR_8 084A  
                           STR_9 0871                             _BRGH 04C2                             _CREN 00C4  
                           u3100 0AE8                             u2205 17E7                             u2215 17F1  
                           u3015 0C5A                             u2305 088F                             u3130 0AF9  
                           u2155 179C                             u3035 0C6F                             u2245 1762  
                           u3125 0AEE                             u3311 0D97                             u2175 17CF  
                           u3312 0D98                             u3160 0B0A                             u3144 0AFC  
                           u3313 0D9D                             u3305 0D80                             u2265 1773  
                           u2345 0EA7                             u4105 012F                             u3314 0D9E  
                           u3315 0DA3                             u2195 17DB                             u2275 177C  
                           u3075 0C8A                             u3155 0AFF                             u3316 0DA4  
                           u3405 090D                             u4125 01B8                             u3190 0B1B  
                           u3174 0B0D                             u2455 0A87                             u3351 0DF7  
                           u3335 0DC7                             u4207 17BD                             u2551 0BB7  
                           u4055 00B2                             u3352 0DF8                             u2552 0BB8  
                           u4217 0930                             u3353 0DFD                             u3345 0DE0  
                           u2553 0BBD                             u3505 0A00                             u3185 0B10  
                           u3354 0DFE                             u2554 0BBE                             u4227 093F  
                           u2475 0A95                             u3355 0E03                             u2571 0BDD  
                           u2555 0BC3                             u2715 05DE                             u4075 0F5C  
                           u3356 0E04                             u2572 0BDE                             u2556 0BC4  
                           u3700 035E                             u4237 094E                             u2485 0AAA  
                           u2573 0BE3                             u2805 06FC                             u2574 0BE4  
                           u4247 1700                             u2495 0ABC                             u3295 0D67  
                           u2575 0BE9                             u3535 0A1F                             u2576 0BEA  
                           u3385 08E8                             u2825 071A                             u2745 063B  
                           u3465 1714                             u4177 0FFB                             u2835 0732  
                           u4187 0B22                             u3475 171B                             u4197 17AC  
                           u2925 0781                             u3565 0A37                             u2935 079F  
                           u2855 073D                             u3831 03FC                             u3823 03E3  
                           u3815 03C5                             u3735 037F                             u3840 0410  
                           u3832 03FD                             u2945 07B7                             u2785 06D7  
                           u3841 0411                             u3833 0402                             u3842 0416  
                           u3834 0403                             u3690 035D                             u3843 0417  
                           u3835 0408                             u3836 0409                             _RCIF 0065  
                           u3685 0351                             u2995 0C3E                             u3885 045D  
                           u3985 049B                             _SPEN 00C7                             _TRMT 04C1  
                           _TXEN 04C5                             _SYNC 04C4                     __CFG_WRT$OFF 0000  
                  __CFG_FCMEN$ON 0000                ?_Lcd_Write_String 0075                             _key2 0068  
                           _main 0981                             btemp 007E                    __CFG_BOREN$ON 0000  
                           start 0000               ??_Lcd_Write_String 0077                  __end_of_Lcd_Cmd 1709  
                  __CFG_MCLRE$ON 0000                  __end_of_Encoder 02A5                _Lcd_Write_Integer 16BD  
                  ___fltol@sign1 0043                  __end_of___aldiv 0ADF                  __end_of___fladd 04D4  
                          ?_main 0070                            STR_10 084A                            STR_11 0871  
                          STR_12 0872                            STR_13 083C                            STR_14 0860  
                          STR_15 0855                            STR_16 0860                    __CFG_WDTE$OFF 0000  
                __end_of___flmul 07E9                  __end_of___fltol 0A50                            _ANSEL 0188  
             ?_Lcd_Write_Integer 0045                  __end_of___lwdiv 1800                  __end_of___lwmod 178B  
                          _RCREG 001A                       _ConfigInit 172A                            _SPBRG 0099  
                          _PORTA 0005                            _PORTC 0007          __size_of_Lcd_Set_Cursor 004A  
                          _TRISA 0085                            _TRISB 0086                            _TRISC 0087  
                          _TXREG 0019                            _nRBPU 040F               __size_of_UART_Init 00D6  
                __end_of_dpowers 083C              ??_Lcd_Write_Integer 0047                            pclath 000A  
                          status 0003                            wtemp0 007E                  __end_of_sprintf 0F0A  
               __end_of_Lcd_Init 0981                 __end_of_Lcd_Port 16EF                  __initialization 07E9  
                   __end_of_main 09E3        __end_of_Lcd_Write_Integer 16D5                           ??_main 0056  
             __size_of_Lcd_Clear 000B                 __end_of_RunMotor 0019                           _ANSELH 0189  
                      ??_Lcd_Cmd 0071          __size_of_Lcd_Write_Char 0039                        ??_Encoder 0052  
                         _TRISC6 043E                           _TRISC7 043F                 __end_of___xxtofl 0CA8  
                 __CFG_PWRTE$OFF 0000                           _Grados 0060                __end_of_UART_Init 0E32  
                         ___flge 0B70                        ??___aldiv 0078                        ??___fladd 0028  
                         ___wmul 1709                        ??___flmul 0028                        ??___fltol 003E  
                      ??___lwdiv 0074                        ??___lwmod 007C                           _buffer 0066  
              _configurarHorario 0019             __end_of_KeyPadGetKey 0B70                           _lastCm 0058  
             ?_configurarHorario 0070                  KeyPadGetKey@key 0074                  KeyPadGetKey@row 0075  
                    ?_ConfigInit 0070               __size_of__Umul8_16 0023            _configurarAntiHorario 0F0A  
            ??_configurarHorario 0052                        ??_sprintf 0023                  Lcd_Set_Cursor@a 0077  
                Lcd_Set_Cursor@b 0074                  Lcd_Set_Cursor@y 0079                  Lcd_Set_Cursor@z 0078  
             __size_of_StopMotor 0005                       ___flge@ff1 003A                       ___flge@ff2 003E  
                   ___xxtofl@arg 007A                     ___xxtofl@exp 0079                     ___xxtofl@val 0070  
        __end_of__initialization 07FC                __end_of_Lcd_Clear 16BD                       ___fltol@f1 003A  
                 __pcstackCOMMON 0070        __end_of_configurarHorario 00D5                     __pidataBANK0 087A  
     __size_of_Lcd_Write_Integer 0018                   _Lcd_Set_Cursor 08DC             __end_of_keyPadMatrix 0832  
                      ?_Lcd_Init 0070                        ?_Lcd_Port 0070                       __pbssBANK0 0058  
            __size_of_ConfigInit 002F                __end_of__Umul8_16 089F                       __pmaintext 0981  
                        ?___flge 003A                          ?___wmul 0070                        ?_RunMotor 0070  
              __end_of_StopMotor 16B2        __size_of_Lcd_Write_String 003D           __end_of_Lcd_Set_Cursor 0926  
         ?_configurarAntiHorario 0070                        ?___xxtofl 0070                          _OSCTUNE 0090  
                     ??_Lcd_Init 0074         ??_VerificarInversionGiro 007E                       ??_Lcd_Port 0070  
                     __stringtab 0800                   _Lcd_Write_Char 178B                          _Lcd_Cmd 16EF  
                        _Encoder 00D5            __size_of_KeyPadGetKey 0091       __size_of_configurarHorario 00BC  
                        ___aldiv 0A50                  __size_of___flge 0095                          ___fladd 02A5  
                     ??_RunMotor 0070                          ___flmul 04D4                          ___fltol 09E3  
                __size_of___wmul 0021                          ___lwdiv 17C4                          ___lwmod 1759  
                ?_Lcd_Set_Cursor 0074                          __ptext1 0019                          __ptext2 0F0A  
                        __ptext3 1709                          __ptext4 16AD                          __ptext5 000C  
                        __ptext6 0ADF                          __ptext7 00D5                          __ptext8 09E3  
                        __ptext9 02A5                          _dpowers 0832                       ??___xxtofl 0074  
                        _old_key 0062                 ___aldiv@dividend 0074                          _sprintf 0E32  
                        clrloop0 0005           __end_of_Lcd_Write_Char 17C4             end_of_initialization 07FC  
                   _KeyPadGetKey 0ADF                 ___aldiv@quotient 0022                        Lcd_Port@a 0070  
                      _UART_Init 0D5C                     ??_ConfigInit 007B                      ___fladd@grs 0033  
                  ___xxtofl@sign 0078  __size_of_VerificarInversionGiro 00B4                  ?_Lcd_Write_Char 0070  
                      _CmHorario 005E                Lcd_Write_String@a 0075                Lcd_Write_String@i 007A  
                    ___flmul@grs 002E               __end_of_ConfigInit 1759                     _keyPadMatrix 0810  
                      _Lcd_Clear 16B2                   __end_of___flge 0C05                   __end_of___wmul 172A  
               _Lcd_Write_String 089F                       ?_UART_Init 0026              start_initialization 07E9  
                      _LastState 0065                __size_of_Lcd_Init 005B                __size_of_Lcd_Port 001A  
       __CFG_FOSC$INTRC_NOCLKOUT 0000                       ?_Lcd_Clear 0070                         ??___flge 0042  
         _VerificarInversionGiro 0CA8                         ??___wmul 0074                        __Umul8_16 087C  
                    __pdataBANK0 0068                  Lcd_Write_Char@a 0074                  Lcd_Write_Char@y 0073  
        ??_configurarAntiHorario 0052                __size_of_RunMotor 000D                        ___fladd@a 0024  
                      ___fladd@b 0020                        _StopMotor 16AD                        ___flmul@a 0024  
                      ___flmul@b 0020                        ___latbits 0002                    __pcstackBANK0 0020  
              __size_of___xxtofl 00A3                         ?_Lcd_Cmd 0070                      sprintf@flag 0027  
                       ?_Encoder 0070                      sprintf@prec 0028                 ___lwdiv@dividend 0072  
               ??_Lcd_Set_Cursor 0075                         ?___aldiv 0070                         ?___fladd 0020  
                       ?___flmul 0020                         ?___fltol 003A                       ?__Umul8_16 0070  
                       ?___lwdiv 0070                         ?___lwmod 0078                      ??_UART_Init 002A  
                      __pstrings 0800                       ?_StopMotor 0070                 ___lwdiv@quotient 0075  
                       ?_sprintf 0020                       UART_Init@x 0079                  ___aldiv@divisor 0070  
                ___aldiv@counter 0020                   ___wmul@product 0074                        clear_ram0 0004  
                       Lcd_Cmd@a 0073                      ??_Lcd_Clear 0074            Lcd_Write_Integer@Data 0048  
              UART_Init@baudrate 0026                      __stringbase 080F                ___wmul@multiplier 0070  
               ??_Lcd_Write_Char 0071                         _Lcd_Init 0926                         _Lcd_Port 16D5  
       __end_of_Lcd_Write_String 08DC                 __size_of_Lcd_Cmd 001A                 __size_of_Encoder 01D0  
                       _RunMotor 000C                      ??__Umul8_16 0072                 __size_of___aldiv 008F  
               __size_of___fladd 022F                 __size_of___flmul 0315                 __size_of___fltol 006D  
               __size_of___lwdiv 003C                 __size_of___lwmod 0032               __end_of__stringtab 0810  
                    ??_StopMotor 0070                       sprintf@val 0029                         ___xxtofl 0C05  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0077                         __ptext10 0CA8  
                       __ptext11 0C05                         __ptext20 178B                         __ptext12 04D4  
                       __ptext21 08DC                         __ptext13 087C                         __ptext22 16B2  
                       __ptext14 0B70                         __ptext23 172A                         __ptext15 16BD  
                       __ptext24 0D5C                         __ptext16 0E32                         __ptext25 0A50  
                       __ptext17 1759                         __ptext26 0926                         __ptext18 17C4  
                       __ptext27 16EF                         __ptext19 089F                         __ptext28 16D5  
              __CFG_BOR4V$BOR40V 0000                 __size_of_sprintf 00D8                    __size_of_main 0062  
                       _keypress 0064          ?_VerificarInversionGiro 0070   __size_of_configurarAntiHorario 00F6  
  __end_of_configurarAntiHorario 1000               Lcd_Write_Char@temp 0072                        sprintf@ap 0026  
                      sprintf@sp 002B                 ___lwmod@dividend 007A   __end_of_VerificarInversionGiro 0D5C  
                      stringcode 080A                       _OSCCONbits 008F               Lcd_Set_Cursor@temp 007A  
         __Umul8_16@multiplicand 0070                         sprintf@c 002C                         sprintf@f 0020  
                ___lwmod@divisor 0078                  ___lwmod@counter 007D                         stringdir 080A  
                       stringtab 0800                     ___aldiv@sign 0021               Lcd_Write_Integer@a 0045  
                  ___fladd@signs 0030                    ?_KeyPadGetKey 0070                     ___fladd@aexp 0031  
                   ___fladd@bexp 0032             __Umul8_16@multiplier 0078                __Umul8_16@product 0074  
