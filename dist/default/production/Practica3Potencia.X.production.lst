

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 02 14:32:27 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.05
    43                           ; Generated 20/12/2018 GMT
    44                           ; 
    45                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F886 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  009F                     	;# 
   137  0105                     	;# 
   138  0107                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0187                     	;# 
   148  0188                     	;# 
   149  0189                     	;# 
   150  018C                     	;# 
   151  018D                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0086                     	;# 
   189  0087                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  008F                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0098                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  0105                     	;# 
   214  0107                     	;# 
   215  0108                     	;# 
   216  0109                     	;# 
   217  010C                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  0185                     	;# 
   223  0187                     	;# 
   224  0188                     	;# 
   225  0189                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228                           
   229                           	psect	idataBANK0
   230  1660                     __pidataBANK0:	
   231                           
   232                           ;initializer for _key2
   233  1660  3430               	retlw	48
   234  1661  3400               	retlw	0
   235                           
   236                           ;initializer for _keypress
   237  1662  3430               	retlw	48
   238                           
   239                           	psect	strings
   240  0800                     __pstrings:	
   241  0800                     stringtab:	
   242  0800                     __stringtab:	
   243                           
   244                           ;	String table - string pointers are 1 byte each
   245  0800  1BFF               	btfsc	btemp+1,7
   246  0801  280A               	ljmp	stringcode
   247  0802  1383               	bcf	3,7
   248  0803  187F               	btfsc	btemp+1,0
   249  0804  1783               	bsf	3,7
   250  0805  0800               	movf	0,w
   251  0806  0A84               	incf	4,f
   252  0807  1903               	skipnz
   253  0808  0AFF               	incf	btemp+1,f
   254  0809  0008               	return
   255  080A                     stringcode:	
   256  080A                     stringdir:	
   257  080A  3008               	movlw	high stringdir
   258  080B  008A               	movwf	10
   259  080C  0804               	movf	4,w
   260  080D  0A84               	incf	4,f
   261  080E  0782               	addwf	2,f
   262  080F                     __stringbase:	
   263  080F  3400               	retlw	0
   264  0810                     __end_of__stringtab:	
   265  0810                     _keyPadMatrix:	
   266  0810  3441               	retlw	65
   267  0811  3400               	retlw	0
   268  0812  3431               	retlw	49
   269  0813  3400               	retlw	0
   270  0814  3432               	retlw	50
   271  0815  3400               	retlw	0
   272  0816  3433               	retlw	51
   273  0817  3400               	retlw	0
   274  0818  3442               	retlw	66
   275  0819  3400               	retlw	0
   276  081A  3434               	retlw	52
   277  081B  3400               	retlw	0
   278  081C  3435               	retlw	53
   279  081D  3400               	retlw	0
   280  081E  3436               	retlw	54
   281  081F  3400               	retlw	0
   282  0820  3443               	retlw	67
   283  0821  3400               	retlw	0
   284  0822  3437               	retlw	55
   285  0823  3400               	retlw	0
   286  0824  3438               	retlw	56
   287  0825  3400               	retlw	0
   288  0826  3439               	retlw	57
   289  0827  3400               	retlw	0
   290  0828  3444               	retlw	68
   291  0829  3400               	retlw	0
   292  082A  342A               	retlw	42
   293  082B  3400               	retlw	0
   294  082C  3430               	retlw	48
   295  082D  3400               	retlw	0
   296  082E  3423               	retlw	35
   297  082F  3400               	retlw	0
   298  0830  34FF               	retlw	255
   299  0831  3400               	retlw	0
   300  0832                     __end_of_keyPadMatrix:	
   301  0832                     _dpowers:	
   302  0832  3401               	retlw	1
   303  0833  3400               	retlw	0
   304  0834  340A               	retlw	10
   305  0835  3400               	retlw	0
   306  0836  3464               	retlw	100
   307  0837  3400               	retlw	0
   308  0838  34E8               	retlw	232
   309  0839  3403               	retlw	3
   310  083A  3410               	retlw	16
   311  083B  3427               	retlw	39
   312  083C                     __end_of_dpowers:	
   313  0019                     _TXREG	set	25
   314  001A                     _RCREG	set	26
   315  0005                     _PORTA	set	5
   316  0007                     _PORTC	set	7
   317  0039                     _RC1	set	57
   318  0038                     _RC0	set	56
   319  0030                     _RB0	set	48
   320  0065                     _RCIF	set	101
   321  00C4                     _CREN	set	196
   322  00C7                     _SPEN	set	199
   323  002F                     _RA7	set	47
   324  002E                     _RA6	set	46
   325  002D                     _RA5	set	45
   326  002C                     _RA4	set	44
   327  002B                     _RA3	set	43
   328  002A                     _RA2	set	42
   329  0029                     _RA1	set	41
   330  0028                     _RA0	set	40
   331  0033                     _RB3	set	51
   332  0032                     _RB2	set	50
   333  0037                     _RB7	set	55
   334  0036                     _RB6	set	54
   335  0035                     _RB5	set	53
   336  0034                     _RB4	set	52
   337  0099                     _SPBRG	set	153
   338  0085                     _TRISA	set	133
   339  0087                     _TRISC	set	135
   340  0086                     _TRISB	set	134
   341  040F                     _nRBPU	set	1039
   342  04C1                     _TRMT	set	1217
   343  04C5                     _TXEN	set	1221
   344  043E                     _TRISC6	set	1086
   345  043F                     _TRISC7	set	1087
   346  04C4                     _SYNC	set	1220
   347  04C2                     _BRGH	set	1218
   348  0188                     _ANSEL	set	392
   349  0189                     _ANSELH	set	393
   350  083C                     STR_13:	
   351  083C  3444               	retlw	68	;'D'
   352  083D  3469               	retlw	105	;'i'
   353  083E  3472               	retlw	114	;'r'
   354  083F  343A               	retlw	58	;':'
   355  0840  3420               	retlw	32	;' '
   356  0841  3441               	retlw	65	;'A'
   357  0842  3464               	retlw	100	;'d'
   358  0843  3465               	retlw	101	;'e'
   359  0844  346C               	retlw	108	;'l'
   360  0845  3461               	retlw	97	;'a'
   361  0846  346E               	retlw	110	;'n'
   362  0847  3474               	retlw	116	;'t'
   363  0848  3465               	retlw	101	;'e'
   364  0849  3400               	retlw	0
   365  084A                     STR_3:	
   366  084A  3441               	retlw	65	;'A'
   367  084B  3464               	retlw	100	;'d'
   368  084C  3465               	retlw	101	;'e'
   369  084D  346C               	retlw	108	;'l'
   370  084E  3461               	retlw	97	;'a'
   371  084F  346E               	retlw	110	;'n'
   372  0850  3474               	retlw	116	;'t'
   373  0851  3465               	retlw	101	;'e'
   374  0852  343A               	retlw	58	;':'
   375  0853  3420               	retlw	32	;' '
   376  0854  3400               	retlw	0
   377  0855                     STR_15:	
   378  0855  3444               	retlw	68	;'D'
   379  0856  3469               	retlw	105	;'i'
   380  0857  3472               	retlw	114	;'r'
   381  0858  343A               	retlw	58	;':'
   382  0859  3420               	retlw	32	;' '
   383  085A  3441               	retlw	65	;'A'
   384  085B  3474               	retlw	116	;'t'
   385  085C  3472               	retlw	114	;'r'
   386  085D  3461               	retlw	97	;'a'
   387  085E  3473               	retlw	115	;'s'
   388  085F  3400               	retlw	0
   389  0860                     STR_14:	
   390  0860  3420               	retlw	32	;' '
   391  0861  3443               	retlw	67	;'C'
   392  0862  346D               	retlw	109	;'m'
   393  0863  3420               	retlw	32	;' '
   394  0864  3464               	retlw	100	;'d'
   395  0865  3465               	retlw	101	;'e'
   396  0866  343A               	retlw	58	;':'
   397  0867  3420               	retlw	32	;' '
   398  0868  3400               	retlw	0
   399  0869                     STR_8:	
   400  0869  3441               	retlw	65	;'A'
   401  086A  3474               	retlw	116	;'t'
   402  086B  3472               	retlw	114	;'r'
   403  086C  3461               	retlw	97	;'a'
   404  086D  3473               	retlw	115	;'s'
   405  086E  343A               	retlw	58	;':'
   406  086F  3420               	retlw	32	;' '
   407  0870  3400               	retlw	0
   408  0871                     STR_4:	
   409  0871  3430               	retlw	48	;'0'
   410  0872  3420               	retlw	32	;' '
   411  0873  3443               	retlw	67	;'C'
   412  0874  346D               	retlw	109	;'m'
   413  0875  3400               	retlw	0
   414  0876                     STR_1:	
   415  0876  3425               	retlw	37	;'%'
   416  0877  3464               	retlw	100	;'d'
   417  0878  3400               	retlw	0
   418  0860                     
   419                           ; #config settings
   420  0000                     
   421                           	psect	cinit
   422  07DD                     start_initialization:	
   423  07DD                     __initialization:	
   424                           
   425                           ; Initialize objects allocated to BANK0
   426  07DD  160A  118A  2660  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   427  07E2  00E9               	movwf	__pdataBANK0& (0+127)
   428  07E3  160A  118A  2661  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   429  07E8  00EA               	movwf	(__pdataBANK0+1)& (0+127)
   430  07E9  160A  118A  2662   	fcall	__pidataBANK0+2	;fetch initializer
   431  07EC  00EB               	movwf	(__pdataBANK0+2)& (0+127)
   432                           
   433                           ; Clear objects allocated to BANK0
   434  07ED  01DA               	clrf	__pbssBANK0& (0+127)
   435  07EE  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   436  07EF  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   437  07F0  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   438  07F1  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   439  07F2  01DF               	clrf	(__pbssBANK0+5)& (0+127)
   440  07F3  01E0               	clrf	(__pbssBANK0+6)& (0+127)
   441  07F4  01E1               	clrf	(__pbssBANK0+7)& (0+127)
   442  07F5  01E2               	clrf	(__pbssBANK0+8)& (0+127)
   443  07F6  01E3               	clrf	(__pbssBANK0+9)& (0+127)
   444  07F7  01E4               	clrf	(__pbssBANK0+10)& (0+127)
   445  07F8  01E5               	clrf	(__pbssBANK0+11)& (0+127)
   446  07F9  01E6               	clrf	(__pbssBANK0+12)& (0+127)
   447  07FA  01E7               	clrf	(__pbssBANK0+13)& (0+127)
   448  07FB  01E8               	clrf	(__pbssBANK0+14)& (0+127)
   449  07FC                     end_of_initialization:	
   450                           ;End of C runtime variable initialization code
   451                           
   452  07FC                     __end_of__initialization:	
   453  07FC  0183               	clrf	3
   454  07FD  120A  158A  2B30   	ljmp	_main	;jump to C main() function
   455                           
   456                           	psect	bssBANK0
   457  005A                     __pbssBANK0:	
   458  005A                     _lastCm:	
   459  005A                     	ds	2
   460  005C                     _cm:	
   461  005C                     	ds	2
   462  005E                     _CmAntiHorario:	
   463  005E                     	ds	2
   464  0060                     _CmHorario:	
   465  0060                     	ds	2
   466  0062                     _Grados:	
   467  0062                     	ds	2
   468  0064                     _LastState:	
   469  0064                     	ds	1
   470  0065                     _old_key:	
   471  0065                     	ds	1
   472  0066                     _key:	
   473  0066                     	ds	1
   474  0067                     _buffer:	
   475  0067                     	ds	2
   476                           
   477                           	psect	dataBANK0
   478  0069                     __pdataBANK0:	
   479  0069                     _key2:	
   480  0069                     	ds	2
   481  006B                     _keypress:	
   482  006B                     	ds	1
   483                           
   484                           	psect	cstackCOMMON
   485  0070                     __pcstackCOMMON:	
   486  0070                     ??_StopMotor:	
   487  0070                     ??_RunMotor:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ?_PinsInit:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     ??_PinsInit:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0070                     ?_Lcd_Port:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ??_Lcd_Port:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ?_Lcd_Cmd:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ?_Lcd_Clear:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0070                     ?_Lcd_Init:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0070                     ?_Lcd_Write_Char:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ?_StopMotor:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     ?_configurarHorario:	
   518                           ; 2 bytes @ 0x0
   519                           
   520  0070                     ?_configurarAntiHorario:	
   521                           ; 2 bytes @ 0x0
   522                           
   523  0070                     ?_RunMotor:	
   524                           ; 2 bytes @ 0x0
   525                           
   526  0070                     ?_Encoder:	
   527                           ; 2 bytes @ 0x0
   528                           
   529  0070                     ?__Umul8_16:	
   530                           ; 2 bytes @ 0x0
   531                           
   532  0070                     ?_KeyPadGetKey:	
   533                           ; 2 bytes @ 0x0
   534                           
   535  0070                     ?_main:	
   536                           ; 2 bytes @ 0x0
   537                           
   538  0070                     ?_VerificarInversionGiro:	
   539                           ; 2 bytes @ 0x0
   540                           
   541  0070                     ?___wmul:	
   542                           ; 2 bytes @ 0x0
   543                           
   544  0070                     ?___lwdiv:	
   545                           ; 2 bytes @ 0x0
   546                           
   547  0070                     ?___aldiv:	
   548                           ; 2 bytes @ 0x0
   549                           
   550  0070                     ?___xxtofl:	
   551                           ; 4 bytes @ 0x0
   552                           
   553  0070                     Lcd_Port@a:	
   554                           ; 4 bytes @ 0x0
   555                           
   556  0070                     __Umul8_16@multiplicand:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ___wmul@multiplier:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ___lwdiv@divisor:	
   563                           ; 2 bytes @ 0x0
   564                           
   565  0070                     ___aldiv@divisor:	
   566                           ; 2 bytes @ 0x0
   567                           
   568  0070                     ___xxtofl@val:	
   569                           ; 4 bytes @ 0x0
   570                           
   571                           
   572                           ; 4 bytes @ 0x0
   573  0070                     	ds	1
   574  0071                     ??_Lcd_Cmd:	
   575  0071                     ??_Lcd_Write_Char:	
   576                           ; 1 bytes @ 0x1
   577                           
   578                           
   579                           ; 1 bytes @ 0x1
   580  0071                     	ds	1
   581  0072                     ??__Umul8_16:	
   582  0072                     ??_KeyPadGetKey:	
   583                           ; 1 bytes @ 0x2
   584                           
   585  0072                     Lcd_Write_Char@temp:	
   586                           ; 1 bytes @ 0x2
   587                           
   588  0072                     ___wmul@multiplicand:	
   589                           ; 1 bytes @ 0x2
   590                           
   591  0072                     ___lwdiv@dividend:	
   592                           ; 2 bytes @ 0x2
   593                           
   594                           
   595                           ; 2 bytes @ 0x2
   596  0072                     	ds	1
   597  0073                     Lcd_Cmd@a:	
   598  0073                     Lcd_Write_Char@y:	
   599                           ; 1 bytes @ 0x3
   600                           
   601  0073                     KeyPadGetKey@key:	
   602                           ; 1 bytes @ 0x3
   603                           
   604                           
   605                           ; 1 bytes @ 0x3
   606  0073                     	ds	1
   607  0074                     ??_Lcd_Clear:	
   608  0074                     ?_Lcd_Set_Cursor:	
   609                           ; 1 bytes @ 0x4
   610                           
   611  0074                     ??_Lcd_Init:	
   612                           ; 1 bytes @ 0x4
   613                           
   614  0074                     ??___wmul:	
   615                           ; 1 bytes @ 0x4
   616                           
   617  0074                     ??___lwdiv:	
   618                           ; 1 bytes @ 0x4
   619                           
   620  0074                     ??___xxtofl:	
   621                           ; 1 bytes @ 0x4
   622                           
   623  0074                     Lcd_Set_Cursor@b:	
   624                           ; 1 bytes @ 0x4
   625                           
   626  0074                     Lcd_Write_Char@a:	
   627                           ; 1 bytes @ 0x4
   628                           
   629  0074                     KeyPadGetKey@row:	
   630                           ; 1 bytes @ 0x4
   631                           
   632  0074                     ___wmul@product:	
   633                           ; 1 bytes @ 0x4
   634                           
   635  0074                     __Umul8_16@product:	
   636                           ; 2 bytes @ 0x4
   637                           
   638  0074                     ___aldiv@dividend:	
   639                           ; 2 bytes @ 0x4
   640                           
   641                           
   642                           ; 4 bytes @ 0x4
   643  0074                     	ds	1
   644  0075                     ??_Lcd_Set_Cursor:	
   645  0075                     ?_Lcd_Write_String:	
   646                           ; 1 bytes @ 0x5
   647                           
   648  0075                     Lcd_Write_String@a:	
   649                           ; 1 bytes @ 0x5
   650                           
   651  0075                     ___lwdiv@quotient:	
   652                           ; 2 bytes @ 0x5
   653                           
   654                           
   655                           ; 2 bytes @ 0x5
   656  0075                     	ds	1
   657  0076                     __Umul8_16@word_mpld:	
   658                           
   659                           ; 2 bytes @ 0x6
   660  0076                     	ds	1
   661  0077                     ??_Lcd_Write_String:	
   662  0077                     Lcd_Set_Cursor@a:	
   663                           ; 1 bytes @ 0x7
   664                           
   665  0077                     ___lwdiv@counter:	
   666                           ; 1 bytes @ 0x7
   667                           
   668                           
   669                           ; 1 bytes @ 0x7
   670  0077                     	ds	1
   671  0078                     ??___aldiv:	
   672  0078                     ?___lwmod:	
   673                           ; 1 bytes @ 0x8
   674                           
   675  0078                     Lcd_Set_Cursor@z:	
   676                           ; 2 bytes @ 0x8
   677                           
   678  0078                     ___xxtofl@sign:	
   679                           ; 1 bytes @ 0x8
   680                           
   681  0078                     __Umul8_16@multiplier:	
   682                           ; 1 bytes @ 0x8
   683                           
   684  0078                     ___lwmod@divisor:	
   685                           ; 1 bytes @ 0x8
   686                           
   687                           
   688                           ; 2 bytes @ 0x8
   689  0078                     	ds	1
   690  0079                     Lcd_Set_Cursor@y:	
   691  0079                     ___xxtofl@exp:	
   692                           ; 1 bytes @ 0x9
   693                           
   694  0079                     UART_Init@x:	
   695                           ; 1 bytes @ 0x9
   696                           
   697                           
   698                           ; 2 bytes @ 0x9
   699  0079                     	ds	1
   700  007A                     Lcd_Set_Cursor@temp:	
   701  007A                     Lcd_Write_String@i:	
   702                           ; 1 bytes @ 0xA
   703                           
   704  007A                     ___lwmod@dividend:	
   705                           ; 2 bytes @ 0xA
   706                           
   707  007A                     ___xxtofl@arg:	
   708                           ; 2 bytes @ 0xA
   709                           
   710                           
   711                           ; 4 bytes @ 0xA
   712  007A                     	ds	2
   713  007C                     ??___lwmod:	
   714                           
   715                           ; 1 bytes @ 0xC
   716  007C                     	ds	1
   717  007D                     ___lwmod@counter:	
   718                           
   719                           ; 1 bytes @ 0xD
   720  007D                     	ds	1
   721  007E                     ??_VerificarInversionGiro:	
   722                           
   723                           	psect	cstackBANK0
   724  0020                     __pcstackBANK0:	
   725                           ; 1 bytes @ 0xE
   726                           
   727  0020                     ?_sprintf:	
   728  0020                     ?___fladd:	
   729                           ; 2 bytes @ 0x0
   730                           
   731  0020                     ?___flmul:	
   732                           ; 4 bytes @ 0x0
   733                           
   734  0020                     sprintf@f:	
   735                           ; 4 bytes @ 0x0
   736                           
   737  0020                     ___aldiv@counter:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0020                     ___fladd@b:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0020                     ___flmul@b:	
   744                           ; 4 bytes @ 0x0
   745                           
   746                           
   747                           ; 4 bytes @ 0x0
   748  0020                     	ds	1
   749  0021                     ___aldiv@sign:	
   750                           
   751                           ; 1 bytes @ 0x1
   752  0021                     	ds	1
   753  0022                     ___aldiv@quotient:	
   754                           
   755                           ; 4 bytes @ 0x2
   756  0022                     	ds	1
   757  0023                     ??_sprintf:	
   758                           
   759                           ; 1 bytes @ 0x3
   760  0023                     	ds	1
   761  0024                     ___fladd@a:	
   762  0024                     ___flmul@a:	
   763                           ; 4 bytes @ 0x4
   764                           
   765                           
   766                           ; 4 bytes @ 0x4
   767  0024                     	ds	2
   768  0026                     ?_UART_Init:	
   769  0026                     sprintf@ap:	
   770                           ; 1 bytes @ 0x6
   771                           
   772  0026                     UART_Init@baudrate:	
   773                           ; 1 bytes @ 0x6
   774                           
   775                           
   776                           ; 4 bytes @ 0x6
   777  0026                     	ds	1
   778  0027                     sprintf@flag:	
   779                           
   780                           ; 1 bytes @ 0x7
   781  0027                     	ds	1
   782  0028                     ??___fladd:	
   783  0028                     ??___flmul:	
   784                           ; 1 bytes @ 0x8
   785                           
   786  0028                     sprintf@prec:	
   787                           ; 1 bytes @ 0x8
   788                           
   789                           
   790                           ; 1 bytes @ 0x8
   791  0028                     	ds	1
   792  0029                     sprintf@val:	
   793                           
   794                           ; 2 bytes @ 0x9
   795  0029                     	ds	1
   796  002A                     ??_UART_Init:	
   797                           
   798                           ; 1 bytes @ 0xA
   799  002A                     	ds	1
   800  002B                     sprintf@sp:	
   801                           
   802                           ; 1 bytes @ 0xB
   803  002B                     	ds	1
   804  002C                     sprintf@c:	
   805                           
   806                           ; 1 bytes @ 0xC
   807  002C                     	ds	1
   808  002D                     ___flmul@sign:	
   809                           
   810                           ; 1 bytes @ 0xD
   811  002D                     	ds	1
   812  002E                     ___flmul@grs:	
   813                           
   814                           ; 4 bytes @ 0xE
   815  002E                     	ds	2
   816  0030                     ___fladd@signs:	
   817                           
   818                           ; 1 bytes @ 0x10
   819  0030                     	ds	1
   820  0031                     ___fladd@aexp:	
   821                           
   822                           ; 1 bytes @ 0x11
   823  0031                     	ds	1
   824  0032                     ___fladd@bexp:	
   825  0032                     ___flmul@aexp:	
   826                           ; 1 bytes @ 0x12
   827                           
   828                           
   829                           ; 1 bytes @ 0x12
   830  0032                     	ds	1
   831  0033                     ___fladd@grs:	
   832  0033                     ___flmul@bexp:	
   833                           ; 1 bytes @ 0x13
   834                           
   835                           
   836                           ; 1 bytes @ 0x13
   837  0033                     	ds	1
   838  0034                     ___flmul@prod:	
   839                           
   840                           ; 4 bytes @ 0x14
   841  0034                     	ds	4
   842  0038                     ___flmul@temp:	
   843                           
   844                           ; 2 bytes @ 0x18
   845  0038                     	ds	2
   846  003A                     ?___flge:	
   847  003A                     ?___fltol:	
   848                           ; 1 bit 
   849                           
   850  003A                     ___flge@ff1:	
   851                           ; 4 bytes @ 0x1A
   852                           
   853  003A                     ___fltol@f1:	
   854                           ; 4 bytes @ 0x1A
   855                           
   856                           
   857                           ; 4 bytes @ 0x1A
   858  003A                     	ds	4
   859  003E                     ??___fltol:	
   860  003E                     ___flge@ff2:	
   861                           ; 1 bytes @ 0x1E
   862                           
   863                           
   864                           ; 4 bytes @ 0x1E
   865  003E                     	ds	4
   866  0042                     ??___flge:	
   867                           
   868                           ; 1 bytes @ 0x22
   869  0042                     	ds	1
   870  0043                     ___fltol@sign1:	
   871                           
   872                           ; 1 bytes @ 0x23
   873  0043                     	ds	1
   874  0044                     ___fltol@exp1:	
   875                           
   876                           ; 1 bytes @ 0x24
   877  0044                     	ds	1
   878  0045                     ?_Lcd_Write_Integer:	
   879  0045                     Lcd_Write_Integer@a:	
   880                           ; 1 bytes @ 0x25
   881                           
   882                           
   883                           ; 2 bytes @ 0x25
   884  0045                     	ds	2
   885  0047                     ??_Lcd_Write_Integer:	
   886                           
   887                           ; 1 bytes @ 0x27
   888  0047                     	ds	1
   889  0048                     Lcd_Write_Integer@Data:	
   890                           
   891                           ; 10 bytes @ 0x28
   892  0048                     	ds	10
   893  0052                     ??_configurarHorario:	
   894  0052                     ??_configurarAntiHorario:	
   895                           ; 1 bytes @ 0x32
   896                           
   897  0052                     ??_Encoder:	
   898                           ; 1 bytes @ 0x32
   899                           
   900                           
   901                           ; 1 bytes @ 0x32
   902  0052                     	ds	4
   903  0056                     ??_main:	
   904                           
   905                           ; 1 bytes @ 0x36
   906  0056                     	ds	4
   907                           
   908                           	psect	maintext
   909  0B30                     __pmaintext:	
   910 ;;
   911 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   912 ;;
   913 ;; *************** function _main *****************
   914 ;; Defined at:
   915 ;;		line 23 in file "main.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;		None
   918 ;; Auto vars:     Size  Location     Type
   919 ;;		None
   920 ;; Return value:  Size  Location     Type
   921 ;;                  2  212[None  ] int 
   922 ;; Registers used:
   923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   924 ;; Tracked objects:
   925 ;;		On entry : B00/0
   926 ;;		On exit  : 0/0
   927 ;;		Unchanged: 0/0
   928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   929 ;;      Params:         0       0       0       0       0
   930 ;;      Locals:         0       0       0       0       0
   931 ;;      Temps:          0       4       0       0       0
   932 ;;      Totals:         0       4       0       0       0
   933 ;;Total ram usage:        4 bytes
   934 ;; Hardware stack levels required when called:    5
   935 ;; This function calls:
   936 ;;		_Encoder
   937 ;;		_KeyPadGetKey
   938 ;;		_Lcd_Init
   939 ;;		_PinsInit
   940 ;;		_RunMotor
   941 ;;		_StopMotor
   942 ;;		_UART_Init
   943 ;;		_configurarAntiHorario
   944 ;;		_configurarHorario
   945 ;; This function is called by:
   946 ;;		Startup code after reset
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           
   951                           ;psect for function _main
   952  0B30                     _main:	
   953                           
   954                           ;main.c: 25:     nRBPU = 0;
   955                           
   956                           ;incstack = 0
   957                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   958  0B30  1683               	bsf	3,5	;RP0=1, select bank1
   959  0B31  1303               	bcf	3,6	;RP1=0, select bank1
   960  0B32  1381               	bcf	1,7	;volatile
   961                           
   962                           ;main.c: 26:     UART_Init(9600);
   963  0B33  3000               	movlw	0
   964  0B34  1283               	bcf	3,5	;RP0=0, select bank0
   965  0B35  1303               	bcf	3,6	;RP1=0, select bank0
   966  0B36  00A9               	movwf	UART_Init@baudrate+3
   967  0B37  3000               	movlw	0
   968  0B38  00A8               	movwf	UART_Init@baudrate+2
   969  0B39  3025               	movlw	37
   970  0B3A  00A7               	movwf	UART_Init@baudrate+1
   971  0B3B  3080               	movlw	128
   972  0B3C  00A6               	movwf	UART_Init@baudrate
   973  0B3D  120A  158A  246A  120A  158A  	fcall	_UART_Init
   974                           
   975                           ;main.c: 28:     PinsInit();
   976  0B42  120A  118A  2003  120A  158A  	fcall	_PinsInit
   977                           
   978                           ;main.c: 29:     Lcd_Init();
   979  0B47  120A  158A  20B5  120A  158A  	fcall	_Lcd_Init
   980                           
   981                           ;main.c: 31:     StopMotor();
   982  0B4C  160A  118A  2663  120A  158A  	fcall	_StopMotor
   983                           
   984                           ;main.c: 32:     configurarHorario();
   985  0B51  120A  158A  270C  120A  158A  	fcall	_configurarHorario
   986                           
   987                           ;main.c: 33:     configurarAntiHorario();
   988  0B56  120A  158A  2618  120A  158A  	fcall	_configurarAntiHorario
   989  0B5B                     l3063:	
   990                           
   991                           ;main.c: 37:         keypress = KeyPadGetKey();
   992  0B5B  120A  158A  220C  120A  158A  	fcall	_KeyPadGetKey
   993  0B60  0870               	movf	?_KeyPadGetKey,w
   994  0B61  1283               	bcf	3,5	;RP0=0, select bank0
   995  0B62  1303               	bcf	3,6	;RP1=0, select bank0
   996  0B63  00D6               	movwf	??_main
   997  0B64  0856               	movf	??_main,w
   998  0B65  00EB               	movwf	_keypress
   999                           
  1000                           ;main.c: 40:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1001  0B66  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1002  0B67  0084               	movwf	4
  1003  0B68  120A  158A  200A  120A  158A  	fcall	stringdir
  1004  0B6D  00D6               	movwf	??_main
  1005  0B6E  120A  158A  200A  120A  158A  	fcall	stringdir
  1006  0B73  00D7               	movwf	??_main+1
  1007  0B74  086B               	movf	_keypress,w
  1008  0B75  00D8               	movwf	??_main+2
  1009  0B76  01D9               	clrf	??_main+3
  1010  0B77  0857               	movf	??_main+1,w
  1011  0B78  0659               	xorwf	??_main+3,w
  1012  0B79  1D03               	skipz
  1013  0B7A  2B7D               	goto	u4135
  1014  0B7B  0856               	movf	??_main,w
  1015  0B7C  0658               	xorwf	??_main+2,w
  1016  0B7D                     u4135:	
  1017  0B7D  1D03               	btfss	3,2
  1018  0B7E  2B98               	goto	l3079
  1019  0B7F  2BAE               	goto	l214
  1020  0B80                     l3069:	
  1021                           
  1022                           ;main.c: 44:                     configurarHorario();
  1023  0B80  120A  158A  270C  120A  158A  	fcall	_configurarHorario
  1024                           
  1025                           ;main.c: 45:                     break;
  1026  0B85  2BAE               	goto	l214
  1027  0B86                     l3071:	
  1028                           
  1029                           ;main.c: 47:                     configurarAntiHorario();
  1030  0B86  120A  158A  2618  120A  158A  	fcall	_configurarAntiHorario
  1031                           
  1032                           ;main.c: 48:                     break;
  1033  0B8B  2BAE               	goto	l214
  1034  0B8C                     l3073:	
  1035                           
  1036                           ;main.c: 50:                     StopMotor();
  1037  0B8C  160A  118A  2663  120A  158A  	fcall	_StopMotor
  1038                           
  1039                           ;main.c: 51:                     break;
  1040  0B91  2BAE               	goto	l214
  1041  0B92                     l3075:	
  1042                           
  1043                           ;main.c: 53:                     RunMotor();
  1044  0B92  160A  118A  2673  120A  158A  	fcall	_RunMotor
  1045                           
  1046                           ;main.c: 54:                     break;
  1047  0B97  2BAE               	goto	l214
  1048  0B98                     l3079:	
  1049  0B98  086B               	movf	_keypress,w
  1050  0B99  00D6               	movwf	??_main
  1051  0B9A  01D7               	clrf	??_main+1
  1052                           
  1053                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1054                           ; Switch size 1, requested type "simple"
  1055                           ; Number of cases is 1, Range of values is 0 to 0
  1056                           ; switch strategies available:
  1057                           ; Name         Instructions Cycles
  1058                           ; simple_byte            4     3 (average)
  1059                           ; direct_byte           11     8 (fixed)
  1060                           ; jumptable            260     6 (fixed)
  1061                           ;	Chosen strategy is simple_byte
  1062  0B9B  0857               	movf	??_main+1,w
  1063  0B9C  3A00               	xorlw	0	; case 0
  1064  0B9D  1903               	skipnz
  1065  0B9E  2BA0               	goto	l3185
  1066  0B9F  2BAE               	goto	l214
  1067  0BA0                     l3185:	
  1068                           
  1069                           ; Switch size 1, requested type "simple"
  1070                           ; Number of cases is 4, Range of values is 65 to 68
  1071                           ; switch strategies available:
  1072                           ; Name         Instructions Cycles
  1073                           ; simple_byte           13     7 (average)
  1074                           ; direct_byte           23    11 (fixed)
  1075                           ; jumptable            263     9 (fixed)
  1076                           ;	Chosen strategy is simple_byte
  1077  0BA0  0856               	movf	??_main,w
  1078  0BA1  3A41               	xorlw	65	; case 65
  1079  0BA2  1903               	skipnz
  1080  0BA3  2B80               	goto	l3069
  1081  0BA4  3A03               	xorlw	3	; case 66
  1082  0BA5  1903               	skipnz
  1083  0BA6  2B86               	goto	l3071
  1084  0BA7  3A01               	xorlw	1	; case 67
  1085  0BA8  1903               	skipnz
  1086  0BA9  2B8C               	goto	l3073
  1087  0BAA  3A07               	xorlw	7	; case 68
  1088  0BAB  1903               	skipnz
  1089  0BAC  2B92               	goto	l3075
  1090  0BAD  2BAE               	goto	l214
  1091  0BAE                     l214:	
  1092                           ;main.c: 56:         }
  1093                           
  1094                           
  1095                           ;main.c: 59:         if (RB0 == 1 && LastState == 0) {
  1096  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0BB0  1C06               	btfss	6,0	;volatile
  1099  0BB1  2BBB               	goto	l221
  1100  0BB2  0864               	movf	_LastState,w
  1101  0BB3  1D03               	btfss	3,2
  1102  0BB4  2BBB               	goto	l221
  1103                           
  1104                           ;main.c: 60:             Encoder();
  1105  0BB5  120A  118A  20CB  120A  158A  	fcall	_Encoder
  1106                           
  1107                           ;main.c: 61:         } else if (RB0 == 0) {
  1108  0BBA  2BBE               	goto	l3087
  1109  0BBB                     l221:	
  1110  0BBB  1806               	btfsc	6,0	;volatile
  1111  0BBC  2BBE               	goto	l3087
  1112                           
  1113                           ;main.c: 62:             LastState = 0;
  1114  0BBD  01E4               	clrf	_LastState
  1115  0BBE                     l3087:	
  1116                           
  1117                           ;main.c: 64:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1118  0BBE  30C7               	movlw	199
  1119  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  1120  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
  1121  0BC1  00D6               	movwf	??_main
  1122  0BC2                     u4177:	
  1123  0BC2  2BC3               	nop2
  1124  0BC3  0BD6               	decfsz	??_main,f
  1125  0BC4  2BC2               	goto	u4177
  1126  0BC5  2BC6               	nop2
  1127  0BC6  2B5B               	goto	l3063
  1128  0BC7                     __end_of_main:	
  1129                           
  1130                           	psect	text1
  1131  0F0C                     __ptext1:	
  1132 ;; *************** function _configurarHorario *****************
  1133 ;; Defined at:
  1134 ;;		line 86 in file "main.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;		None
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;		None
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  2   76[None  ] int 
  1141 ;; Registers used:
  1142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1148 ;;      Params:         0       0       0       0       0
  1149 ;;      Locals:         0       0       0       0       0
  1150 ;;      Temps:          0       4       0       0       0
  1151 ;;      Totals:         0       4       0       0       0
  1152 ;;Total ram usage:        4 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    4
  1155 ;; This function calls:
  1156 ;;		_KeyPadGetKey
  1157 ;;		_Lcd_Clear
  1158 ;;		_Lcd_Set_Cursor
  1159 ;;		_Lcd_Write_Integer
  1160 ;;		_Lcd_Write_String
  1161 ;;		_RunMotor
  1162 ;;		_StopMotor
  1163 ;;		___wmul
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           
  1170                           ;psect for function _configurarHorario
  1171  0F0C                     _configurarHorario:	
  1172                           
  1173                           ;main.c: 88:     buffer = 0;
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _configurarHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1177  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0F0E  01E7               	clrf	_buffer
  1180  0F0F  01E8               	clrf	_buffer+1
  1181                           
  1182                           ;main.c: 89:     StopMotor();
  1183  0F10  160A  118A  2663  120A  158A  	fcall	_StopMotor
  1184                           
  1185                           ;main.c: 91:     Lcd_Clear();
  1186  0F15  160A  118A  2668  120A  158A  	fcall	_Lcd_Clear
  1187                           
  1188                           ;main.c: 92:     Lcd_Set_Cursor(1, 1);
  1189  0F1A  01F4               	clrf	Lcd_Set_Cursor@b
  1190  0F1B  0AF4               	incf	Lcd_Set_Cursor@b,f
  1191  0F1C  3001               	movlw	1
  1192  0F1D  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1193                           
  1194                           ;main.c: 93:     Lcd_Write_String("Adelante: ");
  1195  0F22  303B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1196  0F23  00F5               	movwf	Lcd_Write_String@a
  1197  0F24  3080               	movlw	128
  1198  0F25  00F6               	movwf	Lcd_Write_String@a+1
  1199  0F26  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1200                           
  1201                           ;main.c: 94:     Lcd_Set_Cursor(2, 1);
  1202  0F2B  01F4               	clrf	Lcd_Set_Cursor@b
  1203  0F2C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1204  0F2D  3002               	movlw	2
  1205  0F2E  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1206                           
  1207                           ;main.c: 95:     Lcd_Write_String("0 Cm");
  1208  0F33  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1209  0F34  00F5               	movwf	Lcd_Write_String@a
  1210  0F35  3080               	movlw	128
  1211  0F36  00F6               	movwf	Lcd_Write_String@a+1
  1212  0F37  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1213  0F3C                     l2891:	
  1214                           
  1215                           ;main.c: 99:         keypress = KeyPadGetKey();
  1216  0F3C  120A  158A  220C  120A  158A  	fcall	_KeyPadGetKey
  1217  0F41  0870               	movf	?_KeyPadGetKey,w
  1218  0F42  1283               	bcf	3,5	;RP0=0, select bank0
  1219  0F43  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0F44  00D2               	movwf	??_configurarHorario
  1221  0F45  0852               	movf	??_configurarHorario,w
  1222  0F46  00EB               	movwf	_keypress
  1223                           
  1224                           ;main.c: 100:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1225  0F47  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1226  0F48  0084               	movwf	4
  1227  0F49  120A  158A  200A  120A  158A  	fcall	stringdir
  1228  0F4E  00D2               	movwf	??_configurarHorario
  1229  0F4F  120A  158A  200A  120A  158A  	fcall	stringdir
  1230  0F54  00D3               	movwf	??_configurarHorario+1
  1231  0F55  086B               	movf	_keypress,w
  1232  0F56  00D4               	movwf	??_configurarHorario+2
  1233  0F57  01D5               	clrf	??_configurarHorario+3
  1234  0F58  0853               	movf	??_configurarHorario+1,w
  1235  0F59  0655               	xorwf	??_configurarHorario+3,w
  1236  0F5A  1D03               	skipz
  1237  0F5B  2F5E               	goto	u4055
  1238  0F5C  0852               	movf	??_configurarHorario,w
  1239  0F5D  0654               	xorwf	??_configurarHorario+2,w
  1240  0F5E                     u4055:	
  1241  0F5E  1903               	skipnz
  1242  0F5F  2FF7               	goto	l2931
  1243                           
  1244                           ;main.c: 101:             key2 = keypress;
  1245  0F60  086B               	movf	_keypress,w
  1246  0F61  00D2               	movwf	??_configurarHorario
  1247  0F62  01D3               	clrf	??_configurarHorario+1
  1248  0F63  0852               	movf	??_configurarHorario,w
  1249  0F64  00E9               	movwf	_key2
  1250  0F65  0853               	movf	??_configurarHorario+1,w
  1251  0F66  00EA               	movwf	_key2+1
  1252                           
  1253                           ;main.c: 102:             switch (key2) {
  1254  0F67  2FDE               	goto	l2929
  1255  0F68                     l2897:	
  1256                           
  1257                           ;main.c: 105:                     buffer = 0;
  1258  0F68  01E7               	clrf	_buffer
  1259  0F69  01E8               	clrf	_buffer+1
  1260                           
  1261                           ;main.c: 106:                     Lcd_Clear();
  1262  0F6A  160A  118A  2668  120A  158A  	fcall	_Lcd_Clear
  1263                           
  1264                           ;main.c: 107:                     Lcd_Set_Cursor(1, 1);
  1265  0F6F  01F4               	clrf	Lcd_Set_Cursor@b
  1266  0F70  0AF4               	incf	Lcd_Set_Cursor@b,f
  1267  0F71  3001               	movlw	1
  1268  0F72  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1269                           
  1270                           ;main.c: 108:                     Lcd_Write_String("Adelante: ");
  1271  0F77  303B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1272  0F78  00F5               	movwf	Lcd_Write_String@a
  1273  0F79  3080               	movlw	128
  1274  0F7A  00F6               	movwf	Lcd_Write_String@a+1
  1275  0F7B  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1276                           
  1277                           ;main.c: 109:                     Lcd_Set_Cursor(2, 1);
  1278  0F80  01F4               	clrf	Lcd_Set_Cursor@b
  1279  0F81  0AF4               	incf	Lcd_Set_Cursor@b,f
  1280  0F82  3002               	movlw	2
  1281  0F83  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1282                           
  1283                           ;main.c: 110:                     Lcd_Write_String("0 Cm");
  1284  0F88  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1285  0F89  00F5               	movwf	Lcd_Write_String@a
  1286  0F8A  3080               	movlw	128
  1287  0F8B  00F6               	movwf	Lcd_Write_String@a+1
  1288  0F8C  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1289                           
  1290                           ;main.c: 111:                     break;
  1291  0F91  2FF7               	goto	l2931
  1292  0F92                     l2909:	
  1293                           
  1294                           ;main.c: 117:                     Grados = 0;
  1295  0F92  01E2               	clrf	_Grados
  1296  0F93  01E3               	clrf	_Grados+1
  1297                           
  1298                           ;main.c: 118:                     CmHorario = buffer;
  1299  0F94  0868               	movf	_buffer+1,w
  1300  0F95  00E1               	movwf	_CmHorario+1
  1301  0F96  0867               	movf	_buffer,w
  1302  0F97  00E0               	movwf	_CmHorario
  1303                           
  1304                           ;main.c: 119:                     RunMotor();
  1305  0F98  160A  118A  2673  120A  158A  	fcall	_RunMotor
  1306                           
  1307                           ;main.c: 120:                     if (CmHorario != 0) {
  1308  0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  1309  0F9E  1303               	bcf	3,6	;RP1=0, select bank0
  1310  0F9F  0860               	movf	_CmHorario,w
  1311  0FA0  0461               	iorwf	_CmHorario+1,w
  1312  0FA1  1D03               	btfss	3,2
  1313  0FA2  0008               	return
  1314  0FA3  2FF7               	goto	l2931
  1315  0FA4                     l2919:	
  1316                           
  1317                           ;main.c: 129:                     buffer = (10 * buffer + key2);
  1318  0FA4  0868               	movf	_buffer+1,w
  1319  0FA5  00F1               	movwf	___wmul@multiplier+1
  1320  0FA6  0867               	movf	_buffer,w
  1321  0FA7  00F0               	movwf	___wmul@multiplier
  1322  0FA8  300A               	movlw	10
  1323  0FA9  00F2               	movwf	___wmul@multiplicand
  1324  0FAA  3000               	movlw	0
  1325  0FAB  00F3               	movwf	___wmul@multiplicand+1
  1326  0FAC  160A  118A  26CC  120A  158A  	fcall	___wmul
  1327  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0FB3  0869               	movf	_key2,w
  1330  0FB4  0770               	addwf	?___wmul,w
  1331  0FB5  00E7               	movwf	_buffer
  1332  0FB6  086A               	movf	_key2+1,w
  1333  0FB7  1803               	skipnc
  1334  0FB8  0A6A               	incf	_key2+1,w
  1335  0FB9  0771               	addwf	?___wmul+1,w
  1336  0FBA  00E8               	movwf	_buffer+1
  1337                           
  1338                           ;main.c: 130:                     buffer -= 48;
  1339  0FBB  30D0               	movlw	208
  1340  0FBC  07E7               	addwf	_buffer,f
  1341  0FBD  1803               	skipnc
  1342  0FBE  0AE8               	incf	_buffer+1,f
  1343  0FBF  30FF               	movlw	255
  1344  0FC0  07E8               	addwf	_buffer+1,f
  1345                           
  1346                           ;main.c: 131:                     Lcd_Set_Cursor(2, 1);
  1347  0FC1  01F4               	clrf	Lcd_Set_Cursor@b
  1348  0FC2  0AF4               	incf	Lcd_Set_Cursor@b,f
  1349  0FC3  3002               	movlw	2
  1350  0FC4  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1351                           
  1352                           ;main.c: 132:                     Lcd_Write_Integer(buffer);
  1353  0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  1354  0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  1355  0FCB  0868               	movf	_buffer+1,w
  1356  0FCC  00C6               	movwf	Lcd_Write_Integer@a+1
  1357  0FCD  0867               	movf	_buffer,w
  1358  0FCE  00C5               	movwf	Lcd_Write_Integer@a
  1359  0FCF  160A  118A  2680  120A  158A  	fcall	_Lcd_Write_Integer
  1360                           
  1361                           ;main.c: 133:                     Lcd_Write_String(" Cm");
  1362  0FD4  3063               	movlw	(low (((STR_4+1)-__stringbase)| (0+32768)))& (0+255)
  1363  0FD5  00F5               	movwf	Lcd_Write_String@a
  1364  0FD6  3080               	movlw	128
  1365  0FD7  00F6               	movwf	Lcd_Write_String@a+1
  1366  0FD8  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1367                           
  1368                           ;main.c: 134:             }
  1369  0FDD  2FF7               	goto	l2931
  1370  0FDE                     l2929:	
  1371                           
  1372                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1373                           ; Switch size 1, requested type "simple"
  1374                           ; Number of cases is 1, Range of values is 0 to 0
  1375                           ; switch strategies available:
  1376                           ; Name         Instructions Cycles
  1377                           ; simple_byte            4     3 (average)
  1378                           ; direct_byte           11     8 (fixed)
  1379                           ; jumptable            260     6 (fixed)
  1380                           ;	Chosen strategy is simple_byte
  1381  0FDE  086A               	movf	_key2+1,w
  1382  0FDF  3A00               	xorlw	0	; case 0
  1383  0FE0  1903               	skipnz
  1384  0FE1  2FE3               	goto	l3187
  1385  0FE2  2FA4               	goto	l2919
  1386  0FE3                     l3187:	
  1387                           
  1388                           ; Switch size 1, requested type "simple"
  1389                           ; Number of cases is 6, Range of values is 35 to 68
  1390                           ; switch strategies available:
  1391                           ; Name         Instructions Cycles
  1392                           ; simple_byte           19    10 (average)
  1393                           ; direct_byte          113    11 (fixed)
  1394                           ; jumptable            263     9 (fixed)
  1395                           ;	Chosen strategy is simple_byte
  1396  0FE3  0869               	movf	_key2,w
  1397  0FE4  3A23               	xorlw	35	; case 35
  1398  0FE5  1903               	skipnz
  1399  0FE6  2FF7               	goto	l2931
  1400  0FE7  3A09               	xorlw	9	; case 42
  1401  0FE8  1903               	skipnz
  1402  0FE9  2FF7               	goto	l2931
  1403  0FEA  3A6B               	xorlw	107	; case 65
  1404  0FEB  1903               	skipnz
  1405  0FEC  2F68               	goto	l2897
  1406  0FED  3A03               	xorlw	3	; case 66
  1407  0FEE  1903               	skipnz
  1408  0FEF  2FF7               	goto	l2931
  1409  0FF0  3A01               	xorlw	1	; case 67
  1410  0FF1  1903               	skipnz
  1411  0FF2  2FF7               	goto	l2931
  1412  0FF3  3A07               	xorlw	7	; case 68
  1413  0FF4  1903               	skipnz
  1414  0FF5  2F92               	goto	l2909
  1415  0FF6  2FA4               	goto	l2919
  1416  0FF7                     l2931:	
  1417                           
  1418                           ;main.c: 136:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1419  0FF7  30C7               	movlw	199
  1420  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  1421  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  1422  0FFA  00D2               	movwf	??_configurarHorario
  1423  0FFB                     u4187:	
  1424  0FFB  2FFC               	nop2
  1425  0FFC  0BD2               	decfsz	??_configurarHorario,f
  1426  0FFD  2FFB               	goto	u4187
  1427  0FFE  2FFF               	nop2
  1428  0FFF  2F3C               	goto	l2891
  1429  1000                     __end_of_configurarHorario:	
  1430                           
  1431                           	psect	text2
  1432  0E18                     __ptext2:	
  1433 ;; *************** function _configurarAntiHorario *****************
  1434 ;; Defined at:
  1435 ;;		line 140 in file "main.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;		None
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;		None
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2   78[None  ] int 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1449 ;;      Params:         0       0       0       0       0
  1450 ;;      Locals:         0       0       0       0       0
  1451 ;;      Temps:          0       4       0       0       0
  1452 ;;      Totals:         0       4       0       0       0
  1453 ;;Total ram usage:        4 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    4
  1456 ;; This function calls:
  1457 ;;		_KeyPadGetKey
  1458 ;;		_Lcd_Clear
  1459 ;;		_Lcd_Set_Cursor
  1460 ;;		_Lcd_Write_Integer
  1461 ;;		_Lcd_Write_String
  1462 ;;		_RunMotor
  1463 ;;		_StopMotor
  1464 ;;		___wmul
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           
  1471                           ;psect for function _configurarAntiHorario
  1472  0E18                     _configurarAntiHorario:	
  1473                           
  1474                           ;main.c: 142:     buffer = 0;
  1475                           
  1476                           ;incstack = 0
  1477                           ; Regs used in _configurarAntiHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1478  0E18  1283               	bcf	3,5	;RP0=0, select bank0
  1479  0E19  1303               	bcf	3,6	;RP1=0, select bank0
  1480  0E1A  01E7               	clrf	_buffer
  1481  0E1B  01E8               	clrf	_buffer+1
  1482                           
  1483                           ;main.c: 143:     StopMotor();
  1484  0E1C  160A  118A  2663  120A  158A  	fcall	_StopMotor
  1485                           
  1486                           ;main.c: 145:     Lcd_Clear();
  1487  0E21  160A  118A  2668  120A  158A  	fcall	_Lcd_Clear
  1488                           
  1489                           ;main.c: 146:     Lcd_Set_Cursor(1, 1);
  1490  0E26  01F4               	clrf	Lcd_Set_Cursor@b
  1491  0E27  0AF4               	incf	Lcd_Set_Cursor@b,f
  1492  0E28  3001               	movlw	1
  1493  0E29  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1494                           
  1495                           ;main.c: 147:     Lcd_Write_String("Atras: ");
  1496  0E2E  305A               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1497  0E2F  00F5               	movwf	Lcd_Write_String@a
  1498  0E30  3080               	movlw	128
  1499  0E31  00F6               	movwf	Lcd_Write_String@a+1
  1500  0E32  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1501                           
  1502                           ;main.c: 148:     Lcd_Set_Cursor(2, 1);
  1503  0E37  01F4               	clrf	Lcd_Set_Cursor@b
  1504  0E38  0AF4               	incf	Lcd_Set_Cursor@b,f
  1505  0E39  3002               	movlw	2
  1506  0E3A  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1507                           
  1508                           ;main.c: 149:     Lcd_Write_String("0 Cm");
  1509  0E3F  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1510  0E40  00F5               	movwf	Lcd_Write_String@a
  1511  0E41  3080               	movlw	128
  1512  0E42  00F6               	movwf	Lcd_Write_String@a+1
  1513  0E43  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1514  0E48                     l2951:	
  1515                           
  1516                           ;main.c: 153:         keypress = KeyPadGetKey();
  1517  0E48  120A  158A  220C  120A  158A  	fcall	_KeyPadGetKey
  1518  0E4D  0870               	movf	?_KeyPadGetKey,w
  1519  0E4E  1283               	bcf	3,5	;RP0=0, select bank0
  1520  0E4F  1303               	bcf	3,6	;RP1=0, select bank0
  1521  0E50  00D2               	movwf	??_configurarAntiHorario
  1522  0E51  0852               	movf	??_configurarAntiHorario,w
  1523  0E52  00EB               	movwf	_keypress
  1524                           
  1525                           ;main.c: 154:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1526  0E53  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1527  0E54  0084               	movwf	4
  1528  0E55  120A  158A  200A  120A  158A  	fcall	stringdir
  1529  0E5A  00D2               	movwf	??_configurarAntiHorario
  1530  0E5B  120A  158A  200A  120A  158A  	fcall	stringdir
  1531  0E60  00D3               	movwf	??_configurarAntiHorario+1
  1532  0E61  086B               	movf	_keypress,w
  1533  0E62  00D4               	movwf	??_configurarAntiHorario+2
  1534  0E63  01D5               	clrf	??_configurarAntiHorario+3
  1535  0E64  0853               	movf	??_configurarAntiHorario+1,w
  1536  0E65  0655               	xorwf	??_configurarAntiHorario+3,w
  1537  0E66  1D03               	skipz
  1538  0E67  2E6A               	goto	u4075
  1539  0E68  0852               	movf	??_configurarAntiHorario,w
  1540  0E69  0654               	xorwf	??_configurarAntiHorario+2,w
  1541  0E6A                     u4075:	
  1542  0E6A  1903               	skipnz
  1543  0E6B  2F03               	goto	l2991
  1544                           
  1545                           ;main.c: 155:             key2 = keypress;
  1546  0E6C  086B               	movf	_keypress,w
  1547  0E6D  00D2               	movwf	??_configurarAntiHorario
  1548  0E6E  01D3               	clrf	??_configurarAntiHorario+1
  1549  0E6F  0852               	movf	??_configurarAntiHorario,w
  1550  0E70  00E9               	movwf	_key2
  1551  0E71  0853               	movf	??_configurarAntiHorario+1,w
  1552  0E72  00EA               	movwf	_key2+1
  1553                           
  1554                           ;main.c: 156:             switch (key2) {
  1555  0E73  2EEA               	goto	l2989
  1556  0E74                     l2957:	
  1557                           
  1558                           ;main.c: 160:                     buffer = 0;
  1559  0E74  01E7               	clrf	_buffer
  1560  0E75  01E8               	clrf	_buffer+1
  1561                           
  1562                           ;main.c: 161:                     Lcd_Clear();
  1563  0E76  160A  118A  2668  120A  158A  	fcall	_Lcd_Clear
  1564                           
  1565                           ;main.c: 162:                     Lcd_Set_Cursor(1, 1);
  1566  0E7B  01F4               	clrf	Lcd_Set_Cursor@b
  1567  0E7C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1568  0E7D  3001               	movlw	1
  1569  0E7E  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1570                           
  1571                           ;main.c: 163:                     Lcd_Write_String("Atras: ");
  1572  0E83  305A               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1573  0E84  00F5               	movwf	Lcd_Write_String@a
  1574  0E85  3080               	movlw	128
  1575  0E86  00F6               	movwf	Lcd_Write_String@a+1
  1576  0E87  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1577                           
  1578                           ;main.c: 164:                     Lcd_Set_Cursor(2, 1);
  1579  0E8C  01F4               	clrf	Lcd_Set_Cursor@b
  1580  0E8D  0AF4               	incf	Lcd_Set_Cursor@b,f
  1581  0E8E  3002               	movlw	2
  1582  0E8F  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1583                           
  1584                           ;main.c: 165:                     Lcd_Write_String("0 Cm");
  1585  0E94  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1586  0E95  00F5               	movwf	Lcd_Write_String@a
  1587  0E96  3080               	movlw	128
  1588  0E97  00F6               	movwf	Lcd_Write_String@a+1
  1589  0E98  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1590                           
  1591                           ;main.c: 166:                     break;
  1592  0E9D  2F03               	goto	l2991
  1593  0E9E                     l2969:	
  1594                           
  1595                           ;main.c: 170:                     Grados = 0;
  1596  0E9E  01E2               	clrf	_Grados
  1597  0E9F  01E3               	clrf	_Grados+1
  1598                           
  1599                           ;main.c: 171:                     CmAntiHorario = buffer;
  1600  0EA0  0868               	movf	_buffer+1,w
  1601  0EA1  00DF               	movwf	_CmAntiHorario+1
  1602  0EA2  0867               	movf	_buffer,w
  1603  0EA3  00DE               	movwf	_CmAntiHorario
  1604                           
  1605                           ;main.c: 172:                     RunMotor();
  1606  0EA4  160A  118A  2673  120A  158A  	fcall	_RunMotor
  1607                           
  1608                           ;main.c: 173:                     if (CmAntiHorario != 0) {
  1609  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  1610  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  1611  0EAB  085E               	movf	_CmAntiHorario,w
  1612  0EAC  045F               	iorwf	_CmAntiHorario+1,w
  1613  0EAD  1D03               	btfss	3,2
  1614  0EAE  0008               	return
  1615  0EAF  2F03               	goto	l2991
  1616  0EB0                     l2979:	
  1617                           
  1618                           ;main.c: 182:                     buffer = (10 * buffer + key2);
  1619  0EB0  0868               	movf	_buffer+1,w
  1620  0EB1  00F1               	movwf	___wmul@multiplier+1
  1621  0EB2  0867               	movf	_buffer,w
  1622  0EB3  00F0               	movwf	___wmul@multiplier
  1623  0EB4  300A               	movlw	10
  1624  0EB5  00F2               	movwf	___wmul@multiplicand
  1625  0EB6  3000               	movlw	0
  1626  0EB7  00F3               	movwf	___wmul@multiplicand+1
  1627  0EB8  160A  118A  26CC  120A  158A  	fcall	___wmul
  1628  0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  1630  0EBF  0869               	movf	_key2,w
  1631  0EC0  0770               	addwf	?___wmul,w
  1632  0EC1  00E7               	movwf	_buffer
  1633  0EC2  086A               	movf	_key2+1,w
  1634  0EC3  1803               	skipnc
  1635  0EC4  0A6A               	incf	_key2+1,w
  1636  0EC5  0771               	addwf	?___wmul+1,w
  1637  0EC6  00E8               	movwf	_buffer+1
  1638                           
  1639                           ;main.c: 183:                     buffer -= 48;
  1640  0EC7  30D0               	movlw	208
  1641  0EC8  07E7               	addwf	_buffer,f
  1642  0EC9  1803               	skipnc
  1643  0ECA  0AE8               	incf	_buffer+1,f
  1644  0ECB  30FF               	movlw	255
  1645  0ECC  07E8               	addwf	_buffer+1,f
  1646                           
  1647                           ;main.c: 184:                     Lcd_Set_Cursor(2, 1);
  1648  0ECD  01F4               	clrf	Lcd_Set_Cursor@b
  1649  0ECE  0AF4               	incf	Lcd_Set_Cursor@b,f
  1650  0ECF  3002               	movlw	2
  1651  0ED0  160A  118A  27B6  120A  158A  	fcall	_Lcd_Set_Cursor
  1652                           
  1653                           ;main.c: 185:                     Lcd_Write_Integer(buffer);
  1654  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  1655  0ED6  1303               	bcf	3,6	;RP1=0, select bank0
  1656  0ED7  0868               	movf	_buffer+1,w
  1657  0ED8  00C6               	movwf	Lcd_Write_Integer@a+1
  1658  0ED9  0867               	movf	_buffer,w
  1659  0EDA  00C5               	movwf	Lcd_Write_Integer@a
  1660  0EDB  160A  118A  2680  120A  158A  	fcall	_Lcd_Write_Integer
  1661                           
  1662                           ;main.c: 186:                     Lcd_Write_String(" Cm");
  1663  0EE0  3063               	movlw	(low (((STR_4+1)-__stringbase)| (0+32768)))& (0+255)
  1664  0EE1  00F5               	movwf	Lcd_Write_String@a
  1665  0EE2  3080               	movlw	128
  1666  0EE3  00F6               	movwf	Lcd_Write_String@a+1
  1667  0EE4  160A  118A  2779  120A  158A  	fcall	_Lcd_Write_String
  1668                           
  1669                           ;main.c: 187:             }
  1670  0EE9  2F03               	goto	l2991
  1671  0EEA                     l2989:	
  1672                           
  1673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1674                           ; Switch size 1, requested type "simple"
  1675                           ; Number of cases is 1, Range of values is 0 to 0
  1676                           ; switch strategies available:
  1677                           ; Name         Instructions Cycles
  1678                           ; simple_byte            4     3 (average)
  1679                           ; direct_byte           11     8 (fixed)
  1680                           ; jumptable            260     6 (fixed)
  1681                           ;	Chosen strategy is simple_byte
  1682  0EEA  086A               	movf	_key2+1,w
  1683  0EEB  3A00               	xorlw	0	; case 0
  1684  0EEC  1903               	skipnz
  1685  0EED  2EEF               	goto	l3189
  1686  0EEE  2EB0               	goto	l2979
  1687  0EEF                     l3189:	
  1688                           
  1689                           ; Switch size 1, requested type "simple"
  1690                           ; Number of cases is 6, Range of values is 35 to 68
  1691                           ; switch strategies available:
  1692                           ; Name         Instructions Cycles
  1693                           ; simple_byte           19    10 (average)
  1694                           ; direct_byte          113    11 (fixed)
  1695                           ; jumptable            263     9 (fixed)
  1696                           ;	Chosen strategy is simple_byte
  1697  0EEF  0869               	movf	_key2,w
  1698  0EF0  3A23               	xorlw	35	; case 35
  1699  0EF1  1903               	skipnz
  1700  0EF2  2F03               	goto	l2991
  1701  0EF3  3A09               	xorlw	9	; case 42
  1702  0EF4  1903               	skipnz
  1703  0EF5  2F03               	goto	l2991
  1704  0EF6  3A6B               	xorlw	107	; case 65
  1705  0EF7  1903               	skipnz
  1706  0EF8  2F03               	goto	l2991
  1707  0EF9  3A03               	xorlw	3	; case 66
  1708  0EFA  1903               	skipnz
  1709  0EFB  2E74               	goto	l2957
  1710  0EFC  3A01               	xorlw	1	; case 67
  1711  0EFD  1903               	skipnz
  1712  0EFE  2F03               	goto	l2991
  1713  0EFF  3A07               	xorlw	7	; case 68
  1714  0F00  1903               	skipnz
  1715  0F01  2E9E               	goto	l2969
  1716  0F02  2EB0               	goto	l2979
  1717  0F03                     l2991:	
  1718                           
  1719                           ;main.c: 189:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1720  0F03  30C7               	movlw	199
  1721  0F04  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0F05  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0F06  00D2               	movwf	??_configurarAntiHorario
  1724  0F07                     u4197:	
  1725  0F07  2F08               	nop2
  1726  0F08  0BD2               	decfsz	??_configurarAntiHorario,f
  1727  0F09  2F07               	goto	u4197
  1728  0F0A  2F0B               	nop2
  1729  0F0B  2E48               	goto	l2951
  1730  0F0C                     __end_of_configurarAntiHorario:	
  1731                           
  1732                           	psect	text3
  1733  16CC                     __ptext3:	
  1734 ;; *************** function ___wmul *****************
  1735 ;; Defined at:
  1736 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;  multiplier      2    0[COMMON] unsigned int 
  1739 ;;  multiplicand    2    2[COMMON] unsigned int 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  product         2    4[COMMON] unsigned int 
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  2    0[COMMON] unsigned int 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, status,0
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1751 ;;      Params:         4       0       0       0       0
  1752 ;;      Locals:         2       0       0       0       0
  1753 ;;      Temps:          0       0       0       0       0
  1754 ;;      Totals:         6       0       0       0       0
  1755 ;;Total ram usage:        6 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_configurarHorario
  1761 ;;		_configurarAntiHorario
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           
  1766                           ;psect for function ___wmul
  1767  16CC                     ___wmul:	
  1768                           
  1769                           ;incstack = 0
  1770                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1771  16CC  01F4               	clrf	___wmul@product
  1772  16CD  01F5               	clrf	___wmul@product+1
  1773  16CE                     l2549:	
  1774  16CE  1C70               	btfss	___wmul@multiplier,0
  1775  16CF  2ED6               	goto	l393
  1776  16D0  0872               	movf	___wmul@multiplicand,w
  1777  16D1  07F4               	addwf	___wmul@product,f
  1778  16D2  1803               	skipnc
  1779  16D3  0AF5               	incf	___wmul@product+1,f
  1780  16D4  0873               	movf	___wmul@multiplicand+1,w
  1781  16D5  07F5               	addwf	___wmul@product+1,f
  1782  16D6                     l393:	
  1783  16D6  3001               	movlw	1
  1784  16D7                     u3285:	
  1785  16D7  1003               	clrc
  1786  16D8  0DF2               	rlf	___wmul@multiplicand,f
  1787  16D9  0DF3               	rlf	___wmul@multiplicand+1,f
  1788  16DA  3EFF               	addlw	-1
  1789  16DB  1D03               	skipz
  1790  16DC  2ED7               	goto	u3285
  1791  16DD  3001               	movlw	1
  1792  16DE                     u3295:	
  1793  16DE  1003               	clrc
  1794  16DF  0CF1               	rrf	___wmul@multiplier+1,f
  1795  16E0  0CF0               	rrf	___wmul@multiplier,f
  1796  16E1  3EFF               	addlw	-1
  1797  16E2  1D03               	skipz
  1798  16E3  2EDE               	goto	u3295
  1799  16E4  0870               	movf	___wmul@multiplier,w
  1800  16E5  0471               	iorwf	___wmul@multiplier+1,w
  1801  16E6  1D03               	btfss	3,2
  1802  16E7  2ECE               	goto	l2549
  1803  16E8  0875               	movf	___wmul@product+1,w
  1804  16E9  00F1               	movwf	?___wmul+1
  1805  16EA  0874               	movf	___wmul@product,w
  1806  16EB  00F0               	movwf	?___wmul
  1807  16EC  0008               	return
  1808  16ED                     __end_of___wmul:	
  1809                           
  1810                           	psect	text4
  1811  1663                     __ptext4:	
  1812 ;; *************** function _StopMotor *****************
  1813 ;; Defined at:
  1814 ;;		line 80 in file "main.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  2   74[None  ] int 
  1821 ;; Registers used:
  1822 ;;		None
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1828 ;;      Params:         0       0       0       0       0
  1829 ;;      Locals:         0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0
  1831 ;;      Totals:         0       0       0       0       0
  1832 ;;Total ram usage:        0 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;;		_configurarHorario
  1839 ;;		_configurarAntiHorario
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           
  1844                           ;psect for function _StopMotor
  1845  1663                     _StopMotor:	
  1846                           
  1847                           ;main.c: 81:     RC1 = 0;
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _StopMotor: []
  1851  1663  1283               	bcf	3,5	;RP0=0, select bank0
  1852  1664  1303               	bcf	3,6	;RP1=0, select bank0
  1853  1665  1087               	bcf	7,1	;volatile
  1854                           
  1855                           ;main.c: 82:     RC0 = 0;
  1856  1666  1007               	bcf	7,0	;volatile
  1857                           
  1858                           ;main.c: 83:     return 0;;	Return value of _StopMotor is never used
  1859  1667  0008               	return
  1860  1668                     __end_of_StopMotor:	
  1861                           
  1862                           	psect	text5
  1863  1673                     __ptext5:	
  1864 ;; *************** function _RunMotor *****************
  1865 ;; Defined at:
  1866 ;;		line 72 in file "main.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  2   80[None  ] int 
  1873 ;; Registers used:
  1874 ;;		wreg, status,2, status,0
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1880 ;;      Params:         0       0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0
  1883 ;;      Totals:         0       0       0       0       0
  1884 ;;Total ram usage:        0 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_main
  1890 ;;		_configurarHorario
  1891 ;;		_configurarAntiHorario
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           
  1896                           ;psect for function _RunMotor
  1897  1673                     _RunMotor:	
  1898                           
  1899                           ;main.c: 73:     if (CmAntiHorario != 0 && CmHorario != 0) {
  1900                           
  1901                           ;incstack = 0
  1902                           ; Regs used in _RunMotor: [wreg+status,2+status,0]
  1903  1673  1283               	bcf	3,5	;RP0=0, select bank0
  1904  1674  1303               	bcf	3,6	;RP1=0, select bank0
  1905  1675  085E               	movf	_CmAntiHorario,w
  1906  1676  045F               	iorwf	_CmAntiHorario+1,w
  1907  1677  1903               	btfsc	3,2
  1908  1678  0008               	return
  1909  1679  0860               	movf	_CmHorario,w
  1910  167A  0461               	iorwf	_CmHorario+1,w
  1911  167B  1903               	btfsc	3,2
  1912  167C  0008               	return
  1913                           
  1914                           ;main.c: 74:         RC0 = 1;
  1915  167D  1407               	bsf	7,0	;volatile
  1916                           
  1917                           ;main.c: 75:         RC1 = 0;
  1918  167E  1087               	bcf	7,1	;volatile
  1919  167F  0008               	return
  1920  1680                     __end_of_RunMotor:	
  1921                           
  1922                           	psect	text6
  1923  0A0C                     __ptext6:	
  1924 ;; *************** function _KeyPadGetKey *****************
  1925 ;; Defined at:
  1926 ;;		line 16 in file "./KeyPad.h"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;		None
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  row             1    4[COMMON] unsigned char 
  1931 ;;  key             1    3[COMMON] unsigned char 
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  2    0[COMMON] int 
  1934 ;; Registers used:
  1935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1941 ;;      Params:         2       0       0       0       0
  1942 ;;      Locals:         2       0       0       0       0
  1943 ;;      Temps:          1       0       0       0       0
  1944 ;;      Totals:         5       0       0       0       0
  1945 ;;Total ram usage:        5 bytes
  1946 ;; Hardware stack levels used:    2
  1947 ;; This function calls:
  1948 ;;		Nothing
  1949 ;; This function is called by:
  1950 ;;		_main
  1951 ;;		_configurarHorario
  1952 ;;		_configurarAntiHorario
  1953 ;; This function uses a non-reentrant model
  1954 ;;
  1955                           
  1956                           
  1957                           ;psect for function _KeyPadGetKey
  1958  0A0C                     _KeyPadGetKey:	
  1959                           
  1960                           ;./KeyPad.h: 18:     char key = 0, row;
  1961                           
  1962                           ;incstack = 0
  1963                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  1964  0A0C  01F3               	clrf	KeyPadGetKey@key
  1965                           
  1966                           ;./KeyPad.h: 20:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  1967  0A0D  01F4               	clrf	KeyPadGetKey@row
  1968  0A0E  0AF4               	incf	KeyPadGetKey@row,f
  1969  0A0F                     l144:	
  1970                           
  1971                           ;./KeyPad.h: 21:         {;./KeyPad.h: 22:             RA0 = (row & 0x0001) >> 0;
  1972  0A0F  1C74               	btfss	KeyPadGetKey@row,0
  1973  0A10  2A15               	goto	u3040
  1974  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  1975  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  1976  0A13  1405               	bsf	5,0	;volatile
  1977  0A14  2A18               	goto	l2473
  1978  0A15                     u3040:	
  1979  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  1980  0A16  1303               	bcf	3,6	;RP1=0, select bank0
  1981  0A17  1005               	bcf	5,0	;volatile
  1982  0A18                     l2473:	
  1983                           
  1984                           ;./KeyPad.h: 23:             RA1 = (row & 0x0002) >> 1;
  1985  0A18  0874               	movf	KeyPadGetKey@row,w
  1986  0A19  00F2               	movwf	??_KeyPadGetKey
  1987  0A1A  3001               	movlw	1
  1988  0A1B                     u3065:	
  1989  0A1B  1003               	clrc
  1990  0A1C  0CF2               	rrf	??_KeyPadGetKey,f
  1991  0A1D  3EFF               	addlw	-1
  1992  0A1E  1D03               	skipz
  1993  0A1F  2A1B               	goto	u3065
  1994  0A20  1C72               	btfss	??_KeyPadGetKey,0
  1995  0A21  2A26               	goto	u3070
  1996  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  1997  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0A24  1485               	bsf	5,1	;volatile
  1999  0A25  2A29               	goto	u3084
  2000  0A26                     u3070:	
  2001  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  2002  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  2003  0A28  1085               	bcf	5,1	;volatile
  2004  0A29                     u3084:	
  2005                           
  2006                           ;./KeyPad.h: 24:             RA2 = (row & 0x0004) >> 2;
  2007  0A29  0874               	movf	KeyPadGetKey@row,w
  2008  0A2A  00F2               	movwf	??_KeyPadGetKey
  2009  0A2B  3002               	movlw	2
  2010  0A2C                     u3095:	
  2011  0A2C  1003               	clrc
  2012  0A2D  0CF2               	rrf	??_KeyPadGetKey,f
  2013  0A2E  3EFF               	addlw	-1
  2014  0A2F  1D03               	skipz
  2015  0A30  2A2C               	goto	u3095
  2016  0A31  1C72               	btfss	??_KeyPadGetKey,0
  2017  0A32  2A37               	goto	u3100
  2018  0A33  1283               	bcf	3,5	;RP0=0, select bank0
  2019  0A34  1303               	bcf	3,6	;RP1=0, select bank0
  2020  0A35  1505               	bsf	5,2	;volatile
  2021  0A36  2A3A               	goto	u3114
  2022  0A37                     u3100:	
  2023  0A37  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0A38  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0A39  1105               	bcf	5,2	;volatile
  2026  0A3A                     u3114:	
  2027                           
  2028                           ;./KeyPad.h: 25:             RA3 = (row & 0x0008) >> 3;
  2029  0A3A  0874               	movf	KeyPadGetKey@row,w
  2030  0A3B  00F2               	movwf	??_KeyPadGetKey
  2031  0A3C  3003               	movlw	3
  2032  0A3D                     u3125:	
  2033  0A3D  1003               	clrc
  2034  0A3E  0CF2               	rrf	??_KeyPadGetKey,f
  2035  0A3F  3EFF               	addlw	-1
  2036  0A40  1D03               	skipz
  2037  0A41  2A3D               	goto	u3125
  2038  0A42  1C72               	btfss	??_KeyPadGetKey,0
  2039  0A43  2A48               	goto	u3130
  2040  0A44  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0A45  1303               	bcf	3,6	;RP1=0, select bank0
  2042  0A46  1585               	bsf	5,3	;volatile
  2043  0A47  2A4B               	goto	l2475
  2044  0A48                     u3130:	
  2045  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  2046  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  2047  0A4A  1185               	bcf	5,3	;volatile
  2048  0A4B                     l2475:	
  2049                           
  2050                           ;./KeyPad.h: 26:             _delay((unsigned long)((1)*(4000000/4000.0)));
  2051  0A4B  30C7               	movlw	199
  2052  0A4C  00F2               	movwf	??_KeyPadGetKey
  2053  0A4D                     u4207:	
  2054  0A4D  2A4E               	nop2
  2055  0A4E  0BF2               	decfsz	??_KeyPadGetKey,f
  2056  0A4F  2A4D               	goto	u4207
  2057  0A50  2A51               	nop2
  2058  0A51  2A52               	nop2
  2059                           
  2060                           ;./KeyPad.h: 27:         };./KeyPad.h: 29:         if (RA4)break;
  2061  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  2063  0A54  1A05               	btfsc	5,4	;volatile
  2064  0A55  2A72               	goto	l145
  2065                           
  2066                           ;./KeyPad.h: 30:         key++;
  2067  0A56  3001               	movlw	1
  2068  0A57  00F2               	movwf	??_KeyPadGetKey
  2069  0A58  0872               	movf	??_KeyPadGetKey,w
  2070  0A59  07F3               	addwf	KeyPadGetKey@key,f
  2071                           
  2072                           ;./KeyPad.h: 31:         if (RA5)break;
  2073  0A5A  1A85               	btfsc	5,5	;volatile
  2074  0A5B  2A72               	goto	l145
  2075                           
  2076                           ;./KeyPad.h: 32:         key++;
  2077  0A5C  3001               	movlw	1
  2078  0A5D  00F2               	movwf	??_KeyPadGetKey
  2079  0A5E  0872               	movf	??_KeyPadGetKey,w
  2080  0A5F  07F3               	addwf	KeyPadGetKey@key,f
  2081                           
  2082                           ;./KeyPad.h: 33:         if (RA6)break;
  2083  0A60  1B05               	btfsc	5,6	;volatile
  2084  0A61  2A72               	goto	l145
  2085                           
  2086                           ;./KeyPad.h: 34:         key++;
  2087  0A62  3001               	movlw	1
  2088  0A63  00F2               	movwf	??_KeyPadGetKey
  2089  0A64  0872               	movf	??_KeyPadGetKey,w
  2090  0A65  07F3               	addwf	KeyPadGetKey@key,f
  2091                           
  2092                           ;./KeyPad.h: 35:         if (RA7)break;
  2093  0A66  1B85               	btfsc	5,7	;volatile
  2094  0A67  2A72               	goto	l145
  2095                           
  2096                           ;./KeyPad.h: 36:         key++;
  2097  0A68  3001               	movlw	1
  2098  0A69  00F2               	movwf	??_KeyPadGetKey
  2099  0A6A  0872               	movf	??_KeyPadGetKey,w
  2100  0A6B  07F3               	addwf	KeyPadGetKey@key,f
  2101                           
  2102                           ;./KeyPad.h: 37:     }
  2103  0A6C  1003               	clrc
  2104  0A6D  0DF4               	rlf	KeyPadGetKey@row,f
  2105  0A6E  3010               	movlw	16
  2106  0A6F  0274               	subwf	KeyPadGetKey@row,w
  2107  0A70  1C03               	skipc
  2108  0A71  2A0F               	goto	l144
  2109  0A72                     l145:	
  2110                           
  2111                           ;./KeyPad.h: 38:     RA0 = 0;
  2112  0A72  1005               	bcf	5,0	;volatile
  2113                           
  2114                           ;./KeyPad.h: 39:     RA1 = 0;
  2115  0A73  1085               	bcf	5,1	;volatile
  2116                           
  2117                           ;./KeyPad.h: 40:     RA2 = 0;
  2118  0A74  1105               	bcf	5,2	;volatile
  2119                           
  2120                           ;./KeyPad.h: 41:     RA3 = 0;
  2121  0A75  1185               	bcf	5,3	;volatile
  2122                           
  2123                           ;./KeyPad.h: 42:     if (key != old_key) {
  2124  0A76  0873               	movf	KeyPadGetKey@key,w
  2125  0A77  0665               	xorwf	_old_key,w
  2126  0A78  1903               	skipnz
  2127  0A79  2A8E               	goto	l2515
  2128                           
  2129                           ;./KeyPad.h: 43:         old_key = key;
  2130  0A7A  0873               	movf	KeyPadGetKey@key,w
  2131  0A7B  00F2               	movwf	??_KeyPadGetKey
  2132  0A7C  0872               	movf	??_KeyPadGetKey,w
  2133  0A7D  00E5               	movwf	_old_key
  2134                           
  2135                           ;./KeyPad.h: 44:         return keyPadMatrix[ key ];
  2136  0A7E  0873               	movf	KeyPadGetKey@key,w
  2137  0A7F  00F2               	movwf	??_KeyPadGetKey
  2138  0A80  0772               	addwf	??_KeyPadGetKey,w
  2139  0A81  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  2140  0A82  0084               	movwf	4
  2141  0A83  120A  158A  200A  120A  158A  	fcall	stringdir
  2142  0A88  00F0               	movwf	?_KeyPadGetKey
  2143  0A89  120A  158A  200A   	fcall	stringdir
  2144  0A8C  00F1               	movwf	?_KeyPadGetKey+1
  2145  0A8D  0008               	return
  2146  0A8E                     l2515:	
  2147                           
  2148                           ;./KeyPad.h: 46:         return keyPadMatrix[ 0x10 ];
  2149  0A8E  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  2150  0A8F  0084               	movwf	4
  2151  0A90  120A  158A  200A  120A  158A  	fcall	stringdir
  2152  0A95  00F0               	movwf	?_KeyPadGetKey
  2153  0A96  120A  158A  200A   	fcall	stringdir
  2154  0A99  00F1               	movwf	?_KeyPadGetKey+1
  2155  0A9A  0008               	return
  2156  0A9B                     __end_of_KeyPadGetKey:	
  2157                           
  2158                           	psect	text7
  2159  0C6A                     __ptext7:	
  2160 ;; *************** function _UART_Init *****************
  2161 ;; Defined at:
  2162 ;;		line 1 in file "./uart.h"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  baudrate        4    6[BANK0 ] const long 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  x               2    9[COMMON] unsigned int 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      unsigned char 
  2169 ;; Registers used:
  2170 ;;		wreg, status,2, status,0, pclath, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2176 ;;      Params:         0       4       0       0       0
  2177 ;;      Locals:         2       0       0       0       0
  2178 ;;      Temps:          0      12       0       0       0
  2179 ;;      Totals:         2      16       0       0       0
  2180 ;;Total ram usage:       18 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    1
  2183 ;; This function calls:
  2184 ;;		___aldiv
  2185 ;; This function is called by:
  2186 ;;		_main
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           
  2191                           ;psect for function _UART_Init
  2192  0C6A                     _UART_Init:	
  2193                           
  2194                           ;./uart.h: 2:     unsigned int x;;./uart.h: 3:     x = (4000000 - baudrate * 64) / (baud
      +                          rate * 64);
  2195                           
  2196                           ;incstack = 0
  2197                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  2198  0C6A  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0C6B  1303               	bcf	3,6	;RP1=0, select bank0
  2200  0C6C  0826               	movf	UART_Init@baudrate,w
  2201  0C6D  00AA               	movwf	??_UART_Init
  2202  0C6E  0827               	movf	UART_Init@baudrate+1,w
  2203  0C6F  00AB               	movwf	??_UART_Init+1
  2204  0C70  0828               	movf	UART_Init@baudrate+2,w
  2205  0C71  00AC               	movwf	??_UART_Init+2
  2206  0C72  0829               	movf	UART_Init@baudrate+3,w
  2207  0C73  00AD               	movwf	??_UART_Init+3
  2208  0C74  3006               	movlw	6
  2209  0C75                     u3975:	
  2210  0C75  1003               	clrc
  2211  0C76  0DAA               	rlf	??_UART_Init,f
  2212  0C77  0DAB               	rlf	??_UART_Init+1,f
  2213  0C78  0DAC               	rlf	??_UART_Init+2,f
  2214  0C79  0DAD               	rlf	??_UART_Init+3,f
  2215  0C7A  3EFF               	addlw	-1
  2216  0C7B  1D03               	skipz
  2217  0C7C  2C75               	goto	u3975
  2218  0C7D  082D               	movf	??_UART_Init+3,w
  2219  0C7E  00F3               	movwf	___aldiv@divisor+3
  2220  0C7F  082C               	movf	??_UART_Init+2,w
  2221  0C80  00F2               	movwf	___aldiv@divisor+2
  2222  0C81  082B               	movf	??_UART_Init+1,w
  2223  0C82  00F1               	movwf	___aldiv@divisor+1
  2224  0C83  082A               	movf	??_UART_Init,w
  2225  0C84  00F0               	movwf	___aldiv@divisor
  2226  0C85  0826               	movf	UART_Init@baudrate,w
  2227  0C86  00AE               	movwf	??_UART_Init+4
  2228  0C87  0827               	movf	UART_Init@baudrate+1,w
  2229  0C88  00AF               	movwf	??_UART_Init+5
  2230  0C89  0828               	movf	UART_Init@baudrate+2,w
  2231  0C8A  00B0               	movwf	??_UART_Init+6
  2232  0C8B  0829               	movf	UART_Init@baudrate+3,w
  2233  0C8C  00B1               	movwf	??_UART_Init+7
  2234  0C8D  3006               	movlw	6
  2235  0C8E                     u3985:	
  2236  0C8E  1003               	clrc
  2237  0C8F  0DAE               	rlf	??_UART_Init+4,f
  2238  0C90  0DAF               	rlf	??_UART_Init+5,f
  2239  0C91  0DB0               	rlf	??_UART_Init+6,f
  2240  0C92  0DB1               	rlf	??_UART_Init+7,f
  2241  0C93  3EFF               	addlw	-1
  2242  0C94  1D03               	skipz
  2243  0C95  2C8E               	goto	u3985
  2244  0C96  3000               	movlw	0
  2245  0C97  00B2               	movwf	??_UART_Init+8
  2246  0C98  3009               	movlw	9
  2247  0C99  00B3               	movwf	??_UART_Init+9
  2248  0C9A  303D               	movlw	61
  2249  0C9B  00B4               	movwf	??_UART_Init+10
  2250  0C9C  3000               	movlw	0
  2251  0C9D  00B5               	movwf	??_UART_Init+11
  2252  0C9E  082E               	movf	??_UART_Init+4,w
  2253  0C9F  02B2               	subwf	??_UART_Init+8,f
  2254  0CA0  082F               	movf	??_UART_Init+5,w
  2255  0CA1  1C03               	skipc
  2256  0CA2  0F2F               	incfsz	??_UART_Init+5,w
  2257  0CA3  2CA5               	goto	u3991
  2258  0CA4  2CA6               	goto	u3992
  2259  0CA5                     u3991:	
  2260  0CA5  02B3               	subwf	??_UART_Init+9,f
  2261  0CA6                     u3992:	
  2262  0CA6  0830               	movf	??_UART_Init+6,w
  2263  0CA7  1C03               	skipc
  2264  0CA8  0F30               	incfsz	??_UART_Init+6,w
  2265  0CA9  2CAB               	goto	u3993
  2266  0CAA  2CAC               	goto	u3994
  2267  0CAB                     u3993:	
  2268  0CAB  02B4               	subwf	??_UART_Init+10,f
  2269  0CAC                     u3994:	
  2270  0CAC  0831               	movf	??_UART_Init+7,w
  2271  0CAD  1C03               	skipc
  2272  0CAE  0F31               	incfsz	??_UART_Init+7,w
  2273  0CAF  2CB1               	goto	u3995
  2274  0CB0  2CB2               	goto	u3996
  2275  0CB1                     u3995:	
  2276  0CB1  02B5               	subwf	??_UART_Init+11,f
  2277  0CB2                     u3996:	
  2278  0CB2  0835               	movf	??_UART_Init+11,w
  2279  0CB3  00F7               	movwf	___aldiv@dividend+3
  2280  0CB4  0834               	movf	??_UART_Init+10,w
  2281  0CB5  00F6               	movwf	___aldiv@dividend+2
  2282  0CB6  0833               	movf	??_UART_Init+9,w
  2283  0CB7  00F5               	movwf	___aldiv@dividend+1
  2284  0CB8  0832               	movf	??_UART_Init+8,w
  2285  0CB9  00F4               	movwf	___aldiv@dividend
  2286  0CBA  120A  158A  217D  120A  158A  	fcall	___aldiv
  2287  0CBF  0871               	movf	?___aldiv+1,w
  2288  0CC0  00FA               	movwf	UART_Init@x+1
  2289  0CC1  0870               	movf	?___aldiv,w
  2290  0CC2  00F9               	movwf	UART_Init@x
  2291                           
  2292                           ;./uart.h: 4:     if (x > 255) {
  2293  0CC3  3001               	movlw	1
  2294  0CC4  027A               	subwf	UART_Init@x+1,w
  2295  0CC5  3000               	movlw	0
  2296  0CC6  1903               	skipnz
  2297  0CC7  0279               	subwf	UART_Init@x,w
  2298  0CC8  1C03               	skipc
  2299  0CC9  2D26               	goto	l2859
  2300                           
  2301                           ;./uart.h: 5:         x = (4000000 - baudrate * 16) / (baudrate * 16);
  2302  0CCA  1283               	bcf	3,5	;RP0=0, select bank0
  2303  0CCB  1303               	bcf	3,6	;RP1=0, select bank0
  2304  0CCC  0826               	movf	UART_Init@baudrate,w
  2305  0CCD  00AA               	movwf	??_UART_Init
  2306  0CCE  0827               	movf	UART_Init@baudrate+1,w
  2307  0CCF  00AB               	movwf	??_UART_Init+1
  2308  0CD0  0828               	movf	UART_Init@baudrate+2,w
  2309  0CD1  00AC               	movwf	??_UART_Init+2
  2310  0CD2  0829               	movf	UART_Init@baudrate+3,w
  2311  0CD3  00AD               	movwf	??_UART_Init+3
  2312  0CD4  3004               	movlw	4
  2313  0CD5                     u4015:	
  2314  0CD5  1003               	clrc
  2315  0CD6  0DAA               	rlf	??_UART_Init,f
  2316  0CD7  0DAB               	rlf	??_UART_Init+1,f
  2317  0CD8  0DAC               	rlf	??_UART_Init+2,f
  2318  0CD9  0DAD               	rlf	??_UART_Init+3,f
  2319  0CDA  3EFF               	addlw	-1
  2320  0CDB  1D03               	skipz
  2321  0CDC  2CD5               	goto	u4015
  2322  0CDD  082D               	movf	??_UART_Init+3,w
  2323  0CDE  00F3               	movwf	___aldiv@divisor+3
  2324  0CDF  082C               	movf	??_UART_Init+2,w
  2325  0CE0  00F2               	movwf	___aldiv@divisor+2
  2326  0CE1  082B               	movf	??_UART_Init+1,w
  2327  0CE2  00F1               	movwf	___aldiv@divisor+1
  2328  0CE3  082A               	movf	??_UART_Init,w
  2329  0CE4  00F0               	movwf	___aldiv@divisor
  2330  0CE5  0826               	movf	UART_Init@baudrate,w
  2331  0CE6  00AE               	movwf	??_UART_Init+4
  2332  0CE7  0827               	movf	UART_Init@baudrate+1,w
  2333  0CE8  00AF               	movwf	??_UART_Init+5
  2334  0CE9  0828               	movf	UART_Init@baudrate+2,w
  2335  0CEA  00B0               	movwf	??_UART_Init+6
  2336  0CEB  0829               	movf	UART_Init@baudrate+3,w
  2337  0CEC  00B1               	movwf	??_UART_Init+7
  2338  0CED  3004               	movlw	4
  2339  0CEE                     u4025:	
  2340  0CEE  1003               	clrc
  2341  0CEF  0DAE               	rlf	??_UART_Init+4,f
  2342  0CF0  0DAF               	rlf	??_UART_Init+5,f
  2343  0CF1  0DB0               	rlf	??_UART_Init+6,f
  2344  0CF2  0DB1               	rlf	??_UART_Init+7,f
  2345  0CF3  3EFF               	addlw	-1
  2346  0CF4  1D03               	skipz
  2347  0CF5  2CEE               	goto	u4025
  2348  0CF6  3000               	movlw	0
  2349  0CF7  00B2               	movwf	??_UART_Init+8
  2350  0CF8  3009               	movlw	9
  2351  0CF9  00B3               	movwf	??_UART_Init+9
  2352  0CFA  303D               	movlw	61
  2353  0CFB  00B4               	movwf	??_UART_Init+10
  2354  0CFC  3000               	movlw	0
  2355  0CFD  00B5               	movwf	??_UART_Init+11
  2356  0CFE  082E               	movf	??_UART_Init+4,w
  2357  0CFF  02B2               	subwf	??_UART_Init+8,f
  2358  0D00  082F               	movf	??_UART_Init+5,w
  2359  0D01  1C03               	skipc
  2360  0D02  0F2F               	incfsz	??_UART_Init+5,w
  2361  0D03  2D05               	goto	u4031
  2362  0D04  2D06               	goto	u4032
  2363  0D05                     u4031:	
  2364  0D05  02B3               	subwf	??_UART_Init+9,f
  2365  0D06                     u4032:	
  2366  0D06  0830               	movf	??_UART_Init+6,w
  2367  0D07  1C03               	skipc
  2368  0D08  0F30               	incfsz	??_UART_Init+6,w
  2369  0D09  2D0B               	goto	u4033
  2370  0D0A  2D0C               	goto	u4034
  2371  0D0B                     u4033:	
  2372  0D0B  02B4               	subwf	??_UART_Init+10,f
  2373  0D0C                     u4034:	
  2374  0D0C  0831               	movf	??_UART_Init+7,w
  2375  0D0D  1C03               	skipc
  2376  0D0E  0F31               	incfsz	??_UART_Init+7,w
  2377  0D0F  2D11               	goto	u4035
  2378  0D10  2D12               	goto	u4036
  2379  0D11                     u4035:	
  2380  0D11  02B5               	subwf	??_UART_Init+11,f
  2381  0D12                     u4036:	
  2382  0D12  0835               	movf	??_UART_Init+11,w
  2383  0D13  00F7               	movwf	___aldiv@dividend+3
  2384  0D14  0834               	movf	??_UART_Init+10,w
  2385  0D15  00F6               	movwf	___aldiv@dividend+2
  2386  0D16  0833               	movf	??_UART_Init+9,w
  2387  0D17  00F5               	movwf	___aldiv@dividend+1
  2388  0D18  0832               	movf	??_UART_Init+8,w
  2389  0D19  00F4               	movwf	___aldiv@dividend
  2390  0D1A  120A  158A  217D  120A  158A  	fcall	___aldiv
  2391  0D1F  0871               	movf	?___aldiv+1,w
  2392  0D20  00FA               	movwf	UART_Init@x+1
  2393  0D21  0870               	movf	?___aldiv,w
  2394  0D22  00F9               	movwf	UART_Init@x
  2395                           
  2396                           ;./uart.h: 6:         BRGH = 1;
  2397  0D23  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0D24  1303               	bcf	3,6	;RP1=0, select bank1
  2399  0D25  1518               	bsf	24,2	;volatile
  2400  0D26                     l2859:	
  2401                           
  2402                           ;./uart.h: 8:     if (x < 256) {
  2403  0D26  3001               	movlw	1
  2404  0D27  027A               	subwf	UART_Init@x+1,w
  2405  0D28  3000               	movlw	0
  2406  0D29  1903               	skipnz
  2407  0D2A  0279               	subwf	UART_Init@x,w
  2408  0D2B  1803               	skipnc
  2409  0D2C  0008               	return
  2410                           
  2411                           ;./uart.h: 9:         SPBRG = x;
  2412  0D2D  0879               	movf	UART_Init@x,w
  2413  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
  2414  0D2F  1303               	bcf	3,6	;RP1=0, select bank1
  2415  0D30  0099               	movwf	25	;volatile
  2416                           
  2417                           ;./uart.h: 10:         SYNC = 0;
  2418  0D31  1218               	bcf	24,4	;volatile
  2419                           
  2420                           ;./uart.h: 11:         SPEN = 1;
  2421  0D32  1283               	bcf	3,5	;RP0=0, select bank0
  2422  0D33  1303               	bcf	3,6	;RP1=0, select bank0
  2423  0D34  1798               	bsf	24,7	;volatile
  2424                           
  2425                           ;./uart.h: 12:         TRISC7 = 1;
  2426  0D35  1683               	bsf	3,5	;RP0=1, select bank1
  2427  0D36  1303               	bcf	3,6	;RP1=0, select bank1
  2428  0D37  1787               	bsf	7,7	;volatile
  2429                           
  2430                           ;./uart.h: 13:         TRISC6 = 1;
  2431  0D38  1707               	bsf	7,6	;volatile
  2432                           
  2433                           ;./uart.h: 14:         CREN = 1;
  2434  0D39  1283               	bcf	3,5	;RP0=0, select bank0
  2435  0D3A  1303               	bcf	3,6	;RP1=0, select bank0
  2436  0D3B  1618               	bsf	24,4	;volatile
  2437                           
  2438                           ;./uart.h: 15:         TXEN = 1;
  2439  0D3C  1683               	bsf	3,5	;RP0=1, select bank1
  2440  0D3D  1303               	bcf	3,6	;RP1=0, select bank1
  2441  0D3E  1698               	bsf	24,5	;volatile
  2442  0D3F  0008               	return
  2443  0D40                     __end_of_UART_Init:	
  2444                           
  2445                           	psect	text8
  2446  097D                     __ptext8:	
  2447 ;; *************** function ___aldiv *****************
  2448 ;; Defined at:
  2449 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  divisor         4    0[COMMON] long 
  2452 ;;  dividend        4    4[COMMON] long 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  quotient        4    2[BANK0 ] long 
  2455 ;;  sign            1    1[BANK0 ] unsigned char 
  2456 ;;  counter         1    0[BANK0 ] unsigned char 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  4    0[COMMON] long 
  2459 ;; Registers used:
  2460 ;;		wreg, status,2, status,0
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2466 ;;      Params:         8       0       0       0       0
  2467 ;;      Locals:         0       6       0       0       0
  2468 ;;      Temps:          1       0       0       0       0
  2469 ;;      Totals:         9       6       0       0       0
  2470 ;;Total ram usage:       15 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_UART_Init
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           
  2480                           ;psect for function ___aldiv
  2481  097D                     ___aldiv:	
  2482                           
  2483                           ;incstack = 0
  2484                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2485  097D  1283               	bcf	3,5	;RP0=0, select bank0
  2486  097E  1303               	bcf	3,6	;RP1=0, select bank0
  2487  097F  01A1               	clrf	___aldiv@sign
  2488  0980  1FF3               	btfss	___aldiv@divisor+3,7
  2489  0981  298F               	goto	l458
  2490  0982  09F0               	comf	___aldiv@divisor,f
  2491  0983  09F1               	comf	___aldiv@divisor+1,f
  2492  0984  09F2               	comf	___aldiv@divisor+2,f
  2493  0985  09F3               	comf	___aldiv@divisor+3,f
  2494  0986  0AF0               	incf	___aldiv@divisor,f
  2495  0987  1903               	skipnz
  2496  0988  0AF1               	incf	___aldiv@divisor+1,f
  2497  0989  1903               	skipnz
  2498  098A  0AF2               	incf	___aldiv@divisor+2,f
  2499  098B  1903               	skipnz
  2500  098C  0AF3               	incf	___aldiv@divisor+3,f
  2501  098D  01A1               	clrf	___aldiv@sign
  2502  098E  0AA1               	incf	___aldiv@sign,f
  2503  098F                     l458:	
  2504  098F  1FF7               	btfss	___aldiv@dividend+3,7
  2505  0990  29A0               	goto	l2571
  2506  0991  09F4               	comf	___aldiv@dividend,f
  2507  0992  09F5               	comf	___aldiv@dividend+1,f
  2508  0993  09F6               	comf	___aldiv@dividend+2,f
  2509  0994  09F7               	comf	___aldiv@dividend+3,f
  2510  0995  0AF4               	incf	___aldiv@dividend,f
  2511  0996  1903               	skipnz
  2512  0997  0AF5               	incf	___aldiv@dividend+1,f
  2513  0998  1903               	skipnz
  2514  0999  0AF6               	incf	___aldiv@dividend+2,f
  2515  099A  1903               	skipnz
  2516  099B  0AF7               	incf	___aldiv@dividend+3,f
  2517  099C  3001               	movlw	1
  2518  099D  00F8               	movwf	??___aldiv
  2519  099E  0878               	movf	??___aldiv,w
  2520  099F  06A1               	xorwf	___aldiv@sign,f
  2521  09A0                     l2571:	
  2522  09A0  3000               	movlw	0
  2523  09A1  00A5               	movwf	___aldiv@quotient+3
  2524  09A2  3000               	movlw	0
  2525  09A3  00A4               	movwf	___aldiv@quotient+2
  2526  09A4  3000               	movlw	0
  2527  09A5  00A3               	movwf	___aldiv@quotient+1
  2528  09A6  3000               	movlw	0
  2529  09A7  00A2               	movwf	___aldiv@quotient
  2530  09A8  0873               	movf	___aldiv@divisor+3,w
  2531  09A9  0472               	iorwf	___aldiv@divisor+2,w
  2532  09AA  0471               	iorwf	___aldiv@divisor+1,w
  2533  09AB  0470               	iorwf	___aldiv@divisor,w
  2534  09AC  1903               	skipnz
  2535  09AD  29F5               	goto	l2593
  2536  09AE  01A0               	clrf	___aldiv@counter
  2537  09AF  0AA0               	incf	___aldiv@counter,f
  2538  09B0                     l2579:	
  2539  09B0  1BF3               	btfsc	___aldiv@divisor+3,7
  2540  09B1  29C0               	goto	l2581
  2541  09B2  3001               	movlw	1
  2542  09B3  00F8               	movwf	??___aldiv
  2543  09B4                     u3345:	
  2544  09B4  1003               	clrc
  2545  09B5  0DF0               	rlf	___aldiv@divisor,f
  2546  09B6  0DF1               	rlf	___aldiv@divisor+1,f
  2547  09B7  0DF2               	rlf	___aldiv@divisor+2,f
  2548  09B8  0DF3               	rlf	___aldiv@divisor+3,f
  2549  09B9  0BF8               	decfsz	??___aldiv,f
  2550  09BA  29B4               	goto	u3345
  2551  09BB  3001               	movlw	1
  2552  09BC  00F8               	movwf	??___aldiv
  2553  09BD  0878               	movf	??___aldiv,w
  2554  09BE  07A0               	addwf	___aldiv@counter,f
  2555  09BF  29B0               	goto	l2579
  2556  09C0                     l2581:	
  2557  09C0  3001               	movlw	1
  2558  09C1  00F8               	movwf	??___aldiv
  2559  09C2                     u3365:	
  2560  09C2  1003               	clrc
  2561  09C3  0DA2               	rlf	___aldiv@quotient,f
  2562  09C4  0DA3               	rlf	___aldiv@quotient+1,f
  2563  09C5  0DA4               	rlf	___aldiv@quotient+2,f
  2564  09C6  0DA5               	rlf	___aldiv@quotient+3,f
  2565  09C7  0BF8               	decfsz	??___aldiv,f
  2566  09C8  29C2               	goto	u3365
  2567  09C9  0873               	movf	___aldiv@divisor+3,w
  2568  09CA  0277               	subwf	___aldiv@dividend+3,w
  2569  09CB  1D03               	skipz
  2570  09CC  29D7               	goto	u3375
  2571  09CD  0872               	movf	___aldiv@divisor+2,w
  2572  09CE  0276               	subwf	___aldiv@dividend+2,w
  2573  09CF  1D03               	skipz
  2574  09D0  29D7               	goto	u3375
  2575  09D1  0871               	movf	___aldiv@divisor+1,w
  2576  09D2  0275               	subwf	___aldiv@dividend+1,w
  2577  09D3  1D03               	skipz
  2578  09D4  29D7               	goto	u3375
  2579  09D5  0870               	movf	___aldiv@divisor,w
  2580  09D6  0274               	subwf	___aldiv@dividend,w
  2581  09D7                     u3375:	
  2582  09D7  1C03               	skipc
  2583  09D8  29E8               	goto	l2589
  2584  09D9  0870               	movf	___aldiv@divisor,w
  2585  09DA  02F4               	subwf	___aldiv@dividend,f
  2586  09DB  0871               	movf	___aldiv@divisor+1,w
  2587  09DC  1C03               	skipc
  2588  09DD  0F71               	incfsz	___aldiv@divisor+1,w
  2589  09DE  02F5               	subwf	___aldiv@dividend+1,f
  2590  09DF  0872               	movf	___aldiv@divisor+2,w
  2591  09E0  1C03               	skipc
  2592  09E1  0F72               	incfsz	___aldiv@divisor+2,w
  2593  09E2  02F6               	subwf	___aldiv@dividend+2,f
  2594  09E3  0873               	movf	___aldiv@divisor+3,w
  2595  09E4  1C03               	skipc
  2596  09E5  0F73               	incfsz	___aldiv@divisor+3,w
  2597  09E6  02F7               	subwf	___aldiv@dividend+3,f
  2598  09E7  1422               	bsf	___aldiv@quotient,0
  2599  09E8                     l2589:	
  2600  09E8  3001               	movlw	1
  2601  09E9                     u3385:	
  2602  09E9  1003               	clrc
  2603  09EA  0CF3               	rrf	___aldiv@divisor+3,f
  2604  09EB  0CF2               	rrf	___aldiv@divisor+2,f
  2605  09EC  0CF1               	rrf	___aldiv@divisor+1,f
  2606  09ED  0CF0               	rrf	___aldiv@divisor,f
  2607  09EE  3EFF               	addlw	-1
  2608  09EF  1D03               	skipz
  2609  09F0  29E9               	goto	u3385
  2610  09F1  3001               	movlw	1
  2611  09F2  02A0               	subwf	___aldiv@counter,f
  2612  09F3  1D03               	btfss	3,2
  2613  09F4  29C0               	goto	l2581
  2614  09F5                     l2593:	
  2615  09F5  0821               	movf	___aldiv@sign,w
  2616  09F6  1903               	btfsc	3,2
  2617  09F7  2A03               	goto	l2597
  2618  09F8  09A2               	comf	___aldiv@quotient,f
  2619  09F9  09A3               	comf	___aldiv@quotient+1,f
  2620  09FA  09A4               	comf	___aldiv@quotient+2,f
  2621  09FB  09A5               	comf	___aldiv@quotient+3,f
  2622  09FC  0AA2               	incf	___aldiv@quotient,f
  2623  09FD  1903               	skipnz
  2624  09FE  0AA3               	incf	___aldiv@quotient+1,f
  2625  09FF  1903               	skipnz
  2626  0A00  0AA4               	incf	___aldiv@quotient+2,f
  2627  0A01  1903               	skipnz
  2628  0A02  0AA5               	incf	___aldiv@quotient+3,f
  2629  0A03                     l2597:	
  2630  0A03  0825               	movf	___aldiv@quotient+3,w
  2631  0A04  00F3               	movwf	?___aldiv+3
  2632  0A05  0824               	movf	___aldiv@quotient+2,w
  2633  0A06  00F2               	movwf	?___aldiv+2
  2634  0A07  0823               	movf	___aldiv@quotient+1,w
  2635  0A08  00F1               	movwf	?___aldiv+1
  2636  0A09  0822               	movf	___aldiv@quotient,w
  2637  0A0A  00F0               	movwf	?___aldiv
  2638  0A0B  0008               	return
  2639  0A0C                     __end_of___aldiv:	
  2640                           
  2641                           	psect	text9
  2642  0003                     __ptext9:	
  2643 ;; *************** function _PinsInit *****************
  2644 ;; Defined at:
  2645 ;;		line 51 in file "./Config.h"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2659 ;;      Params:         0       0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0
  2661 ;;      Temps:          0       0       0       0       0
  2662 ;;      Totals:         0       0       0       0       0
  2663 ;;Total ram usage:        0 bytes
  2664 ;; Hardware stack levels used:    1
  2665 ;; This function calls:
  2666 ;;		Nothing
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           
  2673                           ;psect for function _PinsInit
  2674  0003                     _PinsInit:	
  2675                           
  2676                           ;incstack = 0
  2677                           ; Regs used in _PinsInit: [wreg+status,2]
  2678  0003  1683               	bsf	3,5	;RP0=1, select bank3
  2679  0004  1703               	bsf	3,6	;RP1=1, select bank3
  2680  0005  0188               	clrf	8	;volatile
  2681  0006  0189               	clrf	9	;volatile
  2682  0007  3001               	movlw	1
  2683  0008  1683               	bsf	3,5	;RP0=1, select bank1
  2684  0009  1303               	bcf	3,6	;RP1=0, select bank1
  2685  000A  0086               	movwf	6	;volatile
  2686  000B  0187               	clrf	7	;volatile
  2687  000C  1283               	bcf	3,5	;RP0=0, select bank0
  2688  000D  1303               	bcf	3,6	;RP1=0, select bank0
  2689  000E  0187               	clrf	7	;volatile
  2690  000F  30F0               	movlw	240
  2691  0010  1683               	bsf	3,5	;RP0=1, select bank1
  2692  0011  1303               	bcf	3,6	;RP1=0, select bank1
  2693  0012  0085               	movwf	5	;volatile
  2694  0013  1283               	bcf	3,5	;RP0=0, select bank0
  2695  0014  1303               	bcf	3,6	;RP1=0, select bank0
  2696  0015  0185               	clrf	5	;volatile
  2697  0016  0008               	return
  2698  0017                     __end_of_PinsInit:	
  2699                           
  2700                           	psect	text10
  2701  08B5                     __ptext10:	
  2702 ;; *************** function _Lcd_Init *****************
  2703 ;; Defined at:
  2704 ;;		line 57 in file "./lcd.h"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;		None
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;		None
  2709 ;; Return value:  Size  Location     Type
  2710 ;;                  1    wreg      void 
  2711 ;; Registers used:
  2712 ;;		wreg, status,2, status,0, pclath, cstack
  2713 ;; Tracked objects:
  2714 ;;		On entry : 0/0
  2715 ;;		On exit  : 0/0
  2716 ;;		Unchanged: 0/0
  2717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2718 ;;      Params:         0       0       0       0       0
  2719 ;;      Locals:         0       0       0       0       0
  2720 ;;      Temps:          2       0       0       0       0
  2721 ;;      Totals:         2       0       0       0       0
  2722 ;;Total ram usage:        2 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    2
  2725 ;; This function calls:
  2726 ;;		_Lcd_Cmd
  2727 ;;		_Lcd_Port
  2728 ;; This function is called by:
  2729 ;;		_main
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           
  2734                           ;psect for function _Lcd_Init
  2735  08B5                     _Lcd_Init:	
  2736                           
  2737                           ;./lcd.h: 58:     Lcd_Port(0x00);
  2738                           
  2739                           ;incstack = 0
  2740                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2741  08B5  3000               	movlw	0
  2742  08B6  160A  118A  2698  120A  158A  	fcall	_Lcd_Port
  2743                           
  2744                           ;./lcd.h: 59:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2745  08BB  301A               	movlw	26
  2746  08BC  00F5               	movwf	??_Lcd_Init+1
  2747  08BD  30F8               	movlw	248
  2748  08BE  00F4               	movwf	??_Lcd_Init
  2749  08BF                     u4217:	
  2750  08BF  0BF4               	decfsz	??_Lcd_Init,f
  2751  08C0  28BF               	goto	u4217
  2752  08C1  0BF5               	decfsz	??_Lcd_Init+1,f
  2753  08C2  28BF               	goto	u4217
  2754  08C3  0000               	nop
  2755                           
  2756                           ;./lcd.h: 60:     Lcd_Cmd(0x03);
  2757  08C4  3003               	movlw	3
  2758  08C5  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2759                           
  2760                           ;./lcd.h: 61:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2761  08CA  3007               	movlw	7
  2762  08CB  00F5               	movwf	??_Lcd_Init+1
  2763  08CC  307D               	movlw	125
  2764  08CD  00F4               	movwf	??_Lcd_Init
  2765  08CE                     u4227:	
  2766  08CE  0BF4               	decfsz	??_Lcd_Init,f
  2767  08CF  28CE               	goto	u4227
  2768  08D0  0BF5               	decfsz	??_Lcd_Init+1,f
  2769  08D1  28CE               	goto	u4227
  2770                           
  2771                           ;./lcd.h: 62:     Lcd_Cmd(0x03);
  2772  08D2  3003               	movlw	3
  2773  08D3  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2774                           
  2775                           ;./lcd.h: 63:     _delay((unsigned long)((11)*(4000000/4000.0)));
  2776  08D8  300F               	movlw	15
  2777  08D9  00F5               	movwf	??_Lcd_Init+1
  2778  08DA  3047               	movlw	71
  2779  08DB  00F4               	movwf	??_Lcd_Init
  2780  08DC                     u4237:	
  2781  08DC  0BF4               	decfsz	??_Lcd_Init,f
  2782  08DD  28DC               	goto	u4237
  2783  08DE  0BF5               	decfsz	??_Lcd_Init+1,f
  2784  08DF  28DC               	goto	u4237
  2785  08E0  28E1               	nop2
  2786                           
  2787                           ;./lcd.h: 64:     Lcd_Cmd(0x03);
  2788  08E1  3003               	movlw	3
  2789  08E2  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2790                           
  2791                           ;./lcd.h: 66:     Lcd_Cmd(0x02);
  2792  08E7  3002               	movlw	2
  2793  08E8  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2794                           
  2795                           ;./lcd.h: 67:     Lcd_Cmd(0x02);
  2796  08ED  3002               	movlw	2
  2797  08EE  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2798                           
  2799                           ;./lcd.h: 68:     Lcd_Cmd(0x08);
  2800  08F3  3008               	movlw	8
  2801  08F4  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2802                           
  2803                           ;./lcd.h: 69:     Lcd_Cmd(0x00);
  2804  08F9  3000               	movlw	0
  2805  08FA  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2806                           
  2807                           ;./lcd.h: 70:     Lcd_Cmd(0x0C);
  2808  08FF  300C               	movlw	12
  2809  0900  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2810                           
  2811                           ;./lcd.h: 71:     Lcd_Cmd(0x00);
  2812  0905  3000               	movlw	0
  2813  0906  160A  118A  26B2  120A  158A  	fcall	_Lcd_Cmd
  2814                           
  2815                           ;./lcd.h: 72:     Lcd_Cmd(0x06);
  2816  090B  3006               	movlw	6
  2817  090C  160A  118A  26B2   	fcall	_Lcd_Cmd
  2818  090F  0008               	return
  2819  0910                     __end_of_Lcd_Init:	
  2820                           
  2821                           	psect	text11
  2822  00CB                     __ptext11:	
  2823 ;; *************** function _Encoder *****************
  2824 ;; Defined at:
  2825 ;;		line 208 in file "main.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;		None
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;		None
  2830 ;; Return value:  Size  Location     Type
  2831 ;;                  2   84[None  ] int 
  2832 ;; Registers used:
  2833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2834 ;; Tracked objects:
  2835 ;;		On entry : 0/0
  2836 ;;		On exit  : 0/0
  2837 ;;		Unchanged: 0/0
  2838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2839 ;;      Params:         0       0       0       0       0
  2840 ;;      Locals:         0       0       0       0       0
  2841 ;;      Temps:          0       1       0       0       0
  2842 ;;      Totals:         0       1       0       0       0
  2843 ;;Total ram usage:        1 bytes
  2844 ;; Hardware stack levels used:    1
  2845 ;; Hardware stack levels required when called:    4
  2846 ;; This function calls:
  2847 ;;		_Lcd_Clear
  2848 ;;		_Lcd_Set_Cursor
  2849 ;;		_Lcd_Write_Integer
  2850 ;;		_Lcd_Write_String
  2851 ;;		_VerificarInversionGiro
  2852 ;;		___fladd
  2853 ;;		___flmul
  2854 ;;		___fltol
  2855 ;;		___xxtofl
  2856 ;; This function is called by:
  2857 ;;		_main
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           
  2862                           ;psect for function _Encoder
  2863  00CB                     _Encoder:	
  2864                           
  2865                           ;main.c: 209:     LastState = 1;
  2866                           
  2867                           ;incstack = 0
  2868                           ; Regs used in _Encoder: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2869  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2870  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  2871  00CD  01E4               	clrf	_LastState
  2872  00CE  0AE4               	incf	_LastState,f
  2873                           
  2874                           ;main.c: 210:     Grados++;
  2875  00CF  3001               	movlw	1
  2876  00D0  07E2               	addwf	_Grados,f
  2877  00D1  1803               	skipnc
  2878  00D2  0AE3               	incf	_Grados+1,f
  2879  00D3  3000               	movlw	0
  2880  00D4  07E3               	addwf	_Grados+1,f
  2881                           
  2882                           ;main.c: 211:     VerificarInversionGiro();
  2883  00D5  120A  118A  2017  120A  118A  	fcall	_VerificarInversionGiro
  2884                           
  2885                           ;main.c: 213:     cm = Grados * 0.097;
  2886  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  2887  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  2888  00DC  0862               	movf	_Grados,w
  2889  00DD  00F0               	movwf	___xxtofl@val
  2890  00DE  0863               	movf	_Grados+1,w
  2891  00DF  00F1               	movwf	___xxtofl@val+1
  2892  00E0  3000               	movlw	0
  2893  00E1  1BF1               	btfsc	___xxtofl@val+1,7
  2894  00E2  30FF               	movlw	255
  2895  00E3  00F2               	movwf	___xxtofl@val+2
  2896  00E4  00F3               	movwf	___xxtofl@val+3
  2897  00E5  3001               	movlw	1
  2898  00E6  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  2899  00EB  0873               	movf	?___xxtofl+3,w
  2900  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  2901  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  2902  00EE  00A7               	movwf	___flmul@a+3
  2903  00EF  0872               	movf	?___xxtofl+2,w
  2904  00F0  00A6               	movwf	___flmul@a+2
  2905  00F1  0871               	movf	?___xxtofl+1,w
  2906  00F2  00A5               	movwf	___flmul@a+1
  2907  00F3  0870               	movf	?___xxtofl,w
  2908  00F4  00A4               	movwf	___flmul@a
  2909  00F5  303D               	movlw	61
  2910  00F6  00A3               	movwf	___flmul@b+3
  2911  00F7  30C6               	movlw	198
  2912  00F8  00A2               	movwf	___flmul@b+2
  2913  00F9  30A7               	movlw	167
  2914  00FA  00A1               	movwf	___flmul@b+1
  2915  00FB  30F0               	movlw	240
  2916  00FC  00A0               	movwf	___flmul@b
  2917  00FD  120A  118A  24C8  120A  118A  	fcall	___flmul
  2918  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2919  0103  1303               	bcf	3,6	;RP1=0, select bank0
  2920  0104  0823               	movf	?___flmul+3,w
  2921  0105  00BD               	movwf	___fltol@f1+3
  2922  0106  0822               	movf	?___flmul+2,w
  2923  0107  00BC               	movwf	___fltol@f1+2
  2924  0108  0821               	movf	?___flmul+1,w
  2925  0109  00BB               	movwf	___fltol@f1+1
  2926  010A  0820               	movf	?___flmul,w
  2927  010B  00BA               	movwf	___fltol@f1
  2928  010C  120A  158A  2110  120A  118A  	fcall	___fltol
  2929  0111  1283               	bcf	3,5	;RP0=0, select bank0
  2930  0112  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0113  083B               	movf	?___fltol+1,w
  2932  0114  00DD               	movwf	_cm+1
  2933  0115  083A               	movf	?___fltol,w
  2934  0116  00DC               	movwf	_cm
  2935                           
  2936                           ;main.c: 215:     if (RC0 && (cm > lastCm)) {
  2937  0117  1C07               	btfss	7,0	;volatile
  2938  0118  299E               	goto	l276
  2939  0119  085B               	movf	_lastCm+1,w
  2940  011A  3A80               	xorlw	128
  2941  011B  00D2               	movwf	??_Encoder
  2942  011C  085D               	movf	_cm+1,w
  2943  011D  3A80               	xorlw	128
  2944  011E  0252               	subwf	??_Encoder,w
  2945  011F  1D03               	skipz
  2946  0120  2923               	goto	u4105
  2947  0121  085C               	movf	_cm,w
  2948  0122  025A               	subwf	_lastCm,w
  2949  0123                     u4105:	
  2950  0123  1803               	skipnc
  2951  0124  299E               	goto	l276
  2952                           
  2953                           ;main.c: 216:         lastCm = cm + 0.9;
  2954  0125  1283               	bcf	3,5	;RP0=0, select bank0
  2955  0126  1303               	bcf	3,6	;RP1=0, select bank0
  2956  0127  085C               	movf	_cm,w
  2957  0128  00F0               	movwf	___xxtofl@val
  2958  0129  085D               	movf	_cm+1,w
  2959  012A  00F1               	movwf	___xxtofl@val+1
  2960  012B  3000               	movlw	0
  2961  012C  1BF1               	btfsc	___xxtofl@val+1,7
  2962  012D  30FF               	movlw	255
  2963  012E  00F2               	movwf	___xxtofl@val+2
  2964  012F  00F3               	movwf	___xxtofl@val+3
  2965  0130  3001               	movlw	1
  2966  0131  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  2967  0136  0873               	movf	?___xxtofl+3,w
  2968  0137  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0138  1303               	bcf	3,6	;RP1=0, select bank0
  2970  0139  00A7               	movwf	___fladd@a+3
  2971  013A  0872               	movf	?___xxtofl+2,w
  2972  013B  00A6               	movwf	___fladd@a+2
  2973  013C  0871               	movf	?___xxtofl+1,w
  2974  013D  00A5               	movwf	___fladd@a+1
  2975  013E  0870               	movf	?___xxtofl,w
  2976  013F  00A4               	movwf	___fladd@a
  2977  0140  303F               	movlw	63
  2978  0141  00A3               	movwf	___fladd@b+3
  2979  0142  3066               	movlw	102
  2980  0143  00A2               	movwf	___fladd@b+2
  2981  0144  3066               	movlw	102
  2982  0145  00A1               	movwf	___fladd@b+1
  2983  0146  3066               	movlw	102
  2984  0147  00A0               	movwf	___fladd@b
  2985  0148  120A  118A  2299  120A  118A  	fcall	___fladd
  2986  014D  1283               	bcf	3,5	;RP0=0, select bank0
  2987  014E  1303               	bcf	3,6	;RP1=0, select bank0
  2988  014F  0823               	movf	?___fladd+3,w
  2989  0150  00BD               	movwf	___fltol@f1+3
  2990  0151  0822               	movf	?___fladd+2,w
  2991  0152  00BC               	movwf	___fltol@f1+2
  2992  0153  0821               	movf	?___fladd+1,w
  2993  0154  00BB               	movwf	___fltol@f1+1
  2994  0155  0820               	movf	?___fladd,w
  2995  0156  00BA               	movwf	___fltol@f1
  2996  0157  120A  158A  2110  120A  118A  	fcall	___fltol
  2997  015C  1283               	bcf	3,5	;RP0=0, select bank0
  2998  015D  1303               	bcf	3,6	;RP1=0, select bank0
  2999  015E  083B               	movf	?___fltol+1,w
  3000  015F  00DB               	movwf	_lastCm+1
  3001  0160  083A               	movf	?___fltol,w
  3002  0161  00DA               	movwf	_lastCm
  3003                           
  3004                           ;main.c: 217:         Lcd_Clear();
  3005  0162  160A  118A  2668  120A  118A  	fcall	_Lcd_Clear
  3006                           
  3007                           ;main.c: 218:         Lcd_Set_Cursor(1, 1);
  3008  0167  01F4               	clrf	Lcd_Set_Cursor@b
  3009  0168  0AF4               	incf	Lcd_Set_Cursor@b,f
  3010  0169  3001               	movlw	1
  3011  016A  160A  118A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  3012                           
  3013                           ;main.c: 219:         Lcd_Write_String("Dir: Adelante");
  3014  016F  302D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3015  0170  00F5               	movwf	Lcd_Write_String@a
  3016  0171  3080               	movlw	128
  3017  0172  00F6               	movwf	Lcd_Write_String@a+1
  3018  0173  160A  118A  2779  120A  118A  	fcall	_Lcd_Write_String
  3019                           
  3020                           ;main.c: 220:         Lcd_Set_Cursor(2, 1);
  3021  0178  01F4               	clrf	Lcd_Set_Cursor@b
  3022  0179  0AF4               	incf	Lcd_Set_Cursor@b,f
  3023  017A  3002               	movlw	2
  3024  017B  160A  118A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  3025                           
  3026                           ;main.c: 221:         Lcd_Write_Integer(cm);
  3027  0180  1283               	bcf	3,5	;RP0=0, select bank0
  3028  0181  1303               	bcf	3,6	;RP1=0, select bank0
  3029  0182  085D               	movf	_cm+1,w
  3030  0183  00C6               	movwf	Lcd_Write_Integer@a+1
  3031  0184  085C               	movf	_cm,w
  3032  0185  00C5               	movwf	Lcd_Write_Integer@a
  3033  0186  160A  118A  2680  120A  118A  	fcall	_Lcd_Write_Integer
  3034                           
  3035                           ;main.c: 222:         Lcd_Write_String(" Cm de: ");
  3036  018B  3051               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3037  018C  00F5               	movwf	Lcd_Write_String@a
  3038  018D  3080               	movlw	128
  3039  018E  00F6               	movwf	Lcd_Write_String@a+1
  3040  018F  160A  118A  2779  120A  118A  	fcall	_Lcd_Write_String
  3041                           
  3042                           ;main.c: 223:         Lcd_Write_Integer(CmHorario);
  3043  0194  1283               	bcf	3,5	;RP0=0, select bank0
  3044  0195  1303               	bcf	3,6	;RP1=0, select bank0
  3045  0196  0861               	movf	_CmHorario+1,w
  3046  0197  00C6               	movwf	Lcd_Write_Integer@a+1
  3047  0198  0860               	movf	_CmHorario,w
  3048  0199  00C5               	movwf	Lcd_Write_Integer@a
  3049  019A  160A  118A  2680   	fcall	_Lcd_Write_Integer
  3050                           
  3051                           ;main.c: 224:     } else if (RC1 && (cm > lastCm)) {
  3052  019D  0008               	return
  3053  019E                     l276:	
  3054  019E  1283               	bcf	3,5	;RP0=0, select bank0
  3055  019F  1303               	bcf	3,6	;RP1=0, select bank0
  3056  01A0  1C87               	btfss	7,1	;volatile
  3057  01A1  0008               	return
  3058  01A2  085B               	movf	_lastCm+1,w
  3059  01A3  3A80               	xorlw	128
  3060  01A4  00D2               	movwf	??_Encoder
  3061  01A5  085D               	movf	_cm+1,w
  3062  01A6  3A80               	xorlw	128
  3063  01A7  0252               	subwf	??_Encoder,w
  3064  01A8  1D03               	skipz
  3065  01A9  29AC               	goto	u4125
  3066  01AA  085C               	movf	_cm,w
  3067  01AB  025A               	subwf	_lastCm,w
  3068  01AC                     u4125:	
  3069  01AC  1803               	skipnc
  3070  01AD  0008               	return
  3071                           
  3072                           ;main.c: 225:         lastCm = cm + 0.9;
  3073  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  3074  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  3075  01B0  085C               	movf	_cm,w
  3076  01B1  00F0               	movwf	___xxtofl@val
  3077  01B2  085D               	movf	_cm+1,w
  3078  01B3  00F1               	movwf	___xxtofl@val+1
  3079  01B4  3000               	movlw	0
  3080  01B5  1BF1               	btfsc	___xxtofl@val+1,7
  3081  01B6  30FF               	movlw	255
  3082  01B7  00F2               	movwf	___xxtofl@val+2
  3083  01B8  00F3               	movwf	___xxtofl@val+3
  3084  01B9  3001               	movlw	1
  3085  01BA  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  3086  01BF  0873               	movf	?___xxtofl+3,w
  3087  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  3088  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  3089  01C2  00A7               	movwf	___fladd@a+3
  3090  01C3  0872               	movf	?___xxtofl+2,w
  3091  01C4  00A6               	movwf	___fladd@a+2
  3092  01C5  0871               	movf	?___xxtofl+1,w
  3093  01C6  00A5               	movwf	___fladd@a+1
  3094  01C7  0870               	movf	?___xxtofl,w
  3095  01C8  00A4               	movwf	___fladd@a
  3096  01C9  303F               	movlw	63
  3097  01CA  00A3               	movwf	___fladd@b+3
  3098  01CB  3066               	movlw	102
  3099  01CC  00A2               	movwf	___fladd@b+2
  3100  01CD  3066               	movlw	102
  3101  01CE  00A1               	movwf	___fladd@b+1
  3102  01CF  3066               	movlw	102
  3103  01D0  00A0               	movwf	___fladd@b
  3104  01D1  120A  118A  2299  120A  118A  	fcall	___fladd
  3105  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  3106  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  3107  01D8  0823               	movf	?___fladd+3,w
  3108  01D9  00BD               	movwf	___fltol@f1+3
  3109  01DA  0822               	movf	?___fladd+2,w
  3110  01DB  00BC               	movwf	___fltol@f1+2
  3111  01DC  0821               	movf	?___fladd+1,w
  3112  01DD  00BB               	movwf	___fltol@f1+1
  3113  01DE  0820               	movf	?___fladd,w
  3114  01DF  00BA               	movwf	___fltol@f1
  3115  01E0  120A  158A  2110  120A  118A  	fcall	___fltol
  3116  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  3117  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  3118  01E7  083B               	movf	?___fltol+1,w
  3119  01E8  00DB               	movwf	_lastCm+1
  3120  01E9  083A               	movf	?___fltol,w
  3121  01EA  00DA               	movwf	_lastCm
  3122                           
  3123                           ;main.c: 226:         cm = Grados * 0.097;
  3124  01EB  0862               	movf	_Grados,w
  3125  01EC  00F0               	movwf	___xxtofl@val
  3126  01ED  0863               	movf	_Grados+1,w
  3127  01EE  00F1               	movwf	___xxtofl@val+1
  3128  01EF  3000               	movlw	0
  3129  01F0  1BF1               	btfsc	___xxtofl@val+1,7
  3130  01F1  30FF               	movlw	255
  3131  01F2  00F2               	movwf	___xxtofl@val+2
  3132  01F3  00F3               	movwf	___xxtofl@val+3
  3133  01F4  3001               	movlw	1
  3134  01F5  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  3135  01FA  0873               	movf	?___xxtofl+3,w
  3136  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3137  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  3138  01FD  00A7               	movwf	___flmul@a+3
  3139  01FE  0872               	movf	?___xxtofl+2,w
  3140  01FF  00A6               	movwf	___flmul@a+2
  3141  0200  0871               	movf	?___xxtofl+1,w
  3142  0201  00A5               	movwf	___flmul@a+1
  3143  0202  0870               	movf	?___xxtofl,w
  3144  0203  00A4               	movwf	___flmul@a
  3145  0204  303D               	movlw	61
  3146  0205  00A3               	movwf	___flmul@b+3
  3147  0206  30C6               	movlw	198
  3148  0207  00A2               	movwf	___flmul@b+2
  3149  0208  30A7               	movlw	167
  3150  0209  00A1               	movwf	___flmul@b+1
  3151  020A  30F0               	movlw	240
  3152  020B  00A0               	movwf	___flmul@b
  3153  020C  120A  118A  24C8  120A  118A  	fcall	___flmul
  3154  0211  1283               	bcf	3,5	;RP0=0, select bank0
  3155  0212  1303               	bcf	3,6	;RP1=0, select bank0
  3156  0213  0823               	movf	?___flmul+3,w
  3157  0214  00BD               	movwf	___fltol@f1+3
  3158  0215  0822               	movf	?___flmul+2,w
  3159  0216  00BC               	movwf	___fltol@f1+2
  3160  0217  0821               	movf	?___flmul+1,w
  3161  0218  00BB               	movwf	___fltol@f1+1
  3162  0219  0820               	movf	?___flmul,w
  3163  021A  00BA               	movwf	___fltol@f1
  3164  021B  120A  158A  2110  120A  118A  	fcall	___fltol
  3165  0220  1283               	bcf	3,5	;RP0=0, select bank0
  3166  0221  1303               	bcf	3,6	;RP1=0, select bank0
  3167  0222  083B               	movf	?___fltol+1,w
  3168  0223  00DD               	movwf	_cm+1
  3169  0224  083A               	movf	?___fltol,w
  3170  0225  00DC               	movwf	_cm
  3171                           
  3172                           ;main.c: 227:         Lcd_Clear();
  3173  0226  160A  118A  2668  120A  118A  	fcall	_Lcd_Clear
  3174                           
  3175                           ;main.c: 228:         Lcd_Set_Cursor(1, 1);
  3176  022B  01F4               	clrf	Lcd_Set_Cursor@b
  3177  022C  0AF4               	incf	Lcd_Set_Cursor@b,f
  3178  022D  3001               	movlw	1
  3179  022E  160A  118A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  3180                           
  3181                           ;main.c: 229:         Lcd_Write_String("Dir: Atras");
  3182  0233  3046               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  3183  0234  00F5               	movwf	Lcd_Write_String@a
  3184  0235  3080               	movlw	128
  3185  0236  00F6               	movwf	Lcd_Write_String@a+1
  3186  0237  160A  118A  2779  120A  118A  	fcall	_Lcd_Write_String
  3187                           
  3188                           ;main.c: 230:         Lcd_Set_Cursor(2, 1);
  3189  023C  01F4               	clrf	Lcd_Set_Cursor@b
  3190  023D  0AF4               	incf	Lcd_Set_Cursor@b,f
  3191  023E  3002               	movlw	2
  3192  023F  160A  118A  27B6  120A  118A  	fcall	_Lcd_Set_Cursor
  3193                           
  3194                           ;main.c: 231:         Lcd_Write_Integer(Grados * 0.097);
  3195  0244  1283               	bcf	3,5	;RP0=0, select bank0
  3196  0245  1303               	bcf	3,6	;RP1=0, select bank0
  3197  0246  0862               	movf	_Grados,w
  3198  0247  00F0               	movwf	___xxtofl@val
  3199  0248  0863               	movf	_Grados+1,w
  3200  0249  00F1               	movwf	___xxtofl@val+1
  3201  024A  3000               	movlw	0
  3202  024B  1BF1               	btfsc	___xxtofl@val+1,7
  3203  024C  30FF               	movlw	255
  3204  024D  00F2               	movwf	___xxtofl@val+2
  3205  024E  00F3               	movwf	___xxtofl@val+3
  3206  024F  3001               	movlw	1
  3207  0250  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  3208  0255  0873               	movf	?___xxtofl+3,w
  3209  0256  1283               	bcf	3,5	;RP0=0, select bank0
  3210  0257  1303               	bcf	3,6	;RP1=0, select bank0
  3211  0258  00A7               	movwf	___flmul@a+3
  3212  0259  0872               	movf	?___xxtofl+2,w
  3213  025A  00A6               	movwf	___flmul@a+2
  3214  025B  0871               	movf	?___xxtofl+1,w
  3215  025C  00A5               	movwf	___flmul@a+1
  3216  025D  0870               	movf	?___xxtofl,w
  3217  025E  00A4               	movwf	___flmul@a
  3218  025F  303D               	movlw	61
  3219  0260  00A3               	movwf	___flmul@b+3
  3220  0261  30C6               	movlw	198
  3221  0262  00A2               	movwf	___flmul@b+2
  3222  0263  30A7               	movlw	167
  3223  0264  00A1               	movwf	___flmul@b+1
  3224  0265  30F0               	movlw	240
  3225  0266  00A0               	movwf	___flmul@b
  3226  0267  120A  118A  24C8  120A  118A  	fcall	___flmul
  3227  026C  1283               	bcf	3,5	;RP0=0, select bank0
  3228  026D  1303               	bcf	3,6	;RP1=0, select bank0
  3229  026E  0823               	movf	?___flmul+3,w
  3230  026F  00BD               	movwf	___fltol@f1+3
  3231  0270  0822               	movf	?___flmul+2,w
  3232  0271  00BC               	movwf	___fltol@f1+2
  3233  0272  0821               	movf	?___flmul+1,w
  3234  0273  00BB               	movwf	___fltol@f1+1
  3235  0274  0820               	movf	?___flmul,w
  3236  0275  00BA               	movwf	___fltol@f1
  3237  0276  120A  158A  2110  120A  118A  	fcall	___fltol
  3238  027B  1283               	bcf	3,5	;RP0=0, select bank0
  3239  027C  1303               	bcf	3,6	;RP1=0, select bank0
  3240  027D  083B               	movf	?___fltol+1,w
  3241  027E  00C6               	movwf	Lcd_Write_Integer@a+1
  3242  027F  083A               	movf	?___fltol,w
  3243  0280  00C5               	movwf	Lcd_Write_Integer@a
  3244  0281  160A  118A  2680  120A  118A  	fcall	_Lcd_Write_Integer
  3245                           
  3246                           ;main.c: 232:         Lcd_Write_String(" Cm de: ");
  3247  0286  3051               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  3248  0287  00F5               	movwf	Lcd_Write_String@a
  3249  0288  3080               	movlw	128
  3250  0289  00F6               	movwf	Lcd_Write_String@a+1
  3251  028A  160A  118A  2779  120A  118A  	fcall	_Lcd_Write_String
  3252                           
  3253                           ;main.c: 233:         Lcd_Write_Integer(CmAntiHorario);
  3254  028F  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0290  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0291  085F               	movf	_CmAntiHorario+1,w
  3257  0292  00C6               	movwf	Lcd_Write_Integer@a+1
  3258  0293  085E               	movf	_CmAntiHorario,w
  3259  0294  00C5               	movwf	Lcd_Write_Integer@a
  3260  0295  160A  118A  2680   	fcall	_Lcd_Write_Integer
  3261  0298  0008               	return
  3262  0299                     __end_of_Encoder:	
  3263                           
  3264                           	psect	text12
  3265  0910                     __ptext12:	
  3266 ;; *************** function ___fltol *****************
  3267 ;; Defined at:
  3268 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  f1              4   26[BANK0 ] int 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  exp1            1   36[BANK0 ] unsigned char 
  3273 ;;  sign1           1   35[BANK0 ] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  4   26[BANK0 ] long 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3283 ;;      Params:         0       4       0       0       0
  3284 ;;      Locals:         0       2       0       0       0
  3285 ;;      Temps:          0       5       0       0       0
  3286 ;;      Totals:         0      11       0       0       0
  3287 ;;Total ram usage:       11 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; This function calls:
  3290 ;;		Nothing
  3291 ;; This function is called by:
  3292 ;;		_Encoder
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function ___fltol
  3298  0910                     ___fltol:	
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  3302  0910  1003               	clrc
  3303  0911  1283               	bcf	3,5	;RP0=0, select bank0
  3304  0912  1303               	bcf	3,6	;RP1=0, select bank0
  3305  0913  0D3C               	rlf	___fltol@f1+2,w
  3306  0914  0D3D               	rlf	___fltol@f1+3,w
  3307  0915  00BE               	movwf	??___fltol
  3308  0916  083E               	movf	??___fltol,w
  3309  0917  00C4               	movwf	___fltol@exp1
  3310  0918  0844               	movf	___fltol@exp1,w
  3311  0919  1D03               	btfss	3,2
  3312  091A  2924               	goto	l2607
  3313  091B                     l2603:	
  3314  091B  3000               	movlw	0
  3315  091C  00BD               	movwf	?___fltol+3
  3316  091D  3000               	movlw	0
  3317  091E  00BC               	movwf	?___fltol+2
  3318  091F  3000               	movlw	0
  3319  0920  00BB               	movwf	?___fltol+1
  3320  0921  3000               	movlw	0
  3321  0922  00BA               	movwf	?___fltol
  3322  0923  0008               	return
  3323  0924                     l2607:	
  3324  0924  083A               	movf	___fltol@f1,w
  3325  0925  00BE               	movwf	??___fltol
  3326  0926  083B               	movf	___fltol@f1+1,w
  3327  0927  00BF               	movwf	??___fltol+1
  3328  0928  083C               	movf	___fltol@f1+2,w
  3329  0929  00C0               	movwf	??___fltol+2
  3330  092A  083D               	movf	___fltol@f1+3,w
  3331  092B  00C1               	movwf	??___fltol+3
  3332  092C  301F               	movlw	31
  3333  092D                     u3425:	
  3334  092D  1003               	clrc
  3335  092E  0CC1               	rrf	??___fltol+3,f
  3336  092F  0CC0               	rrf	??___fltol+2,f
  3337  0930  0CBF               	rrf	??___fltol+1,f
  3338  0931  0CBE               	rrf	??___fltol,f
  3339  0932  3EFF               	addlw	-1
  3340  0933  1D03               	skipz
  3341  0934  292D               	goto	u3425
  3342  0935  083E               	movf	??___fltol,w
  3343  0936  00C2               	movwf	??___fltol+4
  3344  0937  0842               	movf	??___fltol+4,w
  3345  0938  00C3               	movwf	___fltol@sign1
  3346  0939  17BC               	bsf	___fltol@f1+2,7
  3347  093A  30FF               	movlw	255
  3348  093B  05BA               	andwf	___fltol@f1,f
  3349  093C  30FF               	movlw	255
  3350  093D  05BB               	andwf	___fltol@f1+1,f
  3351  093E  30FF               	movlw	255
  3352  093F  05BC               	andwf	___fltol@f1+2,f
  3353  0940  3000               	movlw	0
  3354  0941  05BD               	andwf	___fltol@f1+3,f
  3355  0942  3096               	movlw	150
  3356  0943  02C4               	subwf	___fltol@exp1,f
  3357  0944  1FC4               	btfss	___fltol@exp1,7
  3358  0945  295B               	goto	l2625
  3359  0946  0844               	movf	___fltol@exp1,w
  3360  0947  3A80               	xorlw	128
  3361  0948  3E97               	addlw	151
  3362  0949  1C03               	btfss	3,0
  3363  094A  291B               	goto	l2603
  3364  094B                     l2623:	
  3365  094B  3001               	movlw	1
  3366  094C                     u3455:	
  3367  094C  1003               	clrc
  3368  094D  0CBD               	rrf	___fltol@f1+3,f
  3369  094E  0CBC               	rrf	___fltol@f1+2,f
  3370  094F  0CBB               	rrf	___fltol@f1+1,f
  3371  0950  0CBA               	rrf	___fltol@f1,f
  3372  0951  3EFF               	addlw	-1
  3373  0952  1D03               	skipz
  3374  0953  294C               	goto	u3455
  3375  0954  3001               	movlw	1
  3376  0955  00BE               	movwf	??___fltol
  3377  0956  083E               	movf	??___fltol,w
  3378  0957  07C4               	addwf	___fltol@exp1,f
  3379  0958  1903               	btfsc	3,2
  3380  0959  296E               	goto	l2633
  3381  095A  294B               	goto	l2623
  3382  095B                     l2625:	
  3383  095B  3020               	movlw	32
  3384  095C  0244               	subwf	___fltol@exp1,w
  3385  095D  1803               	btfsc	3,0
  3386  095E  291B               	goto	l2603
  3387  095F                     l586:	
  3388  095F  0844               	movf	___fltol@exp1,w
  3389  0960  1903               	btfsc	3,2
  3390  0961  296E               	goto	l2633
  3391  0962  3001               	movlw	1
  3392  0963  00BE               	movwf	??___fltol
  3393  0964                     u3485:	
  3394  0964  1003               	clrc
  3395  0965  0DBA               	rlf	___fltol@f1,f
  3396  0966  0DBB               	rlf	___fltol@f1+1,f
  3397  0967  0DBC               	rlf	___fltol@f1+2,f
  3398  0968  0DBD               	rlf	___fltol@f1+3,f
  3399  0969  0BBE               	decfsz	??___fltol,f
  3400  096A  2964               	goto	u3485
  3401  096B  3001               	movlw	1
  3402  096C  02C4               	subwf	___fltol@exp1,f
  3403  096D  295F               	goto	l586
  3404  096E                     l2633:	
  3405  096E  0843               	movf	___fltol@sign1,w
  3406  096F  1903               	btfsc	3,2
  3407  0970  0008               	return
  3408  0971  09BA               	comf	___fltol@f1,f
  3409  0972  09BB               	comf	___fltol@f1+1,f
  3410  0973  09BC               	comf	___fltol@f1+2,f
  3411  0974  09BD               	comf	___fltol@f1+3,f
  3412  0975  0ABA               	incf	___fltol@f1,f
  3413  0976  1903               	skipnz
  3414  0977  0ABB               	incf	___fltol@f1+1,f
  3415  0978  1903               	skipnz
  3416  0979  0ABC               	incf	___fltol@f1+2,f
  3417  097A  1903               	skipnz
  3418  097B  0ABD               	incf	___fltol@f1+3,f
  3419  097C  0008               	return
  3420  097D                     __end_of___fltol:	
  3421                           
  3422                           	psect	text13
  3423  0299                     __ptext13:	
  3424 ;; *************** function ___fladd *****************
  3425 ;; Defined at:
  3426 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  b               4    0[BANK0 ] long 
  3429 ;;  a               4    4[BANK0 ] long 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  grs             1   19[BANK0 ] unsigned char 
  3432 ;;  bexp            1   18[BANK0 ] unsigned char 
  3433 ;;  aexp            1   17[BANK0 ] unsigned char 
  3434 ;;  signs           1   16[BANK0 ] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  4    0[BANK0 ] unsigned char 
  3437 ;; Registers used:
  3438 ;;		wreg, status,2, status,0, btemp+1
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3444 ;;      Params:         0       8       0       0       0
  3445 ;;      Locals:         0       4       0       0       0
  3446 ;;      Temps:          0       8       0       0       0
  3447 ;;      Totals:         0      20       0       0       0
  3448 ;;Total ram usage:       20 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; This function calls:
  3451 ;;		Nothing
  3452 ;; This function is called by:
  3453 ;;		_Encoder
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function ___fladd
  3459  0299                     ___fladd:	
  3460                           
  3461                           ;incstack = 0
  3462                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  3463  0299  1283               	bcf	3,5	;RP0=0, select bank0
  3464  029A  1303               	bcf	3,6	;RP1=0, select bank0
  3465  029B  0823               	movf	___fladd@b+3,w
  3466  029C  3980               	andlw	128
  3467  029D  00A8               	movwf	??___fladd
  3468  029E  0828               	movf	??___fladd,w
  3469  029F  00B0               	movwf	___fladd@signs
  3470  02A0  0823               	movf	___fladd@b+3,w
  3471  02A1  00A8               	movwf	??___fladd
  3472  02A2  0728               	addwf	??___fladd,w
  3473  02A3  00A9               	movwf	??___fladd+1
  3474  02A4  0829               	movf	??___fladd+1,w
  3475  02A5  00B2               	movwf	___fladd@bexp
  3476  02A6  1BA2               	btfsc	___fladd@b+2,7
  3477  02A7  1432               	bsf	___fladd@bexp,0
  3478  02A8  0832               	movf	___fladd@bexp,w
  3479  02A9  1903               	btfsc	3,2
  3480  02AA  2AB9               	goto	l2655
  3481  02AB  0A32               	incf	___fladd@bexp,w
  3482  02AC  1D03               	btfss	3,2
  3483  02AD  2AB6               	goto	l2651
  3484  02AE  3000               	movlw	0
  3485  02AF  00A3               	movwf	___fladd@b+3
  3486  02B0  3000               	movlw	0
  3487  02B1  00A2               	movwf	___fladd@b+2
  3488  02B2  3000               	movlw	0
  3489  02B3  00A1               	movwf	___fladd@b+1
  3490  02B4  3000               	movlw	0
  3491  02B5  00A0               	movwf	___fladd@b
  3492  02B6                     l2651:	
  3493  02B6  17A2               	bsf	___fladd@b+2,7
  3494  02B7  01A3               	clrf	___fladd@b+3
  3495  02B8  2AC1               	goto	l2657
  3496  02B9                     l2655:	
  3497  02B9  3000               	movlw	0
  3498  02BA  00A3               	movwf	___fladd@b+3
  3499  02BB  3000               	movlw	0
  3500  02BC  00A2               	movwf	___fladd@b+2
  3501  02BD  3000               	movlw	0
  3502  02BE  00A1               	movwf	___fladd@b+1
  3503  02BF  3000               	movlw	0
  3504  02C0  00A0               	movwf	___fladd@b
  3505  02C1                     l2657:	
  3506  02C1  0827               	movf	___fladd@a+3,w
  3507  02C2  3980               	andlw	128
  3508  02C3  00A8               	movwf	??___fladd
  3509  02C4  0828               	movf	??___fladd,w
  3510  02C5  00B1               	movwf	___fladd@aexp
  3511  02C6  0831               	movf	___fladd@aexp,w
  3512  02C7  0630               	xorwf	___fladd@signs,w
  3513  02C8  1D03               	btfss	3,2
  3514  02C9  1730               	bsf	___fladd@signs,6
  3515  02CA  0827               	movf	___fladd@a+3,w
  3516  02CB  00A8               	movwf	??___fladd
  3517  02CC  0728               	addwf	??___fladd,w
  3518  02CD  00A9               	movwf	??___fladd+1
  3519  02CE  0829               	movf	??___fladd+1,w
  3520  02CF  00B1               	movwf	___fladd@aexp
  3521  02D0  1BA6               	btfsc	___fladd@a+2,7
  3522  02D1  1431               	bsf	___fladd@aexp,0
  3523  02D2  0831               	movf	___fladd@aexp,w
  3524  02D3  1903               	btfsc	3,2
  3525  02D4  2AE3               	goto	l2679
  3526  02D5  0A31               	incf	___fladd@aexp,w
  3527  02D6  1D03               	btfss	3,2
  3528  02D7  2AE0               	goto	l2675
  3529  02D8  3000               	movlw	0
  3530  02D9  00A7               	movwf	___fladd@a+3
  3531  02DA  3000               	movlw	0
  3532  02DB  00A6               	movwf	___fladd@a+2
  3533  02DC  3000               	movlw	0
  3534  02DD  00A5               	movwf	___fladd@a+1
  3535  02DE  3000               	movlw	0
  3536  02DF  00A4               	movwf	___fladd@a
  3537  02E0                     l2675:	
  3538  02E0  17A6               	bsf	___fladd@a+2,7
  3539  02E1  01A7               	clrf	___fladd@a+3
  3540  02E2  2AEB               	goto	l686
  3541  02E3                     l2679:	
  3542  02E3  3000               	movlw	0
  3543  02E4  00A7               	movwf	___fladd@a+3
  3544  02E5  3000               	movlw	0
  3545  02E6  00A6               	movwf	___fladd@a+2
  3546  02E7  3000               	movlw	0
  3547  02E8  00A5               	movwf	___fladd@a+1
  3548  02E9  3000               	movlw	0
  3549  02EA  00A4               	movwf	___fladd@a
  3550  02EB                     l686:	
  3551  02EB  0832               	movf	___fladd@bexp,w
  3552  02EC  0231               	subwf	___fladd@aexp,w
  3553  02ED  1803               	skipnc
  3554  02EE  2B31               	goto	l2715
  3555  02EF  1F30               	btfss	___fladd@signs,6
  3556  02F0  2AF5               	goto	l2685
  3557  02F1  3080               	movlw	128
  3558  02F2  00A8               	movwf	??___fladd
  3559  02F3  0828               	movf	??___fladd,w
  3560  02F4  06B0               	xorwf	___fladd@signs,f
  3561  02F5                     l2685:	
  3562  02F5  0832               	movf	___fladd@bexp,w
  3563  02F6  00A8               	movwf	??___fladd
  3564  02F7  0828               	movf	??___fladd,w
  3565  02F8  00B3               	movwf	___fladd@grs
  3566  02F9  0831               	movf	___fladd@aexp,w
  3567  02FA  00A8               	movwf	??___fladd
  3568  02FB  0828               	movf	??___fladd,w
  3569  02FC  00B2               	movwf	___fladd@bexp
  3570  02FD  0833               	movf	___fladd@grs,w
  3571  02FE  00A8               	movwf	??___fladd
  3572  02FF  0828               	movf	??___fladd,w
  3573  0300  00B1               	movwf	___fladd@aexp
  3574  0301  0820               	movf	___fladd@b,w
  3575  0302  00A8               	movwf	??___fladd
  3576  0303  0828               	movf	??___fladd,w
  3577  0304  00B3               	movwf	___fladd@grs
  3578  0305  0824               	movf	___fladd@a,w
  3579  0306  00A8               	movwf	??___fladd
  3580  0307  0828               	movf	??___fladd,w
  3581  0308  00A0               	movwf	___fladd@b
  3582  0309  0833               	movf	___fladd@grs,w
  3583  030A  00A8               	movwf	??___fladd
  3584  030B  0828               	movf	??___fladd,w
  3585  030C  00A4               	movwf	___fladd@a
  3586  030D  0821               	movf	___fladd@b+1,w
  3587  030E  00A8               	movwf	??___fladd
  3588  030F  0828               	movf	??___fladd,w
  3589  0310  00B3               	movwf	___fladd@grs
  3590  0311  0825               	movf	___fladd@a+1,w
  3591  0312  00A8               	movwf	??___fladd
  3592  0313  0828               	movf	??___fladd,w
  3593  0314  00A1               	movwf	___fladd@b+1
  3594  0315  0833               	movf	___fladd@grs,w
  3595  0316  00A8               	movwf	??___fladd
  3596  0317  0828               	movf	??___fladd,w
  3597  0318  00A5               	movwf	___fladd@a+1
  3598  0319  0822               	movf	___fladd@b+2,w
  3599  031A  00A8               	movwf	??___fladd
  3600  031B  0828               	movf	??___fladd,w
  3601  031C  00B3               	movwf	___fladd@grs
  3602  031D  0826               	movf	___fladd@a+2,w
  3603  031E  00A8               	movwf	??___fladd
  3604  031F  0828               	movf	??___fladd,w
  3605  0320  00A2               	movwf	___fladd@b+2
  3606  0321  0833               	movf	___fladd@grs,w
  3607  0322  00A8               	movwf	??___fladd
  3608  0323  0828               	movf	??___fladd,w
  3609  0324  00A6               	movwf	___fladd@a+2
  3610  0325  0823               	movf	___fladd@b+3,w
  3611  0326  00A8               	movwf	??___fladd
  3612  0327  0828               	movf	??___fladd,w
  3613  0328  00B3               	movwf	___fladd@grs
  3614  0329  0827               	movf	___fladd@a+3,w
  3615  032A  00A8               	movwf	??___fladd
  3616  032B  0828               	movf	??___fladd,w
  3617  032C  00A3               	movwf	___fladd@b+3
  3618  032D  0833               	movf	___fladd@grs,w
  3619  032E  00A8               	movwf	??___fladd
  3620  032F  0828               	movf	??___fladd,w
  3621  0330  00A7               	movwf	___fladd@a+3
  3622  0331                     l2715:	
  3623  0331  01B3               	clrf	___fladd@grs
  3624  0332  0831               	movf	___fladd@aexp,w
  3625  0333  00A8               	movwf	??___fladd
  3626  0334  01A9               	clrf	??___fladd+1
  3627  0335  0829               	movf	??___fladd+1,w
  3628  0336  00AB               	movwf	??___fladd+3
  3629  0337  0832               	movf	___fladd@bexp,w
  3630  0338  0228               	subwf	??___fladd,w
  3631  0339  00AA               	movwf	??___fladd+2
  3632  033A  1C03               	skipc
  3633  033B  03AB               	decf	??___fladd+3,f
  3634  033C  082B               	movf	??___fladd+3,w
  3635  033D  3A80               	xorlw	128
  3636  033E  00FF               	movwf	127
  3637  033F  3080               	movlw	128
  3638  0340  027F               	subwf	127,w
  3639  0341  1D03               	skipz
  3640  0342  2B45               	goto	u3605
  3641  0343  301A               	movlw	26
  3642  0344  022A               	subwf	??___fladd+2,w
  3643  0345                     u3605:	
  3644  0345  1C03               	skipc
  3645  0346  2B7E               	goto	l2733
  3646  0347  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0348  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0349  0823               	movf	___fladd@b+3,w
  3649  034A  0422               	iorwf	___fladd@b+2,w
  3650  034B  0421               	iorwf	___fladd@b+1,w
  3651  034C  0420               	iorwf	___fladd@b,w
  3652  034D  1903               	btfsc	3,2
  3653  034E  2B51               	goto	u3610
  3654  034F  3001               	movlw	1
  3655  0350  2B52               	goto	u3620
  3656  0351                     u3610:	
  3657  0351  3000               	movlw	0
  3658  0352                     u3620:	
  3659  0352  00A8               	movwf	??___fladd
  3660  0353  0828               	movf	??___fladd,w
  3661  0354  00B3               	movwf	___fladd@grs
  3662  0355  3000               	movlw	0
  3663  0356  00A3               	movwf	___fladd@b+3
  3664  0357  3000               	movlw	0
  3665  0358  00A2               	movwf	___fladd@b+2
  3666  0359  3000               	movlw	0
  3667  035A  00A1               	movwf	___fladd@b+1
  3668  035B  3000               	movlw	0
  3669  035C  00A0               	movwf	___fladd@b
  3670  035D  0831               	movf	___fladd@aexp,w
  3671  035E  00A8               	movwf	??___fladd
  3672  035F  0828               	movf	??___fladd,w
  3673  0360  00B2               	movwf	___fladd@bexp
  3674  0361  2B84               	goto	l690
  3675  0362                     l692:	
  3676  0362  1C33               	btfss	___fladd@grs,0
  3677  0363  2B6D               	goto	l2723
  3678  0364  0833               	movf	___fladd@grs,w
  3679  0365  00A8               	movwf	??___fladd
  3680  0366  1003               	clrc
  3681  0367  0C28               	rrf	??___fladd,w
  3682  0368  3801               	iorlw	1
  3683  0369  00A9               	movwf	??___fladd+1
  3684  036A  0829               	movf	??___fladd+1,w
  3685  036B  00B3               	movwf	___fladd@grs
  3686  036C  2B6F               	goto	l2725
  3687  036D                     l2723:	
  3688  036D  1003               	clrc
  3689  036E  0CB3               	rrf	___fladd@grs,f
  3690  036F                     l2725:	
  3691  036F  1820               	btfsc	___fladd@b,0
  3692  0370  17B3               	bsf	___fladd@grs,7
  3693  0371  3001               	movlw	1
  3694  0372  00A8               	movwf	??___fladd
  3695  0373                     u3655:	
  3696  0373  0D23               	rlf	___fladd@b+3,w
  3697  0374  0CA3               	rrf	___fladd@b+3,f
  3698  0375  0CA2               	rrf	___fladd@b+2,f
  3699  0376  0CA1               	rrf	___fladd@b+1,f
  3700  0377  0CA0               	rrf	___fladd@b,f
  3701  0378  0BA8               	decfsz	??___fladd& (0+127),f
  3702  0379  2B73               	goto	u3655
  3703  037A  3001               	movlw	1
  3704  037B  00A8               	movwf	??___fladd
  3705  037C  0828               	movf	??___fladd,w
  3706  037D  07B2               	addwf	___fladd@bexp,f
  3707  037E                     l2733:	
  3708  037E  1283               	bcf	3,5	;RP0=0, select bank0
  3709  037F  1303               	bcf	3,6	;RP1=0, select bank0
  3710  0380  0831               	movf	___fladd@aexp,w
  3711  0381  0232               	subwf	___fladd@bexp,w
  3712  0382  1C03               	skipc
  3713  0383  2B62               	goto	l692
  3714  0384                     l690:	
  3715  0384  1B30               	btfsc	___fladd@signs,6
  3716  0385  2BC5               	goto	l2759
  3717  0386  0832               	movf	___fladd@bexp,w
  3718  0387  1D03               	btfss	3,2
  3719  0388  2B92               	goto	l2741
  3720  0389  3000               	movlw	0
  3721  038A  00A3               	movwf	?___fladd+3
  3722  038B  3000               	movlw	0
  3723  038C  00A2               	movwf	?___fladd+2
  3724  038D  3000               	movlw	0
  3725  038E  00A1               	movwf	?___fladd+1
  3726  038F  3000               	movlw	0
  3727  0390  00A0               	movwf	?___fladd
  3728  0391  0008               	return
  3729  0392                     l2741:	
  3730  0392  0824               	movf	___fladd@a,w
  3731  0393  07A0               	addwf	___fladd@b,f
  3732  0394  0825               	movf	___fladd@a+1,w
  3733  0395  1103               	clrz
  3734  0396  1803               	skipnc
  3735  0397  3E01               	addlw	1
  3736  0398  1D03               	btfss	3,2
  3737  0399  07A1               	addwf	___fladd@b+1,f
  3738  039A  0826               	movf	___fladd@a+2,w
  3739  039B  1103               	clrz
  3740  039C  1803               	skipnc
  3741  039D  3E01               	addlw	1
  3742  039E  1D03               	btfss	3,2
  3743  039F  07A2               	addwf	___fladd@b+2,f
  3744  03A0  0827               	movf	___fladd@a+3,w
  3745  03A1  1103               	clrz
  3746  03A2  1803               	skipnc
  3747  03A3  3E01               	addlw	1
  3748  03A4  1D03               	btfss	3,2
  3749  03A5  07A3               	addwf	___fladd@b+3,f
  3750  03A6  1C23               	btfss	___fladd@b+3,0
  3751  03A7  2C67               	goto	l2793
  3752  03A8  1C33               	btfss	___fladd@grs,0
  3753  03A9  2BB3               	goto	l2749
  3754  03AA  0833               	movf	___fladd@grs,w
  3755  03AB  00A8               	movwf	??___fladd
  3756  03AC  1003               	clrc
  3757  03AD  0C28               	rrf	??___fladd,w
  3758  03AE  3801               	iorlw	1
  3759  03AF  00A9               	movwf	??___fladd+1
  3760  03B0  0829               	movf	??___fladd+1,w
  3761  03B1  00B3               	movwf	___fladd@grs
  3762  03B2  2BB5               	goto	l2751
  3763  03B3                     l2749:	
  3764  03B3  1003               	clrc
  3765  03B4  0CB3               	rrf	___fladd@grs,f
  3766  03B5                     l2751:	
  3767  03B5  1820               	btfsc	___fladd@b,0
  3768  03B6  17B3               	bsf	___fladd@grs,7
  3769  03B7  3001               	movlw	1
  3770  03B8  00A8               	movwf	??___fladd
  3771  03B9                     u3735:	
  3772  03B9  0D23               	rlf	___fladd@b+3,w
  3773  03BA  0CA3               	rrf	___fladd@b+3,f
  3774  03BB  0CA2               	rrf	___fladd@b+2,f
  3775  03BC  0CA1               	rrf	___fladd@b+1,f
  3776  03BD  0CA0               	rrf	___fladd@b,f
  3777  03BE  0BA8               	decfsz	??___fladd& (0+127),f
  3778  03BF  2BB9               	goto	u3735
  3779  03C0  3001               	movlw	1
  3780  03C1  00A8               	movwf	??___fladd
  3781  03C2  0828               	movf	??___fladd,w
  3782  03C3  07B2               	addwf	___fladd@bexp,f
  3783  03C4  2C67               	goto	l2793
  3784  03C5                     l2759:	
  3785  03C5  0823               	movf	___fladd@b+3,w
  3786  03C6  3A80               	xorlw	128
  3787  03C7  00FF               	movwf	127
  3788  03C8  0827               	movf	___fladd@a+3,w
  3789  03C9  3A80               	xorlw	128
  3790  03CA  027F               	subwf	127,w
  3791  03CB  1D03               	skipz
  3792  03CC  2BD7               	goto	u3743
  3793  03CD  0826               	movf	___fladd@a+2,w
  3794  03CE  0222               	subwf	___fladd@b+2,w
  3795  03CF  1D03               	skipz
  3796  03D0  2BD7               	goto	u3743
  3797  03D1  0825               	movf	___fladd@a+1,w
  3798  03D2  0221               	subwf	___fladd@b+1,w
  3799  03D3  1D03               	skipz
  3800  03D4  2BD7               	goto	u3743
  3801  03D5  0824               	movf	___fladd@a,w
  3802  03D6  0220               	subwf	___fladd@b,w
  3803  03D7                     u3743:	
  3804  03D7  1803               	skipnc
  3805  03D8  2C2F               	goto	l2769
  3806  03D9  30FF               	movlw	255
  3807  03DA  00A8               	movwf	??___fladd
  3808  03DB  30FF               	movlw	255
  3809  03DC  00A9               	movwf	??___fladd+1
  3810  03DD  30FF               	movlw	255
  3811  03DE  00AA               	movwf	??___fladd+2
  3812  03DF  30FF               	movlw	255
  3813  03E0  00AB               	movwf	??___fladd+3
  3814  03E1  0824               	movf	___fladd@a,w
  3815  03E2  00AC               	movwf	??___fladd+4
  3816  03E3  0825               	movf	___fladd@a+1,w
  3817  03E4  00AD               	movwf	??___fladd+5
  3818  03E5  0826               	movf	___fladd@a+2,w
  3819  03E6  00AE               	movwf	??___fladd+6
  3820  03E7  0827               	movf	___fladd@a+3,w
  3821  03E8  00AF               	movwf	??___fladd+7
  3822  03E9  0820               	movf	___fladd@b,w
  3823  03EA  02AC               	subwf	??___fladd+4,f
  3824  03EB  0821               	movf	___fladd@b+1,w
  3825  03EC  1C03               	skipc
  3826  03ED  0F21               	incfsz	___fladd@b+1,w
  3827  03EE  2BF0               	goto	u3751
  3828  03EF  2BF1               	goto	u3752
  3829  03F0                     u3751:	
  3830  03F0  02AD               	subwf	??___fladd+5,f
  3831  03F1                     u3752:	
  3832  03F1  0822               	movf	___fladd@b+2,w
  3833  03F2  1C03               	skipc
  3834  03F3  0F22               	incfsz	___fladd@b+2,w
  3835  03F4  2BF6               	goto	u3753
  3836  03F5  2BF7               	goto	u3754
  3837  03F6                     u3753:	
  3838  03F6  02AE               	subwf	??___fladd+6,f
  3839  03F7                     u3754:	
  3840  03F7  0823               	movf	___fladd@b+3,w
  3841  03F8  1C03               	skipc
  3842  03F9  0F23               	incfsz	___fladd@b+3,w
  3843  03FA  2BFC               	goto	u3755
  3844  03FB  2BFD               	goto	u3756
  3845  03FC                     u3755:	
  3846  03FC  02AF               	subwf	??___fladd+7,f
  3847  03FD                     u3756:	
  3848  03FD  082C               	movf	??___fladd+4,w
  3849  03FE  07A8               	addwf	??___fladd,f
  3850  03FF  082D               	movf	??___fladd+5,w
  3851  0400  1803               	skipnc
  3852  0401  0F2D               	incfsz	??___fladd+5,w
  3853  0402  2C04               	goto	u3760
  3854  0403  2C05               	goto	u3761
  3855  0404                     u3760:	
  3856  0404  07A9               	addwf	??___fladd+1,f
  3857  0405                     u3761:	
  3858  0405  082E               	movf	??___fladd+6,w
  3859  0406  1803               	skipnc
  3860  0407  0F2E               	incfsz	??___fladd+6,w
  3861  0408  2C0A               	goto	u3762
  3862  0409  2C0B               	goto	u3763
  3863  040A                     u3762:	
  3864  040A  07AA               	addwf	??___fladd+2,f
  3865  040B                     u3763:	
  3866  040B  082F               	movf	??___fladd+7,w
  3867  040C  1803               	skipnc
  3868  040D  0A2F               	incf	??___fladd+7,w
  3869  040E  07AB               	addwf	??___fladd+3,f
  3870  040F  082B               	movf	??___fladd+3,w
  3871  0410  00A3               	movwf	___fladd@b+3
  3872  0411  082A               	movf	??___fladd+2,w
  3873  0412  00A2               	movwf	___fladd@b+2
  3874  0413  0829               	movf	??___fladd+1,w
  3875  0414  00A1               	movwf	___fladd@b+1
  3876  0415  0828               	movf	??___fladd,w
  3877  0416  00A0               	movwf	___fladd@b
  3878  0417  3080               	movlw	128
  3879  0418  00A8               	movwf	??___fladd
  3880  0419  0828               	movf	??___fladd,w
  3881  041A  06B0               	xorwf	___fladd@signs,f
  3882  041B  09B3               	comf	___fladd@grs,f
  3883  041C  0AB3               	incf	___fladd@grs,f
  3884  041D  0833               	movf	___fladd@grs,w
  3885  041E  1D03               	btfss	3,2
  3886  041F  2C3D               	goto	l707
  3887  0420  3001               	movlw	1
  3888  0421  07A0               	addwf	___fladd@b,f
  3889  0422  3000               	movlw	0
  3890  0423  1803               	skipnc
  3891  0424  3001               	movlw	1
  3892  0425  07A1               	addwf	___fladd@b+1,f
  3893  0426  3000               	movlw	0
  3894  0427  1803               	skipnc
  3895  0428  3001               	movlw	1
  3896  0429  07A2               	addwf	___fladd@b+2,f
  3897  042A  3000               	movlw	0
  3898  042B  1803               	skipnc
  3899  042C  3001               	movlw	1
  3900  042D  07A3               	addwf	___fladd@b+3,f
  3901  042E  2C3D               	goto	l707
  3902  042F                     l2769:	
  3903  042F  0824               	movf	___fladd@a,w
  3904  0430  02A0               	subwf	___fladd@b,f
  3905  0431  0825               	movf	___fladd@a+1,w
  3906  0432  1C03               	skipc
  3907  0433  0F25               	incfsz	___fladd@a+1,w
  3908  0434  02A1               	subwf	___fladd@b+1,f
  3909  0435  0826               	movf	___fladd@a+2,w
  3910  0436  1C03               	skipc
  3911  0437  0F26               	incfsz	___fladd@a+2,w
  3912  0438  02A2               	subwf	___fladd@b+2,f
  3913  0439  0827               	movf	___fladd@a+3,w
  3914  043A  1C03               	skipc
  3915  043B  0F27               	incfsz	___fladd@a+3,w
  3916  043C  02A3               	subwf	___fladd@b+3,f
  3917  043D                     l707:	
  3918  043D  0823               	movf	___fladd@b+3,w
  3919  043E  0422               	iorwf	___fladd@b+2,w
  3920  043F  0421               	iorwf	___fladd@b+1,w
  3921  0440  0420               	iorwf	___fladd@b,w
  3922  0441  1D03               	skipz
  3923  0442  2C65               	goto	l2791
  3924  0443  0833               	movf	___fladd@grs,w
  3925  0444  1D03               	btfss	3,2
  3926  0445  2C65               	goto	l2791
  3927  0446  3000               	movlw	0
  3928  0447  00A3               	movwf	?___fladd+3
  3929  0448  3000               	movlw	0
  3930  0449  00A2               	movwf	?___fladd+2
  3931  044A  3000               	movlw	0
  3932  044B  00A1               	movwf	?___fladd+1
  3933  044C  3000               	movlw	0
  3934  044D  00A0               	movwf	?___fladd
  3935  044E  0008               	return
  3936  044F                     l2777:	
  3937  044F  3001               	movlw	1
  3938  0450  00A8               	movwf	??___fladd
  3939  0451                     u3805:	
  3940  0451  1003               	clrc
  3941  0452  0DA0               	rlf	___fladd@b,f
  3942  0453  0DA1               	rlf	___fladd@b+1,f
  3943  0454  0DA2               	rlf	___fladd@b+2,f
  3944  0455  0DA3               	rlf	___fladd@b+3,f
  3945  0456  0BA8               	decfsz	??___fladd,f
  3946  0457  2C51               	goto	u3805
  3947  0458  1BB3               	btfsc	___fladd@grs,7
  3948  0459  1420               	bsf	___fladd@b,0
  3949  045A  1C33               	btfss	___fladd@grs,0
  3950  045B  2C5E               	goto	l2785
  3951  045C  1403               	setc
  3952  045D  2C5F               	goto	L2
  3953  045E                     l2785:	
  3954  045E  1003               	clrc
  3955  045F                     L2:	
  3956  045F  0DB3               	rlf	___fladd@grs,f
  3957  0460  0832               	movf	___fladd@bexp,w
  3958  0461  1903               	btfsc	3,2
  3959  0462  2C65               	goto	l2791
  3960  0463  3001               	movlw	1
  3961  0464  02B2               	subwf	___fladd@bexp,f
  3962  0465                     l2791:	
  3963  0465  1FA2               	btfss	___fladd@b+2,7
  3964  0466  2C4F               	goto	l2777
  3965  0467                     l2793:	
  3966  0467  01B1               	clrf	___fladd@aexp
  3967  0468  1FB3               	btfss	___fladd@grs,7
  3968  0469  2C72               	goto	l2803
  3969  046A  0833               	movf	___fladd@grs,w
  3970  046B  397F               	andlw	127
  3971  046C  1903               	btfsc	3,2
  3972  046D  1820               	btfsc	___fladd@b,0
  3973  046E  2C70               	goto	l2799
  3974  046F  2C72               	goto	l2803
  3975  0470                     l2799:	
  3976  0470  01B1               	clrf	___fladd@aexp
  3977  0471  0AB1               	incf	___fladd@aexp,f
  3978  0472                     l2803:	
  3979  0472  0831               	movf	___fladd@aexp,w
  3980  0473  1903               	btfsc	3,2
  3981  0474  2CA5               	goto	l720
  3982  0475  3001               	movlw	1
  3983  0476  07A0               	addwf	___fladd@b,f
  3984  0477  3000               	movlw	0
  3985  0478  1803               	skipnc
  3986  0479  3001               	movlw	1
  3987  047A  07A1               	addwf	___fladd@b+1,f
  3988  047B  3000               	movlw	0
  3989  047C  1803               	skipnc
  3990  047D  3001               	movlw	1
  3991  047E  07A2               	addwf	___fladd@b+2,f
  3992  047F  3000               	movlw	0
  3993  0480  1803               	skipnc
  3994  0481  3001               	movlw	1
  3995  0482  07A3               	addwf	___fladd@b+3,f
  3996  0483  1C23               	btfss	___fladd@b+3,0
  3997  0484  2CA5               	goto	l720
  3998  0485  0820               	movf	___fladd@b,w
  3999  0486  00A8               	movwf	??___fladd
  4000  0487  0821               	movf	___fladd@b+1,w
  4001  0488  00A9               	movwf	??___fladd+1
  4002  0489  0822               	movf	___fladd@b+2,w
  4003  048A  00AA               	movwf	??___fladd+2
  4004  048B  0823               	movf	___fladd@b+3,w
  4005  048C  00AB               	movwf	??___fladd+3
  4006  048D  3001               	movlw	1
  4007  048E  00AC               	movwf	??___fladd+4
  4008  048F                     u3905:	
  4009  048F  0D2B               	rlf	??___fladd+3,w
  4010  0490  0CAB               	rrf	??___fladd+3,f
  4011  0491  0CAA               	rrf	??___fladd+2,f
  4012  0492  0CA9               	rrf	??___fladd+1,f
  4013  0493  0CA8               	rrf	??___fladd,f
  4014  0494  0BAC               	decfsz	??___fladd+4,f
  4015  0495  2C8F               	goto	u3905
  4016  0496  082B               	movf	??___fladd+3,w
  4017  0497  00A3               	movwf	___fladd@b+3
  4018  0498  082A               	movf	??___fladd+2,w
  4019  0499  00A2               	movwf	___fladd@b+2
  4020  049A  0829               	movf	??___fladd+1,w
  4021  049B  00A1               	movwf	___fladd@b+1
  4022  049C  0828               	movf	??___fladd,w
  4023  049D  00A0               	movwf	___fladd@b
  4024  049E  0A32               	incf	___fladd@bexp,w
  4025  049F  1903               	btfsc	3,2
  4026  04A0  2CA5               	goto	l720
  4027  04A1  3001               	movlw	1
  4028  04A2  00A8               	movwf	??___fladd
  4029  04A3  0828               	movf	??___fladd,w
  4030  04A4  07B2               	addwf	___fladd@bexp,f
  4031  04A5                     l720:	
  4032  04A5  0A32               	incf	___fladd@bexp,w
  4033  04A6  1D03               	btfss	3,2
  4034  04A7  0832               	movf	___fladd@bexp,w
  4035  04A8  1D03               	btfss	3,2
  4036  04A9  2CB5               	goto	l2821
  4037  04AA  3000               	movlw	0
  4038  04AB  00A3               	movwf	___fladd@b+3
  4039  04AC  3000               	movlw	0
  4040  04AD  00A2               	movwf	___fladd@b+2
  4041  04AE  3000               	movlw	0
  4042  04AF  00A1               	movwf	___fladd@b+1
  4043  04B0  3000               	movlw	0
  4044  04B1  00A0               	movwf	___fladd@b
  4045  04B2  0832               	movf	___fladd@bexp,w
  4046  04B3  1903               	btfsc	3,2
  4047  04B4  01B0               	clrf	___fladd@signs
  4048  04B5                     l2821:	
  4049  04B5  1C32               	btfss	___fladd@bexp,0
  4050  04B6  2CB9               	goto	l2825
  4051  04B7  17A2               	bsf	___fladd@b+2,7
  4052  04B8  2CBD               	goto	l728
  4053  04B9                     l2825:	
  4054  04B9  307F               	movlw	127
  4055  04BA  00A8               	movwf	??___fladd
  4056  04BB  0828               	movf	??___fladd,w
  4057  04BC  05A2               	andwf	___fladd@b+2,f
  4058  04BD                     l728:	
  4059  04BD  0832               	movf	___fladd@bexp,w
  4060  04BE  00A8               	movwf	??___fladd
  4061  04BF  1003               	clrc
  4062  04C0  0C28               	rrf	??___fladd,w
  4063  04C1  00A9               	movwf	??___fladd+1
  4064  04C2  0829               	movf	??___fladd+1,w
  4065  04C3  00A3               	movwf	___fladd@b+3
  4066  04C4  1FB0               	btfss	___fladd@signs,7
  4067  04C5  0008               	return
  4068  04C6  17A3               	bsf	___fladd@b+3,7
  4069  04C7  0008               	return
  4070  04C8                     __end_of___fladd:	
  4071                           
  4072                           	psect	text14
  4073  0017                     __ptext14:	
  4074 ;; *************** function _VerificarInversionGiro *****************
  4075 ;; Defined at:
  4076 ;;		line 193 in file "main.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;		None
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;		None
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  2  269[None  ] int 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4090 ;;      Params:         0       0       0       0       0
  4091 ;;      Locals:         0       0       0       0       0
  4092 ;;      Temps:          0       0       0       0       0
  4093 ;;      Totals:         0       0       0       0       0
  4094 ;;Total ram usage:        0 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    2
  4097 ;; This function calls:
  4098 ;;		___flge
  4099 ;;		___flmul
  4100 ;;		___xxtofl
  4101 ;; This function is called by:
  4102 ;;		_Encoder
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _VerificarInversionGiro
  4108  0017                     _VerificarInversionGiro:	
  4109                           
  4110                           ;main.c: 194:     if (RC0 && (Grados * 0.097 >= CmHorario)) {
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _VerificarInversionGiro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4114  0017  1283               	bcf	3,5	;RP0=0, select bank0
  4115  0018  1303               	bcf	3,6	;RP1=0, select bank0
  4116  0019  1C07               	btfss	7,0	;volatile
  4117  001A  2876               	goto	l270
  4118  001B  303D               	movlw	61
  4119  001C  00A3               	movwf	___flmul@b+3
  4120  001D  30C6               	movlw	198
  4121  001E  00A2               	movwf	___flmul@b+2
  4122  001F  30A7               	movlw	167
  4123  0020  00A1               	movwf	___flmul@b+1
  4124  0021  30F0               	movlw	240
  4125  0022  00A0               	movwf	___flmul@b
  4126  0023  0862               	movf	_Grados,w
  4127  0024  00F0               	movwf	___xxtofl@val
  4128  0025  0863               	movf	_Grados+1,w
  4129  0026  00F1               	movwf	___xxtofl@val+1
  4130  0027  3000               	movlw	0
  4131  0028  1BF1               	btfsc	___xxtofl@val+1,7
  4132  0029  30FF               	movlw	255
  4133  002A  00F2               	movwf	___xxtofl@val+2
  4134  002B  00F3               	movwf	___xxtofl@val+3
  4135  002C  3001               	movlw	1
  4136  002D  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  4137  0032  0873               	movf	?___xxtofl+3,w
  4138  0033  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0034  1303               	bcf	3,6	;RP1=0, select bank0
  4140  0035  00A7               	movwf	___flmul@a+3
  4141  0036  0872               	movf	?___xxtofl+2,w
  4142  0037  00A6               	movwf	___flmul@a+2
  4143  0038  0871               	movf	?___xxtofl+1,w
  4144  0039  00A5               	movwf	___flmul@a+1
  4145  003A  0870               	movf	?___xxtofl,w
  4146  003B  00A4               	movwf	___flmul@a
  4147  003C  120A  118A  24C8  120A  118A  	fcall	___flmul
  4148  0041  1283               	bcf	3,5	;RP0=0, select bank0
  4149  0042  1303               	bcf	3,6	;RP1=0, select bank0
  4150  0043  0823               	movf	?___flmul+3,w
  4151  0044  00BD               	movwf	___flge@ff1+3
  4152  0045  0822               	movf	?___flmul+2,w
  4153  0046  00BC               	movwf	___flge@ff1+2
  4154  0047  0821               	movf	?___flmul+1,w
  4155  0048  00BB               	movwf	___flge@ff1+1
  4156  0049  0820               	movf	?___flmul,w
  4157  004A  00BA               	movwf	___flge@ff1
  4158  004B  0860               	movf	_CmHorario,w
  4159  004C  00F0               	movwf	___xxtofl@val
  4160  004D  0861               	movf	_CmHorario+1,w
  4161  004E  00F1               	movwf	___xxtofl@val+1
  4162  004F  3000               	movlw	0
  4163  0050  1BF1               	btfsc	___xxtofl@val+1,7
  4164  0051  30FF               	movlw	255
  4165  0052  00F2               	movwf	___xxtofl@val+2
  4166  0053  00F3               	movwf	___xxtofl@val+3
  4167  0054  3001               	movlw	1
  4168  0055  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  4169  005A  0873               	movf	?___xxtofl+3,w
  4170  005B  1283               	bcf	3,5	;RP0=0, select bank0
  4171  005C  1303               	bcf	3,6	;RP1=0, select bank0
  4172  005D  00C1               	movwf	___flge@ff2+3
  4173  005E  0872               	movf	?___xxtofl+2,w
  4174  005F  00C0               	movwf	___flge@ff2+2
  4175  0060  0871               	movf	?___xxtofl+1,w
  4176  0061  00BF               	movwf	___flge@ff2+1
  4177  0062  0870               	movf	?___xxtofl,w
  4178  0063  00BE               	movwf	___flge@ff2
  4179  0064  120A  158A  229B  120A  118A  	fcall	___flge
  4180  0069  1C03               	btfss	3,0
  4181  006A  2876               	goto	l270
  4182  006B                     l2531:	
  4183                           
  4184                           ;main.c: 195:         Grados = 0;
  4185  006B  1283               	bcf	3,5	;RP0=0, select bank0
  4186  006C  1303               	bcf	3,6	;RP1=0, select bank0
  4187  006D  01E2               	clrf	_Grados
  4188  006E  01E3               	clrf	_Grados+1
  4189                           
  4190                           ;main.c: 196:         RC0 = !RC0;
  4191  006F  3001               	movlw	1
  4192  0070  0687               	xorwf	7,f
  4193                           
  4194                           ;main.c: 197:         RC1 = !RC1;
  4195  0071  3002               	movlw	2
  4196  0072  0687               	xorwf	7,f
  4197                           
  4198                           ;main.c: 198:         lastCm=0;
  4199  0073  01DA               	clrf	_lastCm
  4200  0074  01DB               	clrf	_lastCm+1
  4201                           
  4202                           ;main.c: 199:     } else if (RC1 && Grados * 0.097 >= CmAntiHorario) {
  4203  0075  0008               	return
  4204  0076                     l270:	
  4205  0076  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0077  1303               	bcf	3,6	;RP1=0, select bank0
  4207  0078  1C87               	btfss	7,1	;volatile
  4208  0079  0008               	return
  4209  007A  303D               	movlw	61
  4210  007B  00A3               	movwf	___flmul@b+3
  4211  007C  30C6               	movlw	198
  4212  007D  00A2               	movwf	___flmul@b+2
  4213  007E  30A7               	movlw	167
  4214  007F  00A1               	movwf	___flmul@b+1
  4215  0080  30F0               	movlw	240
  4216  0081  00A0               	movwf	___flmul@b
  4217  0082  0862               	movf	_Grados,w
  4218  0083  00F0               	movwf	___xxtofl@val
  4219  0084  0863               	movf	_Grados+1,w
  4220  0085  00F1               	movwf	___xxtofl@val+1
  4221  0086  3000               	movlw	0
  4222  0087  1BF1               	btfsc	___xxtofl@val+1,7
  4223  0088  30FF               	movlw	255
  4224  0089  00F2               	movwf	___xxtofl@val+2
  4225  008A  00F3               	movwf	___xxtofl@val+3
  4226  008B  3001               	movlw	1
  4227  008C  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  4228  0091  0873               	movf	?___xxtofl+3,w
  4229  0092  1283               	bcf	3,5	;RP0=0, select bank0
  4230  0093  1303               	bcf	3,6	;RP1=0, select bank0
  4231  0094  00A7               	movwf	___flmul@a+3
  4232  0095  0872               	movf	?___xxtofl+2,w
  4233  0096  00A6               	movwf	___flmul@a+2
  4234  0097  0871               	movf	?___xxtofl+1,w
  4235  0098  00A5               	movwf	___flmul@a+1
  4236  0099  0870               	movf	?___xxtofl,w
  4237  009A  00A4               	movwf	___flmul@a
  4238  009B  120A  118A  24C8  120A  118A  	fcall	___flmul
  4239  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  4240  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  4241  00A2  0823               	movf	?___flmul+3,w
  4242  00A3  00BD               	movwf	___flge@ff1+3
  4243  00A4  0822               	movf	?___flmul+2,w
  4244  00A5  00BC               	movwf	___flge@ff1+2
  4245  00A6  0821               	movf	?___flmul+1,w
  4246  00A7  00BB               	movwf	___flge@ff1+1
  4247  00A8  0820               	movf	?___flmul,w
  4248  00A9  00BA               	movwf	___flge@ff1
  4249  00AA  085E               	movf	_CmAntiHorario,w
  4250  00AB  00F0               	movwf	___xxtofl@val
  4251  00AC  085F               	movf	_CmAntiHorario+1,w
  4252  00AD  00F1               	movwf	___xxtofl@val+1
  4253  00AE  3000               	movlw	0
  4254  00AF  1BF1               	btfsc	___xxtofl@val+1,7
  4255  00B0  30FF               	movlw	255
  4256  00B1  00F2               	movwf	___xxtofl@val+2
  4257  00B2  00F3               	movwf	___xxtofl@val+3
  4258  00B3  3001               	movlw	1
  4259  00B4  120A  158A  23C7  120A  118A  	fcall	___xxtofl
  4260  00B9  0873               	movf	?___xxtofl+3,w
  4261  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  4262  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  4263  00BC  00C1               	movwf	___flge@ff2+3
  4264  00BD  0872               	movf	?___xxtofl+2,w
  4265  00BE  00C0               	movwf	___flge@ff2+2
  4266  00BF  0871               	movf	?___xxtofl+1,w
  4267  00C0  00BF               	movwf	___flge@ff2+1
  4268  00C1  0870               	movf	?___xxtofl,w
  4269  00C2  00BE               	movwf	___flge@ff2
  4270  00C3  120A  158A  229B  120A  118A  	fcall	___flge
  4271  00C8  1C03               	btfss	3,0
  4272  00C9  0008               	return
  4273  00CA  286B               	goto	l2531
  4274  00CB                     __end_of_VerificarInversionGiro:	
  4275                           
  4276                           	psect	text15
  4277  0BC7                     __ptext15:	
  4278 ;; *************** function ___xxtofl *****************
  4279 ;; Defined at:
  4280 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  sign            1    wreg     unsigned char 
  4283 ;;  val             4    0[COMMON] long 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;  sign            1    8[COMMON] unsigned char 
  4286 ;;  arg             4   10[COMMON] unsigned long 
  4287 ;;  exp             1    9[COMMON] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  4    0[COMMON] unsigned char 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4297 ;;      Params:         4       0       0       0       0
  4298 ;;      Locals:         6       0       0       0       0
  4299 ;;      Temps:          4       0       0       0       0
  4300 ;;      Totals:        14       0       0       0       0
  4301 ;;Total ram usage:       14 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; This function calls:
  4304 ;;		Nothing
  4305 ;; This function is called by:
  4306 ;;		_VerificarInversionGiro
  4307 ;;		_Encoder
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           
  4312                           ;psect for function ___xxtofl
  4313  0BC7                     ___xxtofl:	
  4314                           
  4315                           ;incstack = 0
  4316                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  4317                           ;___xxtofl@sign stored from wreg
  4318  0BC7  00F8               	movwf	___xxtofl@sign
  4319  0BC8  0878               	movf	___xxtofl@sign,w
  4320  0BC9  1D03               	btfss	3,2
  4321  0BCA  1FF3               	btfss	___xxtofl@val+3,7
  4322  0BCB  2BDC               	goto	l2403
  4323  0BCC  0970               	comf	___xxtofl@val,w
  4324  0BCD  00FA               	movwf	___xxtofl@arg
  4325  0BCE  0971               	comf	___xxtofl@val+1,w
  4326  0BCF  00FB               	movwf	___xxtofl@arg+1
  4327  0BD0  0972               	comf	___xxtofl@val+2,w
  4328  0BD1  00FC               	movwf	___xxtofl@arg+2
  4329  0BD2  0973               	comf	___xxtofl@val+3,w
  4330  0BD3  00FD               	movwf	___xxtofl@arg+3
  4331  0BD4  0AFA               	incf	___xxtofl@arg,f
  4332  0BD5  1903               	skipnz
  4333  0BD6  0AFB               	incf	___xxtofl@arg+1,f
  4334  0BD7  1903               	skipnz
  4335  0BD8  0AFC               	incf	___xxtofl@arg+2,f
  4336  0BD9  1903               	skipnz
  4337  0BDA  0AFD               	incf	___xxtofl@arg+3,f
  4338  0BDB  2BE4               	goto	l820
  4339  0BDC                     l2403:	
  4340  0BDC  0873               	movf	___xxtofl@val+3,w
  4341  0BDD  00FD               	movwf	___xxtofl@arg+3
  4342  0BDE  0872               	movf	___xxtofl@val+2,w
  4343  0BDF  00FC               	movwf	___xxtofl@arg+2
  4344  0BE0  0871               	movf	___xxtofl@val+1,w
  4345  0BE1  00FB               	movwf	___xxtofl@arg+1
  4346  0BE2  0870               	movf	___xxtofl@val,w
  4347  0BE3  00FA               	movwf	___xxtofl@arg
  4348  0BE4                     l820:	
  4349  0BE4  0873               	movf	___xxtofl@val+3,w
  4350  0BE5  0472               	iorwf	___xxtofl@val+2,w
  4351  0BE6  0471               	iorwf	___xxtofl@val+1,w
  4352  0BE7  0470               	iorwf	___xxtofl@val,w
  4353  0BE8  1D03               	skipz
  4354  0BE9  2BF3               	goto	l2409
  4355  0BEA  3000               	movlw	0
  4356  0BEB  00F3               	movwf	?___xxtofl+3
  4357  0BEC  3000               	movlw	0
  4358  0BED  00F2               	movwf	?___xxtofl+2
  4359  0BEE  3000               	movlw	0
  4360  0BEF  00F1               	movwf	?___xxtofl+1
  4361  0BF0  3000               	movlw	0
  4362  0BF1  00F0               	movwf	?___xxtofl
  4363  0BF2  0008               	return
  4364  0BF3                     l2409:	
  4365  0BF3  3096               	movlw	150
  4366  0BF4  00F4               	movwf	??___xxtofl
  4367  0BF5  0874               	movf	??___xxtofl,w
  4368  0BF6  00F9               	movwf	___xxtofl@exp
  4369  0BF7                     l2413:	
  4370  0BF7  30FE               	movlw	254
  4371  0BF8  057D               	andwf	___xxtofl@arg+3,w
  4372  0BF9  1903               	btfsc	3,2
  4373  0BFA  2C24               	goto	l826
  4374  0BFB  3001               	movlw	1
  4375  0BFC  00F4               	movwf	??___xxtofl
  4376  0BFD  0874               	movf	??___xxtofl,w
  4377  0BFE  07F9               	addwf	___xxtofl@exp,f
  4378  0BFF  3001               	movlw	1
  4379  0C00                     u2895:	
  4380  0C00  1003               	clrc
  4381  0C01  0CFD               	rrf	___xxtofl@arg+3,f
  4382  0C02  0CFC               	rrf	___xxtofl@arg+2,f
  4383  0C03  0CFB               	rrf	___xxtofl@arg+1,f
  4384  0C04  0CFA               	rrf	___xxtofl@arg,f
  4385  0C05  3EFF               	addlw	-1
  4386  0C06  1D03               	skipz
  4387  0C07  2C00               	goto	u2895
  4388  0C08  2BF7               	goto	l2413
  4389  0C09                     l2415:	
  4390  0C09  3001               	movlw	1
  4391  0C0A  00F4               	movwf	??___xxtofl
  4392  0C0B  0874               	movf	??___xxtofl,w
  4393  0C0C  07F9               	addwf	___xxtofl@exp,f
  4394  0C0D  3001               	movlw	1
  4395  0C0E  07FA               	addwf	___xxtofl@arg,f
  4396  0C0F  3000               	movlw	0
  4397  0C10  1803               	skipnc
  4398  0C11  3001               	movlw	1
  4399  0C12  07FB               	addwf	___xxtofl@arg+1,f
  4400  0C13  3000               	movlw	0
  4401  0C14  1803               	skipnc
  4402  0C15  3001               	movlw	1
  4403  0C16  07FC               	addwf	___xxtofl@arg+2,f
  4404  0C17  3000               	movlw	0
  4405  0C18  1803               	skipnc
  4406  0C19  3001               	movlw	1
  4407  0C1A  07FD               	addwf	___xxtofl@arg+3,f
  4408  0C1B  3001               	movlw	1
  4409  0C1C                     u2915:	
  4410  0C1C  1003               	clrc
  4411  0C1D  0CFD               	rrf	___xxtofl@arg+3,f
  4412  0C1E  0CFC               	rrf	___xxtofl@arg+2,f
  4413  0C1F  0CFB               	rrf	___xxtofl@arg+1,f
  4414  0C20  0CFA               	rrf	___xxtofl@arg,f
  4415  0C21  3EFF               	addlw	-1
  4416  0C22  1D03               	skipz
  4417  0C23  2C1C               	goto	u2915
  4418  0C24                     l826:	
  4419  0C24  30FF               	movlw	255
  4420  0C25  057D               	andwf	___xxtofl@arg+3,w
  4421  0C26  1903               	btfsc	3,2
  4422  0C27  2C38               	goto	l2423
  4423  0C28  2C09               	goto	l2415
  4424  0C29                     l2425:	
  4425  0C29  3002               	movlw	2
  4426  0C2A  0279               	subwf	___xxtofl@exp,w
  4427  0C2B  1C03               	btfss	3,0
  4428  0C2C  2C3A               	goto	l833
  4429  0C2D  3001               	movlw	1
  4430  0C2E  02F9               	subwf	___xxtofl@exp,f
  4431  0C2F  3001               	movlw	1
  4432  0C30  00F4               	movwf	??___xxtofl
  4433  0C31                     u2935:	
  4434  0C31  1003               	clrc
  4435  0C32  0DFA               	rlf	___xxtofl@arg,f
  4436  0C33  0DFB               	rlf	___xxtofl@arg+1,f
  4437  0C34  0DFC               	rlf	___xxtofl@arg+2,f
  4438  0C35  0DFD               	rlf	___xxtofl@arg+3,f
  4439  0C36  0BF4               	decfsz	??___xxtofl,f
  4440  0C37  2C31               	goto	u2935
  4441  0C38                     l2423:	
  4442  0C38  1FFC               	btfss	___xxtofl@arg+2,7
  4443  0C39  2C29               	goto	l2425
  4444  0C3A                     l833:	
  4445  0C3A  1879               	btfsc	___xxtofl@exp,0
  4446  0C3B  2C44               	goto	l834
  4447  0C3C  30FF               	movlw	255
  4448  0C3D  05FA               	andwf	___xxtofl@arg,f
  4449  0C3E  30FF               	movlw	255
  4450  0C3F  05FB               	andwf	___xxtofl@arg+1,f
  4451  0C40  307F               	movlw	127
  4452  0C41  05FC               	andwf	___xxtofl@arg+2,f
  4453  0C42  30FF               	movlw	255
  4454  0C43  05FD               	andwf	___xxtofl@arg+3,f
  4455  0C44                     l834:	
  4456  0C44  1003               	clrc
  4457  0C45  0CF9               	rrf	___xxtofl@exp,f
  4458  0C46  0879               	movf	___xxtofl@exp,w
  4459  0C47  00F4               	movwf	??___xxtofl
  4460  0C48  01F5               	clrf	??___xxtofl+1
  4461  0C49  01F6               	clrf	??___xxtofl+2
  4462  0C4A  01F7               	clrf	??___xxtofl+3
  4463  0C4B  3018               	movlw	24
  4464  0C4C                     u2975:	
  4465  0C4C  1003               	clrc
  4466  0C4D  0DF4               	rlf	??___xxtofl,f
  4467  0C4E  0DF5               	rlf	??___xxtofl+1,f
  4468  0C4F  0DF6               	rlf	??___xxtofl+2,f
  4469  0C50  0DF7               	rlf	??___xxtofl+3,f
  4470  0C51  3EFF               	addlw	-1
  4471  0C52  1D03               	skipz
  4472  0C53  2C4C               	goto	u2975
  4473  0C54  0874               	movf	??___xxtofl,w
  4474  0C55  04FA               	iorwf	___xxtofl@arg,f
  4475  0C56  0875               	movf	??___xxtofl+1,w
  4476  0C57  04FB               	iorwf	___xxtofl@arg+1,f
  4477  0C58  0876               	movf	??___xxtofl+2,w
  4478  0C59  04FC               	iorwf	___xxtofl@arg+2,f
  4479  0C5A  0877               	movf	??___xxtofl+3,w
  4480  0C5B  04FD               	iorwf	___xxtofl@arg+3,f
  4481  0C5C  0878               	movf	___xxtofl@sign,w
  4482  0C5D  1D03               	btfss	3,2
  4483  0C5E  1FF3               	btfss	___xxtofl@val+3,7
  4484  0C5F  2C61               	goto	l2437
  4485  0C60  17FD               	bsf	___xxtofl@arg+3,7
  4486  0C61                     l2437:	
  4487  0C61  087D               	movf	___xxtofl@arg+3,w
  4488  0C62  00F3               	movwf	?___xxtofl+3
  4489  0C63  087C               	movf	___xxtofl@arg+2,w
  4490  0C64  00F2               	movwf	?___xxtofl+2
  4491  0C65  087B               	movf	___xxtofl@arg+1,w
  4492  0C66  00F1               	movwf	?___xxtofl+1
  4493  0C67  087A               	movf	___xxtofl@arg,w
  4494  0C68  00F0               	movwf	?___xxtofl
  4495  0C69  0008               	return
  4496  0C6A                     __end_of___xxtofl:	
  4497                           
  4498                           	psect	text16
  4499  04C8                     __ptext16:	
  4500 ;; *************** function ___flmul *****************
  4501 ;; Defined at:
  4502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  b               4    0[BANK0 ] unsigned char 
  4505 ;;  a               4    4[BANK0 ] unsigned char 
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;  prod            4   20[BANK0 ] struct .
  4508 ;;  grs             4   14[BANK0 ] unsigned long 
  4509 ;;  temp            2   24[BANK0 ] struct .
  4510 ;;  bexp            1   19[BANK0 ] unsigned char 
  4511 ;;  aexp            1   18[BANK0 ] unsigned char 
  4512 ;;  sign            1   13[BANK0 ] unsigned char 
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  4    0[BANK0 ] unsigned char 
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4522 ;;      Params:         0       8       0       0       0
  4523 ;;      Locals:         0      13       0       0       0
  4524 ;;      Temps:          0       5       0       0       0
  4525 ;;      Totals:         0      26       0       0       0
  4526 ;;Total ram usage:       26 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    1
  4529 ;; This function calls:
  4530 ;;		__Umul8_16
  4531 ;; This function is called by:
  4532 ;;		_VerificarInversionGiro
  4533 ;;		_Encoder
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function ___flmul
  4539  04C8                     ___flmul:	
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4543  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  4544  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  4545  04CA  0823               	movf	___flmul@b+3,w
  4546  04CB  3980               	andlw	128
  4547  04CC  00A8               	movwf	??___flmul
  4548  04CD  0828               	movf	??___flmul,w
  4549  04CE  00AD               	movwf	___flmul@sign
  4550  04CF  0823               	movf	___flmul@b+3,w
  4551  04D0  00A8               	movwf	??___flmul
  4552  04D1  0728               	addwf	??___flmul,w
  4553  04D2  00A9               	movwf	??___flmul+1
  4554  04D3  0829               	movf	??___flmul+1,w
  4555  04D4  00B3               	movwf	___flmul@bexp
  4556  04D5  1BA2               	btfsc	___flmul@b+2,7
  4557  04D6  1433               	bsf	___flmul@bexp,0
  4558  04D7  0833               	movf	___flmul@bexp,w
  4559  04D8  1903               	btfsc	3,2
  4560  04D9  2CE7               	goto	l2273
  4561  04DA  0A33               	incf	___flmul@bexp,w
  4562  04DB  1D03               	btfss	3,2
  4563  04DC  2CE5               	goto	l2271
  4564  04DD  3000               	movlw	0
  4565  04DE  00A3               	movwf	___flmul@b+3
  4566  04DF  3000               	movlw	0
  4567  04E0  00A2               	movwf	___flmul@b+2
  4568  04E1  3000               	movlw	0
  4569  04E2  00A1               	movwf	___flmul@b+1
  4570  04E3  3000               	movlw	0
  4571  04E4  00A0               	movwf	___flmul@b
  4572  04E5                     l2271:	
  4573  04E5  17A2               	bsf	___flmul@b+2,7
  4574  04E6  2CEF               	goto	l2275
  4575  04E7                     l2273:	
  4576  04E7  3000               	movlw	0
  4577  04E8  00A3               	movwf	___flmul@b+3
  4578  04E9  3000               	movlw	0
  4579  04EA  00A2               	movwf	___flmul@b+2
  4580  04EB  3000               	movlw	0
  4581  04EC  00A1               	movwf	___flmul@b+1
  4582  04ED  3000               	movlw	0
  4583  04EE  00A0               	movwf	___flmul@b
  4584  04EF                     l2275:	
  4585  04EF  0827               	movf	___flmul@a+3,w
  4586  04F0  3980               	andlw	128
  4587  04F1  00A8               	movwf	??___flmul
  4588  04F2  0828               	movf	??___flmul,w
  4589  04F3  06AD               	xorwf	___flmul@sign,f
  4590  04F4  0827               	movf	___flmul@a+3,w
  4591  04F5  00A8               	movwf	??___flmul
  4592  04F6  0728               	addwf	??___flmul,w
  4593  04F7  00A9               	movwf	??___flmul+1
  4594  04F8  0829               	movf	??___flmul+1,w
  4595  04F9  00B2               	movwf	___flmul@aexp
  4596  04FA  1BA6               	btfsc	___flmul@a+2,7
  4597  04FB  1432               	bsf	___flmul@aexp,0
  4598  04FC  0832               	movf	___flmul@aexp,w
  4599  04FD  1903               	btfsc	3,2
  4600  04FE  2D0C               	goto	l2291
  4601  04FF  0A32               	incf	___flmul@aexp,w
  4602  0500  1D03               	btfss	3,2
  4603  0501  2D0A               	goto	l2289
  4604  0502  3000               	movlw	0
  4605  0503  00A7               	movwf	___flmul@a+3
  4606  0504  3000               	movlw	0
  4607  0505  00A6               	movwf	___flmul@a+2
  4608  0506  3000               	movlw	0
  4609  0507  00A5               	movwf	___flmul@a+1
  4610  0508  3000               	movlw	0
  4611  0509  00A4               	movwf	___flmul@a
  4612  050A                     l2289:	
  4613  050A  17A6               	bsf	___flmul@a+2,7
  4614  050B  2D14               	goto	l2293
  4615  050C                     l2291:	
  4616  050C  3000               	movlw	0
  4617  050D  00A7               	movwf	___flmul@a+3
  4618  050E  3000               	movlw	0
  4619  050F  00A6               	movwf	___flmul@a+2
  4620  0510  3000               	movlw	0
  4621  0511  00A5               	movwf	___flmul@a+1
  4622  0512  3000               	movlw	0
  4623  0513  00A4               	movwf	___flmul@a
  4624  0514                     l2293:	
  4625  0514  0832               	movf	___flmul@aexp,w
  4626  0515  1D03               	btfss	3,2
  4627  0516  0833               	movf	___flmul@bexp,w
  4628  0517  1D03               	btfss	3,2
  4629  0518  2D22               	goto	l2301
  4630  0519  3000               	movlw	0
  4631  051A  00A3               	movwf	?___flmul+3
  4632  051B  3000               	movlw	0
  4633  051C  00A2               	movwf	?___flmul+2
  4634  051D  3000               	movlw	0
  4635  051E  00A1               	movwf	?___flmul+1
  4636  051F  3000               	movlw	0
  4637  0520  00A0               	movwf	?___flmul
  4638  0521  0008               	return
  4639  0522                     l2301:	
  4640  0522  0820               	movf	___flmul@b,w
  4641  0523  00A8               	movwf	??___flmul
  4642  0524  0828               	movf	??___flmul,w
  4643  0525  00F0               	movwf	__Umul8_16@multiplicand
  4644  0526  0826               	movf	___flmul@a+2,w
  4645  0527  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4646  052C  0871               	movf	?__Umul8_16+1,w
  4647  052D  1283               	bcf	3,5	;RP0=0, select bank0
  4648  052E  1303               	bcf	3,6	;RP1=0, select bank0
  4649  052F  00B9               	movwf	___flmul@temp+1
  4650  0530  0870               	movf	?__Umul8_16,w
  4651  0531  00B8               	movwf	___flmul@temp
  4652  0532  0838               	movf	___flmul@temp,w
  4653  0533  00A8               	movwf	??___flmul
  4654  0534  01A9               	clrf	??___flmul+1
  4655  0535  01AA               	clrf	??___flmul+2
  4656  0536  01AB               	clrf	??___flmul+3
  4657  0537  082B               	movf	??___flmul+3,w
  4658  0538  00B1               	movwf	___flmul@grs+3
  4659  0539  082A               	movf	??___flmul+2,w
  4660  053A  00B0               	movwf	___flmul@grs+2
  4661  053B  0829               	movf	??___flmul+1,w
  4662  053C  00AF               	movwf	___flmul@grs+1
  4663  053D  0828               	movf	??___flmul,w
  4664  053E  00AE               	movwf	___flmul@grs
  4665  053F  0839               	movf	___flmul@temp+1,w
  4666  0540  00A8               	movwf	??___flmul
  4667  0541  01A9               	clrf	??___flmul+1
  4668  0542  01AA               	clrf	??___flmul+2
  4669  0543  01AB               	clrf	??___flmul+3
  4670  0544  082B               	movf	??___flmul+3,w
  4671  0545  00B7               	movwf	___flmul@prod+3
  4672  0546  082A               	movf	??___flmul+2,w
  4673  0547  00B6               	movwf	___flmul@prod+2
  4674  0548  0829               	movf	??___flmul+1,w
  4675  0549  00B5               	movwf	___flmul@prod+1
  4676  054A  0828               	movf	??___flmul,w
  4677  054B  00B4               	movwf	___flmul@prod
  4678  054C  0821               	movf	___flmul@b+1,w
  4679  054D  00A8               	movwf	??___flmul
  4680  054E  0828               	movf	??___flmul,w
  4681  054F  00F0               	movwf	__Umul8_16@multiplicand
  4682  0550  0825               	movf	___flmul@a+1,w
  4683  0551  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4684  0556  0871               	movf	?__Umul8_16+1,w
  4685  0557  1283               	bcf	3,5	;RP0=0, select bank0
  4686  0558  1303               	bcf	3,6	;RP1=0, select bank0
  4687  0559  00B9               	movwf	___flmul@temp+1
  4688  055A  0870               	movf	?__Umul8_16,w
  4689  055B  00B8               	movwf	___flmul@temp
  4690  055C  0838               	movf	___flmul@temp,w
  4691  055D  00A8               	movwf	??___flmul
  4692  055E  01A9               	clrf	??___flmul+1
  4693  055F  01AA               	clrf	??___flmul+2
  4694  0560  01AB               	clrf	??___flmul+3
  4695  0561  0828               	movf	??___flmul,w
  4696  0562  07AE               	addwf	___flmul@grs,f
  4697  0563  0829               	movf	??___flmul+1,w
  4698  0564  1103               	clrz
  4699  0565  1803               	skipnc
  4700  0566  3E01               	addlw	1
  4701  0567  1D03               	btfss	3,2
  4702  0568  07AF               	addwf	___flmul@grs+1,f
  4703  0569  082A               	movf	??___flmul+2,w
  4704  056A  1103               	clrz
  4705  056B  1803               	skipnc
  4706  056C  3E01               	addlw	1
  4707  056D  1D03               	btfss	3,2
  4708  056E  07B0               	addwf	___flmul@grs+2,f
  4709  056F  082B               	movf	??___flmul+3,w
  4710  0570  1103               	clrz
  4711  0571  1803               	skipnc
  4712  0572  3E01               	addlw	1
  4713  0573  1D03               	btfss	3,2
  4714  0574  07B1               	addwf	___flmul@grs+3,f
  4715  0575  0839               	movf	___flmul@temp+1,w
  4716  0576  00A8               	movwf	??___flmul
  4717  0577  01A9               	clrf	??___flmul+1
  4718  0578  01AA               	clrf	??___flmul+2
  4719  0579  01AB               	clrf	??___flmul+3
  4720  057A  0828               	movf	??___flmul,w
  4721  057B  07B4               	addwf	___flmul@prod,f
  4722  057C  0829               	movf	??___flmul+1,w
  4723  057D  1103               	clrz
  4724  057E  1803               	skipnc
  4725  057F  3E01               	addlw	1
  4726  0580  1D03               	btfss	3,2
  4727  0581  07B5               	addwf	___flmul@prod+1,f
  4728  0582  082A               	movf	??___flmul+2,w
  4729  0583  1103               	clrz
  4730  0584  1803               	skipnc
  4731  0585  3E01               	addlw	1
  4732  0586  1D03               	btfss	3,2
  4733  0587  07B6               	addwf	___flmul@prod+2,f
  4734  0588  082B               	movf	??___flmul+3,w
  4735  0589  1103               	clrz
  4736  058A  1803               	skipnc
  4737  058B  3E01               	addlw	1
  4738  058C  1D03               	btfss	3,2
  4739  058D  07B7               	addwf	___flmul@prod+3,f
  4740  058E  0822               	movf	___flmul@b+2,w
  4741  058F  00A8               	movwf	??___flmul
  4742  0590  0828               	movf	??___flmul,w
  4743  0591  00F0               	movwf	__Umul8_16@multiplicand
  4744  0592  0824               	movf	___flmul@a,w
  4745  0593  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4746  0598  0871               	movf	?__Umul8_16+1,w
  4747  0599  1283               	bcf	3,5	;RP0=0, select bank0
  4748  059A  1303               	bcf	3,6	;RP1=0, select bank0
  4749  059B  00B9               	movwf	___flmul@temp+1
  4750  059C  0870               	movf	?__Umul8_16,w
  4751  059D  00B8               	movwf	___flmul@temp
  4752  059E  0838               	movf	___flmul@temp,w
  4753  059F  00A8               	movwf	??___flmul
  4754  05A0  01A9               	clrf	??___flmul+1
  4755  05A1  01AA               	clrf	??___flmul+2
  4756  05A2  01AB               	clrf	??___flmul+3
  4757  05A3  0828               	movf	??___flmul,w
  4758  05A4  07AE               	addwf	___flmul@grs,f
  4759  05A5  0829               	movf	??___flmul+1,w
  4760  05A6  1103               	clrz
  4761  05A7  1803               	skipnc
  4762  05A8  3E01               	addlw	1
  4763  05A9  1D03               	btfss	3,2
  4764  05AA  07AF               	addwf	___flmul@grs+1,f
  4765  05AB  082A               	movf	??___flmul+2,w
  4766  05AC  1103               	clrz
  4767  05AD  1803               	skipnc
  4768  05AE  3E01               	addlw	1
  4769  05AF  1D03               	btfss	3,2
  4770  05B0  07B0               	addwf	___flmul@grs+2,f
  4771  05B1  082B               	movf	??___flmul+3,w
  4772  05B2  1103               	clrz
  4773  05B3  1803               	skipnc
  4774  05B4  3E01               	addlw	1
  4775  05B5  1D03               	btfss	3,2
  4776  05B6  07B1               	addwf	___flmul@grs+3,f
  4777  05B7  0839               	movf	___flmul@temp+1,w
  4778  05B8  00A8               	movwf	??___flmul
  4779  05B9  01A9               	clrf	??___flmul+1
  4780  05BA  01AA               	clrf	??___flmul+2
  4781  05BB  01AB               	clrf	??___flmul+3
  4782  05BC  0828               	movf	??___flmul,w
  4783  05BD  07B4               	addwf	___flmul@prod,f
  4784  05BE  0829               	movf	??___flmul+1,w
  4785  05BF  1103               	clrz
  4786  05C0  1803               	skipnc
  4787  05C1  3E01               	addlw	1
  4788  05C2  1D03               	btfss	3,2
  4789  05C3  07B5               	addwf	___flmul@prod+1,f
  4790  05C4  082A               	movf	??___flmul+2,w
  4791  05C5  1103               	clrz
  4792  05C6  1803               	skipnc
  4793  05C7  3E01               	addlw	1
  4794  05C8  1D03               	btfss	3,2
  4795  05C9  07B6               	addwf	___flmul@prod+2,f
  4796  05CA  082B               	movf	??___flmul+3,w
  4797  05CB  1103               	clrz
  4798  05CC  1803               	skipnc
  4799  05CD  3E01               	addlw	1
  4800  05CE  1D03               	btfss	3,2
  4801  05CF  07B7               	addwf	___flmul@prod+3,f
  4802  05D0  3008               	movlw	8
  4803  05D1  00A8               	movwf	??___flmul
  4804  05D2                     u2615:	
  4805  05D2  1003               	clrc
  4806  05D3  0DAE               	rlf	___flmul@grs,f
  4807  05D4  0DAF               	rlf	___flmul@grs+1,f
  4808  05D5  0DB0               	rlf	___flmul@grs+2,f
  4809  05D6  0DB1               	rlf	___flmul@grs+3,f
  4810  05D7  0BA8               	decfsz	??___flmul,f
  4811  05D8  2DD2               	goto	u2615
  4812  05D9  0821               	movf	___flmul@b+1,w
  4813  05DA  00A8               	movwf	??___flmul
  4814  05DB  0828               	movf	??___flmul,w
  4815  05DC  00F0               	movwf	__Umul8_16@multiplicand
  4816  05DD  0824               	movf	___flmul@a,w
  4817  05DE  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4818  05E3  0871               	movf	?__Umul8_16+1,w
  4819  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  4820  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  4821  05E6  00B9               	movwf	___flmul@temp+1
  4822  05E7  0870               	movf	?__Umul8_16,w
  4823  05E8  00B8               	movwf	___flmul@temp
  4824  05E9  0838               	movf	___flmul@temp,w
  4825  05EA  00A8               	movwf	??___flmul
  4826  05EB  0839               	movf	___flmul@temp+1,w
  4827  05EC  00A9               	movwf	??___flmul+1
  4828  05ED  01AA               	clrf	??___flmul+2
  4829  05EE  01AB               	clrf	??___flmul+3
  4830  05EF  0828               	movf	??___flmul,w
  4831  05F0  07AE               	addwf	___flmul@grs,f
  4832  05F1  0829               	movf	??___flmul+1,w
  4833  05F2  1103               	clrz
  4834  05F3  1803               	skipnc
  4835  05F4  3E01               	addlw	1
  4836  05F5  1D03               	btfss	3,2
  4837  05F6  07AF               	addwf	___flmul@grs+1,f
  4838  05F7  082A               	movf	??___flmul+2,w
  4839  05F8  1103               	clrz
  4840  05F9  1803               	skipnc
  4841  05FA  3E01               	addlw	1
  4842  05FB  1D03               	btfss	3,2
  4843  05FC  07B0               	addwf	___flmul@grs+2,f
  4844  05FD  082B               	movf	??___flmul+3,w
  4845  05FE  1103               	clrz
  4846  05FF  1803               	skipnc
  4847  0600  3E01               	addlw	1
  4848  0601  1D03               	btfss	3,2
  4849  0602  07B1               	addwf	___flmul@grs+3,f
  4850  0603  0820               	movf	___flmul@b,w
  4851  0604  00A8               	movwf	??___flmul
  4852  0605  0828               	movf	??___flmul,w
  4853  0606  00F0               	movwf	__Umul8_16@multiplicand
  4854  0607  0825               	movf	___flmul@a+1,w
  4855  0608  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4856  060D  0871               	movf	?__Umul8_16+1,w
  4857  060E  1283               	bcf	3,5	;RP0=0, select bank0
  4858  060F  1303               	bcf	3,6	;RP1=0, select bank0
  4859  0610  00B9               	movwf	___flmul@temp+1
  4860  0611  0870               	movf	?__Umul8_16,w
  4861  0612  00B8               	movwf	___flmul@temp
  4862  0613  0838               	movf	___flmul@temp,w
  4863  0614  00A8               	movwf	??___flmul
  4864  0615  0839               	movf	___flmul@temp+1,w
  4865  0616  00A9               	movwf	??___flmul+1
  4866  0617  01AA               	clrf	??___flmul+2
  4867  0618  01AB               	clrf	??___flmul+3
  4868  0619  0828               	movf	??___flmul,w
  4869  061A  07AE               	addwf	___flmul@grs,f
  4870  061B  0829               	movf	??___flmul+1,w
  4871  061C  1103               	clrz
  4872  061D  1803               	skipnc
  4873  061E  3E01               	addlw	1
  4874  061F  1D03               	btfss	3,2
  4875  0620  07AF               	addwf	___flmul@grs+1,f
  4876  0621  082A               	movf	??___flmul+2,w
  4877  0622  1103               	clrz
  4878  0623  1803               	skipnc
  4879  0624  3E01               	addlw	1
  4880  0625  1D03               	btfss	3,2
  4881  0626  07B0               	addwf	___flmul@grs+2,f
  4882  0627  082B               	movf	??___flmul+3,w
  4883  0628  1103               	clrz
  4884  0629  1803               	skipnc
  4885  062A  3E01               	addlw	1
  4886  062B  1D03               	btfss	3,2
  4887  062C  07B1               	addwf	___flmul@grs+3,f
  4888  062D  3008               	movlw	8
  4889  062E  00A8               	movwf	??___flmul
  4890  062F                     u2645:	
  4891  062F  1003               	clrc
  4892  0630  0DAE               	rlf	___flmul@grs,f
  4893  0631  0DAF               	rlf	___flmul@grs+1,f
  4894  0632  0DB0               	rlf	___flmul@grs+2,f
  4895  0633  0DB1               	rlf	___flmul@grs+3,f
  4896  0634  0BA8               	decfsz	??___flmul,f
  4897  0635  2E2F               	goto	u2645
  4898  0636  0820               	movf	___flmul@b,w
  4899  0637  00A8               	movwf	??___flmul
  4900  0638  0828               	movf	??___flmul,w
  4901  0639  00F0               	movwf	__Umul8_16@multiplicand
  4902  063A  0824               	movf	___flmul@a,w
  4903  063B  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4904  0640  0871               	movf	?__Umul8_16+1,w
  4905  0641  1283               	bcf	3,5	;RP0=0, select bank0
  4906  0642  1303               	bcf	3,6	;RP1=0, select bank0
  4907  0643  00B9               	movwf	___flmul@temp+1
  4908  0644  0870               	movf	?__Umul8_16,w
  4909  0645  00B8               	movwf	___flmul@temp
  4910  0646  0838               	movf	___flmul@temp,w
  4911  0647  00A8               	movwf	??___flmul
  4912  0648  0839               	movf	___flmul@temp+1,w
  4913  0649  00A9               	movwf	??___flmul+1
  4914  064A  01AA               	clrf	??___flmul+2
  4915  064B  01AB               	clrf	??___flmul+3
  4916  064C  0828               	movf	??___flmul,w
  4917  064D  07AE               	addwf	___flmul@grs,f
  4918  064E  0829               	movf	??___flmul+1,w
  4919  064F  1103               	clrz
  4920  0650  1803               	skipnc
  4921  0651  3E01               	addlw	1
  4922  0652  1D03               	btfss	3,2
  4923  0653  07AF               	addwf	___flmul@grs+1,f
  4924  0654  082A               	movf	??___flmul+2,w
  4925  0655  1103               	clrz
  4926  0656  1803               	skipnc
  4927  0657  3E01               	addlw	1
  4928  0658  1D03               	btfss	3,2
  4929  0659  07B0               	addwf	___flmul@grs+2,f
  4930  065A  082B               	movf	??___flmul+3,w
  4931  065B  1103               	clrz
  4932  065C  1803               	skipnc
  4933  065D  3E01               	addlw	1
  4934  065E  1D03               	btfss	3,2
  4935  065F  07B1               	addwf	___flmul@grs+3,f
  4936  0660  0821               	movf	___flmul@b+1,w
  4937  0661  00A8               	movwf	??___flmul
  4938  0662  0828               	movf	??___flmul,w
  4939  0663  00F0               	movwf	__Umul8_16@multiplicand
  4940  0664  0826               	movf	___flmul@a+2,w
  4941  0665  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4942  066A  0871               	movf	?__Umul8_16+1,w
  4943  066B  1283               	bcf	3,5	;RP0=0, select bank0
  4944  066C  1303               	bcf	3,6	;RP1=0, select bank0
  4945  066D  00B9               	movwf	___flmul@temp+1
  4946  066E  0870               	movf	?__Umul8_16,w
  4947  066F  00B8               	movwf	___flmul@temp
  4948  0670  0838               	movf	___flmul@temp,w
  4949  0671  00A8               	movwf	??___flmul
  4950  0672  0839               	movf	___flmul@temp+1,w
  4951  0673  00A9               	movwf	??___flmul+1
  4952  0674  01AA               	clrf	??___flmul+2
  4953  0675  01AB               	clrf	??___flmul+3
  4954  0676  0828               	movf	??___flmul,w
  4955  0677  07B4               	addwf	___flmul@prod,f
  4956  0678  0829               	movf	??___flmul+1,w
  4957  0679  1103               	clrz
  4958  067A  1803               	skipnc
  4959  067B  3E01               	addlw	1
  4960  067C  1D03               	btfss	3,2
  4961  067D  07B5               	addwf	___flmul@prod+1,f
  4962  067E  082A               	movf	??___flmul+2,w
  4963  067F  1103               	clrz
  4964  0680  1803               	skipnc
  4965  0681  3E01               	addlw	1
  4966  0682  1D03               	btfss	3,2
  4967  0683  07B6               	addwf	___flmul@prod+2,f
  4968  0684  082B               	movf	??___flmul+3,w
  4969  0685  1103               	clrz
  4970  0686  1803               	skipnc
  4971  0687  3E01               	addlw	1
  4972  0688  1D03               	btfss	3,2
  4973  0689  07B7               	addwf	___flmul@prod+3,f
  4974  068A  0822               	movf	___flmul@b+2,w
  4975  068B  00A8               	movwf	??___flmul
  4976  068C  0828               	movf	??___flmul,w
  4977  068D  00F0               	movwf	__Umul8_16@multiplicand
  4978  068E  0825               	movf	___flmul@a+1,w
  4979  068F  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  4980  0694  0871               	movf	?__Umul8_16+1,w
  4981  0695  1283               	bcf	3,5	;RP0=0, select bank0
  4982  0696  1303               	bcf	3,6	;RP1=0, select bank0
  4983  0697  00B9               	movwf	___flmul@temp+1
  4984  0698  0870               	movf	?__Umul8_16,w
  4985  0699  00B8               	movwf	___flmul@temp
  4986  069A  0838               	movf	___flmul@temp,w
  4987  069B  00A8               	movwf	??___flmul
  4988  069C  0839               	movf	___flmul@temp+1,w
  4989  069D  00A9               	movwf	??___flmul+1
  4990  069E  01AA               	clrf	??___flmul+2
  4991  069F  01AB               	clrf	??___flmul+3
  4992  06A0  0828               	movf	??___flmul,w
  4993  06A1  07B4               	addwf	___flmul@prod,f
  4994  06A2  0829               	movf	??___flmul+1,w
  4995  06A3  1103               	clrz
  4996  06A4  1803               	skipnc
  4997  06A5  3E01               	addlw	1
  4998  06A6  1D03               	btfss	3,2
  4999  06A7  07B5               	addwf	___flmul@prod+1,f
  5000  06A8  082A               	movf	??___flmul+2,w
  5001  06A9  1103               	clrz
  5002  06AA  1803               	skipnc
  5003  06AB  3E01               	addlw	1
  5004  06AC  1D03               	btfss	3,2
  5005  06AD  07B6               	addwf	___flmul@prod+2,f
  5006  06AE  082B               	movf	??___flmul+3,w
  5007  06AF  1103               	clrz
  5008  06B0  1803               	skipnc
  5009  06B1  3E01               	addlw	1
  5010  06B2  1D03               	btfss	3,2
  5011  06B3  07B7               	addwf	___flmul@prod+3,f
  5012  06B4  0822               	movf	___flmul@b+2,w
  5013  06B5  00A8               	movwf	??___flmul
  5014  06B6  0828               	movf	??___flmul,w
  5015  06B7  00F0               	movwf	__Umul8_16@multiplicand
  5016  06B8  0826               	movf	___flmul@a+2,w
  5017  06B9  160A  118A  26ED  120A  118A  	fcall	__Umul8_16
  5018  06BE  0871               	movf	?__Umul8_16+1,w
  5019  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  5020  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  5021  06C1  00B9               	movwf	___flmul@temp+1
  5022  06C2  0870               	movf	?__Umul8_16,w
  5023  06C3  00B8               	movwf	___flmul@temp
  5024  06C4  0838               	movf	___flmul@temp,w
  5025  06C5  00A8               	movwf	??___flmul
  5026  06C6  0839               	movf	___flmul@temp+1,w
  5027  06C7  00A9               	movwf	??___flmul+1
  5028  06C8  01AA               	clrf	??___flmul+2
  5029  06C9  01AB               	clrf	??___flmul+3
  5030  06CA  3008               	movlw	8
  5031  06CB                     u2685:	
  5032  06CB  1003               	clrc
  5033  06CC  0DA8               	rlf	??___flmul,f
  5034  06CD  0DA9               	rlf	??___flmul+1,f
  5035  06CE  0DAA               	rlf	??___flmul+2,f
  5036  06CF  0DAB               	rlf	??___flmul+3,f
  5037  06D0  3EFF               	addlw	-1
  5038  06D1  1D03               	skipz
  5039  06D2  2ECB               	goto	u2685
  5040  06D3  0828               	movf	??___flmul,w
  5041  06D4  07B4               	addwf	___flmul@prod,f
  5042  06D5  0829               	movf	??___flmul+1,w
  5043  06D6  1103               	clrz
  5044  06D7  1803               	skipnc
  5045  06D8  3E01               	addlw	1
  5046  06D9  1D03               	btfss	3,2
  5047  06DA  07B5               	addwf	___flmul@prod+1,f
  5048  06DB  082A               	movf	??___flmul+2,w
  5049  06DC  1103               	clrz
  5050  06DD  1803               	skipnc
  5051  06DE  3E01               	addlw	1
  5052  06DF  1D03               	btfss	3,2
  5053  06E0  07B6               	addwf	___flmul@prod+2,f
  5054  06E1  082B               	movf	??___flmul+3,w
  5055  06E2  1103               	clrz
  5056  06E3  1803               	skipnc
  5057  06E4  3E01               	addlw	1
  5058  06E5  1D03               	btfss	3,2
  5059  06E6  07B7               	addwf	___flmul@prod+3,f
  5060  06E7  082E               	movf	___flmul@grs,w
  5061  06E8  00A8               	movwf	??___flmul
  5062  06E9  082F               	movf	___flmul@grs+1,w
  5063  06EA  00A9               	movwf	??___flmul+1
  5064  06EB  0830               	movf	___flmul@grs+2,w
  5065  06EC  00AA               	movwf	??___flmul+2
  5066  06ED  0831               	movf	___flmul@grs+3,w
  5067  06EE  00AB               	movwf	??___flmul+3
  5068  06EF  3018               	movlw	24
  5069  06F0                     u2705:	
  5070  06F0  1003               	clrc
  5071  06F1  0CAB               	rrf	??___flmul+3,f
  5072  06F2  0CAA               	rrf	??___flmul+2,f
  5073  06F3  0CA9               	rrf	??___flmul+1,f
  5074  06F4  0CA8               	rrf	??___flmul,f
  5075  06F5  3EFF               	addlw	-1
  5076  06F6  1D03               	skipz
  5077  06F7  2EF0               	goto	u2705
  5078  06F8  0828               	movf	??___flmul,w
  5079  06F9  07B4               	addwf	___flmul@prod,f
  5080  06FA  0829               	movf	??___flmul+1,w
  5081  06FB  1103               	clrz
  5082  06FC  1803               	skipnc
  5083  06FD  3E01               	addlw	1
  5084  06FE  1D03               	btfss	3,2
  5085  06FF  07B5               	addwf	___flmul@prod+1,f
  5086  0700  082A               	movf	??___flmul+2,w
  5087  0701  1103               	clrz
  5088  0702  1803               	skipnc
  5089  0703  3E01               	addlw	1
  5090  0704  1D03               	btfss	3,2
  5091  0705  07B6               	addwf	___flmul@prod+2,f
  5092  0706  082B               	movf	??___flmul+3,w
  5093  0707  1103               	clrz
  5094  0708  1803               	skipnc
  5095  0709  3E01               	addlw	1
  5096  070A  1D03               	btfss	3,2
  5097  070B  07B7               	addwf	___flmul@prod+3,f
  5098  070C  3008               	movlw	8
  5099  070D  00A8               	movwf	??___flmul
  5100  070E                     u2725:	
  5101  070E  1003               	clrc
  5102  070F  0DAE               	rlf	___flmul@grs,f
  5103  0710  0DAF               	rlf	___flmul@grs+1,f
  5104  0711  0DB0               	rlf	___flmul@grs+2,f
  5105  0712  0DB1               	rlf	___flmul@grs+3,f
  5106  0713  0BA8               	decfsz	??___flmul,f
  5107  0714  2F0E               	goto	u2725
  5108  0715  0833               	movf	___flmul@bexp,w
  5109  0716  0732               	addwf	___flmul@aexp,w
  5110  0717  00A8               	movwf	??___flmul
  5111  0718  01A9               	clrf	??___flmul+1
  5112  0719  0DA9               	rlf	??___flmul+1,f
  5113  071A  0828               	movf	??___flmul,w
  5114  071B  3E82               	addlw	130
  5115  071C  00B8               	movwf	___flmul@temp
  5116  071D  0829               	movf	??___flmul+1,w
  5117  071E  1803               	skipnc
  5118  071F  3E01               	addlw	1
  5119  0720  3EFF               	addlw	255
  5120  0721  00B9               	movwf	___flmul@temp+1
  5121  0722                     l2353:	
  5122  0722  1BB6               	btfsc	___flmul@prod+2,7
  5123  0723  2F3F               	goto	l2355
  5124  0724  3001               	movlw	1
  5125  0725  00A8               	movwf	??___flmul
  5126  0726                     u2735:	
  5127  0726  1003               	clrc
  5128  0727  0DB4               	rlf	___flmul@prod,f
  5129  0728  0DB5               	rlf	___flmul@prod+1,f
  5130  0729  0DB6               	rlf	___flmul@prod+2,f
  5131  072A  0DB7               	rlf	___flmul@prod+3,f
  5132  072B  0BA8               	decfsz	??___flmul,f
  5133  072C  2F26               	goto	u2735
  5134  072D  1BB1               	btfsc	___flmul@grs+3,7
  5135  072E  1434               	bsf	___flmul@prod,0
  5136  072F  3001               	movlw	1
  5137  0730  00A8               	movwf	??___flmul
  5138  0731                     u2755:	
  5139  0731  1003               	clrc
  5140  0732  0DAE               	rlf	___flmul@grs,f
  5141  0733  0DAF               	rlf	___flmul@grs+1,f
  5142  0734  0DB0               	rlf	___flmul@grs+2,f
  5143  0735  0DB1               	rlf	___flmul@grs+3,f
  5144  0736  0BA8               	decfsz	??___flmul,f
  5145  0737  2F31               	goto	u2755
  5146  0738  30FF               	movlw	255
  5147  0739  07B8               	addwf	___flmul@temp,f
  5148  073A  1803               	skipnc
  5149  073B  0AB9               	incf	___flmul@temp+1,f
  5150  073C  30FF               	movlw	255
  5151  073D  07B9               	addwf	___flmul@temp+1,f
  5152  073E  2F22               	goto	l2353
  5153  073F                     l2355:	
  5154  073F  01B2               	clrf	___flmul@aexp
  5155  0740  1FB1               	btfss	___flmul@grs+3,7
  5156  0741  2F58               	goto	l2365
  5157  0742  30FF               	movlw	255
  5158  0743  052E               	andwf	___flmul@grs,w
  5159  0744  00A8               	movwf	??___flmul
  5160  0745  30FF               	movlw	255
  5161  0746  052F               	andwf	___flmul@grs+1,w
  5162  0747  00A9               	movwf	??___flmul+1
  5163  0748  30FF               	movlw	255
  5164  0749  0530               	andwf	___flmul@grs+2,w
  5165  074A  00AA               	movwf	??___flmul+2
  5166  074B  307F               	movlw	127
  5167  074C  0531               	andwf	___flmul@grs+3,w
  5168  074D  00AB               	movwf	??___flmul+3
  5169  074E  082B               	movf	??___flmul+3,w
  5170  074F  042A               	iorwf	??___flmul+2,w
  5171  0750  0429               	iorwf	??___flmul+1,w
  5172  0751  0428               	iorwf	??___flmul,w
  5173  0752  1903               	skipnz
  5174  0753  1834               	btfsc	___flmul@prod,0
  5175  0754  2F56               	goto	l2361
  5176  0755  2F58               	goto	l2365
  5177  0756                     l2361:	
  5178  0756  01B2               	clrf	___flmul@aexp
  5179  0757  0AB2               	incf	___flmul@aexp,f
  5180  0758                     l2365:	
  5181  0758  0832               	movf	___flmul@aexp,w
  5182  0759  1903               	btfsc	3,2
  5183  075A  2F8A               	goto	l2375
  5184  075B  3001               	movlw	1
  5185  075C  07B4               	addwf	___flmul@prod,f
  5186  075D  3000               	movlw	0
  5187  075E  1803               	skipnc
  5188  075F  3001               	movlw	1
  5189  0760  07B5               	addwf	___flmul@prod+1,f
  5190  0761  3000               	movlw	0
  5191  0762  1803               	skipnc
  5192  0763  3001               	movlw	1
  5193  0764  07B6               	addwf	___flmul@prod+2,f
  5194  0765  3000               	movlw	0
  5195  0766  1803               	skipnc
  5196  0767  3001               	movlw	1
  5197  0768  07B7               	addwf	___flmul@prod+3,f
  5198  0769  1C37               	btfss	___flmul@prod+3,0
  5199  076A  2F8A               	goto	l2375
  5200  076B  0834               	movf	___flmul@prod,w
  5201  076C  00A8               	movwf	??___flmul
  5202  076D  0835               	movf	___flmul@prod+1,w
  5203  076E  00A9               	movwf	??___flmul+1
  5204  076F  0836               	movf	___flmul@prod+2,w
  5205  0770  00AA               	movwf	??___flmul+2
  5206  0771  0837               	movf	___flmul@prod+3,w
  5207  0772  00AB               	movwf	??___flmul+3
  5208  0773  3001               	movlw	1
  5209  0774  00AC               	movwf	??___flmul+4
  5210  0775                     u2825:	
  5211  0775  0D2B               	rlf	??___flmul+3,w
  5212  0776  0CAB               	rrf	??___flmul+3,f
  5213  0777  0CAA               	rrf	??___flmul+2,f
  5214  0778  0CA9               	rrf	??___flmul+1,f
  5215  0779  0CA8               	rrf	??___flmul,f
  5216  077A  0BAC               	decfsz	??___flmul+4,f
  5217  077B  2F75               	goto	u2825
  5218  077C  082B               	movf	??___flmul+3,w
  5219  077D  00B7               	movwf	___flmul@prod+3
  5220  077E  082A               	movf	??___flmul+2,w
  5221  077F  00B6               	movwf	___flmul@prod+2
  5222  0780  0829               	movf	??___flmul+1,w
  5223  0781  00B5               	movwf	___flmul@prod+1
  5224  0782  0828               	movf	??___flmul,w
  5225  0783  00B4               	movwf	___flmul@prod
  5226  0784  3001               	movlw	1
  5227  0785  07B8               	addwf	___flmul@temp,f
  5228  0786  1803               	skipnc
  5229  0787  0AB9               	incf	___flmul@temp+1,f
  5230  0788  3000               	movlw	0
  5231  0789  07B9               	addwf	___flmul@temp+1,f
  5232  078A                     l2375:	
  5233  078A  0839               	movf	___flmul@temp+1,w
  5234  078B  3A80               	xorlw	128
  5235  078C  00FF               	movwf	127
  5236  078D  3080               	movlw	128
  5237  078E  027F               	subwf	127,w
  5238  078F  1D03               	skipz
  5239  0790  2F93               	goto	u2835
  5240  0791  30FF               	movlw	255
  5241  0792  0238               	subwf	___flmul@temp,w
  5242  0793                     u2835:	
  5243  0793  1C03               	skipc
  5244  0794  2FA0               	goto	l2379
  5245  0795  307F               	movlw	127
  5246  0796  1283               	bcf	3,5	;RP0=0, select bank0
  5247  0797  1303               	bcf	3,6	;RP1=0, select bank0
  5248  0798  00B7               	movwf	___flmul@prod+3
  5249  0799  3080               	movlw	128
  5250  079A  00B6               	movwf	___flmul@prod+2
  5251  079B  3000               	movlw	0
  5252  079C  00B5               	movwf	___flmul@prod+1
  5253  079D  3000               	movlw	0
  5254  079E  00B4               	movwf	___flmul@prod
  5255  079F  2FD0               	goto	l794
  5256  07A0                     l2379:	
  5257  07A0  1283               	bcf	3,5	;RP0=0, select bank0
  5258  07A1  1303               	bcf	3,6	;RP1=0, select bank0
  5259  07A2  0839               	movf	___flmul@temp+1,w
  5260  07A3  3A80               	xorlw	128
  5261  07A4  00FF               	movwf	127
  5262  07A5  3080               	movlw	128
  5263  07A6  027F               	subwf	127,w
  5264  07A7  1D03               	skipz
  5265  07A8  2FAB               	goto	u2845
  5266  07A9  3001               	movlw	1
  5267  07AA  0238               	subwf	___flmul@temp,w
  5268  07AB                     u2845:	
  5269  07AB  1803               	skipnc
  5270  07AC  2FB9               	goto	l2385
  5271  07AD  3000               	movlw	0
  5272  07AE  1283               	bcf	3,5	;RP0=0, select bank0
  5273  07AF  1303               	bcf	3,6	;RP1=0, select bank0
  5274  07B0  00B7               	movwf	___flmul@prod+3
  5275  07B1  3000               	movlw	0
  5276  07B2  00B6               	movwf	___flmul@prod+2
  5277  07B3  3000               	movlw	0
  5278  07B4  00B5               	movwf	___flmul@prod+1
  5279  07B5  3000               	movlw	0
  5280  07B6  00B4               	movwf	___flmul@prod
  5281  07B7  01AD               	clrf	___flmul@sign
  5282  07B8  2FD0               	goto	l794
  5283  07B9                     l2385:	
  5284  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  5285  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  5286  07BB  0838               	movf	___flmul@temp,w
  5287  07BC  00A8               	movwf	??___flmul
  5288  07BD  0828               	movf	??___flmul,w
  5289  07BE  00B3               	movwf	___flmul@bexp
  5290  07BF  30FF               	movlw	255
  5291  07C0  05B4               	andwf	___flmul@prod,f
  5292  07C1  30FF               	movlw	255
  5293  07C2  05B5               	andwf	___flmul@prod+1,f
  5294  07C3  307F               	movlw	127
  5295  07C4  05B6               	andwf	___flmul@prod+2,f
  5296  07C5  3000               	movlw	0
  5297  07C6  05B7               	andwf	___flmul@prod+3,f
  5298  07C7  1833               	btfsc	___flmul@bexp,0
  5299  07C8  17B6               	bsf	___flmul@prod+2,7
  5300  07C9  0833               	movf	___flmul@bexp,w
  5301  07CA  00A8               	movwf	??___flmul
  5302  07CB  1003               	clrc
  5303  07CC  0C28               	rrf	??___flmul,w
  5304  07CD  00A9               	movwf	??___flmul+1
  5305  07CE  0829               	movf	??___flmul+1,w
  5306  07CF  00B7               	movwf	___flmul@prod+3
  5307  07D0                     l794:	
  5308  07D0  082D               	movf	___flmul@sign,w
  5309  07D1  00A8               	movwf	??___flmul
  5310  07D2  0828               	movf	??___flmul,w
  5311  07D3  04B7               	iorwf	___flmul@prod+3,f
  5312  07D4  0837               	movf	___flmul@prod+3,w
  5313  07D5  00A3               	movwf	?___flmul+3
  5314  07D6  0836               	movf	___flmul@prod+2,w
  5315  07D7  00A2               	movwf	?___flmul+2
  5316  07D8  0835               	movf	___flmul@prod+1,w
  5317  07D9  00A1               	movwf	?___flmul+1
  5318  07DA  0834               	movf	___flmul@prod,w
  5319  07DB  00A0               	movwf	?___flmul
  5320  07DC  0008               	return
  5321  07DD                     __end_of___flmul:	
  5322                           
  5323                           	psect	text17
  5324  16ED                     __ptext17:	
  5325 ;; *************** function __Umul8_16 *****************
  5326 ;; Defined at:
  5327 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8_16.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  multiplier      1    wreg     unsigned char 
  5330 ;;  multiplicand    1    0[COMMON] unsigned char 
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;  multiplier      1    8[COMMON] unsigned char 
  5333 ;;  word_mpld       2    6[COMMON] unsigned int 
  5334 ;;  product         2    4[COMMON] unsigned int 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  2    0[COMMON] unsigned int 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5344 ;;      Params:         2       0       0       0       0
  5345 ;;      Locals:         5       0       0       0       0
  5346 ;;      Temps:          2       0       0       0       0
  5347 ;;      Totals:         9       0       0       0       0
  5348 ;;Total ram usage:        9 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; This function calls:
  5351 ;;		Nothing
  5352 ;; This function is called by:
  5353 ;;		___flmul
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           
  5358                           ;psect for function __Umul8_16
  5359  16ED                     __Umul8_16:	
  5360                           
  5361                           ;incstack = 0
  5362                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5363                           ;__Umul8_16@multiplier stored from wreg
  5364  16ED  00F8               	movwf	__Umul8_16@multiplier
  5365  16EE  01F4               	clrf	__Umul8_16@product
  5366  16EF  01F5               	clrf	__Umul8_16@product+1
  5367  16F0  0870               	movf	__Umul8_16@multiplicand,w
  5368  16F1  00F2               	movwf	??__Umul8_16
  5369  16F2  01F3               	clrf	??__Umul8_16+1
  5370  16F3  0872               	movf	??__Umul8_16,w
  5371  16F4  00F6               	movwf	__Umul8_16@word_mpld
  5372  16F5  0873               	movf	??__Umul8_16+1,w
  5373  16F6  00F7               	movwf	__Umul8_16@word_mpld+1
  5374  16F7                     l2147:	
  5375  16F7  1C78               	btfss	__Umul8_16@multiplier,0
  5376  16F8  2EFF               	goto	l839
  5377  16F9  0876               	movf	__Umul8_16@word_mpld,w
  5378  16FA  07F4               	addwf	__Umul8_16@product,f
  5379  16FB  1803               	skipnc
  5380  16FC  0AF5               	incf	__Umul8_16@product+1,f
  5381  16FD  0877               	movf	__Umul8_16@word_mpld+1,w
  5382  16FE  07F5               	addwf	__Umul8_16@product+1,f
  5383  16FF                     l839:	
  5384  16FF  3001               	movlw	1
  5385  1700                     u2305:	
  5386  1700  1003               	clrc
  5387  1701  0DF6               	rlf	__Umul8_16@word_mpld,f
  5388  1702  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  5389  1703  3EFF               	addlw	-1
  5390  1704  1D03               	skipz
  5391  1705  2F00               	goto	u2305
  5392  1706  1003               	clrc
  5393  1707  0CF8               	rrf	__Umul8_16@multiplier,f
  5394  1708  0878               	movf	__Umul8_16@multiplier,w
  5395  1709  1D03               	btfss	3,2
  5396  170A  2EF7               	goto	l2147
  5397  170B  0875               	movf	__Umul8_16@product+1,w
  5398  170C  00F1               	movwf	?__Umul8_16+1
  5399  170D  0874               	movf	__Umul8_16@product,w
  5400  170E  00F0               	movwf	?__Umul8_16
  5401  170F  0008               	return
  5402  1710                     __end_of__Umul8_16:	
  5403                           
  5404                           	psect	text18
  5405  0A9B                     __ptext18:	
  5406 ;; *************** function ___flge *****************
  5407 ;; Defined at:
  5408 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\flge.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  ff1             4   26[BANK0 ] unsigned int 
  5411 ;;  ff2             4   30[BANK0 ] unsigned int 
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;		None               void
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5423 ;;      Params:         0       8       0       0       0
  5424 ;;      Locals:         0       0       0       0       0
  5425 ;;      Temps:          0       4       0       0       0
  5426 ;;      Totals:         0      12       0       0       0
  5427 ;;Total ram usage:       12 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_VerificarInversionGiro
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           
  5437                           ;psect for function ___flge
  5438  0A9B                     ___flge:	
  5439                           
  5440                           ;incstack = 0
  5441                           ; Regs used in ___flge: [wreg+status,2+status,0]
  5442  0A9B  3000               	movlw	0
  5443  0A9C  1283               	bcf	3,5	;RP0=0, select bank0
  5444  0A9D  1303               	bcf	3,6	;RP1=0, select bank0
  5445  0A9E  053A               	andwf	___flge@ff1,w
  5446  0A9F  00C2               	movwf	??___flge
  5447  0AA0  3000               	movlw	0
  5448  0AA1  053B               	andwf	___flge@ff1+1,w
  5449  0AA2  00C3               	movwf	??___flge+1
  5450  0AA3  3080               	movlw	128
  5451  0AA4  053C               	andwf	___flge@ff1+2,w
  5452  0AA5  00C4               	movwf	??___flge+2
  5453  0AA6  307F               	movlw	127
  5454  0AA7  053D               	andwf	___flge@ff1+3,w
  5455  0AA8  00C5               	movwf	??___flge+3
  5456  0AA9  0845               	movf	??___flge+3,w
  5457  0AAA  0444               	iorwf	??___flge+2,w
  5458  0AAB  0443               	iorwf	??___flge+1,w
  5459  0AAC  0442               	iorwf	??___flge,w
  5460  0AAD  1D03               	skipz
  5461  0AAE  2AB7               	goto	l567
  5462  0AAF  3000               	movlw	0
  5463  0AB0  00BD               	movwf	___flge@ff1+3
  5464  0AB1  3000               	movlw	0
  5465  0AB2  00BC               	movwf	___flge@ff1+2
  5466  0AB3  3000               	movlw	0
  5467  0AB4  00BB               	movwf	___flge@ff1+1
  5468  0AB5  3000               	movlw	0
  5469  0AB6  00BA               	movwf	___flge@ff1
  5470  0AB7                     l567:	
  5471  0AB7  3000               	movlw	0
  5472  0AB8  053E               	andwf	___flge@ff2,w
  5473  0AB9  00C2               	movwf	??___flge
  5474  0ABA  3000               	movlw	0
  5475  0ABB  053F               	andwf	___flge@ff2+1,w
  5476  0ABC  00C3               	movwf	??___flge+1
  5477  0ABD  3080               	movlw	128
  5478  0ABE  0540               	andwf	___flge@ff2+2,w
  5479  0ABF  00C4               	movwf	??___flge+2
  5480  0AC0  307F               	movlw	127
  5481  0AC1  0541               	andwf	___flge@ff2+3,w
  5482  0AC2  00C5               	movwf	??___flge+3
  5483  0AC3  0845               	movf	??___flge+3,w
  5484  0AC4  0444               	iorwf	??___flge+2,w
  5485  0AC5  0443               	iorwf	??___flge+1,w
  5486  0AC6  0442               	iorwf	??___flge,w
  5487  0AC7  1D03               	skipz
  5488  0AC8  2AD1               	goto	l2243
  5489  0AC9  3000               	movlw	0
  5490  0ACA  00C1               	movwf	___flge@ff2+3
  5491  0ACB  3000               	movlw	0
  5492  0ACC  00C0               	movwf	___flge@ff2+2
  5493  0ACD  3000               	movlw	0
  5494  0ACE  00BF               	movwf	___flge@ff2+1
  5495  0ACF  3000               	movlw	0
  5496  0AD0  00BE               	movwf	___flge@ff2
  5497  0AD1                     l2243:	
  5498  0AD1  1FBD               	btfss	___flge@ff1+3,7
  5499  0AD2  2AF7               	goto	l2247
  5500  0AD3  3000               	movlw	0
  5501  0AD4  00C2               	movwf	??___flge
  5502  0AD5  3000               	movlw	0
  5503  0AD6  00C3               	movwf	??___flge+1
  5504  0AD7  3000               	movlw	0
  5505  0AD8  00C4               	movwf	??___flge+2
  5506  0AD9  3080               	movlw	128
  5507  0ADA  00C5               	movwf	??___flge+3
  5508  0ADB  083A               	movf	___flge@ff1,w
  5509  0ADC  02C2               	subwf	??___flge,f
  5510  0ADD  083B               	movf	___flge@ff1+1,w
  5511  0ADE  1C03               	skipc
  5512  0ADF  0F3B               	incfsz	___flge@ff1+1,w
  5513  0AE0  2AE2               	goto	u2451
  5514  0AE1  2AE3               	goto	u2452
  5515  0AE2                     u2451:	
  5516  0AE2  02C3               	subwf	??___flge+1,f
  5517  0AE3                     u2452:	
  5518  0AE3  083C               	movf	___flge@ff1+2,w
  5519  0AE4  1C03               	skipc
  5520  0AE5  0F3C               	incfsz	___flge@ff1+2,w
  5521  0AE6  2AE8               	goto	u2453
  5522  0AE7  2AE9               	goto	u2454
  5523  0AE8                     u2453:	
  5524  0AE8  02C4               	subwf	??___flge+2,f
  5525  0AE9                     u2454:	
  5526  0AE9  083D               	movf	___flge@ff1+3,w
  5527  0AEA  1C03               	skipc
  5528  0AEB  0F3D               	incfsz	___flge@ff1+3,w
  5529  0AEC  2AEE               	goto	u2455
  5530  0AED  2AEF               	goto	u2456
  5531  0AEE                     u2455:	
  5532  0AEE  02C5               	subwf	??___flge+3,f
  5533  0AEF                     u2456:	
  5534  0AEF  0845               	movf	??___flge+3,w
  5535  0AF0  00BD               	movwf	___flge@ff1+3
  5536  0AF1  0844               	movf	??___flge+2,w
  5537  0AF2  00BC               	movwf	___flge@ff1+2
  5538  0AF3  0843               	movf	??___flge+1,w
  5539  0AF4  00BB               	movwf	___flge@ff1+1
  5540  0AF5  0842               	movf	??___flge,w
  5541  0AF6  00BA               	movwf	___flge@ff1
  5542  0AF7                     l2247:	
  5543  0AF7  1FC1               	btfss	___flge@ff2+3,7
  5544  0AF8  2B1D               	goto	l570
  5545  0AF9  3000               	movlw	0
  5546  0AFA  00C2               	movwf	??___flge
  5547  0AFB  3000               	movlw	0
  5548  0AFC  00C3               	movwf	??___flge+1
  5549  0AFD  3000               	movlw	0
  5550  0AFE  00C4               	movwf	??___flge+2
  5551  0AFF  3080               	movlw	128
  5552  0B00  00C5               	movwf	??___flge+3
  5553  0B01  083E               	movf	___flge@ff2,w
  5554  0B02  02C2               	subwf	??___flge,f
  5555  0B03  083F               	movf	___flge@ff2+1,w
  5556  0B04  1C03               	skipc
  5557  0B05  0F3F               	incfsz	___flge@ff2+1,w
  5558  0B06  2B08               	goto	u2471
  5559  0B07  2B09               	goto	u2472
  5560  0B08                     u2471:	
  5561  0B08  02C3               	subwf	??___flge+1,f
  5562  0B09                     u2472:	
  5563  0B09  0840               	movf	___flge@ff2+2,w
  5564  0B0A  1C03               	skipc
  5565  0B0B  0F40               	incfsz	___flge@ff2+2,w
  5566  0B0C  2B0E               	goto	u2473
  5567  0B0D  2B0F               	goto	u2474
  5568  0B0E                     u2473:	
  5569  0B0E  02C4               	subwf	??___flge+2,f
  5570  0B0F                     u2474:	
  5571  0B0F  0841               	movf	___flge@ff2+3,w
  5572  0B10  1C03               	skipc
  5573  0B11  0F41               	incfsz	___flge@ff2+3,w
  5574  0B12  2B14               	goto	u2475
  5575  0B13  2B15               	goto	u2476
  5576  0B14                     u2475:	
  5577  0B14  02C5               	subwf	??___flge+3,f
  5578  0B15                     u2476:	
  5579  0B15  0845               	movf	??___flge+3,w
  5580  0B16  00C1               	movwf	___flge@ff2+3
  5581  0B17  0844               	movf	??___flge+2,w
  5582  0B18  00C0               	movwf	___flge@ff2+2
  5583  0B19  0843               	movf	??___flge+1,w
  5584  0B1A  00BF               	movwf	___flge@ff2+1
  5585  0B1B  0842               	movf	??___flge,w
  5586  0B1C  00BE               	movwf	___flge@ff2
  5587  0B1D                     l570:	
  5588  0B1D  3080               	movlw	128
  5589  0B1E  06BD               	xorwf	___flge@ff1+3,f
  5590  0B1F  3080               	movlw	128
  5591  0B20  06C1               	xorwf	___flge@ff2+3,f
  5592  0B21  0841               	movf	___flge@ff2+3,w
  5593  0B22  023D               	subwf	___flge@ff1+3,w
  5594  0B23  1D03               	skipz
  5595  0B24  0008               	return
  5596  0B25  0840               	movf	___flge@ff2+2,w
  5597  0B26  023C               	subwf	___flge@ff1+2,w
  5598  0B27  1D03               	skipz
  5599  0B28  0008               	return
  5600  0B29  083F               	movf	___flge@ff2+1,w
  5601  0B2A  023B               	subwf	___flge@ff1+1,w
  5602  0B2B  1D03               	skipz
  5603  0B2C  0008               	return
  5604  0B2D  083E               	movf	___flge@ff2,w
  5605  0B2E  023A               	subwf	___flge@ff1,w
  5606  0B2F  0008               	return
  5607  0B30                     __end_of___flge:	
  5608                           
  5609                           	psect	text19
  5610  1680                     __ptext19:	
  5611 ;; *************** function _Lcd_Write_Integer *****************
  5612 ;; Defined at:
  5613 ;;		line 96 in file "./lcd.h"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  a               2   37[BANK0 ] int 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;  Data           10   40[BANK0 ] unsigned char [10]
  5618 ;; Return value:  Size  Location     Type
  5619 ;;                  1    wreg      void 
  5620 ;; Registers used:
  5621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5622 ;; Tracked objects:
  5623 ;;		On entry : 0/0
  5624 ;;		On exit  : 0/0
  5625 ;;		Unchanged: 0/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5627 ;;      Params:         0       2       0       0       0
  5628 ;;      Locals:         0      10       0       0       0
  5629 ;;      Temps:          0       1       0       0       0
  5630 ;;      Totals:         0      13       0       0       0
  5631 ;;Total ram usage:       13 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    3
  5634 ;; This function calls:
  5635 ;;		_Lcd_Write_String
  5636 ;;		_sprintf
  5637 ;; This function is called by:
  5638 ;;		_configurarHorario
  5639 ;;		_configurarAntiHorario
  5640 ;;		_Encoder
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           
  5645                           ;psect for function _Lcd_Write_Integer
  5646  1680                     _Lcd_Write_Integer:	
  5647                           
  5648                           ;./lcd.h: 97:     char Data[10];;./lcd.h: 98:     sprintf(Data, "%d", a);
  5649                           
  5650                           ;incstack = 0
  5651                           ; Regs used in _Lcd_Write_Integer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5652  1680  3067               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  5653  1681  1283               	bcf	3,5	;RP0=0, select bank0
  5654  1682  1303               	bcf	3,6	;RP1=0, select bank0
  5655  1683  00C7               	movwf	??_Lcd_Write_Integer
  5656  1684  0847               	movf	??_Lcd_Write_Integer,w
  5657  1685  00A0               	movwf	sprintf@f
  5658  1686  0846               	movf	Lcd_Write_Integer@a+1,w
  5659  1687  00A2               	movwf	?_sprintf+2
  5660  1688  0845               	movf	Lcd_Write_Integer@a,w
  5661  1689  00A1               	movwf	?_sprintf+1
  5662  168A  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5663  168B  120A  158A  2540  160A  118A  	fcall	_sprintf
  5664                           
  5665                           ;./lcd.h: 99:     Lcd_Write_String(Data);
  5666  1690  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5667  1691  00F5               	movwf	Lcd_Write_String@a
  5668  1692  3000               	movlw	0
  5669  1693  00F6               	movwf	Lcd_Write_String@a+1
  5670  1694  160A  118A  2779   	fcall	_Lcd_Write_String
  5671  1697  0008               	return
  5672  1698                     __end_of_Lcd_Write_Integer:	
  5673                           
  5674                           	psect	text20
  5675  0D40                     __ptext20:	
  5676 ;; *************** function _sprintf *****************
  5677 ;; Defined at:
  5678 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  sp              1    wreg     PTR unsigned char 
  5681 ;;		 -> UART_Write_Integer@Data(10), Lcd_Write_Integer@Data(10), 
  5682 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  5683 ;;		 -> STR_2(3), STR_1(3), 
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  5686 ;;		 -> UART_Write_Integer@Data(10), Lcd_Write_Integer@Data(10), 
  5687 ;;  tmpval          4    0        struct .
  5688 ;;  val             2    9[BANK0 ] unsigned int 
  5689 ;;  cp              2    0        PTR const unsigned char 
  5690 ;;  len             2    0        unsigned int 
  5691 ;;  c               1   12[BANK0 ] unsigned char 
  5692 ;;  prec            1    8[BANK0 ] char 
  5693 ;;  flag            1    7[BANK0 ] unsigned char 
  5694 ;;  ap              1    6[BANK0 ] PTR void [1]
  5695 ;;		 -> ?_sprintf(2), 
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  2    0[BANK0 ] int 
  5698 ;; Registers used:
  5699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5705 ;;      Params:         0       3       0       0       0
  5706 ;;      Locals:         0       7       0       0       0
  5707 ;;      Temps:          0       3       0       0       0
  5708 ;;      Totals:         0      13       0       0       0
  5709 ;;Total ram usage:       13 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    1
  5712 ;; This function calls:
  5713 ;;		___lwdiv
  5714 ;;		___lwmod
  5715 ;; This function is called by:
  5716 ;;		_Lcd_Write_Integer
  5717 ;;		_UART_Write_Integer
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           
  5722                           ;psect for function _sprintf
  5723  0D40                     _sprintf:	
  5724                           
  5725                           ;incstack = 0
  5726                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5727                           ;sprintf@sp stored from wreg
  5728  0D40  1283               	bcf	3,5	;RP0=0, select bank0
  5729  0D41  1303               	bcf	3,6	;RP1=0, select bank0
  5730  0D42  00AB               	movwf	sprintf@sp
  5731                           
  5732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5733  0D43  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  5734  0D44  00A3               	movwf	??_sprintf
  5735  0D45  0823               	movf	??_sprintf,w
  5736  0D46  00A6               	movwf	sprintf@ap
  5737  0D47                     l2227:	
  5738                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5739                           
  5740                           
  5741                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5742  0D47  3001               	movlw	1
  5743  0D48  07A0               	addwf	sprintf@f,f
  5744  0D49  30FF               	movlw	-1
  5745  0D4A  0720               	addwf	sprintf@f,w
  5746  0D4B  0084               	movwf	4
  5747  0D4C  120A  158A  200A  120A  158A  	fcall	stringdir
  5748  0D51  00A3               	movwf	??_sprintf
  5749  0D52  0823               	movf	??_sprintf,w
  5750  0D53  00AC               	movwf	sprintf@c
  5751  0D54  082C               	movf	sprintf@c,w
  5752  0D55  1903               	btfsc	3,2
  5753  0D56  2E13               	goto	l2229
  5754                           
  5755                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5756  0D57  3025               	movlw	37
  5757  0D58  062C               	xorwf	sprintf@c,w
  5758  0D59  1903               	btfsc	3,2
  5759  0D5A  2D67               	goto	l2183
  5760                           
  5761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5762  0D5B  082C               	movf	sprintf@c,w
  5763  0D5C  00A3               	movwf	??_sprintf
  5764  0D5D  082B               	movf	sprintf@sp,w
  5765  0D5E  0084               	movwf	4
  5766  0D5F  0823               	movf	??_sprintf,w
  5767  0D60  1383               	bcf	3,7	;select IRP bank0
  5768  0D61  0080               	movwf	0
  5769  0D62  3001               	movlw	1
  5770  0D63  00A3               	movwf	??_sprintf
  5771  0D64  0823               	movf	??_sprintf,w
  5772  0D65  07AB               	addwf	sprintf@sp,f
  5773                           
  5774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5775  0D66  2D47               	goto	l2227
  5776  0D67                     l2183:	
  5777                           
  5778                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5779  0D67  01A7               	clrf	sprintf@flag
  5780                           
  5781                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5782  0D68  3001               	movlw	1
  5783  0D69  07A0               	addwf	sprintf@f,f
  5784  0D6A  30FF               	movlw	-1
  5785  0D6B  0720               	addwf	sprintf@f,w
  5786  0D6C  0084               	movwf	4
  5787  0D6D  120A  158A  200A  120A  158A  	fcall	stringdir
  5788  0D72  00AC               	movwf	sprintf@c
  5789  0D73  00A3               	movwf	??_sprintf
  5790  0D74  01A4               	clrf	??_sprintf+1
  5791                           
  5792                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5793                           ; Switch size 1, requested type "simple"
  5794                           ; Number of cases is 1, Range of values is 0 to 0
  5795                           ; switch strategies available:
  5796                           ; Name         Instructions Cycles
  5797                           ; simple_byte            4     3 (average)
  5798                           ; direct_byte           11     8 (fixed)
  5799                           ; jumptable            260     6 (fixed)
  5800                           ;	Chosen strategy is simple_byte
  5801  0D75  0824               	movf	??_sprintf+1,w
  5802  0D76  3A00               	xorlw	0	; case 0
  5803  0D77  1903               	skipnz
  5804  0D78  2D7A               	goto	l3191
  5805  0D79  2D47               	goto	l2227
  5806  0D7A                     l3191:	
  5807                           
  5808                           ; Switch size 1, requested type "simple"
  5809                           ; Number of cases is 3, Range of values is 0 to 105
  5810                           ; switch strategies available:
  5811                           ; Name         Instructions Cycles
  5812                           ; simple_byte           10     6 (average)
  5813                           ; jumptable            260     6 (fixed)
  5814                           ;	Chosen strategy is simple_byte
  5815  0D7A  0823               	movf	??_sprintf,w
  5816  0D7B  3A00               	xorlw	0	; case 0
  5817  0D7C  1903               	skipnz
  5818  0D7D  2E13               	goto	l2229
  5819  0D7E  3A64               	xorlw	100	; case 100
  5820  0D7F  1903               	skipnz
  5821  0D80  2D85               	goto	l2189
  5822  0D81  3A0D               	xorlw	13	; case 105
  5823  0D82  1903               	skipnz
  5824  0D83  2D85               	goto	l2189
  5825  0D84  2D47               	goto	l2227
  5826  0D85                     l2189:	
  5827                           
  5828                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5829  0D85  0826               	movf	sprintf@ap,w
  5830  0D86  0084               	movwf	4
  5831  0D87  1383               	bcf	3,7	;select IRP bank0
  5832  0D88  0800               	movf	0,w
  5833  0D89  00A9               	movwf	sprintf@val
  5834  0D8A  0A84               	incf	4,f
  5835  0D8B  0800               	movf	0,w
  5836  0D8C  00AA               	movwf	sprintf@val+1
  5837  0D8D  3002               	movlw	2
  5838  0D8E  00A3               	movwf	??_sprintf
  5839  0D8F  0823               	movf	??_sprintf,w
  5840  0D90  07A6               	addwf	sprintf@ap,f
  5841                           
  5842                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5843  0D91  1FAA               	btfss	sprintf@val+1,7
  5844  0D92  2D9C               	goto	l2199
  5845                           
  5846                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5847  0D93  3003               	movlw	3
  5848  0D94  00A3               	movwf	??_sprintf
  5849  0D95  0823               	movf	??_sprintf,w
  5850  0D96  04A7               	iorwf	sprintf@flag,f
  5851                           
  5852                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5853  0D97  09A9               	comf	sprintf@val,f
  5854  0D98  09AA               	comf	sprintf@val+1,f
  5855  0D99  0AA9               	incf	sprintf@val,f
  5856  0D9A  1903               	skipnz
  5857  0D9B  0AAA               	incf	sprintf@val+1,f
  5858  0D9C                     l2199:	
  5859                           
  5860                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5861  0D9C  01AC               	clrf	sprintf@c
  5862  0D9D  0AAC               	incf	sprintf@c,f
  5863  0D9E                     l2205:	
  5864                           
  5865                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5866  0D9E  082C               	movf	sprintf@c,w
  5867  0D9F  00A3               	movwf	??_sprintf
  5868  0DA0  0723               	addwf	??_sprintf,w
  5869  0DA1  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5870  0DA2  0084               	movwf	4
  5871  0DA3  120A  158A  200A  120A  158A  	fcall	stringdir
  5872  0DA8  00A4               	movwf	??_sprintf+1
  5873  0DA9  120A  158A  200A  120A  158A  	fcall	stringdir
  5874  0DAE  00A5               	movwf	??_sprintf+2
  5875  0DAF  0825               	movf	??_sprintf+2,w
  5876  0DB0  022A               	subwf	sprintf@val+1,w
  5877  0DB1  1D03               	skipz
  5878  0DB2  2DB5               	goto	u2375
  5879  0DB3  0824               	movf	??_sprintf+1,w
  5880  0DB4  0229               	subwf	sprintf@val,w
  5881  0DB5                     u2375:	
  5882  0DB5  1C03               	btfss	3,0
  5883  0DB6  2DBF               	goto	l2211
  5884  0DB7  3001               	movlw	1
  5885  0DB8  00A3               	movwf	??_sprintf
  5886  0DB9  0823               	movf	??_sprintf,w
  5887  0DBA  07AC               	addwf	sprintf@c,f
  5888  0DBB  3005               	movlw	5
  5889  0DBC  062C               	xorwf	sprintf@c,w
  5890  0DBD  1D03               	btfss	3,2
  5891  0DBE  2D9E               	goto	l2205
  5892  0DBF                     l2211:	
  5893                           
  5894                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5895  0DBF  0827               	movf	sprintf@flag,w
  5896  0DC0  3903               	andlw	3
  5897  0DC1  1903               	btfsc	3,2
  5898  0DC2  2DCE               	goto	l2217
  5899                           
  5900                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5901  0DC3  302D               	movlw	45
  5902  0DC4  00A3               	movwf	??_sprintf
  5903  0DC5  082B               	movf	sprintf@sp,w
  5904  0DC6  0084               	movwf	4
  5905  0DC7  0823               	movf	??_sprintf,w
  5906  0DC8  1383               	bcf	3,7	;select IRP bank0
  5907  0DC9  0080               	movwf	0
  5908  0DCA  3001               	movlw	1
  5909  0DCB  00A3               	movwf	??_sprintf
  5910  0DCC  0823               	movf	??_sprintf,w
  5911  0DCD  07AB               	addwf	sprintf@sp,f
  5912  0DCE                     l2217:	
  5913                           
  5914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5915  0DCE  082C               	movf	sprintf@c,w
  5916  0DCF  00A3               	movwf	??_sprintf
  5917  0DD0  0823               	movf	??_sprintf,w
  5918  0DD1  00A8               	movwf	sprintf@prec
  5919  0DD2                     l2225:	
  5920                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5921                           
  5922                           
  5923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5924  0DD2  30FF               	movlw	255
  5925  0DD3  00A3               	movwf	??_sprintf
  5926  0DD4  0823               	movf	??_sprintf,w
  5927  0DD5  07A8               	addwf	sprintf@prec,f
  5928  0DD6  0A28               	incf	sprintf@prec,w
  5929  0DD7  1903               	btfsc	3,2
  5930  0DD8  2D47               	goto	l2227
  5931                           
  5932                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5933  0DD9  300A               	movlw	10
  5934  0DDA  00F8               	movwf	___lwmod@divisor
  5935  0DDB  3000               	movlw	0
  5936  0DDC  00F9               	movwf	___lwmod@divisor+1
  5937  0DDD  0828               	movf	sprintf@prec,w
  5938  0DDE  00A3               	movwf	??_sprintf
  5939  0DDF  0723               	addwf	??_sprintf,w
  5940  0DE0  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5941  0DE1  0084               	movwf	4
  5942  0DE2  120A  158A  200A  120A  158A  	fcall	stringdir
  5943  0DE7  00F0               	movwf	___lwdiv@divisor
  5944  0DE8  120A  158A  200A  120A  158A  	fcall	stringdir
  5945  0DED  00F1               	movwf	___lwdiv@divisor+1
  5946  0DEE  082A               	movf	sprintf@val+1,w
  5947  0DEF  00F3               	movwf	___lwdiv@dividend+1
  5948  0DF0  0829               	movf	sprintf@val,w
  5949  0DF1  00F2               	movwf	___lwdiv@dividend
  5950  0DF2  120A  158A  2079  120A  158A  	fcall	___lwdiv
  5951  0DF7  0871               	movf	?___lwdiv+1,w
  5952  0DF8  00FB               	movwf	___lwmod@dividend+1
  5953  0DF9  0870               	movf	?___lwdiv,w
  5954  0DFA  00FA               	movwf	___lwmod@dividend
  5955  0DFB  160A  118A  2710  120A  158A  	fcall	___lwmod
  5956  0E00  0878               	movf	?___lwmod,w
  5957  0E01  3E30               	addlw	48
  5958  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  5959  0E03  1303               	bcf	3,6	;RP1=0, select bank0
  5960  0E04  00A4               	movwf	??_sprintf+1
  5961  0E05  0824               	movf	??_sprintf+1,w
  5962  0E06  00AC               	movwf	sprintf@c
  5963                           
  5964                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5965  0E07  082C               	movf	sprintf@c,w
  5966  0E08  00A3               	movwf	??_sprintf
  5967  0E09  082B               	movf	sprintf@sp,w
  5968  0E0A  0084               	movwf	4
  5969  0E0B  0823               	movf	??_sprintf,w
  5970  0E0C  1383               	bcf	3,7	;select IRP bank0
  5971  0E0D  0080               	movwf	0
  5972  0E0E  3001               	movlw	1
  5973  0E0F  00A3               	movwf	??_sprintf
  5974  0E10  0823               	movf	??_sprintf,w
  5975  0E11  07AB               	addwf	sprintf@sp,f
  5976  0E12  2DD2               	goto	l2225
  5977  0E13                     l2229:	
  5978                           
  5979                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5980  0E13  082B               	movf	sprintf@sp,w
  5981  0E14  0084               	movwf	4
  5982  0E15  1383               	bcf	3,7	;select IRP bank0
  5983  0E16  0180               	clrf	0
  5984  0E17  0008               	return
  5985  0E18                     __end_of_sprintf:	
  5986                           
  5987                           	psect	text21
  5988  1710                     __ptext21:	
  5989 ;; *************** function ___lwmod *****************
  5990 ;; Defined at:
  5991 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  divisor         2    8[COMMON] unsigned int 
  5994 ;;  dividend        2   10[COMMON] unsigned int 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  counter         1   13[COMMON] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  2    8[COMMON] unsigned int 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6006 ;;      Params:         4       0       0       0       0
  6007 ;;      Locals:         1       0       0       0       0
  6008 ;;      Temps:          1       0       0       0       0
  6009 ;;      Totals:         6       0       0       0       0
  6010 ;;Total ram usage:        6 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_sprintf
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           
  6020                           ;psect for function ___lwmod
  6021  1710                     ___lwmod:	
  6022                           
  6023                           ;incstack = 0
  6024                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6025  1710  0878               	movf	___lwmod@divisor,w
  6026  1711  0479               	iorwf	___lwmod@divisor+1,w
  6027  1712  1903               	btfsc	3,2
  6028  1713  2F3D               	goto	l2139
  6029  1714  01FD               	clrf	___lwmod@counter
  6030  1715  0AFD               	incf	___lwmod@counter,f
  6031  1716                     l2129:	
  6032  1716  1BF9               	btfsc	___lwmod@divisor+1,7
  6033  1717  2F24               	goto	l2131
  6034  1718  3001               	movlw	1
  6035  1719                     u2245:	
  6036  1719  1003               	clrc
  6037  171A  0DF8               	rlf	___lwmod@divisor,f
  6038  171B  0DF9               	rlf	___lwmod@divisor+1,f
  6039  171C  3EFF               	addlw	-1
  6040  171D  1D03               	skipz
  6041  171E  2F19               	goto	u2245
  6042  171F  3001               	movlw	1
  6043  1720  00FC               	movwf	??___lwmod
  6044  1721  087C               	movf	??___lwmod,w
  6045  1722  07FD               	addwf	___lwmod@counter,f
  6046  1723  2F16               	goto	l2129
  6047  1724                     l2131:	
  6048  1724  0879               	movf	___lwmod@divisor+1,w
  6049  1725  027B               	subwf	___lwmod@dividend+1,w
  6050  1726  1D03               	skipz
  6051  1727  2F2A               	goto	u2265
  6052  1728  0878               	movf	___lwmod@divisor,w
  6053  1729  027A               	subwf	___lwmod@dividend,w
  6054  172A                     u2265:	
  6055  172A  1C03               	skipc
  6056  172B  2F32               	goto	l2135
  6057  172C  0878               	movf	___lwmod@divisor,w
  6058  172D  02FA               	subwf	___lwmod@dividend,f
  6059  172E  0879               	movf	___lwmod@divisor+1,w
  6060  172F  1C03               	skipc
  6061  1730  03FB               	decf	___lwmod@dividend+1,f
  6062  1731  02FB               	subwf	___lwmod@dividend+1,f
  6063  1732                     l2135:	
  6064  1732  3001               	movlw	1
  6065  1733                     u2275:	
  6066  1733  1003               	clrc
  6067  1734  0CF9               	rrf	___lwmod@divisor+1,f
  6068  1735  0CF8               	rrf	___lwmod@divisor,f
  6069  1736  3EFF               	addlw	-1
  6070  1737  1D03               	skipz
  6071  1738  2F33               	goto	u2275
  6072  1739  3001               	movlw	1
  6073  173A  02FD               	subwf	___lwmod@counter,f
  6074  173B  1D03               	btfss	3,2
  6075  173C  2F24               	goto	l2131
  6076  173D                     l2139:	
  6077  173D  087B               	movf	___lwmod@dividend+1,w
  6078  173E  00F9               	movwf	?___lwmod+1
  6079  173F  087A               	movf	___lwmod@dividend,w
  6080  1740  00F8               	movwf	?___lwmod
  6081  1741  0008               	return
  6082  1742                     __end_of___lwmod:	
  6083                           
  6084                           	psect	text22
  6085  0879                     __ptext22:	
  6086 ;; *************** function ___lwdiv *****************
  6087 ;; Defined at:
  6088 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  6089 ;; Parameters:    Size  Location     Type
  6090 ;;  divisor         2    0[COMMON] unsigned int 
  6091 ;;  dividend        2    2[COMMON] unsigned int 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  quotient        2    5[COMMON] unsigned int 
  6094 ;;  counter         1    7[COMMON] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  2    0[COMMON] unsigned int 
  6097 ;; Registers used:
  6098 ;;		wreg, status,2, status,0
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6104 ;;      Params:         4       0       0       0       0
  6105 ;;      Locals:         3       0       0       0       0
  6106 ;;      Temps:          1       0       0       0       0
  6107 ;;      Totals:         8       0       0       0       0
  6108 ;;Total ram usage:        8 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		_sprintf
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           
  6118                           ;psect for function ___lwdiv
  6119  0879                     ___lwdiv:	
  6120                           
  6121                           ;incstack = 0
  6122                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6123  0879  01F5               	clrf	___lwdiv@quotient
  6124  087A  01F6               	clrf	___lwdiv@quotient+1
  6125  087B  0870               	movf	___lwdiv@divisor,w
  6126  087C  0471               	iorwf	___lwdiv@divisor+1,w
  6127  087D  1903               	btfsc	3,2
  6128  087E  28B0               	goto	l2117
  6129  087F  01F7               	clrf	___lwdiv@counter
  6130  0880  0AF7               	incf	___lwdiv@counter,f
  6131  0881                     l2105:	
  6132  0881  1BF1               	btfsc	___lwdiv@divisor+1,7
  6133  0882  288F               	goto	l2107
  6134  0883  3001               	movlw	1
  6135  0884                     u2175:	
  6136  0884  1003               	clrc
  6137  0885  0DF0               	rlf	___lwdiv@divisor,f
  6138  0886  0DF1               	rlf	___lwdiv@divisor+1,f
  6139  0887  3EFF               	addlw	-1
  6140  0888  1D03               	skipz
  6141  0889  2884               	goto	u2175
  6142  088A  3001               	movlw	1
  6143  088B  00F4               	movwf	??___lwdiv
  6144  088C  0874               	movf	??___lwdiv,w
  6145  088D  07F7               	addwf	___lwdiv@counter,f
  6146  088E  2881               	goto	l2105
  6147  088F                     l2107:	
  6148  088F  3001               	movlw	1
  6149  0890                     u2195:	
  6150  0890  1003               	clrc
  6151  0891  0DF5               	rlf	___lwdiv@quotient,f
  6152  0892  0DF6               	rlf	___lwdiv@quotient+1,f
  6153  0893  3EFF               	addlw	-1
  6154  0894  1D03               	skipz
  6155  0895  2890               	goto	u2195
  6156  0896  0871               	movf	___lwdiv@divisor+1,w
  6157  0897  0273               	subwf	___lwdiv@dividend+1,w
  6158  0898  1D03               	skipz
  6159  0899  289C               	goto	u2205
  6160  089A  0870               	movf	___lwdiv@divisor,w
  6161  089B  0272               	subwf	___lwdiv@dividend,w
  6162  089C                     u2205:	
  6163  089C  1C03               	skipc
  6164  089D  28A5               	goto	l2113
  6165  089E  0870               	movf	___lwdiv@divisor,w
  6166  089F  02F2               	subwf	___lwdiv@dividend,f
  6167  08A0  0871               	movf	___lwdiv@divisor+1,w
  6168  08A1  1C03               	skipc
  6169  08A2  03F3               	decf	___lwdiv@dividend+1,f
  6170  08A3  02F3               	subwf	___lwdiv@dividend+1,f
  6171  08A4  1475               	bsf	___lwdiv@quotient,0
  6172  08A5                     l2113:	
  6173  08A5  3001               	movlw	1
  6174  08A6                     u2215:	
  6175  08A6  1003               	clrc
  6176  08A7  0CF1               	rrf	___lwdiv@divisor+1,f
  6177  08A8  0CF0               	rrf	___lwdiv@divisor,f
  6178  08A9  3EFF               	addlw	-1
  6179  08AA  1D03               	skipz
  6180  08AB  28A6               	goto	u2215
  6181  08AC  3001               	movlw	1
  6182  08AD  02F7               	subwf	___lwdiv@counter,f
  6183  08AE  1D03               	btfss	3,2
  6184  08AF  288F               	goto	l2107
  6185  08B0                     l2117:	
  6186  08B0  0876               	movf	___lwdiv@quotient+1,w
  6187  08B1  00F1               	movwf	?___lwdiv+1
  6188  08B2  0875               	movf	___lwdiv@quotient,w
  6189  08B3  00F0               	movwf	?___lwdiv
  6190  08B4  0008               	return
  6191  08B5                     __end_of___lwdiv:	
  6192                           
  6193                           	psect	text23
  6194  1779                     __ptext23:	
  6195 ;; *************** function _Lcd_Write_String *****************
  6196 ;; Defined at:
  6197 ;;		line 90 in file "./lcd.h"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  a               2    5[COMMON] PTR unsigned char 
  6200 ;;		 -> STR_16(9), STR_15(11), STR_14(9), STR_13(14), 
  6201 ;;		 -> STR_12(4), STR_11(5), STR_10(8), STR_9(5), 
  6202 ;;		 -> STR_8(8), STR_7(4), STR_6(5), STR_5(11), 
  6203 ;;		 -> STR_4(5), STR_3(11), Lcd_Write_Integer@Data(10), 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  i               2   10[COMMON] int 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6215 ;;      Params:         2       0       0       0       0
  6216 ;;      Locals:         2       0       0       0       0
  6217 ;;      Temps:          3       0       0       0       0
  6218 ;;      Totals:         7       0       0       0       0
  6219 ;;Total ram usage:        7 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    2
  6222 ;; This function calls:
  6223 ;;		_Lcd_Write_Char
  6224 ;; This function is called by:
  6225 ;;		_Lcd_Write_Integer
  6226 ;;		_configurarHorario
  6227 ;;		_configurarAntiHorario
  6228 ;;		_Encoder
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           
  6233                           ;psect for function _Lcd_Write_String
  6234  1779                     _Lcd_Write_String:	
  6235                           
  6236                           ;./lcd.h: 91:     int i;;./lcd.h: 92:     for (i = 0; a[i] != '\0'; i++)
  6237                           
  6238                           ;incstack = 0
  6239                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6240  1779  01FA               	clrf	Lcd_Write_String@i
  6241  177A  01FB               	clrf	Lcd_Write_String@i+1
  6242  177B                     l2173:	
  6243  177B  087A               	movf	Lcd_Write_String@i,w
  6244  177C  0775               	addwf	Lcd_Write_String@a,w
  6245  177D  00F8               	movwf	??_Lcd_Write_String+1
  6246  177E  0876               	movf	Lcd_Write_String@a+1,w
  6247  177F  00F7               	movwf	??_Lcd_Write_String
  6248  1780  1803               	skipnc
  6249  1781  0AF7               	incf	??_Lcd_Write_String,f
  6250  1782  1BFA               	btfsc	Lcd_Write_String@i,7
  6251  1783  03F7               	decf	??_Lcd_Write_String,f
  6252  1784  0877               	movf	??_Lcd_Write_String,w
  6253  1785  00F9               	movwf	??_Lcd_Write_String+2
  6254  1786  0879               	movf	??_Lcd_Write_String+2,w
  6255  1787  1283               	bcf	3,5	;RP0=0, select bank0
  6256  1788  1303               	bcf	3,6	;RP1=0, select bank0
  6257  1789  00FF               	movwf	127
  6258  178A  0878               	movf	??_Lcd_Write_String+1,w
  6259  178B  0084               	movwf	4
  6260  178C  120A  158A  2000  160A  118A  	fcall	stringtab
  6261  1791  3A00               	xorlw	0
  6262  1792  1903               	btfsc	3,2
  6263  1793  0008               	return
  6264                           
  6265                           ;./lcd.h: 93:         Lcd_Write_Char(a[i]);
  6266  1794  087A               	movf	Lcd_Write_String@i,w
  6267  1795  0775               	addwf	Lcd_Write_String@a,w
  6268  1796  00F8               	movwf	??_Lcd_Write_String+1
  6269  1797  0876               	movf	Lcd_Write_String@a+1,w
  6270  1798  00F7               	movwf	??_Lcd_Write_String
  6271  1799  1803               	skipnc
  6272  179A  0AF7               	incf	??_Lcd_Write_String,f
  6273  179B  1BFA               	btfsc	Lcd_Write_String@i,7
  6274  179C  03F7               	decf	??_Lcd_Write_String,f
  6275  179D  0877               	movf	??_Lcd_Write_String,w
  6276  179E  00F9               	movwf	??_Lcd_Write_String+2
  6277  179F  0879               	movf	??_Lcd_Write_String+2,w
  6278  17A0  1283               	bcf	3,5	;RP0=0, select bank0
  6279  17A1  1303               	bcf	3,6	;RP1=0, select bank0
  6280  17A2  00FF               	movwf	127
  6281  17A3  0878               	movf	??_Lcd_Write_String+1,w
  6282  17A4  0084               	movwf	4
  6283  17A5  120A  158A  2000  160A  118A  	fcall	stringtab
  6284  17AA  160A  118A  2742  160A  118A  	fcall	_Lcd_Write_Char
  6285  17AF  3001               	movlw	1
  6286  17B0  07FA               	addwf	Lcd_Write_String@i,f
  6287  17B1  1803               	skipnc
  6288  17B2  0AFB               	incf	Lcd_Write_String@i+1,f
  6289  17B3  3000               	movlw	0
  6290  17B4  07FB               	addwf	Lcd_Write_String@i+1,f
  6291  17B5  2F7B               	goto	l2173
  6292  17B6                     __end_of_Lcd_Write_String:	
  6293                           
  6294                           	psect	text24
  6295  1742                     __ptext24:	
  6296 ;; *************** function _Lcd_Write_Char *****************
  6297 ;; Defined at:
  6298 ;;		line 75 in file "./lcd.h"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;  a               1    wreg     unsigned char 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  a               1    4[COMMON] unsigned char 
  6303 ;;  y               1    3[COMMON] unsigned char 
  6304 ;;  temp            1    2[COMMON] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6314 ;;      Params:         0       0       0       0       0
  6315 ;;      Locals:         3       0       0       0       0
  6316 ;;      Temps:          1       0       0       0       0
  6317 ;;      Totals:         4       0       0       0       0
  6318 ;;Total ram usage:        4 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    1
  6321 ;; This function calls:
  6322 ;;		_Lcd_Port
  6323 ;; This function is called by:
  6324 ;;		_Lcd_Write_String
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function _Lcd_Write_Char
  6330  1742                     _Lcd_Write_Char:	
  6331                           
  6332                           ;incstack = 0
  6333                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6334                           ;Lcd_Write_Char@a stored from wreg
  6335  1742  00F4               	movwf	Lcd_Write_Char@a
  6336                           
  6337                           ;./lcd.h: 76:     char temp, y;;./lcd.h: 77:     temp = a & 0x0F;
  6338  1743  0874               	movf	Lcd_Write_Char@a,w
  6339  1744  390F               	andlw	15
  6340  1745  00F1               	movwf	??_Lcd_Write_Char
  6341  1746  0871               	movf	??_Lcd_Write_Char,w
  6342  1747  00F2               	movwf	Lcd_Write_Char@temp
  6343                           
  6344                           ;./lcd.h: 78:     y = a & 0xF0;
  6345  1748  0874               	movf	Lcd_Write_Char@a,w
  6346  1749  39F0               	andlw	240
  6347  174A  00F1               	movwf	??_Lcd_Write_Char
  6348  174B  0871               	movf	??_Lcd_Write_Char,w
  6349  174C  00F3               	movwf	Lcd_Write_Char@y
  6350                           
  6351                           ;./lcd.h: 79:     RB2 = 1;
  6352  174D  1283               	bcf	3,5	;RP0=0, select bank0
  6353  174E  1303               	bcf	3,6	;RP1=0, select bank0
  6354  174F  1506               	bsf	6,2	;volatile
  6355                           
  6356                           ;./lcd.h: 80:     Lcd_Port(y >> 4);
  6357  1750  0873               	movf	Lcd_Write_Char@y,w
  6358  1751  00F1               	movwf	??_Lcd_Write_Char
  6359  1752  3004               	movlw	4
  6360  1753                     u2155:	
  6361  1753  1003               	clrc
  6362  1754  0CF1               	rrf	??_Lcd_Write_Char,f
  6363  1755  3EFF               	addlw	-1
  6364  1756  1D03               	skipz
  6365  1757  2F53               	goto	u2155
  6366  1758  0871               	movf	??_Lcd_Write_Char,w
  6367  1759  160A  118A  2698  160A  118A  	fcall	_Lcd_Port
  6368                           
  6369                           ;./lcd.h: 81:     RB3 = 1;
  6370  175E  1283               	bcf	3,5	;RP0=0, select bank0
  6371  175F  1303               	bcf	3,6	;RP1=0, select bank0
  6372  1760  1586               	bsf	6,3	;volatile
  6373                           
  6374                           ;./lcd.h: 82:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  6375  1761  300D               	movlw	13
  6376  1762  00F1               	movwf	??_Lcd_Write_Char
  6377  1763                     u4247:	
  6378  1763  0BF1               	decfsz	??_Lcd_Write_Char,f
  6379  1764  2F63               	goto	u4247
  6380                           
  6381                           ;./lcd.h: 83:     RB3 = 0;
  6382  1765  1283               	bcf	3,5	;RP0=0, select bank0
  6383  1766  1303               	bcf	3,6	;RP1=0, select bank0
  6384  1767  1186               	bcf	6,3	;volatile
  6385                           
  6386                           ;./lcd.h: 84:     Lcd_Port(temp);
  6387  1768  0872               	movf	Lcd_Write_Char@temp,w
  6388  1769  160A  118A  2698  160A  118A  	fcall	_Lcd_Port
  6389                           
  6390                           ;./lcd.h: 85:     RB3 = 1;
  6391  176E  1283               	bcf	3,5	;RP0=0, select bank0
  6392  176F  1303               	bcf	3,6	;RP1=0, select bank0
  6393  1770  1586               	bsf	6,3	;volatile
  6394                           
  6395                           ;./lcd.h: 86:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  6396  1771  300D               	movlw	13
  6397  1772  00F1               	movwf	??_Lcd_Write_Char
  6398  1773                     u4257:	
  6399  1773  0BF1               	decfsz	??_Lcd_Write_Char,f
  6400  1774  2F73               	goto	u4257
  6401                           
  6402                           ;./lcd.h: 87:     RB3 = 0;
  6403  1775  1283               	bcf	3,5	;RP0=0, select bank0
  6404  1776  1303               	bcf	3,6	;RP1=0, select bank0
  6405  1777  1186               	bcf	6,3	;volatile
  6406  1778  0008               	return
  6407  1779                     __end_of_Lcd_Write_Char:	
  6408                           
  6409                           	psect	text25
  6410  17B6                     __ptext25:	
  6411 ;; *************** function _Lcd_Set_Cursor *****************
  6412 ;; Defined at:
  6413 ;;		line 40 in file "./lcd.h"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  a               1    wreg     unsigned char 
  6416 ;;  b               1    4[COMMON] unsigned char 
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;  a               1    7[COMMON] unsigned char 
  6419 ;;  temp            1   10[COMMON] unsigned char 
  6420 ;;  y               1    9[COMMON] unsigned char 
  6421 ;;  z               1    8[COMMON] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0, pclath, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6431 ;;      Params:         1       0       0       0       0
  6432 ;;      Locals:         4       0       0       0       0
  6433 ;;      Temps:          2       0       0       0       0
  6434 ;;      Totals:         7       0       0       0       0
  6435 ;;Total ram usage:        7 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    2
  6438 ;; This function calls:
  6439 ;;		_Lcd_Cmd
  6440 ;; This function is called by:
  6441 ;;		_configurarHorario
  6442 ;;		_configurarAntiHorario
  6443 ;;		_Encoder
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _Lcd_Set_Cursor
  6449  17B6                     _Lcd_Set_Cursor:	
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6453                           ;Lcd_Set_Cursor@a stored from wreg
  6454  17B6  00F7               	movwf	Lcd_Set_Cursor@a
  6455                           
  6456                           ;./lcd.h: 41:     char temp, z, y;;./lcd.h: 42:     if (a == 1) {
  6457  17B7  0377               	decf	Lcd_Set_Cursor@a,w
  6458  17B8  1D03               	btfss	3,2
  6459  17B9  2FDB               	goto	l2453
  6460                           
  6461                           ;./lcd.h: 43:         temp = 0x80 + b - 1;
  6462  17BA  0874               	movf	Lcd_Set_Cursor@b,w
  6463  17BB  3E7F               	addlw	127
  6464  17BC  00F5               	movwf	??_Lcd_Set_Cursor
  6465  17BD  0875               	movf	??_Lcd_Set_Cursor,w
  6466  17BE  00FA               	movwf	Lcd_Set_Cursor@temp
  6467                           
  6468                           ;./lcd.h: 44:         z = temp >> 4;
  6469  17BF  087A               	movf	Lcd_Set_Cursor@temp,w
  6470  17C0  00F5               	movwf	??_Lcd_Set_Cursor
  6471  17C1  3004               	movlw	4
  6472  17C2                     u3015:	
  6473  17C2  1003               	clrc
  6474  17C3  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6475  17C4  3EFF               	addlw	-1
  6476  17C5  1D03               	skipz
  6477  17C6  2FC2               	goto	u3015
  6478  17C7  0875               	movf	??_Lcd_Set_Cursor,w
  6479  17C8  00F6               	movwf	??_Lcd_Set_Cursor+1
  6480  17C9  0876               	movf	??_Lcd_Set_Cursor+1,w
  6481  17CA  00F8               	movwf	Lcd_Set_Cursor@z
  6482                           
  6483                           ;./lcd.h: 45:         y = temp & 0x0F;
  6484  17CB  087A               	movf	Lcd_Set_Cursor@temp,w
  6485  17CC  390F               	andlw	15
  6486  17CD  00F5               	movwf	??_Lcd_Set_Cursor
  6487  17CE  0875               	movf	??_Lcd_Set_Cursor,w
  6488  17CF  00F9               	movwf	Lcd_Set_Cursor@y
  6489                           
  6490                           ;./lcd.h: 46:         Lcd_Cmd(z);
  6491  17D0  0878               	movf	Lcd_Set_Cursor@z,w
  6492  17D1  160A  118A  26B2  160A  118A  	fcall	_Lcd_Cmd
  6493                           
  6494                           ;./lcd.h: 47:         Lcd_Cmd(y);
  6495  17D6  0879               	movf	Lcd_Set_Cursor@y,w
  6496  17D7  160A  118A  26B2   	fcall	_Lcd_Cmd
  6497                           
  6498                           ;./lcd.h: 48:     } else if (a == 2) {
  6499  17DA  0008               	return
  6500  17DB                     l2453:	
  6501  17DB  3002               	movlw	2
  6502  17DC  0677               	xorwf	Lcd_Set_Cursor@a,w
  6503  17DD  1D03               	btfss	3,2
  6504  17DE  0008               	return
  6505                           
  6506                           ;./lcd.h: 49:         temp = 0xC0 + b - 1;
  6507  17DF  0874               	movf	Lcd_Set_Cursor@b,w
  6508  17E0  3EBF               	addlw	191
  6509  17E1  00F5               	movwf	??_Lcd_Set_Cursor
  6510  17E2  0875               	movf	??_Lcd_Set_Cursor,w
  6511  17E3  00FA               	movwf	Lcd_Set_Cursor@temp
  6512                           
  6513                           ;./lcd.h: 50:         z = temp >> 4;
  6514  17E4  087A               	movf	Lcd_Set_Cursor@temp,w
  6515  17E5  00F5               	movwf	??_Lcd_Set_Cursor
  6516  17E6  3004               	movlw	4
  6517  17E7                     u3035:	
  6518  17E7  1003               	clrc
  6519  17E8  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6520  17E9  3EFF               	addlw	-1
  6521  17EA  1D03               	skipz
  6522  17EB  2FE7               	goto	u3035
  6523  17EC  0875               	movf	??_Lcd_Set_Cursor,w
  6524  17ED  00F6               	movwf	??_Lcd_Set_Cursor+1
  6525  17EE  0876               	movf	??_Lcd_Set_Cursor+1,w
  6526  17EF  00F8               	movwf	Lcd_Set_Cursor@z
  6527                           
  6528                           ;./lcd.h: 51:         y = temp & 0x0F;
  6529  17F0  087A               	movf	Lcd_Set_Cursor@temp,w
  6530  17F1  390F               	andlw	15
  6531  17F2  00F5               	movwf	??_Lcd_Set_Cursor
  6532  17F3  0875               	movf	??_Lcd_Set_Cursor,w
  6533  17F4  00F9               	movwf	Lcd_Set_Cursor@y
  6534                           
  6535                           ;./lcd.h: 52:         Lcd_Cmd(z);
  6536  17F5  0878               	movf	Lcd_Set_Cursor@z,w
  6537  17F6  160A  118A  26B2  160A  118A  	fcall	_Lcd_Cmd
  6538                           
  6539                           ;./lcd.h: 53:         Lcd_Cmd(y);
  6540  17FB  0879               	movf	Lcd_Set_Cursor@y,w
  6541  17FC  160A  118A  26B2   	fcall	_Lcd_Cmd
  6542  17FF  0008               	return
  6543  1800                     __end_of_Lcd_Set_Cursor:	
  6544                           
  6545                           	psect	text26
  6546  1668                     __ptext26:	
  6547 ;; *************** function _Lcd_Clear *****************
  6548 ;; Defined at:
  6549 ;;		line 35 in file "./lcd.h"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6563 ;;      Params:         0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0
  6566 ;;      Totals:         0       0       0       0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    2
  6570 ;; This function calls:
  6571 ;;		_Lcd_Cmd
  6572 ;; This function is called by:
  6573 ;;		_configurarHorario
  6574 ;;		_configurarAntiHorario
  6575 ;;		_Encoder
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           
  6580                           ;psect for function _Lcd_Clear
  6581  1668                     _Lcd_Clear:	
  6582                           
  6583                           ;./lcd.h: 36:     Lcd_Cmd(0);
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6587  1668  3000               	movlw	0
  6588  1669  160A  118A  26B2  160A  118A  	fcall	_Lcd_Cmd
  6589                           
  6590                           ;./lcd.h: 37:     Lcd_Cmd(1);
  6591  166E  3001               	movlw	1
  6592  166F  160A  118A  26B2   	fcall	_Lcd_Cmd
  6593  1672  0008               	return
  6594  1673                     __end_of_Lcd_Clear:	
  6595                           
  6596                           	psect	text27
  6597  16B2                     __ptext27:	
  6598 ;; *************** function _Lcd_Cmd *****************
  6599 ;; Defined at:
  6600 ;;		line 27 in file "./lcd.h"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  a               1    wreg     unsigned char 
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  a               1    3[COMMON] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      void 
  6607 ;; Registers used:
  6608 ;;		wreg, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6614 ;;      Params:         0       0       0       0       0
  6615 ;;      Locals:         1       0       0       0       0
  6616 ;;      Temps:          2       0       0       0       0
  6617 ;;      Totals:         3       0       0       0       0
  6618 ;;Total ram usage:        3 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    1
  6621 ;; This function calls:
  6622 ;;		_Lcd_Port
  6623 ;; This function is called by:
  6624 ;;		_Lcd_Clear
  6625 ;;		_Lcd_Set_Cursor
  6626 ;;		_Lcd_Init
  6627 ;;		_Lcd_Shift_Right
  6628 ;;		_Lcd_Shift_Left
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           
  6633                           ;psect for function _Lcd_Cmd
  6634  16B2                     _Lcd_Cmd:	
  6635                           
  6636                           ;incstack = 0
  6637                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6638                           ;Lcd_Cmd@a stored from wreg
  6639  16B2  00F3               	movwf	Lcd_Cmd@a
  6640                           
  6641                           ;./lcd.h: 28:     RB2 = 0;
  6642  16B3  1283               	bcf	3,5	;RP0=0, select bank0
  6643  16B4  1303               	bcf	3,6	;RP1=0, select bank0
  6644  16B5  1106               	bcf	6,2	;volatile
  6645                           
  6646                           ;./lcd.h: 29:     Lcd_Port(a);
  6647  16B6  0873               	movf	Lcd_Cmd@a,w
  6648  16B7  160A  118A  2698  160A  118A  	fcall	_Lcd_Port
  6649                           
  6650                           ;./lcd.h: 30:     RB3 = 1;
  6651  16BC  1283               	bcf	3,5	;RP0=0, select bank0
  6652  16BD  1303               	bcf	3,6	;RP1=0, select bank0
  6653  16BE  1586               	bsf	6,3	;volatile
  6654                           
  6655                           ;./lcd.h: 31:     _delay((unsigned long)((4)*(4000000/4000.0)));
  6656  16BF  3006               	movlw	6
  6657  16C0  00F2               	movwf	??_Lcd_Cmd+1
  6658  16C1  3030               	movlw	48
  6659  16C2  00F1               	movwf	??_Lcd_Cmd
  6660  16C3                     u4267:	
  6661  16C3  0BF1               	decfsz	??_Lcd_Cmd,f
  6662  16C4  2EC3               	goto	u4267
  6663  16C5  0BF2               	decfsz	??_Lcd_Cmd+1,f
  6664  16C6  2EC3               	goto	u4267
  6665  16C7  0000               	nop
  6666                           
  6667                           ;./lcd.h: 32:     RB3 = 0;
  6668  16C8  1283               	bcf	3,5	;RP0=0, select bank0
  6669  16C9  1303               	bcf	3,6	;RP1=0, select bank0
  6670  16CA  1186               	bcf	6,3	;volatile
  6671  16CB  0008               	return
  6672  16CC                     __end_of_Lcd_Cmd:	
  6673                           
  6674                           	psect	text28
  6675  1698                     __ptext28:	
  6676 ;; *************** function _Lcd_Port *****************
  6677 ;; Defined at:
  6678 ;;		line 5 in file "./lcd.h"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  a               1    wreg     unsigned char 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  a               1    0[COMMON] unsigned char 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  1    wreg      void 
  6685 ;; Registers used:
  6686 ;;		wreg
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6692 ;;      Params:         0       0       0       0       0
  6693 ;;      Locals:         1       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0
  6695 ;;      Totals:         1       0       0       0       0
  6696 ;;Total ram usage:        1 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; This function calls:
  6699 ;;		Nothing
  6700 ;; This function is called by:
  6701 ;;		_Lcd_Cmd
  6702 ;;		_Lcd_Init
  6703 ;;		_Lcd_Write_Char
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _Lcd_Port
  6709  1698                     _Lcd_Port:	
  6710                           
  6711                           ;incstack = 0
  6712                           ; Regs used in _Lcd_Port: [wreg]
  6713                           ;Lcd_Port@a stored from wreg
  6714  1698  00F0               	movwf	Lcd_Port@a
  6715                           
  6716                           ;./lcd.h: 6:     if (a & 1)
  6717  1699  1C70               	btfss	Lcd_Port@a,0
  6718  169A  2E9F               	goto	l94
  6719                           
  6720                           ;./lcd.h: 7:         RB4 = 1;
  6721  169B  1283               	bcf	3,5	;RP0=0, select bank0
  6722  169C  1303               	bcf	3,6	;RP1=0, select bank0
  6723  169D  1606               	bsf	6,4	;volatile
  6724  169E  2EA2               	goto	l95
  6725  169F                     l94:	
  6726                           ;./lcd.h: 8:     else
  6727                           
  6728                           
  6729                           ;./lcd.h: 9:         RB4 = 0;
  6730  169F  1283               	bcf	3,5	;RP0=0, select bank0
  6731  16A0  1303               	bcf	3,6	;RP1=0, select bank0
  6732  16A1  1206               	bcf	6,4	;volatile
  6733  16A2                     l95:	
  6734                           
  6735                           ;./lcd.h: 11:     if (a & 2)
  6736  16A2  1CF0               	btfss	Lcd_Port@a,1
  6737  16A3  2EA6               	goto	l96
  6738                           
  6739                           ;./lcd.h: 12:         RB5 = 1;
  6740  16A4  1686               	bsf	6,5	;volatile
  6741  16A5  2EA7               	goto	l97
  6742  16A6                     l96:	
  6743                           ;./lcd.h: 13:     else
  6744                           
  6745                           
  6746                           ;./lcd.h: 14:         RB5 = 0;
  6747  16A6  1286               	bcf	6,5	;volatile
  6748  16A7                     l97:	
  6749                           
  6750                           ;./lcd.h: 16:     if (a & 4)
  6751  16A7  1D70               	btfss	Lcd_Port@a,2
  6752  16A8  2EAB               	goto	l98
  6753                           
  6754                           ;./lcd.h: 17:         RB6 = 1;
  6755  16A9  1706               	bsf	6,6	;volatile
  6756  16AA  2EAC               	goto	l99
  6757  16AB                     l98:	
  6758                           ;./lcd.h: 18:     else
  6759                           
  6760                           
  6761                           ;./lcd.h: 19:         RB6 = 0;
  6762  16AB  1306               	bcf	6,6	;volatile
  6763  16AC                     l99:	
  6764                           
  6765                           ;./lcd.h: 21:     if (a & 8)
  6766  16AC  1DF0               	btfss	Lcd_Port@a,3
  6767  16AD  2EB0               	goto	l100
  6768                           
  6769                           ;./lcd.h: 22:         RB7 = 1;
  6770  16AE  1786               	bsf	6,7	;volatile
  6771  16AF  0008               	return
  6772  16B0                     l100:	
  6773                           ;./lcd.h: 23:     else
  6774                           
  6775                           
  6776                           ;./lcd.h: 24:         RB7 = 0;
  6777  16B0  1386               	bcf	6,7	;volatile
  6778  16B1  0008               	return
  6779  16B2                     __end_of_Lcd_Port:	
  6780  007E                     btemp	set	126	;btemp
  6781  007E                     wtemp0	set	126


Data Sizes:
    Strings     61
    Constant    44
    Data        3
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      76
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> UART_Write_Integer@Data(COMMON[10]), Lcd_Write_Integer@Data(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[9]), STR_15(CODE[11]), STR_14(CODE[9]), STR_13(CODE[14]), 
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[8]), STR_9(CODE[5]), 
		 -> STR_8(CODE[8]), STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[11]), 
		 -> STR_4(CODE[5]), STR_3(CODE[11]), Lcd_Write_Integer@Data(BANK0[10]), 


Critical Paths under _main in COMMON

    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _Encoder->___xxtofl
    ___fltol->___xxtofl
    ___fladd->___xxtofl
    _VerificarInversionGiro->___xxtofl
    ___flmul->___xxtofl
    ___flge->___xxtofl
    _Lcd_Write_Integer->___xxtofl
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_configurarAntiHorario
    _main->_configurarHorario
    _configurarHorario->_Lcd_Write_Integer
    _configurarAntiHorario->_Lcd_Write_Integer
    _UART_Init->___aldiv
    _Encoder->_Lcd_Write_Integer
    ___fltol->___flmul
    _VerificarInversionGiro->___flge
    ___flge->___flmul
    _Lcd_Write_Integer->___fltol

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   32678
                                             54 BANK0      4     4      0
                            _Encoder
                       _KeyPadGetKey
                           _Lcd_Init
                           _PinsInit
                           _RunMotor
                          _StopMotor
                          _UART_Init
              _configurarAntiHorario
                  _configurarHorario
 ---------------------------------------------------------------------------------
 (1) _configurarHorario                                    4     4      0    6823
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _configurarAntiHorario                                4     4      0    6823
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _StopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunMotor                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _KeyPadGetKey                                         5     3      2     205
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _PinsInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Encoder                                              1     1      0   17793
                                             50 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
             _VerificarInversionGiro
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             11     7      4     609
                                             26 BANK0     11     7      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             20    12      8    2414
                                              0 BANK0     20    12      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _VerificarInversionGiro                               0     0      0    4517
                             ___flge
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1006
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    3025
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     486
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   13    11      2    3260
                                             37 BANK0     13    11      2
                   _Lcd_Write_String
                            ___flmul (ARG)
                            ___fltol (ARG)
                           ___xxtofl (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2    1408
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1444
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Encoder
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _VerificarInversionGiro
       ___flge
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl
     ___fladd
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _KeyPadGetKey
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _PinsInit
   _RunMotor
   _StopMotor
   _UART_Init
     ___aldiv
   _configurarAntiHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul
   _configurarHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5A      12        0.0%
ABS                  0      0      5A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 02 14:32:27 2019

                              pc 0002                      __CFG_CP$OFF 0000                               l94 169F  
                             l95 16A2                               l96 16A6                               l97 16A7  
                             l98 16AB                               l99 16AC                               _cm 005C  
                             fsr 0004              ___wmul@multiplicand 0072              __Umul8_16@word_mpld 0076  
                            l100 16B0                              l221 0BBB                              l214 0BAE  
                            l144 0A0F                              l145 0A72                              l270 0076  
                            l276 019E                              l720 04A5                              l393 16D6  
                            l570 0B1D                              l458 098F                              l707 043D  
                            l820 0BE4                              l567 0AB7                              l728 04BD  
                            l833 0C3A                              l834 0C44                              l826 0C24  
                            l690 0384                              l586 095F                              l692 0362  
                            l686 02EB                              l839 16FF                              l794 07D0  
                            _RA0 0028                              _RA1 0029                              _RA2 002A  
                            _RB0 0030                              _RA3 002B                              _RB2 0032  
                            _RA4 002C                              _RC0 0038                              _RB3 0033  
                            _RA5 002D                              _RC1 0039                              _RB4 0034  
                            _RA6 002E                              _RB5 0035                              _RA7 002F  
                            _RB6 0036                              _RB7 0037                     __CFG_CPD$OFF 0000  
                            _key 0066                              fsr0 0004                              indf 0000  
                  _CmAntiHorario 005E                     __CFG_IESO$ON 0000                     ___flmul@aexp 0032  
                   ___flmul@bexp 0033                     ___flmul@sign 002D                     ___flmul@temp 0038  
                   ___flmul@prod 0034                     __CFG_LVP$OFF 0000                   ??_KeyPadGetKey 0072  
                   ___fltol@exp1 0044                             l2113 08A5                             l2105 0881  
                           l2107 088F                             l2131 1724                             l2211 0DBF  
                           l2117 08B0                             l2205 0D9E                             l2301 0522  
                           l2135 1732                             l2129 1716                             l2225 0DD2  
                           l2217 0DCE                             l2139 173D                             l2227 0D47  
                           l2243 0AD1                             l2147 16F7                             l2403 0BDC  
                           l2173 177B                             l2229 0E13                             l2413 0BF7  
                           l2183 0D67                             l2247 0AF7                             l2271 04E5  
                           l2423 0C38                             l2415 0C09                             l3071 0B86  
                           l3063 0B5B                             l2361 0756                             l2353 0722  
                           l2273 04E7                             l2425 0C29                             l2409 0BF3  
                           l3073 0B8C                             l2355 073F                             l2291 050C  
                           l2275 04EF                             l2531 006B                             l2603 091B  
                           l2515 0A8E                             l3075 0B92                             l2453 17DB  
                           l2189 0D85                             l2365 0758                             l2293 0514  
                           l2437 0C61                             l3069 0B80                             l2199 0D9C  
                           l3191 0D7A                             l2375 078A                             l2623 094B  
                           l2607 0924                             l3087 0BBE                             l3079 0B98  
                           l2385 07B9                             l2289 050A                             l2633 096E  
                           l2625 095B                             l2473 0A18                             l3185 0BA0  
                           l2379 07A0                             l2803 0472                             l2723 036D  
                           l2715 0331                             l2651 02B6                             l2571 09A0  
                           l2475 0A4B                             l3187 0FE3                             l2821 04B5  
                           l2741 0392                             l2725 036F                             l2733 037E  
                           l2581 09C0                             l2549 16CE                             l3189 0EEF  
                           l2751 03B5                             l2655 02B9                             l2825 04B9  
                           l2657 02C1                             l2593 09F5                             l2675 02E0  
                           l2579 09B0                             l2931 0FF7                             l2749 03B3  
                           l2685 02F5                             l2597 0A03                             l2589 09E8  
                           l2909 0F92                             l2791 0465                             l2759 03C5  
                           l2679 02E3                             l2951 0E48                             l2919 0FA4  
                           l2785 045E                             l2777 044F                             l2769 042F  
                           l2793 0467                             l2929 0FDE                             l2859 0D26  
                           l2891 0F3C                             l2957 0E74                             l2799 0470  
                           l2991 0F03                             l2969 0E9E                             l2897 0F68  
                           l2979 0EB0                             l2989 0EEA                             STR_1 0876  
                           STR_3 084A                             STR_4 0871                             STR_5 084A  
                           STR_6 0871                             STR_7 0872                             STR_8 0869  
                           STR_9 0871                             _BRGH 04C2                             _CREN 00C4  
                           u3100 0A37                             u2205 089C                             u3015 17C2  
                           u2215 08A6                             u3040 0A15                             u2305 1700  
                           u3130 0A48                             u3114 0A3A                             u3035 17E7  
                           u2155 1753                             u2245 1719                             u3125 0A3D  
                           u3070 0A26                             u2175 0884                             u4031 0D05  
                           u4015 0CD5                             u4032 0D06                             u2265 172A  
                           u4105 0123                             u4033 0D0B                             u4025 0CEE  
                           u3065 0A1B                             u4034 0D0C                             u2195 0890  
                           u2275 1733                             u2451 0AE2                             u4035 0D11  
                           u2452 0AE3                             u4036 0D12                             u3084 0A29  
                           u2453 0AE8                             u4125 01AC                             u2454 0AE9  
                           u2375 0DB5                             u2471 0B08                             u2455 0AEE  
                           u2615 05D2                             u4207 0A4D                             u3095 0A2C  
                           u4055 0F5E                             u4135 0B7D                             u2472 0B09  
                           u2456 0AEF                             u2473 0B0E                             u2705 06F0  
                           u3425 092D                             u4217 08BF                             u3345 09B4  
                           u2474 0B0F                             u3610 0351                             u2475 0B14  
                           u4227 08CE                             u4075 0E6A                             u2476 0B15  
                           u3620 0352                             u2725 070E                             u2645 062F  
                           u3605 0345                             u4237 08DC                             u3365 09C2  
                           u3285 16D7                             u4247 1763                             u2735 0726  
                           u3455 094C                             u3375 09D7                             u3295 16DE  
                           u4257 1773                             u2825 0775                             u3385 09E9  
                           u4177 0BC2                             u4267 16C3                             u2835 0793  
                           u2755 0731                             u2915 0C1C                             u4187 0FFB  
                           u2845 07AB                             u2685 06CB                             u3805 0451  
                           u3485 0964                             u4197 0F07                             u2935 0C31  
                           u3751 03F0                             u3743 03D7                             u3735 03B9  
                           u3655 0373                             u3760 0404                             u3752 03F1  
                           u3905 048F                             u3761 0405                             u3753 03F6  
                           u3762 040A                             u3754 03F7                             u3763 040B  
                           u3755 03FC                             u3756 03FD                             _RCIF 0065  
                           u2975 0C4C                             u2895 0C00                             u3991 0CA5  
                           u3975 0C75                             u3992 0CA6                             u3993 0CAB  
                           u3985 0C8E                             u3994 0CAC                             u3995 0CB1  
                           u3996 0CB2                             _SPEN 00C7                             _TRMT 04C1  
                           _TXEN 04C5                             _SYNC 04C4                     __CFG_WRT$OFF 0000  
                  __CFG_FCMEN$ON 0000                ?_Lcd_Write_String 0075                             _key2 0069  
                           _main 0B30                             btemp 007E                    __CFG_BOREN$ON 0000  
                           start 0000               ??_Lcd_Write_String 0077                  __end_of_Lcd_Cmd 16CC  
                  __CFG_MCLRE$ON 0000                  __end_of_Encoder 0299                _Lcd_Write_Integer 1680  
                  ___fltol@sign1 0043                  __end_of___aldiv 0A0C                  __end_of___fladd 04C8  
                          ?_main 0070                            STR_10 0869                            STR_11 0871  
                          STR_12 0872                            STR_13 083C                            STR_14 0860  
                          STR_15 0855                            STR_16 0860                    __CFG_WDTE$OFF 0000  
                __end_of___flmul 07DD                  __end_of___fltol 097D                            _ANSEL 0188  
             ?_Lcd_Write_Integer 0045                  __end_of___lwdiv 08B5                  __end_of___lwmod 1742  
                          _RCREG 001A                            _SPBRG 0099                            _PORTA 0005  
                          _PORTC 0007          __size_of_Lcd_Set_Cursor 004A                            _TRISA 0085  
                          _TRISB 0086                            _TRISC 0087                            _TXREG 0019  
                          _nRBPU 040F               __size_of_UART_Init 00D6                  __end_of_dpowers 083C  
            ??_Lcd_Write_Integer 0047                            pclath 000A                            status 0003  
                          wtemp0 007E                  __end_of_sprintf 0E18                 __end_of_Lcd_Init 0910  
               __end_of_Lcd_Port 16B2                  __initialization 07DD                     __end_of_main 0BC7  
      __end_of_Lcd_Write_Integer 1698                           ??_main 0056                 __end_of_PinsInit 0017  
             __size_of_Lcd_Clear 000B                 __end_of_RunMotor 1680                           _ANSELH 0189  
                      ??_Lcd_Cmd 0071          __size_of_Lcd_Write_Char 0037                        ??_Encoder 0052  
                         _TRISC6 043E                           _TRISC7 043F                 __end_of___xxtofl 0C6A  
                 __CFG_PWRTE$OFF 0000                           _Grados 0062                __end_of_UART_Init 0D40  
                         ___flge 0A9B                        ??___aldiv 0078                        ??___fladd 0028  
                         ___wmul 16CC                        ??___flmul 0028                        ??___fltol 003E  
                      ??___lwdiv 0074                        ??___lwmod 007C                           _buffer 0067  
              _configurarHorario 0F0C             __end_of_KeyPadGetKey 0A9B                           _lastCm 005A  
             ?_configurarHorario 0070                  KeyPadGetKey@key 0073                  KeyPadGetKey@row 0074  
             __size_of__Umul8_16 0023            _configurarAntiHorario 0E18              ??_configurarHorario 0052  
                      ??_sprintf 0023                  Lcd_Set_Cursor@a 0077                  Lcd_Set_Cursor@b 0074  
                Lcd_Set_Cursor@y 0079                  Lcd_Set_Cursor@z 0078               __size_of_StopMotor 0005  
                     ___flge@ff1 003A                       ___flge@ff2 003E                     ___xxtofl@arg 007A  
                   ___xxtofl@exp 0079                     ___xxtofl@val 0070          __end_of__initialization 07FC  
              __end_of_Lcd_Clear 1673                       ___fltol@f1 003A                   __pcstackCOMMON 0070  
      __end_of_configurarHorario 1000                     __pidataBANK0 1660       __size_of_Lcd_Write_Integer 0018  
                 _Lcd_Set_Cursor 17B6             __end_of_keyPadMatrix 0832                        ?_Lcd_Init 0070  
                      ?_Lcd_Port 0070                       __pbssBANK0 005A                        ?_PinsInit 0070  
              __end_of__Umul8_16 1710                       __pmaintext 0B30                          ?___flge 003A  
                        ?___wmul 0070                        ?_RunMotor 0070                __end_of_StopMotor 1668  
      __size_of_Lcd_Write_String 003D           __end_of_Lcd_Set_Cursor 1800           ?_configurarAntiHorario 0070  
                      ?___xxtofl 0070                       ??_Lcd_Init 0074         ??_VerificarInversionGiro 007E  
                     ??_Lcd_Port 0070                       __stringtab 0800                   _Lcd_Write_Char 1742  
                        _Lcd_Cmd 16B2                          _Encoder 00CB                       ??_PinsInit 0070  
          __size_of_KeyPadGetKey 008F       __size_of_configurarHorario 00F4                          ___aldiv 097D  
                __size_of___flge 0095                          ___fladd 0299                       ??_RunMotor 0070  
                        ___flmul 04C8                          ___fltol 0910                  __size_of___wmul 0021  
                        ___lwdiv 0879                          ___lwmod 1710                  ?_Lcd_Set_Cursor 0074  
                        __ptext1 0F0C                          __ptext2 0E18                          __ptext3 16CC  
                        __ptext4 1663                          __ptext5 1673                          __ptext6 0A0C  
                        __ptext7 0C6A                          __ptext8 097D                          __ptext9 0003  
                        _dpowers 0832                       ??___xxtofl 0074                          _old_key 0065  
               ___aldiv@dividend 0074                          _sprintf 0D40           __end_of_Lcd_Write_Char 1779  
           end_of_initialization 07FC                     _KeyPadGetKey 0A0C                 ___aldiv@quotient 0022  
                      Lcd_Port@a 0070                        _UART_Init 0C6A                      ___fladd@grs 0033  
                  ___xxtofl@sign 0078  __size_of_VerificarInversionGiro 00B4                  ?_Lcd_Write_Char 0070  
                      _CmHorario 0060                Lcd_Write_String@a 0075                Lcd_Write_String@i 007A  
                    ___flmul@grs 002E                     _keyPadMatrix 0810                        _Lcd_Clear 1668  
                 __end_of___flge 0B30                   __end_of___wmul 16ED                 _Lcd_Write_String 1779  
                     ?_UART_Init 0026              start_initialization 07DD                        _LastState 0064  
              __size_of_Lcd_Init 005B                __size_of_Lcd_Port 001A         __CFG_FOSC$INTRC_NOCLKOUT 0000  
                     ?_Lcd_Clear 0070                         ??___flge 0042           _VerificarInversionGiro 0017  
              __size_of_PinsInit 0014                         ??___wmul 0074                        __Umul8_16 16ED  
                    __pdataBANK0 0069                  Lcd_Write_Char@a 0074                  Lcd_Write_Char@y 0073  
        ??_configurarAntiHorario 0052                __size_of_RunMotor 000D                        ___fladd@a 0024  
                      ___fladd@b 0020                        _StopMotor 1663                        ___flmul@a 0024  
                      ___flmul@b 0020                        ___latbits 0002                    __pcstackBANK0 0020  
              __size_of___xxtofl 00A3                         ?_Lcd_Cmd 0070                      sprintf@flag 0027  
                       ?_Encoder 0070                      sprintf@prec 0028                 ___lwdiv@dividend 0072  
               ??_Lcd_Set_Cursor 0075                         ?___aldiv 0070                         ?___fladd 0020  
                       ?___flmul 0020                         ?___fltol 003A                       ?__Umul8_16 0070  
                       ?___lwdiv 0070                         ?___lwmod 0078                      ??_UART_Init 002A  
                      __pstrings 0800                       ?_StopMotor 0070                 ___lwdiv@quotient 0075  
                       ?_sprintf 0020                       UART_Init@x 0079                  ___aldiv@divisor 0070  
                ___aldiv@counter 0020                   ___wmul@product 0074                         Lcd_Cmd@a 0073  
                    ??_Lcd_Clear 0074            Lcd_Write_Integer@Data 0048                UART_Init@baudrate 0026  
                    __stringbase 080F                ___wmul@multiplier 0070                 ??_Lcd_Write_Char 0071  
                       _Lcd_Init 08B5                         _Lcd_Port 1698         __end_of_Lcd_Write_String 17B6  
               __size_of_Lcd_Cmd 001A                 __size_of_Encoder 01CE                         _PinsInit 0003  
                       _RunMotor 1673                      ??__Umul8_16 0072                 __size_of___aldiv 008F  
               __size_of___fladd 022F                 __size_of___flmul 0315                 __size_of___fltol 006D  
               __size_of___lwdiv 003C                 __size_of___lwmod 0032               __end_of__stringtab 0810  
                    ??_StopMotor 0070                       sprintf@val 0029                         ___xxtofl 0BC7  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0077                         __ptext10 08B5  
                       __ptext11 00CB                         __ptext20 0D40                         __ptext12 0910  
                       __ptext21 1710                         __ptext13 0299                         __ptext22 0879  
                       __ptext14 0017                         __ptext23 1779                         __ptext15 0BC7  
                       __ptext24 1742                         __ptext16 04C8                         __ptext25 17B6  
                       __ptext17 16ED                         __ptext26 1668                         __ptext18 0A9B  
                       __ptext27 16B2                         __ptext19 1680                         __ptext28 1698  
              __CFG_BOR4V$BOR40V 0000                 __size_of_sprintf 00D8                    __size_of_main 0097  
                       _keypress 006B          ?_VerificarInversionGiro 0070   __size_of_configurarAntiHorario 00F4  
  __end_of_configurarAntiHorario 0F0C               Lcd_Write_Char@temp 0072                        sprintf@ap 0026  
                      sprintf@sp 002B                 ___lwmod@dividend 007A   __end_of_VerificarInversionGiro 00CB  
                      stringcode 080A               Lcd_Set_Cursor@temp 007A           __Umul8_16@multiplicand 0070  
                       sprintf@c 002C                         sprintf@f 0020                  ___lwmod@divisor 0078  
                ___lwmod@counter 007D                         stringdir 080A                         stringtab 0800  
                   ___aldiv@sign 0021               Lcd_Write_Integer@a 0045                    ___fladd@signs 0030  
                  ?_KeyPadGetKey 0070                     ___fladd@aexp 0031                     ___fladd@bexp 0032  
           __Umul8_16@multiplier 0078                __Umul8_16@product 0074  
