

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 02 19:35:07 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 2.05
    44                           ; Generated 20/12/2018 GMT
    45                           ; 
    46                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F886 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  0105                     	;# 
   139  0107                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0187                     	;# 
   149  0188                     	;# 
   150  0189                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  0081                     	;# 
   188  0085                     	;# 
   189  0086                     	;# 
   190  0087                     	;# 
   191  0089                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  008F                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0095                     	;# 
   204  0096                     	;# 
   205  0097                     	;# 
   206  0098                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  0105                     	;# 
   215  0107                     	;# 
   216  0108                     	;# 
   217  0109                     	;# 
   218  010C                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  010F                     	;# 
   223  0185                     	;# 
   224  0187                     	;# 
   225  0188                     	;# 
   226  0189                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305                           
   306                           	psect	idataBANK0
   307  087A                     __pidataBANK0:	
   308                           
   309                           ;initializer for _key2
   310  087A  3430               	retlw	48
   311  087B  3400               	retlw	0
   312                           
   313                           	psect	strings
   314  0800                     __pstrings:	
   315  0800                     stringtab:	
   316  0800                     __stringtab:	
   317                           
   318                           ;	String table - string pointers are 1 byte each
   319  0800  1BFF               	btfsc	btemp+1,7
   320  0801  280A               	ljmp	stringcode
   321  0802  1383               	bcf	3,7
   322  0803  187F               	btfsc	btemp+1,0
   323  0804  1783               	bsf	3,7
   324  0805  0800               	movf	0,w
   325  0806  0A84               	incf	4,f
   326  0807  1903               	skipnz
   327  0808  0AFF               	incf	btemp+1,f
   328  0809  0008               	return
   329  080A                     stringcode:	
   330  080A                     stringdir:	
   331  080A  3008               	movlw	high stringdir
   332  080B  008A               	movwf	10
   333  080C  0804               	movf	4,w
   334  080D  0A84               	incf	4,f
   335  080E  0782               	addwf	2,f
   336  080F                     __stringbase:	
   337  080F  3400               	retlw	0
   338  0810                     __end_of__stringtab:	
   339  0810                     _keyPadMatrix:	
   340  0810  3441               	retlw	65
   341  0811  3400               	retlw	0
   342  0812  3431               	retlw	49
   343  0813  3400               	retlw	0
   344  0814  3432               	retlw	50
   345  0815  3400               	retlw	0
   346  0816  3433               	retlw	51
   347  0817  3400               	retlw	0
   348  0818  3442               	retlw	66
   349  0819  3400               	retlw	0
   350  081A  3434               	retlw	52
   351  081B  3400               	retlw	0
   352  081C  3435               	retlw	53
   353  081D  3400               	retlw	0
   354  081E  3436               	retlw	54
   355  081F  3400               	retlw	0
   356  0820  3443               	retlw	67
   357  0821  3400               	retlw	0
   358  0822  3437               	retlw	55
   359  0823  3400               	retlw	0
   360  0824  3438               	retlw	56
   361  0825  3400               	retlw	0
   362  0826  3439               	retlw	57
   363  0827  3400               	retlw	0
   364  0828  3444               	retlw	68
   365  0829  3400               	retlw	0
   366  082A  342A               	retlw	42
   367  082B  3400               	retlw	0
   368  082C  3430               	retlw	48
   369  082D  3400               	retlw	0
   370  082E  3423               	retlw	35
   371  082F  3400               	retlw	0
   372  0830  34FF               	retlw	255
   373  0831  3400               	retlw	0
   374  0832                     __end_of_keyPadMatrix:	
   375  0832                     _dpowers:	
   376  0832  3401               	retlw	1
   377  0833  3400               	retlw	0
   378  0834  340A               	retlw	10
   379  0835  3400               	retlw	0
   380  0836  3464               	retlw	100
   381  0837  3400               	retlw	0
   382  0838  34E8               	retlw	232
   383  0839  3403               	retlw	3
   384  083A  3410               	retlw	16
   385  083B  3427               	retlw	39
   386  083C                     __end_of_dpowers:	
   387  0005                     _PORTA	set	5
   388  0007                     _PORTC	set	7
   389  0019                     _TXREG	set	25
   390  001A                     _RCREG	set	26
   391  0039                     _RC1	set	57
   392  0038                     _RC0	set	56
   393  0033                     _RB3	set	51
   394  0032                     _RB2	set	50
   395  0037                     _RB7	set	55
   396  0036                     _RB6	set	54
   397  0035                     _RB5	set	53
   398  0034                     _RB4	set	52
   399  002F                     _RA7	set	47
   400  002E                     _RA6	set	46
   401  002D                     _RA5	set	45
   402  002C                     _RA4	set	44
   403  002B                     _RA3	set	43
   404  002A                     _RA2	set	42
   405  0029                     _RA1	set	41
   406  0028                     _RA0	set	40
   407  0065                     _RCIF	set	101
   408  00C4                     _CREN	set	196
   409  00C7                     _SPEN	set	199
   410  0030                     _RB0	set	48
   411  0085                     _TRISA	set	133
   412  0087                     _TRISC	set	135
   413  0086                     _TRISB	set	134
   414  0099                     _SPBRG	set	153
   415  040F                     _nRBPU	set	1039
   416  04C1                     _TRMT	set	1217
   417  04C5                     _TXEN	set	1221
   418  043E                     _TRISC6	set	1086
   419  043F                     _TRISC7	set	1087
   420  04C4                     _SYNC	set	1220
   421  04C2                     _BRGH	set	1218
   422  0188                     _ANSEL	set	392
   423  0189                     _ANSELH	set	393
   424  083C                     STR_13:	
   425  083C  3444               	retlw	68	;'D'
   426  083D  3469               	retlw	105	;'i'
   427  083E  3472               	retlw	114	;'r'
   428  083F  343A               	retlw	58	;':'
   429  0840  3420               	retlw	32	;' '
   430  0841  3441               	retlw	65	;'A'
   431  0842  3464               	retlw	100	;'d'
   432  0843  3465               	retlw	101	;'e'
   433  0844  346C               	retlw	108	;'l'
   434  0845  3461               	retlw	97	;'a'
   435  0846  346E               	retlw	110	;'n'
   436  0847  3474               	retlw	116	;'t'
   437  0848  3465               	retlw	101	;'e'
   438  0849  3400               	retlw	0
   439  084A                     STR_8:	
   440  084A  3441               	retlw	65	;'A'
   441  084B  3464               	retlw	100	;'d'
   442  084C  3465               	retlw	101	;'e'
   443  084D  346C               	retlw	108	;'l'
   444  084E  3461               	retlw	97	;'a'
   445  084F  346E               	retlw	110	;'n'
   446  0850  3474               	retlw	116	;'t'
   447  0851  3465               	retlw	101	;'e'
   448  0852  343A               	retlw	58	;':'
   449  0853  3420               	retlw	32	;' '
   450  0854  3400               	retlw	0
   451  0855                     STR_15:	
   452  0855  3444               	retlw	68	;'D'
   453  0856  3469               	retlw	105	;'i'
   454  0857  3472               	retlw	114	;'r'
   455  0858  343A               	retlw	58	;':'
   456  0859  3420               	retlw	32	;' '
   457  085A  3441               	retlw	65	;'A'
   458  085B  3474               	retlw	116	;'t'
   459  085C  3472               	retlw	114	;'r'
   460  085D  3461               	retlw	97	;'a'
   461  085E  3473               	retlw	115	;'s'
   462  085F  3400               	retlw	0
   463  0860                     STR_14:	
   464  0860  3420               	retlw	32	;' '
   465  0861  3443               	retlw	67	;'C'
   466  0862  346D               	retlw	109	;'m'
   467  0863  3420               	retlw	32	;' '
   468  0864  3464               	retlw	100	;'d'
   469  0865  3465               	retlw	101	;'e'
   470  0866  343A               	retlw	58	;':'
   471  0867  3420               	retlw	32	;' '
   472  0868  3400               	retlw	0
   473  0869                     STR_3:	
   474  0869  3441               	retlw	65	;'A'
   475  086A  3474               	retlw	116	;'t'
   476  086B  3472               	retlw	114	;'r'
   477  086C  3461               	retlw	97	;'a'
   478  086D  3473               	retlw	115	;'s'
   479  086E  343A               	retlw	58	;':'
   480  086F  3420               	retlw	32	;' '
   481  0870  3400               	retlw	0
   482  0871                     STR_4:	
   483  0871  3430               	retlw	48	;'0'
   484  0872  3420               	retlw	32	;' '
   485  0873  3443               	retlw	67	;'C'
   486  0874  346D               	retlw	109	;'m'
   487  0875  3400               	retlw	0
   488  0876                     STR_1:	
   489  0876  3425               	retlw	37	;'%'
   490  0877  3464               	retlw	100	;'d'
   491  0878  3400               	retlw	0
   492  0860                     
   493                           ; #config settings
   494  0000                     
   495                           	psect	cinit
   496  07E9                     start_initialization:	
   497  07E9                     __initialization:	
   498                           
   499                           ; Initialize objects allocated to BANK0
   500  07E9  120A  158A  207A  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   501  07EE  00E8               	movwf	__pdataBANK0& (0+127)
   502  07EF  120A  158A  207B  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   503  07F4  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   504                           
   505                           ; Clear objects allocated to BANK0
   506  07F5  1383               	bcf	3,7	;select IRP bank0
   507  07F6  3058               	movlw	low __pbssBANK0
   508  07F7  0084               	movwf	4
   509  07F8  3068               	movlw	low (__pbssBANK0+16)
   510  07F9  160A  118A  26BB   	fcall	clear_ram0
   511  07FC                     end_of_initialization:	
   512                           ;End of C runtime variable initialization code
   513                           
   514  07FC                     __end_of__initialization:	
   515  07FC  0183               	clrf	3
   516  07FD  120A  158A  2981   	ljmp	_main	;jump to C main() function
   517                           
   518                           	psect	bssBANK0
   519  0058                     __pbssBANK0:	
   520  0058                     _lastCm:	
   521  0058                     	ds	2
   522  005A                     _cm:	
   523  005A                     	ds	2
   524  005C                     _CmAntiHorario:	
   525  005C                     	ds	2
   526  005E                     _CmHorario:	
   527  005E                     	ds	2
   528  0060                     _Grados:	
   529  0060                     	ds	2
   530  0062                     _old_key:	
   531  0062                     	ds	1
   532  0063                     _key:	
   533  0063                     	ds	1
   534  0064                     _keypress:	
   535  0064                     	ds	1
   536  0065                     _LastState:	
   537  0065                     	ds	1
   538  0066                     _buffer:	
   539  0066                     	ds	2
   540                           
   541                           	psect	dataBANK0
   542  0068                     __pdataBANK0:	
   543  0068                     _key2:	
   544  0068                     	ds	2
   545                           
   546                           	psect	clrtext
   547  16BB                     clear_ram0:	
   548                           ;	Called with FSR containing the base address, and
   549                           ;	W with the last address+1
   550                           
   551  16BB  0064               	clrwdt	;clear the watchdog before getting into this loop
   552  16BC                     clrloop0:	
   553  16BC  0180               	clrf	0	;clear RAM location pointed to by FSR
   554  16BD  0A84               	incf	4,f	;increment pointer
   555  16BE  0604               	xorwf	4,w	;XOR with final address
   556  16BF  1903               	btfsc	3,2	;have we reached the end yet?
   557  16C0  3400               	retlw	0	;all done for this memory range, return
   558  16C1  0604               	xorwf	4,w	;XOR again to restore value
   559  16C2  2EBC               	goto	clrloop0	;do the next byte
   560                           
   561                           	psect	cstackCOMMON
   562  0070                     __pcstackCOMMON:	
   563  0070                     ?_ConfigInit:	
   564  0070                     ??_StopMotor:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ??_RunMotor:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_Lcd_Port:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ??_Lcd_Port:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_Lcd_Cmd:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_Lcd_Clear:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_Lcd_Init:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_Lcd_Write_Char:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_StopMotor:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_configurarHorario:	
   592                           ; 2 bytes @ 0x0
   593                           
   594  0070                     ?_configurarAntiHorario:	
   595                           ; 2 bytes @ 0x0
   596                           
   597  0070                     ?_KeyPadGetKey:	
   598                           ; 2 bytes @ 0x0
   599                           
   600  0070                     ?_RunMotor:	
   601                           ; 2 bytes @ 0x0
   602                           
   603  0070                     ?_Encoder:	
   604                           ; 2 bytes @ 0x0
   605                           
   606  0070                     ?__Umul8_16:	
   607                           ; 2 bytes @ 0x0
   608                           
   609  0070                     ?_main:	
   610                           ; 2 bytes @ 0x0
   611                           
   612  0070                     ?_VerificarInversionGiro:	
   613                           ; 2 bytes @ 0x0
   614                           
   615  0070                     ?___wmul:	
   616                           ; 2 bytes @ 0x0
   617                           
   618  0070                     ?___lwdiv:	
   619                           ; 2 bytes @ 0x0
   620                           
   621  0070                     ?___aldiv:	
   622                           ; 2 bytes @ 0x0
   623                           
   624  0070                     ?___xxtofl:	
   625                           ; 4 bytes @ 0x0
   626                           
   627  0070                     Lcd_Port@a:	
   628                           ; 4 bytes @ 0x0
   629                           
   630  0070                     __Umul8_16@multiplicand:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ___wmul@multiplier:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ___lwdiv@divisor:	
   637                           ; 2 bytes @ 0x0
   638                           
   639  0070                     ___aldiv@divisor:	
   640                           ; 2 bytes @ 0x0
   641                           
   642  0070                     ___xxtofl@val:	
   643                           ; 4 bytes @ 0x0
   644                           
   645                           
   646                           ; 4 bytes @ 0x0
   647  0070                     	ds	1
   648  0071                     ??_Lcd_Cmd:	
   649  0071                     ??_Lcd_Write_Char:	
   650                           ; 1 bytes @ 0x1
   651                           
   652                           
   653                           ; 1 bytes @ 0x1
   654  0071                     	ds	1
   655  0072                     ??_KeyPadGetKey:	
   656  0072                     ??__Umul8_16:	
   657                           ; 1 bytes @ 0x2
   658                           
   659  0072                     Lcd_Write_Char@temp:	
   660                           ; 1 bytes @ 0x2
   661                           
   662  0072                     ___wmul@multiplicand:	
   663                           ; 1 bytes @ 0x2
   664                           
   665  0072                     ___lwdiv@dividend:	
   666                           ; 2 bytes @ 0x2
   667                           
   668                           
   669                           ; 2 bytes @ 0x2
   670  0072                     	ds	1
   671  0073                     Lcd_Cmd@a:	
   672  0073                     Lcd_Write_Char@y:	
   673                           ; 1 bytes @ 0x3
   674                           
   675                           
   676                           ; 1 bytes @ 0x3
   677  0073                     	ds	1
   678  0074                     ??_Lcd_Clear:	
   679  0074                     ?_Lcd_Set_Cursor:	
   680                           ; 1 bytes @ 0x4
   681                           
   682  0074                     ??_Lcd_Init:	
   683                           ; 1 bytes @ 0x4
   684                           
   685  0074                     ??___wmul:	
   686                           ; 1 bytes @ 0x4
   687                           
   688  0074                     ??___lwdiv:	
   689                           ; 1 bytes @ 0x4
   690                           
   691  0074                     ??___xxtofl:	
   692                           ; 1 bytes @ 0x4
   693                           
   694  0074                     KeyPadGetKey@key:	
   695                           ; 1 bytes @ 0x4
   696                           
   697  0074                     Lcd_Set_Cursor@b:	
   698                           ; 1 bytes @ 0x4
   699                           
   700  0074                     Lcd_Write_Char@a:	
   701                           ; 1 bytes @ 0x4
   702                           
   703  0074                     ___wmul@product:	
   704                           ; 1 bytes @ 0x4
   705                           
   706  0074                     __Umul8_16@product:	
   707                           ; 2 bytes @ 0x4
   708                           
   709  0074                     ___aldiv@dividend:	
   710                           ; 2 bytes @ 0x4
   711                           
   712                           
   713                           ; 4 bytes @ 0x4
   714  0074                     	ds	1
   715  0075                     ??_Lcd_Set_Cursor:	
   716  0075                     ?_Lcd_Write_String:	
   717                           ; 1 bytes @ 0x5
   718                           
   719  0075                     KeyPadGetKey@row:	
   720                           ; 1 bytes @ 0x5
   721                           
   722  0075                     Lcd_Write_String@a:	
   723                           ; 1 bytes @ 0x5
   724                           
   725  0075                     ___lwdiv@quotient:	
   726                           ; 2 bytes @ 0x5
   727                           
   728                           
   729                           ; 2 bytes @ 0x5
   730  0075                     	ds	1
   731  0076                     __Umul8_16@word_mpld:	
   732                           
   733                           ; 2 bytes @ 0x6
   734  0076                     	ds	1
   735  0077                     ??_Lcd_Write_String:	
   736  0077                     Lcd_Set_Cursor@a:	
   737                           ; 1 bytes @ 0x7
   738                           
   739  0077                     ___lwdiv@counter:	
   740                           ; 1 bytes @ 0x7
   741                           
   742                           
   743                           ; 1 bytes @ 0x7
   744  0077                     	ds	1
   745  0078                     ??___aldiv:	
   746  0078                     ?___lwmod:	
   747                           ; 1 bytes @ 0x8
   748                           
   749  0078                     Lcd_Set_Cursor@z:	
   750                           ; 2 bytes @ 0x8
   751                           
   752  0078                     ___xxtofl@sign:	
   753                           ; 1 bytes @ 0x8
   754                           
   755  0078                     __Umul8_16@multiplier:	
   756                           ; 1 bytes @ 0x8
   757                           
   758  0078                     ___lwmod@divisor:	
   759                           ; 1 bytes @ 0x8
   760                           
   761                           
   762                           ; 2 bytes @ 0x8
   763  0078                     	ds	1
   764  0079                     Lcd_Set_Cursor@y:	
   765  0079                     ___xxtofl@exp:	
   766                           ; 1 bytes @ 0x9
   767                           
   768  0079                     UART_Init@x:	
   769                           ; 1 bytes @ 0x9
   770                           
   771                           
   772                           ; 2 bytes @ 0x9
   773  0079                     	ds	1
   774  007A                     Lcd_Set_Cursor@temp:	
   775  007A                     Lcd_Write_String@i:	
   776                           ; 1 bytes @ 0xA
   777                           
   778  007A                     ___lwmod@dividend:	
   779                           ; 2 bytes @ 0xA
   780                           
   781  007A                     ___xxtofl@arg:	
   782                           ; 2 bytes @ 0xA
   783                           
   784                           
   785                           ; 4 bytes @ 0xA
   786  007A                     	ds	1
   787  007B                     ??_ConfigInit:	
   788                           
   789                           ; 1 bytes @ 0xB
   790  007B                     	ds	1
   791  007C                     ??___lwmod:	
   792                           
   793                           ; 1 bytes @ 0xC
   794  007C                     	ds	1
   795  007D                     ___lwmod@counter:	
   796                           
   797                           ; 1 bytes @ 0xD
   798  007D                     	ds	1
   799  007E                     ??_VerificarInversionGiro:	
   800                           
   801                           	psect	cstackBANK0
   802  0020                     __pcstackBANK0:	
   803                           ; 1 bytes @ 0xE
   804                           
   805  0020                     ?_sprintf:	
   806  0020                     ?___fladd:	
   807                           ; 2 bytes @ 0x0
   808                           
   809  0020                     ?___flmul:	
   810                           ; 4 bytes @ 0x0
   811                           
   812  0020                     sprintf@f:	
   813                           ; 4 bytes @ 0x0
   814                           
   815  0020                     ___aldiv@counter:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0020                     ___fladd@b:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0020                     ___flmul@b:	
   822                           ; 4 bytes @ 0x0
   823                           
   824                           
   825                           ; 4 bytes @ 0x0
   826  0020                     	ds	1
   827  0021                     ___aldiv@sign:	
   828                           
   829                           ; 1 bytes @ 0x1
   830  0021                     	ds	1
   831  0022                     ___aldiv@quotient:	
   832                           
   833                           ; 4 bytes @ 0x2
   834  0022                     	ds	1
   835  0023                     ??_sprintf:	
   836                           
   837                           ; 1 bytes @ 0x3
   838  0023                     	ds	1
   839  0024                     ___fladd@a:	
   840  0024                     ___flmul@a:	
   841                           ; 4 bytes @ 0x4
   842                           
   843                           
   844                           ; 4 bytes @ 0x4
   845  0024                     	ds	2
   846  0026                     ?_UART_Init:	
   847  0026                     sprintf@ap:	
   848                           ; 1 bytes @ 0x6
   849                           
   850  0026                     UART_Init@baudrate:	
   851                           ; 1 bytes @ 0x6
   852                           
   853                           
   854                           ; 4 bytes @ 0x6
   855  0026                     	ds	1
   856  0027                     sprintf@flag:	
   857                           
   858                           ; 1 bytes @ 0x7
   859  0027                     	ds	1
   860  0028                     ??___fladd:	
   861  0028                     ??___flmul:	
   862                           ; 1 bytes @ 0x8
   863                           
   864  0028                     sprintf@prec:	
   865                           ; 1 bytes @ 0x8
   866                           
   867                           
   868                           ; 1 bytes @ 0x8
   869  0028                     	ds	1
   870  0029                     sprintf@val:	
   871                           
   872                           ; 2 bytes @ 0x9
   873  0029                     	ds	1
   874  002A                     ??_UART_Init:	
   875                           
   876                           ; 1 bytes @ 0xA
   877  002A                     	ds	1
   878  002B                     sprintf@sp:	
   879                           
   880                           ; 1 bytes @ 0xB
   881  002B                     	ds	1
   882  002C                     sprintf@c:	
   883                           
   884                           ; 1 bytes @ 0xC
   885  002C                     	ds	1
   886  002D                     ___flmul@sign:	
   887                           
   888                           ; 1 bytes @ 0xD
   889  002D                     	ds	1
   890  002E                     ___flmul@grs:	
   891                           
   892                           ; 4 bytes @ 0xE
   893  002E                     	ds	2
   894  0030                     ___fladd@signs:	
   895                           
   896                           ; 1 bytes @ 0x10
   897  0030                     	ds	1
   898  0031                     ___fladd@aexp:	
   899                           
   900                           ; 1 bytes @ 0x11
   901  0031                     	ds	1
   902  0032                     ___fladd@bexp:	
   903  0032                     ___flmul@aexp:	
   904                           ; 1 bytes @ 0x12
   905                           
   906                           
   907                           ; 1 bytes @ 0x12
   908  0032                     	ds	1
   909  0033                     ___fladd@grs:	
   910  0033                     ___flmul@bexp:	
   911                           ; 1 bytes @ 0x13
   912                           
   913                           
   914                           ; 1 bytes @ 0x13
   915  0033                     	ds	1
   916  0034                     ___flmul@prod:	
   917                           
   918                           ; 4 bytes @ 0x14
   919  0034                     	ds	4
   920  0038                     ___flmul@temp:	
   921                           
   922                           ; 2 bytes @ 0x18
   923  0038                     	ds	2
   924  003A                     ?___flge:	
   925  003A                     ?___fltol:	
   926                           ; 1 bit 
   927                           
   928  003A                     ___flge@ff1:	
   929                           ; 4 bytes @ 0x1A
   930                           
   931  003A                     ___fltol@f1:	
   932                           ; 4 bytes @ 0x1A
   933                           
   934                           
   935                           ; 4 bytes @ 0x1A
   936  003A                     	ds	4
   937  003E                     ??___fltol:	
   938  003E                     ___flge@ff2:	
   939                           ; 1 bytes @ 0x1E
   940                           
   941                           
   942                           ; 4 bytes @ 0x1E
   943  003E                     	ds	4
   944  0042                     ??___flge:	
   945                           
   946                           ; 1 bytes @ 0x22
   947  0042                     	ds	1
   948  0043                     ___fltol@sign1:	
   949                           
   950                           ; 1 bytes @ 0x23
   951  0043                     	ds	1
   952  0044                     ___fltol@exp1:	
   953                           
   954                           ; 1 bytes @ 0x24
   955  0044                     	ds	1
   956  0045                     ?_Lcd_Write_Integer:	
   957  0045                     Lcd_Write_Integer@a:	
   958                           ; 1 bytes @ 0x25
   959                           
   960                           
   961                           ; 2 bytes @ 0x25
   962  0045                     	ds	2
   963  0047                     ??_Lcd_Write_Integer:	
   964                           
   965                           ; 1 bytes @ 0x27
   966  0047                     	ds	1
   967  0048                     Lcd_Write_Integer@Data:	
   968                           
   969                           ; 10 bytes @ 0x28
   970  0048                     	ds	10
   971  0052                     ??_configurarHorario:	
   972  0052                     ??_configurarAntiHorario:	
   973                           ; 1 bytes @ 0x32
   974                           
   975  0052                     ??_Encoder:	
   976                           ; 1 bytes @ 0x32
   977                           
   978                           
   979                           ; 1 bytes @ 0x32
   980  0052                     	ds	4
   981  0056                     ??_main:	
   982                           
   983                           ; 1 bytes @ 0x36
   984  0056                     	ds	2
   985                           
   986                           	psect	maintext
   987  0981                     __pmaintext:	
   988 ;;
   989 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   990 ;;
   991 ;; *************** function _main *****************
   992 ;; Defined at:
   993 ;;		line 8 in file "main.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;		None
   998 ;; Return value:  Size  Location     Type
   999 ;;                  2   38[None  ] int 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : B00/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1007 ;;      Params:         0       0       0       0       0
  1008 ;;      Locals:         0       0       0       0       0
  1009 ;;      Temps:          0       2       0       0       0
  1010 ;;      Totals:         0       2       0       0       0
  1011 ;;Total ram usage:        2 bytes
  1012 ;; Hardware stack levels required when called:    5
  1013 ;; This function calls:
  1014 ;;		_ConfigInit
  1015 ;;		_Encoder
  1016 ;;		_KeyPadGetKey
  1017 ;;		_RunMotor
  1018 ;;		_StopMotor
  1019 ;;		_configurarAntiHorario
  1020 ;;		_configurarHorario
  1021 ;; This function is called by:
  1022 ;;		Startup code after reset
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           
  1027                           ;psect for function _main
  1028  0981                     _main:	
  1029                           
  1030                           ;main.c: 9:     ConfigInit();
  1031                           
  1032                           ;incstack = 0
  1033                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1034  0981  160A  118A  2730  120A  158A  	fcall	_ConfigInit
  1035                           
  1036                           ;main.c: 10:     StopMotor();
  1037  0986  160A  118A  26B6  120A  158A  	fcall	_StopMotor
  1038                           
  1039                           ;main.c: 11:     configurarHorario();
  1040  098B  120A  118A  201B  120A  158A  	fcall	_configurarHorario
  1041                           
  1042                           ;main.c: 12:     configurarAntiHorario();
  1043  0990  120A  158A  270A  120A  158A  	fcall	_configurarAntiHorario
  1044  0995                     l3067:	
  1045                           
  1046                           ;main.c: 16:         keypress = KeyPadGetKey();
  1047  0995  120A  158A  22DF  120A  158A  	fcall	_KeyPadGetKey
  1048  099A  0870               	movf	?_KeyPadGetKey,w
  1049  099B  1283               	bcf	3,5	;RP0=0, select bank0
  1050  099C  1303               	bcf	3,6	;RP1=0, select bank0
  1051  099D  00D6               	movwf	??_main
  1052  099E  0856               	movf	??_main,w
  1053  099F  00E4               	movwf	_keypress
  1054                           
  1055                           ;main.c: 19:         if (keypress != 0xFF) {
  1056  09A0  0A64               	incf	_keypress,w
  1057  09A1  1D03               	btfss	3,2
  1058  09A2  29BC               	goto	l3083
  1059  09A3  29D2               	goto	l40
  1060  09A4                     l3073:	
  1061                           
  1062                           ;main.c: 23:                     configurarHorario();
  1063  09A4  120A  118A  201B  120A  158A  	fcall	_configurarHorario
  1064                           
  1065                           ;main.c: 24:                     break;
  1066  09A9  29D2               	goto	l40
  1067  09AA                     l3075:	
  1068                           
  1069                           ;main.c: 26:                     configurarAntiHorario();
  1070  09AA  120A  158A  270A  120A  158A  	fcall	_configurarAntiHorario
  1071                           
  1072                           ;main.c: 27:                     break;
  1073  09AF  29D2               	goto	l40
  1074  09B0                     l3077:	
  1075                           
  1076                           ;main.c: 29:                     StopMotor();
  1077  09B0  160A  118A  26B6  120A  158A  	fcall	_StopMotor
  1078                           
  1079                           ;main.c: 30:                     break;
  1080  09B5  29D2               	goto	l40
  1081  09B6                     l3079:	
  1082                           
  1083                           ;main.c: 32:                     RunMotor();
  1084  09B6  160A  118A  26CE  120A  158A  	fcall	_RunMotor
  1085                           
  1086                           ;main.c: 33:                     break;
  1087  09BB  29D2               	goto	l40
  1088  09BC                     l3083:	
  1089  09BC  0864               	movf	_keypress,w
  1090  09BD  00D6               	movwf	??_main
  1091  09BE  01D7               	clrf	??_main+1
  1092                           
  1093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1094                           ; Switch size 1, requested type "simple"
  1095                           ; Number of cases is 1, Range of values is 0 to 0
  1096                           ; switch strategies available:
  1097                           ; Name         Instructions Cycles
  1098                           ; simple_byte            4     3 (average)
  1099                           ; direct_byte           11     8 (fixed)
  1100                           ; jumptable            260     6 (fixed)
  1101                           ;	Chosen strategy is simple_byte
  1102  09BF  0857               	movf	??_main+1,w
  1103  09C0  3A00               	xorlw	0	; case 0
  1104  09C1  1903               	skipnz
  1105  09C2  29C4               	goto	l3183
  1106  09C3  29D2               	goto	l40
  1107  09C4                     l3183:	
  1108                           
  1109                           ; Switch size 1, requested type "simple"
  1110                           ; Number of cases is 4, Range of values is 65 to 68
  1111                           ; switch strategies available:
  1112                           ; Name         Instructions Cycles
  1113                           ; simple_byte           13     7 (average)
  1114                           ; direct_byte           23    11 (fixed)
  1115                           ; jumptable            263     9 (fixed)
  1116                           ;	Chosen strategy is simple_byte
  1117  09C4  0856               	movf	??_main,w
  1118  09C5  3A41               	xorlw	65	; case 65
  1119  09C6  1903               	skipnz
  1120  09C7  29A4               	goto	l3073
  1121  09C8  3A03               	xorlw	3	; case 66
  1122  09C9  1903               	skipnz
  1123  09CA  29AA               	goto	l3075
  1124  09CB  3A01               	xorlw	1	; case 67
  1125  09CC  1903               	skipnz
  1126  09CD  29B0               	goto	l3077
  1127  09CE  3A07               	xorlw	7	; case 68
  1128  09CF  1903               	skipnz
  1129  09D0  29B6               	goto	l3079
  1130  09D1  29D2               	goto	l40
  1131  09D2                     l40:	
  1132                           ;main.c: 35:         }
  1133                           
  1134                           
  1135                           ;main.c: 38:         if (RB0 == 1 && LastState == 0) {
  1136  09D2  1283               	bcf	3,5	;RP0=0, select bank0
  1137  09D3  1303               	bcf	3,6	;RP1=0, select bank0
  1138  09D4  1C06               	btfss	6,0	;volatile
  1139  09D5  29DF               	goto	l47
  1140  09D6  0865               	movf	_LastState,w
  1141  09D7  1D03               	btfss	3,2
  1142  09D8  29DF               	goto	l47
  1143                           
  1144                           ;main.c: 39:             Encoder();
  1145  09D9  120A  118A  20D7  120A  158A  	fcall	_Encoder
  1146                           
  1147                           ;main.c: 40:         } else if (RB0 == 0) {
  1148  09DE  2995               	goto	l3067
  1149  09DF                     l47:	
  1150  09DF  1806               	btfsc	6,0	;volatile
  1151  09E0  2995               	goto	l3067
  1152                           
  1153                           ;main.c: 41:             LastState = 0;
  1154  09E1  01E5               	clrf	_LastState
  1155  09E2  2995               	goto	l3067
  1156  09E3                     __end_of_main:	
  1157                           
  1158                           	psect	text1
  1159  001B                     __ptext1:	
  1160 ;; *************** function _configurarHorario *****************
  1161 ;; Defined at:
  1162 ;;		line 99 in file "Config.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;		None
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  2    6[None  ] int 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1176 ;;      Params:         0       0       0       0       0
  1177 ;;      Locals:         0       0       0       0       0
  1178 ;;      Temps:          0       4       0       0       0
  1179 ;;      Totals:         0       4       0       0       0
  1180 ;;Total ram usage:        4 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    4
  1183 ;; This function calls:
  1184 ;;		_KeyPadGetKey
  1185 ;;		_Lcd_Clear
  1186 ;;		_Lcd_Set_Cursor
  1187 ;;		_Lcd_Write_Integer
  1188 ;;		_Lcd_Write_String
  1189 ;;		_RunMotor
  1190 ;;		_StopMotor
  1191 ;;		___wmul
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           
  1198                           ;psect for function _configurarHorario
  1199  001B                     _configurarHorario:	
  1200                           
  1201                           ;Config.c: 101:     buffer = 0;
  1202                           
  1203                           ;incstack = 0
  1204                           ; Regs used in _configurarHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1205  001B  1283               	bcf	3,5	;RP0=0, select bank0
  1206  001C  1303               	bcf	3,6	;RP1=0, select bank0
  1207  001D  01E6               	clrf	_buffer
  1208  001E  01E7               	clrf	_buffer+1
  1209                           
  1210                           ;Config.c: 102:     StopMotor();
  1211  001F  160A  118A  26B6  120A  118A  	fcall	_StopMotor
  1212  0024                     L2:	
  1213                           
  1214                           ;Config.c: 104:     Lcd_Clear();
  1215  0024  160A  118A  26C3  120A  118A  	fcall	_Lcd_Clear
  1216                           
  1217                           ;Config.c: 105:     Lcd_Set_Cursor(1, 1);
  1218  0029  01F4               	clrf	Lcd_Set_Cursor@b
  1219  002A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1220  002B  3001               	movlw	1
  1221  002C  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  1222                           
  1223                           ;Config.c: 106:     Lcd_Write_String("Adelante: ");
  1224  0031  303B               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1225  0032  00F5               	movwf	Lcd_Write_String@a
  1226  0033  3080               	movlw	128
  1227  0034  00F6               	movwf	Lcd_Write_String@a+1
  1228  0035  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  1229                           
  1230                           ;Config.c: 107:     Lcd_Set_Cursor(2, 1);
  1231  003A  01F4               	clrf	Lcd_Set_Cursor@b
  1232  003B  0AF4               	incf	Lcd_Set_Cursor@b,f
  1233  003C  3002               	movlw	2
  1234  003D  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  1235                           
  1236                           ;Config.c: 108:     Lcd_Write_String("0 Cm");
  1237  0042  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1238                           
  1239                           ;Config.c: 115:             switch (key2) {
  1240  0043  288A               	goto	L3
  1241  0044                     l2913:	
  1242                           
  1243                           ;Config.c: 118:                     buffer = 0;
  1244  0044  01E6               	clrf	_buffer
  1245  0045  01E7               	clrf	_buffer+1
  1246  0046  2824               	goto	L2
  1247  0047                     l2925:	
  1248                           ;Config.c: 124:                     break;
  1249                           
  1250                           ;Config.c: 123:                     Lcd_Write_String("0 Cm");
  1251                           
  1252                           ;Config.c: 122:                     Lcd_Set_Cursor(2, 1);
  1253                           
  1254                           ;Config.c: 121:                     Lcd_Write_String("Adelante: ");
  1255                           
  1256                           ;Config.c: 120:                     Lcd_Set_Cursor(1, 1);
  1257                           
  1258                           ;Config.c: 119:                     Lcd_Clear();
  1259                           
  1260                           
  1261                           ;Config.c: 130:                     Grados = 0;
  1262  0047  01E0               	clrf	_Grados
  1263  0048  01E1               	clrf	_Grados+1
  1264                           
  1265                           ;Config.c: 131:                     CmHorario = buffer;
  1266  0049  0867               	movf	_buffer+1,w
  1267  004A  00DF               	movwf	_CmHorario+1
  1268  004B  0866               	movf	_buffer,w
  1269  004C  00DE               	movwf	_CmHorario
  1270                           
  1271                           ;Config.c: 132:                     RunMotor();
  1272  004D  160A  118A  26CE  120A  118A  	fcall	_RunMotor
  1273                           
  1274                           ;Config.c: 133:                     if (CmHorario != 0) {
  1275  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1276  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1277  0054  085E               	movf	_CmHorario,w
  1278  0055  045F               	iorwf	_CmHorario+1,w
  1279  0056  1D03               	btfss	3,2
  1280  0057  0008               	return
  1281  0058  2892               	goto	l2907
  1282  0059                     l2935:	
  1283                           
  1284                           ;Config.c: 142:                     buffer = (10 * buffer + key2);
  1285  0059  0867               	movf	_buffer+1,w
  1286  005A  00F1               	movwf	___wmul@multiplier+1
  1287  005B  0866               	movf	_buffer,w
  1288  005C  00F0               	movwf	___wmul@multiplier
  1289  005D  300A               	movlw	10
  1290  005E  00F2               	movwf	___wmul@multiplicand
  1291  005F  3000               	movlw	0
  1292  0060  00F3               	movwf	___wmul@multiplicand+1
  1293  0061  160A  118A  270F  120A  118A  	fcall	___wmul
  1294  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1295  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1296  0068  0868               	movf	_key2,w
  1297  0069  0770               	addwf	?___wmul,w
  1298  006A  00E6               	movwf	_buffer
  1299  006B  0869               	movf	_key2+1,w
  1300  006C  1803               	skipnc
  1301  006D  0A69               	incf	_key2+1,w
  1302  006E  0771               	addwf	?___wmul+1,w
  1303  006F  00E7               	movwf	_buffer+1
  1304                           
  1305                           ;Config.c: 143:                     buffer -= 48;
  1306  0070  30D0               	movlw	208
  1307  0071  07E6               	addwf	_buffer,f
  1308  0072  1803               	skipnc
  1309  0073  0AE7               	incf	_buffer+1,f
  1310  0074  30FF               	movlw	255
  1311  0075  07E7               	addwf	_buffer+1,f
  1312                           
  1313                           ;Config.c: 144:                     Lcd_Set_Cursor(2, 1);
  1314  0076  01F4               	clrf	Lcd_Set_Cursor@b
  1315  0077  0AF4               	incf	Lcd_Set_Cursor@b,f
  1316  0078  3002               	movlw	2
  1317  0079  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  1318                           
  1319                           ;Config.c: 145:                     Lcd_Write_Integer(buffer);
  1320  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1321  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1322  0080  0867               	movf	_buffer+1,w
  1323  0081  00C6               	movwf	Lcd_Write_Integer@a+1
  1324  0082  0866               	movf	_buffer,w
  1325  0083  00C5               	movwf	Lcd_Write_Integer@a
  1326  0084  120A  118A  2003  120A  118A  	fcall	_Lcd_Write_Integer
  1327                           
  1328                           ;Config.c: 146:                     Lcd_Write_String(" Cm");
  1329  0089  3063               	movlw	(low (((STR_4+1)-__stringbase)| (0+32768)))& (0+255)
  1330  008A                     L3:	
  1331  008A  00F5               	movwf	Lcd_Write_String@a
  1332  008B  3080               	movlw	128
  1333  008C  00F6               	movwf	Lcd_Write_String@a+1
  1334  008D  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  1335  0092                     l2907:	
  1336                           
  1337                           ;Config.c: 112:         keypress = KeyPadGetKey();
  1338  0092  120A  158A  22DF  120A  118A  	fcall	_KeyPadGetKey
  1339  0097  0870               	movf	?_KeyPadGetKey,w
  1340  0098  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0099  1303               	bcf	3,6	;RP1=0, select bank0
  1342  009A  00D2               	movwf	??_configurarHorario
  1343  009B  0852               	movf	??_configurarHorario,w
  1344  009C  00E4               	movwf	_keypress
  1345                           
  1346                           ;Config.c: 113:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1347  009D  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1348  009E  0084               	movwf	4
  1349  009F  120A  158A  200A  120A  118A  	fcall	stringdir
  1350  00A4  00D2               	movwf	??_configurarHorario
  1351  00A5  120A  158A  200A  120A  118A  	fcall	stringdir
  1352  00AA  00D3               	movwf	??_configurarHorario+1
  1353  00AB  0864               	movf	_keypress,w
  1354  00AC  00D4               	movwf	??_configurarHorario+2
  1355  00AD  01D5               	clrf	??_configurarHorario+3
  1356  00AE  0853               	movf	??_configurarHorario+1,w
  1357  00AF  0655               	xorwf	??_configurarHorario+3,w
  1358  00B0  1D03               	skipz
  1359  00B1  28B4               	goto	u4055
  1360  00B2  0852               	movf	??_configurarHorario,w
  1361  00B3  0654               	xorwf	??_configurarHorario+2,w
  1362  00B4                     u4055:	
  1363  00B4  1903               	skipnz
  1364  00B5  2892               	goto	l2907
  1365                           
  1366                           ;Config.c: 114:             key2 = keypress;
  1367  00B6  0864               	movf	_keypress,w
  1368  00B7  00D2               	movwf	??_configurarHorario
  1369  00B8  01D3               	clrf	??_configurarHorario+1
  1370  00B9  0852               	movf	??_configurarHorario,w
  1371  00BA  00E8               	movwf	_key2
  1372  00BB  0853               	movf	??_configurarHorario+1,w
  1373  00BC  00E9               	movwf	_key2+1
  1374                           
  1375                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1376                           ; Switch size 1, requested type "simple"
  1377                           ; Number of cases is 1, Range of values is 0 to 0
  1378                           ; switch strategies available:
  1379                           ; Name         Instructions Cycles
  1380                           ; simple_byte            4     3 (average)
  1381                           ; direct_byte           11     8 (fixed)
  1382                           ; jumptable            260     6 (fixed)
  1383                           ;	Chosen strategy is simple_byte
  1384                           
  1385                           ;Config.c: 147:             }
  1386  00BD  0869               	movf	_key2+1,w
  1387  00BE  3A00               	xorlw	0	; case 0
  1388  00BF  1903               	skipnz
  1389  00C0  28C2               	goto	l3185
  1390  00C1  2859               	goto	l2935
  1391  00C2                     l3185:	
  1392                           
  1393                           ; Switch size 1, requested type "simple"
  1394                           ; Number of cases is 6, Range of values is 35 to 68
  1395                           ; switch strategies available:
  1396                           ; Name         Instructions Cycles
  1397                           ; simple_byte           19    10 (average)
  1398                           ; direct_byte          113    11 (fixed)
  1399                           ; jumptable            263     9 (fixed)
  1400                           ;	Chosen strategy is simple_byte
  1401  00C2  0868               	movf	_key2,w
  1402  00C3  3A23               	xorlw	35	; case 35
  1403  00C4  1903               	skipnz
  1404  00C5  28D6               	goto	l276
  1405  00C6  3A09               	xorlw	9	; case 42
  1406  00C7  1903               	skipnz
  1407  00C8  28D6               	goto	l276
  1408  00C9  3A6B               	xorlw	107	; case 65
  1409  00CA  1903               	skipnz
  1410  00CB  2844               	goto	l2913
  1411  00CC  3A03               	xorlw	3	; case 66
  1412  00CD  1903               	skipnz
  1413  00CE  28D6               	goto	l276
  1414  00CF  3A01               	xorlw	1	; case 67
  1415  00D0  1903               	skipnz
  1416  00D1  28D6               	goto	l276
  1417  00D2  3A07               	xorlw	7	; case 68
  1418  00D3  1903               	skipnz
  1419  00D4  2847               	goto	l2925
  1420  00D5  2859               	goto	l2935
  1421  00D6                     l276:	
  1422                           ;Config.c: 148:         }
  1423                           
  1424  00D6  2892               	goto	l2907
  1425  00D7                     __end_of_configurarHorario:	
  1426                           
  1427                           	psect	text2
  1428  0F0A                     __ptext2:	
  1429 ;; *************** function _configurarAntiHorario *****************
  1430 ;; Defined at:
  1431 ;;		line 46 in file "Config.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  2    8[None  ] int 
  1438 ;; Registers used:
  1439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1445 ;;      Params:         0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0
  1447 ;;      Temps:          0       4       0       0       0
  1448 ;;      Totals:         0       4       0       0       0
  1449 ;;Total ram usage:        4 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    4
  1452 ;; This function calls:
  1453 ;;		_KeyPadGetKey
  1454 ;;		_Lcd_Clear
  1455 ;;		_Lcd_Set_Cursor
  1456 ;;		_Lcd_Write_Integer
  1457 ;;		_Lcd_Write_String
  1458 ;;		_RunMotor
  1459 ;;		_StopMotor
  1460 ;;		___wmul
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           
  1467                           ;psect for function _configurarAntiHorario
  1468  0F0A                     _configurarAntiHorario:	
  1469                           
  1470                           ;Config.c: 48:     buffer = 0;
  1471                           
  1472                           ;incstack = 0
  1473                           ; Regs used in _configurarAntiHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1474  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  1475  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  1476  0F0C  01E6               	clrf	_buffer
  1477  0F0D  01E7               	clrf	_buffer+1
  1478                           
  1479                           ;Config.c: 49:     StopMotor();
  1480  0F0E  160A  118A  26B6  120A  158A  	fcall	_StopMotor
  1481                           
  1482                           ;Config.c: 51:     Lcd_Clear();
  1483  0F13  160A  118A  26C3  120A  158A  	fcall	_Lcd_Clear
  1484                           
  1485                           ;Config.c: 52:     Lcd_Set_Cursor(1, 1);
  1486  0F18  01F4               	clrf	Lcd_Set_Cursor@b
  1487  0F19  0AF4               	incf	Lcd_Set_Cursor@b,f
  1488  0F1A  3001               	movlw	1
  1489  0F1B  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1490                           
  1491                           ;Config.c: 53:     Lcd_Write_String("Atras: ");
  1492  0F20  305A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1493  0F21  00F5               	movwf	Lcd_Write_String@a
  1494  0F22  3080               	movlw	128
  1495  0F23  00F6               	movwf	Lcd_Write_String@a+1
  1496  0F24  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1497                           
  1498                           ;Config.c: 54:     Lcd_Set_Cursor(2, 1);
  1499  0F29  01F4               	clrf	Lcd_Set_Cursor@b
  1500  0F2A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1501  0F2B  3002               	movlw	2
  1502  0F2C  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1503                           
  1504                           ;Config.c: 55:     Lcd_Write_String("0 Cm");
  1505  0F31  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1506  0F32  00F5               	movwf	Lcd_Write_String@a
  1507  0F33  3080               	movlw	128
  1508  0F34  00F6               	movwf	Lcd_Write_String@a+1
  1509  0F35  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1510  0F3A                     l2965:	
  1511                           
  1512                           ;Config.c: 59:         keypress = KeyPadGetKey();
  1513  0F3A  120A  158A  22DF  120A  158A  	fcall	_KeyPadGetKey
  1514  0F3F  0870               	movf	?_KeyPadGetKey,w
  1515  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  1516  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  1517  0F42  00D2               	movwf	??_configurarAntiHorario
  1518  0F43  0852               	movf	??_configurarAntiHorario,w
  1519  0F44  00E4               	movwf	_keypress
  1520                           
  1521                           ;Config.c: 60:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1522  0F45  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1523  0F46  0084               	movwf	4
  1524  0F47  120A  158A  200A  120A  158A  	fcall	stringdir
  1525  0F4C  00D2               	movwf	??_configurarAntiHorario
  1526  0F4D  120A  158A  200A  120A  158A  	fcall	stringdir
  1527  0F52  00D3               	movwf	??_configurarAntiHorario+1
  1528  0F53  0864               	movf	_keypress,w
  1529  0F54  00D4               	movwf	??_configurarAntiHorario+2
  1530  0F55  01D5               	clrf	??_configurarAntiHorario+3
  1531  0F56  0853               	movf	??_configurarAntiHorario+1,w
  1532  0F57  0655               	xorwf	??_configurarAntiHorario+3,w
  1533  0F58  1D03               	skipz
  1534  0F59  2F5C               	goto	u4075
  1535  0F5A  0852               	movf	??_configurarAntiHorario,w
  1536  0F5B  0654               	xorwf	??_configurarAntiHorario+2,w
  1537  0F5C                     u4075:	
  1538  0F5C  1903               	skipnz
  1539  0F5D  2FF5               	goto	l3005
  1540                           
  1541                           ;Config.c: 61:             key2 = keypress;
  1542  0F5E  0864               	movf	_keypress,w
  1543  0F5F  00D2               	movwf	??_configurarAntiHorario
  1544  0F60  01D3               	clrf	??_configurarAntiHorario+1
  1545  0F61  0852               	movf	??_configurarAntiHorario,w
  1546  0F62  00E8               	movwf	_key2
  1547  0F63  0853               	movf	??_configurarAntiHorario+1,w
  1548  0F64  00E9               	movwf	_key2+1
  1549                           
  1550                           ;Config.c: 62:             switch (key2) {
  1551  0F65  2FDC               	goto	l3003
  1552  0F66                     l2971:	
  1553                           
  1554                           ;Config.c: 66:                     buffer = 0;
  1555  0F66  01E6               	clrf	_buffer
  1556  0F67  01E7               	clrf	_buffer+1
  1557                           
  1558                           ;Config.c: 67:                     Lcd_Clear();
  1559  0F68  160A  118A  26C3  120A  158A  	fcall	_Lcd_Clear
  1560                           
  1561                           ;Config.c: 68:                     Lcd_Set_Cursor(1, 1);
  1562  0F6D  01F4               	clrf	Lcd_Set_Cursor@b
  1563  0F6E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1564  0F6F  3001               	movlw	1
  1565  0F70  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1566                           
  1567                           ;Config.c: 69:                     Lcd_Write_String("Atras: ");
  1568  0F75  305A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1569  0F76  00F5               	movwf	Lcd_Write_String@a
  1570  0F77  3080               	movlw	128
  1571  0F78  00F6               	movwf	Lcd_Write_String@a+1
  1572  0F79  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1573                           
  1574                           ;Config.c: 70:                     Lcd_Set_Cursor(2, 1);
  1575  0F7E  01F4               	clrf	Lcd_Set_Cursor@b
  1576  0F7F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1577  0F80  3002               	movlw	2
  1578  0F81  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1579                           
  1580                           ;Config.c: 71:                     Lcd_Write_String("0 Cm");
  1581  0F86  3062               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1582  0F87  00F5               	movwf	Lcd_Write_String@a
  1583  0F88  3080               	movlw	128
  1584  0F89  00F6               	movwf	Lcd_Write_String@a+1
  1585  0F8A  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1586                           
  1587                           ;Config.c: 72:                     break;
  1588  0F8F  2FF5               	goto	l3005
  1589  0F90                     l2983:	
  1590                           
  1591                           ;Config.c: 76:                     Grados = 0;
  1592  0F90  01E0               	clrf	_Grados
  1593  0F91  01E1               	clrf	_Grados+1
  1594                           
  1595                           ;Config.c: 77:                     CmAntiHorario = buffer;
  1596  0F92  0867               	movf	_buffer+1,w
  1597  0F93  00DD               	movwf	_CmAntiHorario+1
  1598  0F94  0866               	movf	_buffer,w
  1599  0F95  00DC               	movwf	_CmAntiHorario
  1600                           
  1601                           ;Config.c: 78:                     RunMotor();
  1602  0F96  160A  118A  26CE  120A  158A  	fcall	_RunMotor
  1603                           
  1604                           ;Config.c: 79:                     if (CmAntiHorario != 0) {
  1605  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  1607  0F9D  085C               	movf	_CmAntiHorario,w
  1608  0F9E  045D               	iorwf	_CmAntiHorario+1,w
  1609  0F9F  1D03               	btfss	3,2
  1610  0FA0  0008               	return
  1611  0FA1  2FF5               	goto	l3005
  1612  0FA2                     l2993:	
  1613                           
  1614                           ;Config.c: 88:                     buffer = (10 * buffer + key2);
  1615  0FA2  0867               	movf	_buffer+1,w
  1616  0FA3  00F1               	movwf	___wmul@multiplier+1
  1617  0FA4  0866               	movf	_buffer,w
  1618  0FA5  00F0               	movwf	___wmul@multiplier
  1619  0FA6  300A               	movlw	10
  1620  0FA7  00F2               	movwf	___wmul@multiplicand
  1621  0FA8  3000               	movlw	0
  1622  0FA9  00F3               	movwf	___wmul@multiplicand+1
  1623  0FAA  160A  118A  270F  120A  158A  	fcall	___wmul
  1624  0FAF  1283               	bcf	3,5	;RP0=0, select bank0
  1625  0FB0  1303               	bcf	3,6	;RP1=0, select bank0
  1626  0FB1  0868               	movf	_key2,w
  1627  0FB2  0770               	addwf	?___wmul,w
  1628  0FB3  00E6               	movwf	_buffer
  1629  0FB4  0869               	movf	_key2+1,w
  1630  0FB5  1803               	skipnc
  1631  0FB6  0A69               	incf	_key2+1,w
  1632  0FB7  0771               	addwf	?___wmul+1,w
  1633  0FB8  00E7               	movwf	_buffer+1
  1634                           
  1635                           ;Config.c: 89:                     buffer -= 48;
  1636  0FB9  30D0               	movlw	208
  1637  0FBA  07E6               	addwf	_buffer,f
  1638  0FBB  1803               	skipnc
  1639  0FBC  0AE7               	incf	_buffer+1,f
  1640  0FBD  30FF               	movlw	255
  1641  0FBE  07E7               	addwf	_buffer+1,f
  1642                           
  1643                           ;Config.c: 90:                     Lcd_Set_Cursor(2, 1);
  1644  0FBF  01F4               	clrf	Lcd_Set_Cursor@b
  1645  0FC0  0AF4               	incf	Lcd_Set_Cursor@b,f
  1646  0FC1  3002               	movlw	2
  1647  0FC2  120A  158A  20DC  120A  158A  	fcall	_Lcd_Set_Cursor
  1648                           
  1649                           ;Config.c: 91:                     Lcd_Write_Integer(buffer);
  1650  0FC7  1283               	bcf	3,5	;RP0=0, select bank0
  1651  0FC8  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0FC9  0867               	movf	_buffer+1,w
  1653  0FCA  00C6               	movwf	Lcd_Write_Integer@a+1
  1654  0FCB  0866               	movf	_buffer,w
  1655  0FCC  00C5               	movwf	Lcd_Write_Integer@a
  1656  0FCD  120A  118A  2003  120A  158A  	fcall	_Lcd_Write_Integer
  1657                           
  1658                           ;Config.c: 92:                     Lcd_Write_String(" Cm");
  1659  0FD2  3063               	movlw	(low (((STR_4+1)-__stringbase)| (0+32768)))& (0+255)
  1660  0FD3  00F5               	movwf	Lcd_Write_String@a
  1661  0FD4  3080               	movlw	128
  1662  0FD5  00F6               	movwf	Lcd_Write_String@a+1
  1663  0FD6  120A  158A  209F  120A  158A  	fcall	_Lcd_Write_String
  1664                           
  1665                           ;Config.c: 93:             }
  1666  0FDB  2FF5               	goto	l3005
  1667  0FDC                     l3003:	
  1668                           
  1669                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1670                           ; Switch size 1, requested type "simple"
  1671                           ; Number of cases is 1, Range of values is 0 to 0
  1672                           ; switch strategies available:
  1673                           ; Name         Instructions Cycles
  1674                           ; simple_byte            4     3 (average)
  1675                           ; direct_byte           11     8 (fixed)
  1676                           ; jumptable            260     6 (fixed)
  1677                           ;	Chosen strategy is simple_byte
  1678  0FDC  0869               	movf	_key2+1,w
  1679  0FDD  3A00               	xorlw	0	; case 0
  1680  0FDE  1903               	skipnz
  1681  0FDF  2FE1               	goto	l3187
  1682  0FE0  2FA2               	goto	l2993
  1683  0FE1                     l3187:	
  1684                           
  1685                           ; Switch size 1, requested type "simple"
  1686                           ; Number of cases is 6, Range of values is 35 to 68
  1687                           ; switch strategies available:
  1688                           ; Name         Instructions Cycles
  1689                           ; simple_byte           19    10 (average)
  1690                           ; direct_byte          113    11 (fixed)
  1691                           ; jumptable            263     9 (fixed)
  1692                           ;	Chosen strategy is simple_byte
  1693  0FE1  0868               	movf	_key2,w
  1694  0FE2  3A23               	xorlw	35	; case 35
  1695  0FE3  1903               	skipnz
  1696  0FE4  2FF5               	goto	l3005
  1697  0FE5  3A09               	xorlw	9	; case 42
  1698  0FE6  1903               	skipnz
  1699  0FE7  2FF5               	goto	l3005
  1700  0FE8  3A6B               	xorlw	107	; case 65
  1701  0FE9  1903               	skipnz
  1702  0FEA  2FF5               	goto	l3005
  1703  0FEB  3A03               	xorlw	3	; case 66
  1704  0FEC  1903               	skipnz
  1705  0FED  2F66               	goto	l2971
  1706  0FEE  3A01               	xorlw	1	; case 67
  1707  0FEF  1903               	skipnz
  1708  0FF0  2FF5               	goto	l3005
  1709  0FF1  3A07               	xorlw	7	; case 68
  1710  0FF2  1903               	skipnz
  1711  0FF3  2F90               	goto	l2983
  1712  0FF4  2FA2               	goto	l2993
  1713  0FF5                     l3005:	
  1714                           
  1715                           ;Config.c: 95:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1716  0FF5  3003               	movlw	3
  1717  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  1718  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  1719  0FF8  00D3               	movwf	??_configurarAntiHorario+1
  1720  0FF9  3097               	movlw	151
  1721  0FFA  00D2               	movwf	??_configurarAntiHorario
  1722  0FFB                     u4177:	
  1723  0FFB  0BD2               	decfsz	??_configurarAntiHorario,f
  1724  0FFC  2FFB               	goto	u4177
  1725  0FFD  0BD3               	decfsz	??_configurarAntiHorario+1,f
  1726  0FFE  2FFB               	goto	u4177
  1727  0FFF  2F3A               	goto	l2965
  1728  1000                     __end_of_configurarAntiHorario:	
  1729                           
  1730                           	psect	text3
  1731  170F                     __ptext3:	
  1732 ;; *************** function ___wmul *****************
  1733 ;; Defined at:
  1734 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;  multiplier      2    0[COMMON] unsigned int 
  1737 ;;  multiplicand    2    2[COMMON] unsigned int 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  product         2    4[COMMON] unsigned int 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  2    0[COMMON] unsigned int 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1749 ;;      Params:         4       0       0       0       0
  1750 ;;      Locals:         2       0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0
  1752 ;;      Totals:         6       0       0       0       0
  1753 ;;Total ram usage:        6 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_configurarAntiHorario
  1759 ;;		_configurarHorario
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function ___wmul
  1765  170F                     ___wmul:	
  1766                           
  1767                           ;incstack = 0
  1768                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1769  170F  01F4               	clrf	___wmul@product
  1770  1710  01F5               	clrf	___wmul@product+1
  1771  1711                     l2635:	
  1772  1711  1C70               	btfss	___wmul@multiplier,0
  1773  1712  2F19               	goto	l415
  1774  1713  0872               	movf	___wmul@multiplicand,w
  1775  1714  07F4               	addwf	___wmul@product,f
  1776  1715  1803               	skipnc
  1777  1716  0AF5               	incf	___wmul@product+1,f
  1778  1717  0873               	movf	___wmul@multiplicand+1,w
  1779  1718  07F5               	addwf	___wmul@product+1,f
  1780  1719                     l415:	
  1781  1719  3001               	movlw	1
  1782  171A                     u3465:	
  1783  171A  1003               	clrc
  1784  171B  0DF2               	rlf	___wmul@multiplicand,f
  1785  171C  0DF3               	rlf	___wmul@multiplicand+1,f
  1786  171D  3EFF               	addlw	-1
  1787  171E  1D03               	skipz
  1788  171F  2F1A               	goto	u3465
  1789  1720  3001               	movlw	1
  1790  1721                     u3475:	
  1791  1721  1003               	clrc
  1792  1722  0CF1               	rrf	___wmul@multiplier+1,f
  1793  1723  0CF0               	rrf	___wmul@multiplier,f
  1794  1724  3EFF               	addlw	-1
  1795  1725  1D03               	skipz
  1796  1726  2F21               	goto	u3475
  1797  1727  0870               	movf	___wmul@multiplier,w
  1798  1728  0471               	iorwf	___wmul@multiplier+1,w
  1799  1729  1D03               	btfss	3,2
  1800  172A  2F11               	goto	l2635
  1801  172B  0875               	movf	___wmul@product+1,w
  1802  172C  00F1               	movwf	?___wmul+1
  1803  172D  0874               	movf	___wmul@product,w
  1804  172E  00F0               	movwf	?___wmul
  1805  172F  0008               	return
  1806  1730                     __end_of___wmul:	
  1807                           
  1808                           	psect	text4
  1809  16B6                     __ptext4:	
  1810 ;; *************** function _StopMotor *****************
  1811 ;; Defined at:
  1812 ;;		line 40 in file "Config.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;		None
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;		None
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  2    4[None  ] int 
  1819 ;; Registers used:
  1820 ;;		None
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         0       0       0       0       0
  1827 ;;      Locals:         0       0       0       0       0
  1828 ;;      Temps:          0       0       0       0       0
  1829 ;;      Totals:         0       0       0       0       0
  1830 ;;Total ram usage:        0 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;;		_configurarAntiHorario
  1837 ;;		_configurarHorario
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _StopMotor
  1843  16B6                     _StopMotor:	
  1844                           
  1845                           ;Config.c: 41:     RC1 = 0;
  1846                           
  1847                           ;incstack = 0
  1848                           ; Regs used in _StopMotor: []
  1849  16B6  1283               	bcf	3,5	;RP0=0, select bank0
  1850  16B7  1303               	bcf	3,6	;RP1=0, select bank0
  1851  16B8  1087               	bcf	7,1	;volatile
  1852                           
  1853                           ;Config.c: 42:     RC0 = 0;
  1854  16B9  1007               	bcf	7,0	;volatile
  1855                           
  1856                           ;Config.c: 43:     return 0;;	Return value of _StopMotor is never used
  1857  16BA  0008               	return
  1858  16BB                     __end_of_StopMotor:	
  1859                           
  1860                           	psect	text5
  1861  16CE                     __ptext5:	
  1862 ;; *************** function _RunMotor *****************
  1863 ;; Defined at:
  1864 ;;		line 32 in file "Config.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  2   12[None  ] int 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1878 ;;      Params:         0       0       0       0       0
  1879 ;;      Locals:         0       0       0       0       0
  1880 ;;      Temps:          0       0       0       0       0
  1881 ;;      Totals:         0       0       0       0       0
  1882 ;;Total ram usage:        0 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_main
  1888 ;;		_configurarAntiHorario
  1889 ;;		_configurarHorario
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           
  1894                           ;psect for function _RunMotor
  1895  16CE                     _RunMotor:	
  1896                           
  1897                           ;Config.c: 33:     if (CmAntiHorario != 0 && CmHorario != 0) {
  1898                           
  1899                           ;incstack = 0
  1900                           ; Regs used in _RunMotor: [wreg+status,2+status,0]
  1901  16CE  1283               	bcf	3,5	;RP0=0, select bank0
  1902  16CF  1303               	bcf	3,6	;RP1=0, select bank0
  1903  16D0  085C               	movf	_CmAntiHorario,w
  1904  16D1  045D               	iorwf	_CmAntiHorario+1,w
  1905  16D2  1903               	btfsc	3,2
  1906  16D3  0008               	return
  1907  16D4  085E               	movf	_CmHorario,w
  1908  16D5  045F               	iorwf	_CmHorario+1,w
  1909  16D6  1903               	btfsc	3,2
  1910  16D7  0008               	return
  1911                           
  1912                           ;Config.c: 34:         RC0 = 1;
  1913  16D8  1407               	bsf	7,0	;volatile
  1914                           
  1915                           ;Config.c: 35:         RC1 = 0;
  1916  16D9  1087               	bcf	7,1	;volatile
  1917  16DA  0008               	return
  1918  16DB                     __end_of_RunMotor:	
  1919                           
  1920                           	psect	text6
  1921  0ADF                     __ptext6:	
  1922 ;; *************** function _KeyPadGetKey *****************
  1923 ;; Defined at:
  1924 ;;		line 19 in file "./KeyPad.h"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  row             1    5[COMMON] unsigned char 
  1929 ;;  key             1    4[COMMON] unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  2    0[COMMON] int 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1939 ;;      Params:         2       0       0       0       0
  1940 ;;      Locals:         2       0       0       0       0
  1941 ;;      Temps:          2       0       0       0       0
  1942 ;;      Totals:         6       0       0       0       0
  1943 ;;Total ram usage:        6 bytes
  1944 ;; Hardware stack levels used:    2
  1945 ;; This function calls:
  1946 ;;		Nothing
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;;		_configurarAntiHorario
  1950 ;;		_configurarHorario
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           
  1955                           ;psect for function _KeyPadGetKey
  1956  0ADF                     _KeyPadGetKey:	
  1957                           
  1958                           ;./KeyPad.h: 21:     char key = 0, row;
  1959                           
  1960                           ;incstack = 0
  1961                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  1962  0ADF  01F4               	clrf	KeyPadGetKey@key
  1963                           
  1964                           ;./KeyPad.h: 23:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  1965  0AE0  01F5               	clrf	KeyPadGetKey@row
  1966  0AE1  0AF5               	incf	KeyPadGetKey@row,f
  1967  0AE2                     l193:	
  1968                           
  1969                           ;./KeyPad.h: 24:         {;./KeyPad.h: 25:             RA0 = (row & 0x0001) >> 0;
  1970  0AE2  1C75               	btfss	KeyPadGetKey@row,0
  1971  0AE3  2AE8               	goto	u3100
  1972  0AE4  1283               	bcf	3,5	;RP0=0, select bank0
  1973  0AE5  1303               	bcf	3,6	;RP1=0, select bank0
  1974  0AE6  1405               	bsf	5,0	;volatile
  1975  0AE7  2AEB               	goto	l2501
  1976  0AE8                     u3100:	
  1977  0AE8  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0AE9  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0AEA  1005               	bcf	5,0	;volatile
  1980  0AEB                     l2501:	
  1981                           
  1982                           ;./KeyPad.h: 26:             RA1 = (row & 0x0002) >> 1;
  1983  0AEB  0875               	movf	KeyPadGetKey@row,w
  1984  0AEC  00F2               	movwf	??_KeyPadGetKey
  1985  0AED  3001               	movlw	1
  1986  0AEE                     u3125:	
  1987  0AEE  1003               	clrc
  1988  0AEF  0CF2               	rrf	??_KeyPadGetKey,f
  1989  0AF0  3EFF               	addlw	-1
  1990  0AF1  1D03               	skipz
  1991  0AF2  2AEE               	goto	u3125
  1992  0AF3  1C72               	btfss	??_KeyPadGetKey,0
  1993  0AF4  2AF9               	goto	u3130
  1994  0AF5  1283               	bcf	3,5	;RP0=0, select bank0
  1995  0AF6  1303               	bcf	3,6	;RP1=0, select bank0
  1996  0AF7  1485               	bsf	5,1	;volatile
  1997  0AF8  2AFC               	goto	u3144
  1998  0AF9                     u3130:	
  1999  0AF9  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0AFA  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0AFB  1085               	bcf	5,1	;volatile
  2002  0AFC                     u3144:	
  2003                           
  2004                           ;./KeyPad.h: 27:             RA2 = (row & 0x0004) >> 2;
  2005  0AFC  0875               	movf	KeyPadGetKey@row,w
  2006  0AFD  00F2               	movwf	??_KeyPadGetKey
  2007  0AFE  3002               	movlw	2
  2008  0AFF                     u3155:	
  2009  0AFF  1003               	clrc
  2010  0B00  0CF2               	rrf	??_KeyPadGetKey,f
  2011  0B01  3EFF               	addlw	-1
  2012  0B02  1D03               	skipz
  2013  0B03  2AFF               	goto	u3155
  2014  0B04  1C72               	btfss	??_KeyPadGetKey,0
  2015  0B05  2B0A               	goto	u3160
  2016  0B06  1283               	bcf	3,5	;RP0=0, select bank0
  2017  0B07  1303               	bcf	3,6	;RP1=0, select bank0
  2018  0B08  1505               	bsf	5,2	;volatile
  2019  0B09  2B0D               	goto	u3174
  2020  0B0A                     u3160:	
  2021  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  2022  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  2023  0B0C  1105               	bcf	5,2	;volatile
  2024  0B0D                     u3174:	
  2025                           
  2026                           ;./KeyPad.h: 28:             RA3 = (row & 0x0008) >> 3;
  2027  0B0D  0875               	movf	KeyPadGetKey@row,w
  2028  0B0E  00F2               	movwf	??_KeyPadGetKey
  2029  0B0F  3003               	movlw	3
  2030  0B10                     u3185:	
  2031  0B10  1003               	clrc
  2032  0B11  0CF2               	rrf	??_KeyPadGetKey,f
  2033  0B12  3EFF               	addlw	-1
  2034  0B13  1D03               	skipz
  2035  0B14  2B10               	goto	u3185
  2036  0B15  1C72               	btfss	??_KeyPadGetKey,0
  2037  0B16  2B1B               	goto	u3190
  2038  0B17  1283               	bcf	3,5	;RP0=0, select bank0
  2039  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  2040  0B19  1585               	bsf	5,3	;volatile
  2041  0B1A  2B1E               	goto	l2503
  2042  0B1B                     u3190:	
  2043  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0B1D  1185               	bcf	5,3	;volatile
  2046  0B1E                     l2503:	
  2047                           
  2048                           ;./KeyPad.h: 29:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2049  0B1E  3003               	movlw	3
  2050  0B1F  00F3               	movwf	??_KeyPadGetKey+1
  2051  0B20  3097               	movlw	151
  2052  0B21  00F2               	movwf	??_KeyPadGetKey
  2053  0B22                     u4187:	
  2054  0B22  0BF2               	decfsz	??_KeyPadGetKey,f
  2055  0B23  2B22               	goto	u4187
  2056  0B24  0BF3               	decfsz	??_KeyPadGetKey+1,f
  2057  0B25  2B22               	goto	u4187
  2058  0B26  2B27               	nop2
  2059                           
  2060                           ;./KeyPad.h: 30:         };./KeyPad.h: 32:         if (RA4)break;
  2061  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  2062  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  2063  0B29  1A05               	btfsc	5,4	;volatile
  2064  0B2A  2B47               	goto	l194
  2065                           
  2066                           ;./KeyPad.h: 33:         key++;
  2067  0B2B  3001               	movlw	1
  2068  0B2C  00F2               	movwf	??_KeyPadGetKey
  2069  0B2D  0872               	movf	??_KeyPadGetKey,w
  2070  0B2E  07F4               	addwf	KeyPadGetKey@key,f
  2071                           
  2072                           ;./KeyPad.h: 34:         if (RA5)break;
  2073  0B2F  1A85               	btfsc	5,5	;volatile
  2074  0B30  2B47               	goto	l194
  2075                           
  2076                           ;./KeyPad.h: 35:         key++;
  2077  0B31  3001               	movlw	1
  2078  0B32  00F2               	movwf	??_KeyPadGetKey
  2079  0B33  0872               	movf	??_KeyPadGetKey,w
  2080  0B34  07F4               	addwf	KeyPadGetKey@key,f
  2081                           
  2082                           ;./KeyPad.h: 36:         if (RA6)break;
  2083  0B35  1B05               	btfsc	5,6	;volatile
  2084  0B36  2B47               	goto	l194
  2085                           
  2086                           ;./KeyPad.h: 37:         key++;
  2087  0B37  3001               	movlw	1
  2088  0B38  00F2               	movwf	??_KeyPadGetKey
  2089  0B39  0872               	movf	??_KeyPadGetKey,w
  2090  0B3A  07F4               	addwf	KeyPadGetKey@key,f
  2091                           
  2092                           ;./KeyPad.h: 38:         if (RA7)break;
  2093  0B3B  1B85               	btfsc	5,7	;volatile
  2094  0B3C  2B47               	goto	l194
  2095                           
  2096                           ;./KeyPad.h: 39:         key++;
  2097  0B3D  3001               	movlw	1
  2098  0B3E  00F2               	movwf	??_KeyPadGetKey
  2099  0B3F  0872               	movf	??_KeyPadGetKey,w
  2100  0B40  07F4               	addwf	KeyPadGetKey@key,f
  2101                           
  2102                           ;./KeyPad.h: 40:     }
  2103  0B41  1003               	clrc
  2104  0B42  0DF5               	rlf	KeyPadGetKey@row,f
  2105  0B43  3010               	movlw	16
  2106  0B44  0275               	subwf	KeyPadGetKey@row,w
  2107  0B45  1C03               	skipc
  2108  0B46  2AE2               	goto	l193
  2109  0B47                     l194:	
  2110                           
  2111                           ;./KeyPad.h: 41:     RA0 = 0;
  2112  0B47  1005               	bcf	5,0	;volatile
  2113                           
  2114                           ;./KeyPad.h: 42:     RA1 = 0;
  2115  0B48  1085               	bcf	5,1	;volatile
  2116                           
  2117                           ;./KeyPad.h: 43:     RA2 = 0;
  2118  0B49  1105               	bcf	5,2	;volatile
  2119                           
  2120                           ;./KeyPad.h: 44:     RA3 = 0;
  2121  0B4A  1185               	bcf	5,3	;volatile
  2122                           
  2123                           ;./KeyPad.h: 45:     if (key != old_key) {
  2124  0B4B  0874               	movf	KeyPadGetKey@key,w
  2125  0B4C  0662               	xorwf	_old_key,w
  2126  0B4D  1903               	skipnz
  2127  0B4E  2B63               	goto	l2543
  2128                           
  2129                           ;./KeyPad.h: 46:         old_key = key;
  2130  0B4F  0874               	movf	KeyPadGetKey@key,w
  2131  0B50  00F2               	movwf	??_KeyPadGetKey
  2132  0B51  0872               	movf	??_KeyPadGetKey,w
  2133  0B52  00E2               	movwf	_old_key
  2134                           
  2135                           ;./KeyPad.h: 47:         return keyPadMatrix[ key ];
  2136  0B53  0874               	movf	KeyPadGetKey@key,w
  2137  0B54  00F2               	movwf	??_KeyPadGetKey
  2138  0B55  0772               	addwf	??_KeyPadGetKey,w
  2139  0B56  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  2140  0B57  0084               	movwf	4
  2141  0B58  120A  158A  200A  120A  158A  	fcall	stringdir
  2142  0B5D  00F0               	movwf	?_KeyPadGetKey
  2143  0B5E  120A  158A  200A   	fcall	stringdir
  2144  0B61  00F1               	movwf	?_KeyPadGetKey+1
  2145  0B62  0008               	return
  2146  0B63                     l2543:	
  2147                           
  2148                           ;./KeyPad.h: 49:         return keyPadMatrix[ 0x10 ];
  2149  0B63  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  2150  0B64  0084               	movwf	4
  2151  0B65  120A  158A  200A  120A  158A  	fcall	stringdir
  2152  0B6A  00F0               	movwf	?_KeyPadGetKey
  2153  0B6B  120A  158A  200A   	fcall	stringdir
  2154  0B6E  00F1               	movwf	?_KeyPadGetKey+1
  2155  0B6F  0008               	return
  2156  0B70                     __end_of_KeyPadGetKey:	
  2157                           
  2158                           	psect	text7
  2159  00D7                     __ptext7:	
  2160 ;; *************** function _Encoder *****************
  2161 ;; Defined at:
  2162 ;;		line 168 in file "Config.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;		None
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  2   16[None  ] int 
  2169 ;; Registers used:
  2170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2176 ;;      Params:         0       0       0       0       0
  2177 ;;      Locals:         0       0       0       0       0
  2178 ;;      Temps:          0       1       0       0       0
  2179 ;;      Totals:         0       1       0       0       0
  2180 ;;Total ram usage:        1 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    4
  2183 ;; This function calls:
  2184 ;;		_Lcd_Clear
  2185 ;;		_Lcd_Set_Cursor
  2186 ;;		_Lcd_Write_Integer
  2187 ;;		_Lcd_Write_String
  2188 ;;		_VerificarInversionGiro
  2189 ;;		___fladd
  2190 ;;		___flmul
  2191 ;;		___fltol
  2192 ;;		___xxtofl
  2193 ;; This function is called by:
  2194 ;;		_main
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           
  2199                           ;psect for function _Encoder
  2200  00D7                     _Encoder:	
  2201                           
  2202                           ;Config.c: 169:     LastState = 1;
  2203                           
  2204                           ;incstack = 0
  2205                           ; Regs used in _Encoder: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2206  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2207  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  2208  00D9  01E5               	clrf	_LastState
  2209  00DA  0AE5               	incf	_LastState,f
  2210                           
  2211                           ;Config.c: 170:     Grados++;
  2212  00DB  3001               	movlw	1
  2213  00DC  07E0               	addwf	_Grados,f
  2214  00DD  1803               	skipnc
  2215  00DE  0AE1               	incf	_Grados+1,f
  2216  00DF  3000               	movlw	0
  2217  00E0  07E1               	addwf	_Grados+1,f
  2218                           
  2219                           ;Config.c: 171:     VerificarInversionGiro();
  2220  00E1  120A  158A  24A8  120A  118A  	fcall	_VerificarInversionGiro
  2221                           
  2222                           ;Config.c: 173:     cm = Grados * 0.097;
  2223  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  2224  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  2225  00E8  0860               	movf	_Grados,w
  2226  00E9  00F0               	movwf	___xxtofl@val
  2227  00EA  0861               	movf	_Grados+1,w
  2228  00EB  00F1               	movwf	___xxtofl@val+1
  2229  00EC  3000               	movlw	0
  2230  00ED  1BF1               	btfsc	___xxtofl@val+1,7
  2231  00EE  30FF               	movlw	255
  2232  00EF  00F2               	movwf	___xxtofl@val+2
  2233  00F0  00F3               	movwf	___xxtofl@val+3
  2234  00F1  3001               	movlw	1
  2235  00F2  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2236  00F7  0873               	movf	?___xxtofl+3,w
  2237  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  2238  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  2239  00FA  00A7               	movwf	___flmul@a+3
  2240  00FB  0872               	movf	?___xxtofl+2,w
  2241  00FC  00A6               	movwf	___flmul@a+2
  2242  00FD  0871               	movf	?___xxtofl+1,w
  2243  00FE  00A5               	movwf	___flmul@a+1
  2244  00FF  0870               	movf	?___xxtofl,w
  2245  0100  00A4               	movwf	___flmul@a
  2246  0101  303D               	movlw	61
  2247  0102  00A3               	movwf	___flmul@b+3
  2248  0103  30C6               	movlw	198
  2249  0104  00A2               	movwf	___flmul@b+2
  2250  0105  30A7               	movlw	167
  2251  0106  00A1               	movwf	___flmul@b+1
  2252  0107  30F0               	movlw	240
  2253  0108  00A0               	movwf	___flmul@b
  2254  0109  120A  118A  24D4  120A  118A  	fcall	___flmul
  2255  010E  1283               	bcf	3,5	;RP0=0, select bank0
  2256  010F  1303               	bcf	3,6	;RP1=0, select bank0
  2257  0110  0823               	movf	?___flmul+3,w
  2258  0111  00BD               	movwf	___fltol@f1+3
  2259  0112  0822               	movf	?___flmul+2,w
  2260  0113  00BC               	movwf	___fltol@f1+2
  2261  0114  0821               	movf	?___flmul+1,w
  2262  0115  00BB               	movwf	___fltol@f1+1
  2263  0116  0820               	movf	?___flmul,w
  2264  0117  00BA               	movwf	___fltol@f1
  2265  0118  120A  158A  21E3  120A  118A  	fcall	___fltol
  2266  011D  1283               	bcf	3,5	;RP0=0, select bank0
  2267  011E  1303               	bcf	3,6	;RP1=0, select bank0
  2268  011F  083B               	movf	?___fltol+1,w
  2269  0120  00DB               	movwf	_cm+1
  2270  0121  083A               	movf	?___fltol,w
  2271  0122  00DA               	movwf	_cm
  2272                           
  2273                           ;Config.c: 175:     if (RC0 && (cm > lastCm)) {
  2274  0123  1C07               	btfss	7,0	;volatile
  2275  0124  29AA               	goto	l298
  2276  0125  0859               	movf	_lastCm+1,w
  2277  0126  3A80               	xorlw	128
  2278  0127  00D2               	movwf	??_Encoder
  2279  0128  085B               	movf	_cm+1,w
  2280  0129  3A80               	xorlw	128
  2281  012A  0252               	subwf	??_Encoder,w
  2282  012B  1D03               	skipz
  2283  012C  292F               	goto	u4105
  2284  012D  085A               	movf	_cm,w
  2285  012E  0258               	subwf	_lastCm,w
  2286  012F                     u4105:	
  2287  012F  1803               	skipnc
  2288  0130  29AA               	goto	l298
  2289                           
  2290                           ;Config.c: 176:         lastCm = cm + 0.9;
  2291  0131  1283               	bcf	3,5	;RP0=0, select bank0
  2292  0132  1303               	bcf	3,6	;RP1=0, select bank0
  2293  0133  085A               	movf	_cm,w
  2294  0134  00F0               	movwf	___xxtofl@val
  2295  0135  085B               	movf	_cm+1,w
  2296  0136  00F1               	movwf	___xxtofl@val+1
  2297  0137  3000               	movlw	0
  2298  0138  1BF1               	btfsc	___xxtofl@val+1,7
  2299  0139  30FF               	movlw	255
  2300  013A  00F2               	movwf	___xxtofl@val+2
  2301  013B  00F3               	movwf	___xxtofl@val+3
  2302  013C  3001               	movlw	1
  2303  013D  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2304  0142  0873               	movf	?___xxtofl+3,w
  2305  0143  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0144  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0145  00A7               	movwf	___fladd@a+3
  2308  0146  0872               	movf	?___xxtofl+2,w
  2309  0147  00A6               	movwf	___fladd@a+2
  2310  0148  0871               	movf	?___xxtofl+1,w
  2311  0149  00A5               	movwf	___fladd@a+1
  2312  014A  0870               	movf	?___xxtofl,w
  2313  014B  00A4               	movwf	___fladd@a
  2314  014C  303F               	movlw	63
  2315  014D  00A3               	movwf	___fladd@b+3
  2316  014E  3066               	movlw	102
  2317  014F  00A2               	movwf	___fladd@b+2
  2318  0150  3066               	movlw	102
  2319  0151  00A1               	movwf	___fladd@b+1
  2320  0152  3066               	movlw	102
  2321  0153  00A0               	movwf	___fladd@b
  2322  0154  120A  118A  22A5  120A  118A  	fcall	___fladd
  2323  0159  1283               	bcf	3,5	;RP0=0, select bank0
  2324  015A  1303               	bcf	3,6	;RP1=0, select bank0
  2325  015B  0823               	movf	?___fladd+3,w
  2326  015C  00BD               	movwf	___fltol@f1+3
  2327  015D  0822               	movf	?___fladd+2,w
  2328  015E  00BC               	movwf	___fltol@f1+2
  2329  015F  0821               	movf	?___fladd+1,w
  2330  0160  00BB               	movwf	___fltol@f1+1
  2331  0161  0820               	movf	?___fladd,w
  2332  0162  00BA               	movwf	___fltol@f1
  2333  0163  120A  158A  21E3  120A  118A  	fcall	___fltol
  2334  0168  1283               	bcf	3,5	;RP0=0, select bank0
  2335  0169  1303               	bcf	3,6	;RP1=0, select bank0
  2336  016A  083B               	movf	?___fltol+1,w
  2337  016B  00D9               	movwf	_lastCm+1
  2338  016C  083A               	movf	?___fltol,w
  2339  016D  00D8               	movwf	_lastCm
  2340                           
  2341                           ;Config.c: 177:         Lcd_Clear();
  2342  016E  160A  118A  26C3  120A  118A  	fcall	_Lcd_Clear
  2343                           
  2344                           ;Config.c: 178:         Lcd_Set_Cursor(1, 1);
  2345  0173  01F4               	clrf	Lcd_Set_Cursor@b
  2346  0174  0AF4               	incf	Lcd_Set_Cursor@b,f
  2347  0175  3001               	movlw	1
  2348  0176  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2349                           
  2350                           ;Config.c: 179:         Lcd_Write_String("Dir: Adelante");
  2351  017B  302D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2352  017C  00F5               	movwf	Lcd_Write_String@a
  2353  017D  3080               	movlw	128
  2354  017E  00F6               	movwf	Lcd_Write_String@a+1
  2355  017F  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2356                           
  2357                           ;Config.c: 180:         Lcd_Set_Cursor(2, 1);
  2358  0184  01F4               	clrf	Lcd_Set_Cursor@b
  2359  0185  0AF4               	incf	Lcd_Set_Cursor@b,f
  2360  0186  3002               	movlw	2
  2361  0187  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2362                           
  2363                           ;Config.c: 181:         Lcd_Write_Integer(cm);
  2364  018C  1283               	bcf	3,5	;RP0=0, select bank0
  2365  018D  1303               	bcf	3,6	;RP1=0, select bank0
  2366  018E  085B               	movf	_cm+1,w
  2367  018F  00C6               	movwf	Lcd_Write_Integer@a+1
  2368  0190  085A               	movf	_cm,w
  2369  0191  00C5               	movwf	Lcd_Write_Integer@a
  2370  0192  120A  118A  2003  120A  118A  	fcall	_Lcd_Write_Integer
  2371                           
  2372                           ;Config.c: 182:         Lcd_Write_String(" Cm de: ");
  2373  0197  3051               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2374  0198  00F5               	movwf	Lcd_Write_String@a
  2375  0199  3080               	movlw	128
  2376  019A  00F6               	movwf	Lcd_Write_String@a+1
  2377  019B  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2378                           
  2379                           ;Config.c: 183:         Lcd_Write_Integer(CmHorario);
  2380  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2381  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  2382  01A2  085F               	movf	_CmHorario+1,w
  2383  01A3  00C6               	movwf	Lcd_Write_Integer@a+1
  2384  01A4  085E               	movf	_CmHorario,w
  2385  01A5  00C5               	movwf	Lcd_Write_Integer@a
  2386  01A6  120A  118A  2003   	fcall	_Lcd_Write_Integer
  2387                           
  2388                           ;Config.c: 184:     } else if (RC1 && (cm > lastCm)) {
  2389  01A9  0008               	return
  2390  01AA                     l298:	
  2391  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  2392  01AB  1303               	bcf	3,6	;RP1=0, select bank0
  2393  01AC  1C87               	btfss	7,1	;volatile
  2394  01AD  0008               	return
  2395  01AE  0859               	movf	_lastCm+1,w
  2396  01AF  3A80               	xorlw	128
  2397  01B0  00D2               	movwf	??_Encoder
  2398  01B1  085B               	movf	_cm+1,w
  2399  01B2  3A80               	xorlw	128
  2400  01B3  0252               	subwf	??_Encoder,w
  2401  01B4  1D03               	skipz
  2402  01B5  29B8               	goto	u4125
  2403  01B6  085A               	movf	_cm,w
  2404  01B7  0258               	subwf	_lastCm,w
  2405  01B8                     u4125:	
  2406  01B8  1803               	skipnc
  2407  01B9  0008               	return
  2408                           
  2409                           ;Config.c: 185:         lastCm = cm + 0.9;
  2410  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  2411  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  2412  01BC  085A               	movf	_cm,w
  2413  01BD  00F0               	movwf	___xxtofl@val
  2414  01BE  085B               	movf	_cm+1,w
  2415  01BF  00F1               	movwf	___xxtofl@val+1
  2416  01C0  3000               	movlw	0
  2417  01C1  1BF1               	btfsc	___xxtofl@val+1,7
  2418  01C2  30FF               	movlw	255
  2419  01C3  00F2               	movwf	___xxtofl@val+2
  2420  01C4  00F3               	movwf	___xxtofl@val+3
  2421  01C5  3001               	movlw	1
  2422  01C6  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2423  01CB  0873               	movf	?___xxtofl+3,w
  2424  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  2425  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  2426  01CE  00A7               	movwf	___fladd@a+3
  2427  01CF  0872               	movf	?___xxtofl+2,w
  2428  01D0  00A6               	movwf	___fladd@a+2
  2429  01D1  0871               	movf	?___xxtofl+1,w
  2430  01D2  00A5               	movwf	___fladd@a+1
  2431  01D3  0870               	movf	?___xxtofl,w
  2432  01D4  00A4               	movwf	___fladd@a
  2433  01D5  303F               	movlw	63
  2434  01D6  00A3               	movwf	___fladd@b+3
  2435  01D7  3066               	movlw	102
  2436  01D8  00A2               	movwf	___fladd@b+2
  2437  01D9  3066               	movlw	102
  2438  01DA  00A1               	movwf	___fladd@b+1
  2439  01DB  3066               	movlw	102
  2440  01DC  00A0               	movwf	___fladd@b
  2441  01DD  120A  118A  22A5  120A  118A  	fcall	___fladd
  2442  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  2443  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  2444  01E4  0823               	movf	?___fladd+3,w
  2445  01E5  00BD               	movwf	___fltol@f1+3
  2446  01E6  0822               	movf	?___fladd+2,w
  2447  01E7  00BC               	movwf	___fltol@f1+2
  2448  01E8  0821               	movf	?___fladd+1,w
  2449  01E9  00BB               	movwf	___fltol@f1+1
  2450  01EA  0820               	movf	?___fladd,w
  2451  01EB  00BA               	movwf	___fltol@f1
  2452  01EC  120A  158A  21E3  120A  118A  	fcall	___fltol
  2453  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  2454  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  2455  01F3  083B               	movf	?___fltol+1,w
  2456  01F4  00D9               	movwf	_lastCm+1
  2457  01F5  083A               	movf	?___fltol,w
  2458  01F6  00D8               	movwf	_lastCm
  2459                           
  2460                           ;Config.c: 186:         cm = Grados * 0.097;
  2461  01F7  0860               	movf	_Grados,w
  2462  01F8  00F0               	movwf	___xxtofl@val
  2463  01F9  0861               	movf	_Grados+1,w
  2464  01FA  00F1               	movwf	___xxtofl@val+1
  2465  01FB  3000               	movlw	0
  2466  01FC  1BF1               	btfsc	___xxtofl@val+1,7
  2467  01FD  30FF               	movlw	255
  2468  01FE  00F2               	movwf	___xxtofl@val+2
  2469  01FF  00F3               	movwf	___xxtofl@val+3
  2470  0200  3001               	movlw	1
  2471  0201  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2472  0206  0873               	movf	?___xxtofl+3,w
  2473  0207  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0208  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0209  00A7               	movwf	___flmul@a+3
  2476  020A  0872               	movf	?___xxtofl+2,w
  2477  020B  00A6               	movwf	___flmul@a+2
  2478  020C  0871               	movf	?___xxtofl+1,w
  2479  020D  00A5               	movwf	___flmul@a+1
  2480  020E  0870               	movf	?___xxtofl,w
  2481  020F  00A4               	movwf	___flmul@a
  2482  0210  303D               	movlw	61
  2483  0211  00A3               	movwf	___flmul@b+3
  2484  0212  30C6               	movlw	198
  2485  0213  00A2               	movwf	___flmul@b+2
  2486  0214  30A7               	movlw	167
  2487  0215  00A1               	movwf	___flmul@b+1
  2488  0216  30F0               	movlw	240
  2489  0217  00A0               	movwf	___flmul@b
  2490  0218  120A  118A  24D4  120A  118A  	fcall	___flmul
  2491  021D  1283               	bcf	3,5	;RP0=0, select bank0
  2492  021E  1303               	bcf	3,6	;RP1=0, select bank0
  2493  021F  0823               	movf	?___flmul+3,w
  2494  0220  00BD               	movwf	___fltol@f1+3
  2495  0221  0822               	movf	?___flmul+2,w
  2496  0222  00BC               	movwf	___fltol@f1+2
  2497  0223  0821               	movf	?___flmul+1,w
  2498  0224  00BB               	movwf	___fltol@f1+1
  2499  0225  0820               	movf	?___flmul,w
  2500  0226  00BA               	movwf	___fltol@f1
  2501  0227  120A  158A  21E3  120A  118A  	fcall	___fltol
  2502  022C  1283               	bcf	3,5	;RP0=0, select bank0
  2503  022D  1303               	bcf	3,6	;RP1=0, select bank0
  2504  022E  083B               	movf	?___fltol+1,w
  2505  022F  00DB               	movwf	_cm+1
  2506  0230  083A               	movf	?___fltol,w
  2507  0231  00DA               	movwf	_cm
  2508                           
  2509                           ;Config.c: 187:         Lcd_Clear();
  2510  0232  160A  118A  26C3  120A  118A  	fcall	_Lcd_Clear
  2511                           
  2512                           ;Config.c: 188:         Lcd_Set_Cursor(1, 1);
  2513  0237  01F4               	clrf	Lcd_Set_Cursor@b
  2514  0238  0AF4               	incf	Lcd_Set_Cursor@b,f
  2515  0239  3001               	movlw	1
  2516  023A  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2517                           
  2518                           ;Config.c: 189:         Lcd_Write_String("Dir: Atras");
  2519  023F  3046               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2520  0240  00F5               	movwf	Lcd_Write_String@a
  2521  0241  3080               	movlw	128
  2522  0242  00F6               	movwf	Lcd_Write_String@a+1
  2523  0243  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2524                           
  2525                           ;Config.c: 190:         Lcd_Set_Cursor(2, 1);
  2526  0248  01F4               	clrf	Lcd_Set_Cursor@b
  2527  0249  0AF4               	incf	Lcd_Set_Cursor@b,f
  2528  024A  3002               	movlw	2
  2529  024B  120A  158A  20DC  120A  118A  	fcall	_Lcd_Set_Cursor
  2530                           
  2531                           ;Config.c: 191:         Lcd_Write_Integer(Grados * 0.097);
  2532  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2533  0251  1303               	bcf	3,6	;RP1=0, select bank0
  2534  0252  0860               	movf	_Grados,w
  2535  0253  00F0               	movwf	___xxtofl@val
  2536  0254  0861               	movf	_Grados+1,w
  2537  0255  00F1               	movwf	___xxtofl@val+1
  2538  0256  3000               	movlw	0
  2539  0257  1BF1               	btfsc	___xxtofl@val+1,7
  2540  0258  30FF               	movlw	255
  2541  0259  00F2               	movwf	___xxtofl@val+2
  2542  025A  00F3               	movwf	___xxtofl@val+3
  2543  025B  3001               	movlw	1
  2544  025C  120A  158A  2405  120A  118A  	fcall	___xxtofl
  2545  0261  0873               	movf	?___xxtofl+3,w
  2546  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0263  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0264  00A7               	movwf	___flmul@a+3
  2549  0265  0872               	movf	?___xxtofl+2,w
  2550  0266  00A6               	movwf	___flmul@a+2
  2551  0267  0871               	movf	?___xxtofl+1,w
  2552  0268  00A5               	movwf	___flmul@a+1
  2553  0269  0870               	movf	?___xxtofl,w
  2554  026A  00A4               	movwf	___flmul@a
  2555  026B  303D               	movlw	61
  2556  026C  00A3               	movwf	___flmul@b+3
  2557  026D  30C6               	movlw	198
  2558  026E  00A2               	movwf	___flmul@b+2
  2559  026F  30A7               	movlw	167
  2560  0270  00A1               	movwf	___flmul@b+1
  2561  0271  30F0               	movlw	240
  2562  0272  00A0               	movwf	___flmul@b
  2563  0273  120A  118A  24D4  120A  118A  	fcall	___flmul
  2564  0278  1283               	bcf	3,5	;RP0=0, select bank0
  2565  0279  1303               	bcf	3,6	;RP1=0, select bank0
  2566  027A  0823               	movf	?___flmul+3,w
  2567  027B  00BD               	movwf	___fltol@f1+3
  2568  027C  0822               	movf	?___flmul+2,w
  2569  027D  00BC               	movwf	___fltol@f1+2
  2570  027E  0821               	movf	?___flmul+1,w
  2571  027F  00BB               	movwf	___fltol@f1+1
  2572  0280  0820               	movf	?___flmul,w
  2573  0281  00BA               	movwf	___fltol@f1
  2574  0282  120A  158A  21E3  120A  118A  	fcall	___fltol
  2575  0287  1283               	bcf	3,5	;RP0=0, select bank0
  2576  0288  1303               	bcf	3,6	;RP1=0, select bank0
  2577  0289  083B               	movf	?___fltol+1,w
  2578  028A  00C6               	movwf	Lcd_Write_Integer@a+1
  2579  028B  083A               	movf	?___fltol,w
  2580  028C  00C5               	movwf	Lcd_Write_Integer@a
  2581  028D  120A  118A  2003  120A  118A  	fcall	_Lcd_Write_Integer
  2582                           
  2583                           ;Config.c: 192:         Lcd_Write_String(" Cm de: ");
  2584  0292  3051               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2585  0293  00F5               	movwf	Lcd_Write_String@a
  2586  0294  3080               	movlw	128
  2587  0295  00F6               	movwf	Lcd_Write_String@a+1
  2588  0296  120A  158A  209F  120A  118A  	fcall	_Lcd_Write_String
  2589                           
  2590                           ;Config.c: 193:         Lcd_Write_Integer(CmAntiHorario);
  2591  029B  1283               	bcf	3,5	;RP0=0, select bank0
  2592  029C  1303               	bcf	3,6	;RP1=0, select bank0
  2593  029D  085D               	movf	_CmAntiHorario+1,w
  2594  029E  00C6               	movwf	Lcd_Write_Integer@a+1
  2595  029F  085C               	movf	_CmAntiHorario,w
  2596  02A0  00C5               	movwf	Lcd_Write_Integer@a
  2597  02A1  120A  118A  2003   	fcall	_Lcd_Write_Integer
  2598  02A4  0008               	return
  2599  02A5                     __end_of_Encoder:	
  2600                           
  2601                           	psect	text8
  2602  09E3                     __ptext8:	
  2603 ;; *************** function ___fltol *****************
  2604 ;; Defined at:
  2605 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  f1              4   26[BANK0 ] int 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  exp1            1   36[BANK0 ] unsigned char 
  2610 ;;  sign1           1   35[BANK0 ] unsigned char 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  4   26[BANK0 ] long 
  2613 ;; Registers used:
  2614 ;;		wreg, status,2, status,0
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2620 ;;      Params:         0       4       0       0       0
  2621 ;;      Locals:         0       2       0       0       0
  2622 ;;      Temps:          0       5       0       0       0
  2623 ;;      Totals:         0      11       0       0       0
  2624 ;;Total ram usage:       11 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_Encoder
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function ___fltol
  2635  09E3                     ___fltol:	
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  2639  09E3  1003               	clrc
  2640  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  2641  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  2642  09E6  0D3C               	rlf	___fltol@f1+2,w
  2643  09E7  0D3D               	rlf	___fltol@f1+3,w
  2644  09E8  00BE               	movwf	??___fltol
  2645  09E9  083E               	movf	??___fltol,w
  2646  09EA  00C4               	movwf	___fltol@exp1
  2647  09EB  0844               	movf	___fltol@exp1,w
  2648  09EC  1D03               	btfss	3,2
  2649  09ED  29F7               	goto	l2653
  2650  09EE                     l2649:	
  2651  09EE  3000               	movlw	0
  2652  09EF  00BD               	movwf	?___fltol+3
  2653  09F0  3000               	movlw	0
  2654  09F1  00BC               	movwf	?___fltol+2
  2655  09F2  3000               	movlw	0
  2656  09F3  00BB               	movwf	?___fltol+1
  2657  09F4  3000               	movlw	0
  2658  09F5  00BA               	movwf	?___fltol
  2659  09F6  0008               	return
  2660  09F7                     l2653:	
  2661  09F7  083A               	movf	___fltol@f1,w
  2662  09F8  00BE               	movwf	??___fltol
  2663  09F9  083B               	movf	___fltol@f1+1,w
  2664  09FA  00BF               	movwf	??___fltol+1
  2665  09FB  083C               	movf	___fltol@f1+2,w
  2666  09FC  00C0               	movwf	??___fltol+2
  2667  09FD  083D               	movf	___fltol@f1+3,w
  2668  09FE  00C1               	movwf	??___fltol+3
  2669  09FF  301F               	movlw	31
  2670  0A00                     u3505:	
  2671  0A00  1003               	clrc
  2672  0A01  0CC1               	rrf	??___fltol+3,f
  2673  0A02  0CC0               	rrf	??___fltol+2,f
  2674  0A03  0CBF               	rrf	??___fltol+1,f
  2675  0A04  0CBE               	rrf	??___fltol,f
  2676  0A05  3EFF               	addlw	-1
  2677  0A06  1D03               	skipz
  2678  0A07  2A00               	goto	u3505
  2679  0A08  083E               	movf	??___fltol,w
  2680  0A09  00C2               	movwf	??___fltol+4
  2681  0A0A  0842               	movf	??___fltol+4,w
  2682  0A0B  00C3               	movwf	___fltol@sign1
  2683  0A0C  17BC               	bsf	___fltol@f1+2,7
  2684  0A0D  30FF               	movlw	255
  2685  0A0E  05BA               	andwf	___fltol@f1,f
  2686  0A0F  30FF               	movlw	255
  2687  0A10  05BB               	andwf	___fltol@f1+1,f
  2688  0A11  30FF               	movlw	255
  2689  0A12  05BC               	andwf	___fltol@f1+2,f
  2690  0A13  3000               	movlw	0
  2691  0A14  05BD               	andwf	___fltol@f1+3,f
  2692  0A15  3096               	movlw	150
  2693  0A16  02C4               	subwf	___fltol@exp1,f
  2694  0A17  1FC4               	btfss	___fltol@exp1,7
  2695  0A18  2A2E               	goto	l2671
  2696  0A19  0844               	movf	___fltol@exp1,w
  2697  0A1A  3A80               	xorlw	128
  2698  0A1B  3E97               	addlw	151
  2699  0A1C  1C03               	btfss	3,0
  2700  0A1D  29EE               	goto	l2649
  2701  0A1E                     l2669:	
  2702  0A1E  3001               	movlw	1
  2703  0A1F                     u3535:	
  2704  0A1F  1003               	clrc
  2705  0A20  0CBD               	rrf	___fltol@f1+3,f
  2706  0A21  0CBC               	rrf	___fltol@f1+2,f
  2707  0A22  0CBB               	rrf	___fltol@f1+1,f
  2708  0A23  0CBA               	rrf	___fltol@f1,f
  2709  0A24  3EFF               	addlw	-1
  2710  0A25  1D03               	skipz
  2711  0A26  2A1F               	goto	u3535
  2712  0A27  3001               	movlw	1
  2713  0A28  00BE               	movwf	??___fltol
  2714  0A29  083E               	movf	??___fltol,w
  2715  0A2A  07C4               	addwf	___fltol@exp1,f
  2716  0A2B  1903               	btfsc	3,2
  2717  0A2C  2A41               	goto	l2679
  2718  0A2D  2A1E               	goto	l2669
  2719  0A2E                     l2671:	
  2720  0A2E  3020               	movlw	32
  2721  0A2F  0244               	subwf	___fltol@exp1,w
  2722  0A30  1803               	btfsc	3,0
  2723  0A31  29EE               	goto	l2649
  2724  0A32                     l608:	
  2725  0A32  0844               	movf	___fltol@exp1,w
  2726  0A33  1903               	btfsc	3,2
  2727  0A34  2A41               	goto	l2679
  2728  0A35  3001               	movlw	1
  2729  0A36  00BE               	movwf	??___fltol
  2730  0A37                     u3565:	
  2731  0A37  1003               	clrc
  2732  0A38  0DBA               	rlf	___fltol@f1,f
  2733  0A39  0DBB               	rlf	___fltol@f1+1,f
  2734  0A3A  0DBC               	rlf	___fltol@f1+2,f
  2735  0A3B  0DBD               	rlf	___fltol@f1+3,f
  2736  0A3C  0BBE               	decfsz	??___fltol,f
  2737  0A3D  2A37               	goto	u3565
  2738  0A3E  3001               	movlw	1
  2739  0A3F  02C4               	subwf	___fltol@exp1,f
  2740  0A40  2A32               	goto	l608
  2741  0A41                     l2679:	
  2742  0A41  0843               	movf	___fltol@sign1,w
  2743  0A42  1903               	btfsc	3,2
  2744  0A43  0008               	return
  2745  0A44  09BA               	comf	___fltol@f1,f
  2746  0A45  09BB               	comf	___fltol@f1+1,f
  2747  0A46  09BC               	comf	___fltol@f1+2,f
  2748  0A47  09BD               	comf	___fltol@f1+3,f
  2749  0A48  0ABA               	incf	___fltol@f1,f
  2750  0A49  1903               	skipnz
  2751  0A4A  0ABB               	incf	___fltol@f1+1,f
  2752  0A4B  1903               	skipnz
  2753  0A4C  0ABC               	incf	___fltol@f1+2,f
  2754  0A4D  1903               	skipnz
  2755  0A4E  0ABD               	incf	___fltol@f1+3,f
  2756  0A4F  0008               	return
  2757  0A50                     __end_of___fltol:	
  2758                           
  2759                           	psect	text9
  2760  02A5                     __ptext9:	
  2761 ;; *************** function ___fladd *****************
  2762 ;; Defined at:
  2763 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;  b               4    0[BANK0 ] long 
  2766 ;;  a               4    4[BANK0 ] long 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  grs             1   19[BANK0 ] unsigned char 
  2769 ;;  bexp            1   18[BANK0 ] unsigned char 
  2770 ;;  aexp            1   17[BANK0 ] unsigned char 
  2771 ;;  signs           1   16[BANK0 ] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  4    0[BANK0 ] unsigned char 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0, btemp+1
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2781 ;;      Params:         0       8       0       0       0
  2782 ;;      Locals:         0       4       0       0       0
  2783 ;;      Temps:          0       8       0       0       0
  2784 ;;      Totals:         0      20       0       0       0
  2785 ;;Total ram usage:       20 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_Encoder
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function ___fladd
  2796  02A5                     ___fladd:	
  2797                           
  2798                           ;incstack = 0
  2799                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  2800  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2801  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  2802  02A7  0823               	movf	___fladd@b+3,w
  2803  02A8  3980               	andlw	128
  2804  02A9  00A8               	movwf	??___fladd
  2805  02AA  0828               	movf	??___fladd,w
  2806  02AB  00B0               	movwf	___fladd@signs
  2807  02AC  0823               	movf	___fladd@b+3,w
  2808  02AD  00A8               	movwf	??___fladd
  2809  02AE  0728               	addwf	??___fladd,w
  2810  02AF  00A9               	movwf	??___fladd+1
  2811  02B0  0829               	movf	??___fladd+1,w
  2812  02B1  00B2               	movwf	___fladd@bexp
  2813  02B2  1BA2               	btfsc	___fladd@b+2,7
  2814  02B3  1432               	bsf	___fladd@bexp,0
  2815  02B4  0832               	movf	___fladd@bexp,w
  2816  02B5  1903               	btfsc	3,2
  2817  02B6  2AC5               	goto	l2701
  2818  02B7  0A32               	incf	___fladd@bexp,w
  2819  02B8  1D03               	btfss	3,2
  2820  02B9  2AC2               	goto	l2697
  2821  02BA  3000               	movlw	0
  2822  02BB  00A3               	movwf	___fladd@b+3
  2823  02BC  3000               	movlw	0
  2824  02BD  00A2               	movwf	___fladd@b+2
  2825  02BE  3000               	movlw	0
  2826  02BF  00A1               	movwf	___fladd@b+1
  2827  02C0  3000               	movlw	0
  2828  02C1  00A0               	movwf	___fladd@b
  2829  02C2                     l2697:	
  2830  02C2  17A2               	bsf	___fladd@b+2,7
  2831  02C3  01A3               	clrf	___fladd@b+3
  2832  02C4  2ACD               	goto	l2703
  2833  02C5                     l2701:	
  2834  02C5  3000               	movlw	0
  2835  02C6  00A3               	movwf	___fladd@b+3
  2836  02C7  3000               	movlw	0
  2837  02C8  00A2               	movwf	___fladd@b+2
  2838  02C9  3000               	movlw	0
  2839  02CA  00A1               	movwf	___fladd@b+1
  2840  02CB  3000               	movlw	0
  2841  02CC  00A0               	movwf	___fladd@b
  2842  02CD                     l2703:	
  2843  02CD  0827               	movf	___fladd@a+3,w
  2844  02CE  3980               	andlw	128
  2845  02CF  00A8               	movwf	??___fladd
  2846  02D0  0828               	movf	??___fladd,w
  2847  02D1  00B1               	movwf	___fladd@aexp
  2848  02D2  0831               	movf	___fladd@aexp,w
  2849  02D3  0630               	xorwf	___fladd@signs,w
  2850  02D4  1D03               	btfss	3,2
  2851  02D5  1730               	bsf	___fladd@signs,6
  2852  02D6  0827               	movf	___fladd@a+3,w
  2853  02D7  00A8               	movwf	??___fladd
  2854  02D8  0728               	addwf	??___fladd,w
  2855  02D9  00A9               	movwf	??___fladd+1
  2856  02DA  0829               	movf	??___fladd+1,w
  2857  02DB  00B1               	movwf	___fladd@aexp
  2858  02DC  1BA6               	btfsc	___fladd@a+2,7
  2859  02DD  1431               	bsf	___fladd@aexp,0
  2860  02DE  0831               	movf	___fladd@aexp,w
  2861  02DF  1903               	btfsc	3,2
  2862  02E0  2AEF               	goto	l2725
  2863  02E1  0A31               	incf	___fladd@aexp,w
  2864  02E2  1D03               	btfss	3,2
  2865  02E3  2AEC               	goto	l2721
  2866  02E4  3000               	movlw	0
  2867  02E5  00A7               	movwf	___fladd@a+3
  2868  02E6  3000               	movlw	0
  2869  02E7  00A6               	movwf	___fladd@a+2
  2870  02E8  3000               	movlw	0
  2871  02E9  00A5               	movwf	___fladd@a+1
  2872  02EA  3000               	movlw	0
  2873  02EB  00A4               	movwf	___fladd@a
  2874  02EC                     l2721:	
  2875  02EC  17A6               	bsf	___fladd@a+2,7
  2876  02ED  01A7               	clrf	___fladd@a+3
  2877  02EE  2AF7               	goto	l708
  2878  02EF                     l2725:	
  2879  02EF  3000               	movlw	0
  2880  02F0  00A7               	movwf	___fladd@a+3
  2881  02F1  3000               	movlw	0
  2882  02F2  00A6               	movwf	___fladd@a+2
  2883  02F3  3000               	movlw	0
  2884  02F4  00A5               	movwf	___fladd@a+1
  2885  02F5  3000               	movlw	0
  2886  02F6  00A4               	movwf	___fladd@a
  2887  02F7                     l708:	
  2888  02F7  0832               	movf	___fladd@bexp,w
  2889  02F8  0231               	subwf	___fladd@aexp,w
  2890  02F9  1803               	skipnc
  2891  02FA  2B3D               	goto	l2761
  2892  02FB  1F30               	btfss	___fladd@signs,6
  2893  02FC  2B01               	goto	l2731
  2894  02FD  3080               	movlw	128
  2895  02FE  00A8               	movwf	??___fladd
  2896  02FF  0828               	movf	??___fladd,w
  2897  0300  06B0               	xorwf	___fladd@signs,f
  2898  0301                     l2731:	
  2899  0301  0832               	movf	___fladd@bexp,w
  2900  0302  00A8               	movwf	??___fladd
  2901  0303  0828               	movf	??___fladd,w
  2902  0304  00B3               	movwf	___fladd@grs
  2903  0305  0831               	movf	___fladd@aexp,w
  2904  0306  00A8               	movwf	??___fladd
  2905  0307  0828               	movf	??___fladd,w
  2906  0308  00B2               	movwf	___fladd@bexp
  2907  0309  0833               	movf	___fladd@grs,w
  2908  030A  00A8               	movwf	??___fladd
  2909  030B  0828               	movf	??___fladd,w
  2910  030C  00B1               	movwf	___fladd@aexp
  2911  030D  0820               	movf	___fladd@b,w
  2912  030E  00A8               	movwf	??___fladd
  2913  030F  0828               	movf	??___fladd,w
  2914  0310  00B3               	movwf	___fladd@grs
  2915  0311  0824               	movf	___fladd@a,w
  2916  0312  00A8               	movwf	??___fladd
  2917  0313  0828               	movf	??___fladd,w
  2918  0314  00A0               	movwf	___fladd@b
  2919  0315  0833               	movf	___fladd@grs,w
  2920  0316  00A8               	movwf	??___fladd
  2921  0317  0828               	movf	??___fladd,w
  2922  0318  00A4               	movwf	___fladd@a
  2923  0319  0821               	movf	___fladd@b+1,w
  2924  031A  00A8               	movwf	??___fladd
  2925  031B  0828               	movf	??___fladd,w
  2926  031C  00B3               	movwf	___fladd@grs
  2927  031D  0825               	movf	___fladd@a+1,w
  2928  031E  00A8               	movwf	??___fladd
  2929  031F  0828               	movf	??___fladd,w
  2930  0320  00A1               	movwf	___fladd@b+1
  2931  0321  0833               	movf	___fladd@grs,w
  2932  0322  00A8               	movwf	??___fladd
  2933  0323  0828               	movf	??___fladd,w
  2934  0324  00A5               	movwf	___fladd@a+1
  2935  0325  0822               	movf	___fladd@b+2,w
  2936  0326  00A8               	movwf	??___fladd
  2937  0327  0828               	movf	??___fladd,w
  2938  0328  00B3               	movwf	___fladd@grs
  2939  0329  0826               	movf	___fladd@a+2,w
  2940  032A  00A8               	movwf	??___fladd
  2941  032B  0828               	movf	??___fladd,w
  2942  032C  00A2               	movwf	___fladd@b+2
  2943  032D  0833               	movf	___fladd@grs,w
  2944  032E  00A8               	movwf	??___fladd
  2945  032F  0828               	movf	??___fladd,w
  2946  0330  00A6               	movwf	___fladd@a+2
  2947  0331  0823               	movf	___fladd@b+3,w
  2948  0332  00A8               	movwf	??___fladd
  2949  0333  0828               	movf	??___fladd,w
  2950  0334  00B3               	movwf	___fladd@grs
  2951  0335  0827               	movf	___fladd@a+3,w
  2952  0336  00A8               	movwf	??___fladd
  2953  0337  0828               	movf	??___fladd,w
  2954  0338  00A3               	movwf	___fladd@b+3
  2955  0339  0833               	movf	___fladd@grs,w
  2956  033A  00A8               	movwf	??___fladd
  2957  033B  0828               	movf	??___fladd,w
  2958  033C  00A7               	movwf	___fladd@a+3
  2959  033D                     l2761:	
  2960  033D  01B3               	clrf	___fladd@grs
  2961  033E  0831               	movf	___fladd@aexp,w
  2962  033F  00A8               	movwf	??___fladd
  2963  0340  01A9               	clrf	??___fladd+1
  2964  0341  0829               	movf	??___fladd+1,w
  2965  0342  00AB               	movwf	??___fladd+3
  2966  0343  0832               	movf	___fladd@bexp,w
  2967  0344  0228               	subwf	??___fladd,w
  2968  0345  00AA               	movwf	??___fladd+2
  2969  0346  1C03               	skipc
  2970  0347  03AB               	decf	??___fladd+3,f
  2971  0348  082B               	movf	??___fladd+3,w
  2972  0349  3A80               	xorlw	128
  2973  034A  00FF               	movwf	127
  2974  034B  3080               	movlw	128
  2975  034C  027F               	subwf	127,w
  2976  034D  1D03               	skipz
  2977  034E  2B51               	goto	u3685
  2978  034F  301A               	movlw	26
  2979  0350  022A               	subwf	??___fladd+2,w
  2980  0351                     u3685:	
  2981  0351  1C03               	skipc
  2982  0352  2B8A               	goto	l2779
  2983  0353  1283               	bcf	3,5	;RP0=0, select bank0
  2984  0354  1303               	bcf	3,6	;RP1=0, select bank0
  2985  0355  0823               	movf	___fladd@b+3,w
  2986  0356  0422               	iorwf	___fladd@b+2,w
  2987  0357  0421               	iorwf	___fladd@b+1,w
  2988  0358  0420               	iorwf	___fladd@b,w
  2989  0359  1903               	btfsc	3,2
  2990  035A  2B5D               	goto	u3690
  2991  035B  3001               	movlw	1
  2992  035C  2B5E               	goto	u3700
  2993  035D                     u3690:	
  2994  035D  3000               	movlw	0
  2995  035E                     u3700:	
  2996  035E  00A8               	movwf	??___fladd
  2997  035F  0828               	movf	??___fladd,w
  2998  0360  00B3               	movwf	___fladd@grs
  2999  0361  3000               	movlw	0
  3000  0362  00A3               	movwf	___fladd@b+3
  3001  0363  3000               	movlw	0
  3002  0364  00A2               	movwf	___fladd@b+2
  3003  0365  3000               	movlw	0
  3004  0366  00A1               	movwf	___fladd@b+1
  3005  0367  3000               	movlw	0
  3006  0368  00A0               	movwf	___fladd@b
  3007  0369  0831               	movf	___fladd@aexp,w
  3008  036A  00A8               	movwf	??___fladd
  3009  036B  0828               	movf	??___fladd,w
  3010  036C  00B2               	movwf	___fladd@bexp
  3011  036D  2B90               	goto	l712
  3012  036E                     l714:	
  3013  036E  1C33               	btfss	___fladd@grs,0
  3014  036F  2B79               	goto	l2769
  3015  0370  0833               	movf	___fladd@grs,w
  3016  0371  00A8               	movwf	??___fladd
  3017  0372  1003               	clrc
  3018  0373  0C28               	rrf	??___fladd,w
  3019  0374  3801               	iorlw	1
  3020  0375  00A9               	movwf	??___fladd+1
  3021  0376  0829               	movf	??___fladd+1,w
  3022  0377  00B3               	movwf	___fladd@grs
  3023  0378  2B7B               	goto	l2771
  3024  0379                     l2769:	
  3025  0379  1003               	clrc
  3026  037A  0CB3               	rrf	___fladd@grs,f
  3027  037B                     l2771:	
  3028  037B  1820               	btfsc	___fladd@b,0
  3029  037C  17B3               	bsf	___fladd@grs,7
  3030  037D  3001               	movlw	1
  3031  037E  00A8               	movwf	??___fladd
  3032  037F                     u3735:	
  3033  037F  0D23               	rlf	___fladd@b+3,w
  3034  0380  0CA3               	rrf	___fladd@b+3,f
  3035  0381  0CA2               	rrf	___fladd@b+2,f
  3036  0382  0CA1               	rrf	___fladd@b+1,f
  3037  0383  0CA0               	rrf	___fladd@b,f
  3038  0384  0BA8               	decfsz	??___fladd& (0+127),f
  3039  0385  2B7F               	goto	u3735
  3040  0386  3001               	movlw	1
  3041  0387  00A8               	movwf	??___fladd
  3042  0388  0828               	movf	??___fladd,w
  3043  0389  07B2               	addwf	___fladd@bexp,f
  3044  038A                     l2779:	
  3045  038A  1283               	bcf	3,5	;RP0=0, select bank0
  3046  038B  1303               	bcf	3,6	;RP1=0, select bank0
  3047  038C  0831               	movf	___fladd@aexp,w
  3048  038D  0232               	subwf	___fladd@bexp,w
  3049  038E  1C03               	skipc
  3050  038F  2B6E               	goto	l714
  3051  0390                     l712:	
  3052  0390  1B30               	btfsc	___fladd@signs,6
  3053  0391  2BD1               	goto	l2805
  3054  0392  0832               	movf	___fladd@bexp,w
  3055  0393  1D03               	btfss	3,2
  3056  0394  2B9E               	goto	l2787
  3057  0395  3000               	movlw	0
  3058  0396  00A3               	movwf	?___fladd+3
  3059  0397  3000               	movlw	0
  3060  0398  00A2               	movwf	?___fladd+2
  3061  0399  3000               	movlw	0
  3062  039A  00A1               	movwf	?___fladd+1
  3063  039B  3000               	movlw	0
  3064  039C  00A0               	movwf	?___fladd
  3065  039D  0008               	return
  3066  039E                     l2787:	
  3067  039E  0824               	movf	___fladd@a,w
  3068  039F  07A0               	addwf	___fladd@b,f
  3069  03A0  0825               	movf	___fladd@a+1,w
  3070  03A1  1103               	clrz
  3071  03A2  1803               	skipnc
  3072  03A3  3E01               	addlw	1
  3073  03A4  1D03               	btfss	3,2
  3074  03A5  07A1               	addwf	___fladd@b+1,f
  3075  03A6  0826               	movf	___fladd@a+2,w
  3076  03A7  1103               	clrz
  3077  03A8  1803               	skipnc
  3078  03A9  3E01               	addlw	1
  3079  03AA  1D03               	btfss	3,2
  3080  03AB  07A2               	addwf	___fladd@b+2,f
  3081  03AC  0827               	movf	___fladd@a+3,w
  3082  03AD  1103               	clrz
  3083  03AE  1803               	skipnc
  3084  03AF  3E01               	addlw	1
  3085  03B0  1D03               	btfss	3,2
  3086  03B1  07A3               	addwf	___fladd@b+3,f
  3087  03B2  1C23               	btfss	___fladd@b+3,0
  3088  03B3  2C73               	goto	l2839
  3089  03B4  1C33               	btfss	___fladd@grs,0
  3090  03B5  2BBF               	goto	l2795
  3091  03B6  0833               	movf	___fladd@grs,w
  3092  03B7  00A8               	movwf	??___fladd
  3093  03B8  1003               	clrc
  3094  03B9  0C28               	rrf	??___fladd,w
  3095  03BA  3801               	iorlw	1
  3096  03BB  00A9               	movwf	??___fladd+1
  3097  03BC  0829               	movf	??___fladd+1,w
  3098  03BD  00B3               	movwf	___fladd@grs
  3099  03BE  2BC1               	goto	l2797
  3100  03BF                     l2795:	
  3101  03BF  1003               	clrc
  3102  03C0  0CB3               	rrf	___fladd@grs,f
  3103  03C1                     l2797:	
  3104  03C1  1820               	btfsc	___fladd@b,0
  3105  03C2  17B3               	bsf	___fladd@grs,7
  3106  03C3  3001               	movlw	1
  3107  03C4  00A8               	movwf	??___fladd
  3108  03C5                     u3815:	
  3109  03C5  0D23               	rlf	___fladd@b+3,w
  3110  03C6  0CA3               	rrf	___fladd@b+3,f
  3111  03C7  0CA2               	rrf	___fladd@b+2,f
  3112  03C8  0CA1               	rrf	___fladd@b+1,f
  3113  03C9  0CA0               	rrf	___fladd@b,f
  3114  03CA  0BA8               	decfsz	??___fladd& (0+127),f
  3115  03CB  2BC5               	goto	u3815
  3116  03CC  3001               	movlw	1
  3117  03CD  00A8               	movwf	??___fladd
  3118  03CE  0828               	movf	??___fladd,w
  3119  03CF  07B2               	addwf	___fladd@bexp,f
  3120  03D0  2C73               	goto	l2839
  3121  03D1                     l2805:	
  3122  03D1  0823               	movf	___fladd@b+3,w
  3123  03D2  3A80               	xorlw	128
  3124  03D3  00FF               	movwf	127
  3125  03D4  0827               	movf	___fladd@a+3,w
  3126  03D5  3A80               	xorlw	128
  3127  03D6  027F               	subwf	127,w
  3128  03D7  1D03               	skipz
  3129  03D8  2BE3               	goto	u3823
  3130  03D9  0826               	movf	___fladd@a+2,w
  3131  03DA  0222               	subwf	___fladd@b+2,w
  3132  03DB  1D03               	skipz
  3133  03DC  2BE3               	goto	u3823
  3134  03DD  0825               	movf	___fladd@a+1,w
  3135  03DE  0221               	subwf	___fladd@b+1,w
  3136  03DF  1D03               	skipz
  3137  03E0  2BE3               	goto	u3823
  3138  03E1  0824               	movf	___fladd@a,w
  3139  03E2  0220               	subwf	___fladd@b,w
  3140  03E3                     u3823:	
  3141  03E3  1803               	skipnc
  3142  03E4  2C3B               	goto	l2815
  3143  03E5  30FF               	movlw	255
  3144  03E6  00A8               	movwf	??___fladd
  3145  03E7  30FF               	movlw	255
  3146  03E8  00A9               	movwf	??___fladd+1
  3147  03E9  30FF               	movlw	255
  3148  03EA  00AA               	movwf	??___fladd+2
  3149  03EB  30FF               	movlw	255
  3150  03EC  00AB               	movwf	??___fladd+3
  3151  03ED  0824               	movf	___fladd@a,w
  3152  03EE  00AC               	movwf	??___fladd+4
  3153  03EF  0825               	movf	___fladd@a+1,w
  3154  03F0  00AD               	movwf	??___fladd+5
  3155  03F1  0826               	movf	___fladd@a+2,w
  3156  03F2  00AE               	movwf	??___fladd+6
  3157  03F3  0827               	movf	___fladd@a+3,w
  3158  03F4  00AF               	movwf	??___fladd+7
  3159  03F5  0820               	movf	___fladd@b,w
  3160  03F6  02AC               	subwf	??___fladd+4,f
  3161  03F7  0821               	movf	___fladd@b+1,w
  3162  03F8  1C03               	skipc
  3163  03F9  0F21               	incfsz	___fladd@b+1,w
  3164  03FA  2BFC               	goto	u3831
  3165  03FB  2BFD               	goto	u3832
  3166  03FC                     u3831:	
  3167  03FC  02AD               	subwf	??___fladd+5,f
  3168  03FD                     u3832:	
  3169  03FD  0822               	movf	___fladd@b+2,w
  3170  03FE  1C03               	skipc
  3171  03FF  0F22               	incfsz	___fladd@b+2,w
  3172  0400  2C02               	goto	u3833
  3173  0401  2C03               	goto	u3834
  3174  0402                     u3833:	
  3175  0402  02AE               	subwf	??___fladd+6,f
  3176  0403                     u3834:	
  3177  0403  0823               	movf	___fladd@b+3,w
  3178  0404  1C03               	skipc
  3179  0405  0F23               	incfsz	___fladd@b+3,w
  3180  0406  2C08               	goto	u3835
  3181  0407  2C09               	goto	u3836
  3182  0408                     u3835:	
  3183  0408  02AF               	subwf	??___fladd+7,f
  3184  0409                     u3836:	
  3185  0409  082C               	movf	??___fladd+4,w
  3186  040A  07A8               	addwf	??___fladd,f
  3187  040B  082D               	movf	??___fladd+5,w
  3188  040C  1803               	skipnc
  3189  040D  0F2D               	incfsz	??___fladd+5,w
  3190  040E  2C10               	goto	u3840
  3191  040F  2C11               	goto	u3841
  3192  0410                     u3840:	
  3193  0410  07A9               	addwf	??___fladd+1,f
  3194  0411                     u3841:	
  3195  0411  082E               	movf	??___fladd+6,w
  3196  0412  1803               	skipnc
  3197  0413  0F2E               	incfsz	??___fladd+6,w
  3198  0414  2C16               	goto	u3842
  3199  0415  2C17               	goto	u3843
  3200  0416                     u3842:	
  3201  0416  07AA               	addwf	??___fladd+2,f
  3202  0417                     u3843:	
  3203  0417  082F               	movf	??___fladd+7,w
  3204  0418  1803               	skipnc
  3205  0419  0A2F               	incf	??___fladd+7,w
  3206  041A  07AB               	addwf	??___fladd+3,f
  3207  041B  082B               	movf	??___fladd+3,w
  3208  041C  00A3               	movwf	___fladd@b+3
  3209  041D  082A               	movf	??___fladd+2,w
  3210  041E  00A2               	movwf	___fladd@b+2
  3211  041F  0829               	movf	??___fladd+1,w
  3212  0420  00A1               	movwf	___fladd@b+1
  3213  0421  0828               	movf	??___fladd,w
  3214  0422  00A0               	movwf	___fladd@b
  3215  0423  3080               	movlw	128
  3216  0424  00A8               	movwf	??___fladd
  3217  0425  0828               	movf	??___fladd,w
  3218  0426  06B0               	xorwf	___fladd@signs,f
  3219  0427  09B3               	comf	___fladd@grs,f
  3220  0428  0AB3               	incf	___fladd@grs,f
  3221  0429  0833               	movf	___fladd@grs,w
  3222  042A  1D03               	btfss	3,2
  3223  042B  2C49               	goto	l729
  3224  042C  3001               	movlw	1
  3225  042D  07A0               	addwf	___fladd@b,f
  3226  042E  3000               	movlw	0
  3227  042F  1803               	skipnc
  3228  0430  3001               	movlw	1
  3229  0431  07A1               	addwf	___fladd@b+1,f
  3230  0432  3000               	movlw	0
  3231  0433  1803               	skipnc
  3232  0434  3001               	movlw	1
  3233  0435  07A2               	addwf	___fladd@b+2,f
  3234  0436  3000               	movlw	0
  3235  0437  1803               	skipnc
  3236  0438  3001               	movlw	1
  3237  0439  07A3               	addwf	___fladd@b+3,f
  3238  043A  2C49               	goto	l729
  3239  043B                     l2815:	
  3240  043B  0824               	movf	___fladd@a,w
  3241  043C  02A0               	subwf	___fladd@b,f
  3242  043D  0825               	movf	___fladd@a+1,w
  3243  043E  1C03               	skipc
  3244  043F  0F25               	incfsz	___fladd@a+1,w
  3245  0440  02A1               	subwf	___fladd@b+1,f
  3246  0441  0826               	movf	___fladd@a+2,w
  3247  0442  1C03               	skipc
  3248  0443  0F26               	incfsz	___fladd@a+2,w
  3249  0444  02A2               	subwf	___fladd@b+2,f
  3250  0445  0827               	movf	___fladd@a+3,w
  3251  0446  1C03               	skipc
  3252  0447  0F27               	incfsz	___fladd@a+3,w
  3253  0448  02A3               	subwf	___fladd@b+3,f
  3254  0449                     l729:	
  3255  0449  0823               	movf	___fladd@b+3,w
  3256  044A  0422               	iorwf	___fladd@b+2,w
  3257  044B  0421               	iorwf	___fladd@b+1,w
  3258  044C  0420               	iorwf	___fladd@b,w
  3259  044D  1D03               	skipz
  3260  044E  2C71               	goto	l2837
  3261  044F  0833               	movf	___fladd@grs,w
  3262  0450  1D03               	btfss	3,2
  3263  0451  2C71               	goto	l2837
  3264  0452  3000               	movlw	0
  3265  0453  00A3               	movwf	?___fladd+3
  3266  0454  3000               	movlw	0
  3267  0455  00A2               	movwf	?___fladd+2
  3268  0456  3000               	movlw	0
  3269  0457  00A1               	movwf	?___fladd+1
  3270  0458  3000               	movlw	0
  3271  0459  00A0               	movwf	?___fladd
  3272  045A  0008               	return
  3273  045B                     l2823:	
  3274  045B  3001               	movlw	1
  3275  045C  00A8               	movwf	??___fladd
  3276  045D                     u3885:	
  3277  045D  1003               	clrc
  3278  045E  0DA0               	rlf	___fladd@b,f
  3279  045F  0DA1               	rlf	___fladd@b+1,f
  3280  0460  0DA2               	rlf	___fladd@b+2,f
  3281  0461  0DA3               	rlf	___fladd@b+3,f
  3282  0462  0BA8               	decfsz	??___fladd,f
  3283  0463  2C5D               	goto	u3885
  3284  0464  1BB3               	btfsc	___fladd@grs,7
  3285  0465  1420               	bsf	___fladd@b,0
  3286  0466  1C33               	btfss	___fladd@grs,0
  3287  0467  2C6A               	goto	l2831
  3288  0468  1403               	setc
  3289  0469  2C6B               	goto	L4
  3290  046A                     l2831:	
  3291  046A  1003               	clrc
  3292  046B                     L4:	
  3293  046B  0DB3               	rlf	___fladd@grs,f
  3294  046C  0832               	movf	___fladd@bexp,w
  3295  046D  1903               	btfsc	3,2
  3296  046E  2C71               	goto	l2837
  3297  046F  3001               	movlw	1
  3298  0470  02B2               	subwf	___fladd@bexp,f
  3299  0471                     l2837:	
  3300  0471  1FA2               	btfss	___fladd@b+2,7
  3301  0472  2C5B               	goto	l2823
  3302  0473                     l2839:	
  3303  0473  01B1               	clrf	___fladd@aexp
  3304  0474  1FB3               	btfss	___fladd@grs,7
  3305  0475  2C7E               	goto	l2849
  3306  0476  0833               	movf	___fladd@grs,w
  3307  0477  397F               	andlw	127
  3308  0478  1903               	btfsc	3,2
  3309  0479  1820               	btfsc	___fladd@b,0
  3310  047A  2C7C               	goto	l2845
  3311  047B  2C7E               	goto	l2849
  3312  047C                     l2845:	
  3313  047C  01B1               	clrf	___fladd@aexp
  3314  047D  0AB1               	incf	___fladd@aexp,f
  3315  047E                     l2849:	
  3316  047E  0831               	movf	___fladd@aexp,w
  3317  047F  1903               	btfsc	3,2
  3318  0480  2CB1               	goto	l742
  3319  0481  3001               	movlw	1
  3320  0482  07A0               	addwf	___fladd@b,f
  3321  0483  3000               	movlw	0
  3322  0484  1803               	skipnc
  3323  0485  3001               	movlw	1
  3324  0486  07A1               	addwf	___fladd@b+1,f
  3325  0487  3000               	movlw	0
  3326  0488  1803               	skipnc
  3327  0489  3001               	movlw	1
  3328  048A  07A2               	addwf	___fladd@b+2,f
  3329  048B  3000               	movlw	0
  3330  048C  1803               	skipnc
  3331  048D  3001               	movlw	1
  3332  048E  07A3               	addwf	___fladd@b+3,f
  3333  048F  1C23               	btfss	___fladd@b+3,0
  3334  0490  2CB1               	goto	l742
  3335  0491  0820               	movf	___fladd@b,w
  3336  0492  00A8               	movwf	??___fladd
  3337  0493  0821               	movf	___fladd@b+1,w
  3338  0494  00A9               	movwf	??___fladd+1
  3339  0495  0822               	movf	___fladd@b+2,w
  3340  0496  00AA               	movwf	??___fladd+2
  3341  0497  0823               	movf	___fladd@b+3,w
  3342  0498  00AB               	movwf	??___fladd+3
  3343  0499  3001               	movlw	1
  3344  049A  00AC               	movwf	??___fladd+4
  3345  049B                     u3985:	
  3346  049B  0D2B               	rlf	??___fladd+3,w
  3347  049C  0CAB               	rrf	??___fladd+3,f
  3348  049D  0CAA               	rrf	??___fladd+2,f
  3349  049E  0CA9               	rrf	??___fladd+1,f
  3350  049F  0CA8               	rrf	??___fladd,f
  3351  04A0  0BAC               	decfsz	??___fladd+4,f
  3352  04A1  2C9B               	goto	u3985
  3353  04A2  082B               	movf	??___fladd+3,w
  3354  04A3  00A3               	movwf	___fladd@b+3
  3355  04A4  082A               	movf	??___fladd+2,w
  3356  04A5  00A2               	movwf	___fladd@b+2
  3357  04A6  0829               	movf	??___fladd+1,w
  3358  04A7  00A1               	movwf	___fladd@b+1
  3359  04A8  0828               	movf	??___fladd,w
  3360  04A9  00A0               	movwf	___fladd@b
  3361  04AA  0A32               	incf	___fladd@bexp,w
  3362  04AB  1903               	btfsc	3,2
  3363  04AC  2CB1               	goto	l742
  3364  04AD  3001               	movlw	1
  3365  04AE  00A8               	movwf	??___fladd
  3366  04AF  0828               	movf	??___fladd,w
  3367  04B0  07B2               	addwf	___fladd@bexp,f
  3368  04B1                     l742:	
  3369  04B1  0A32               	incf	___fladd@bexp,w
  3370  04B2  1D03               	btfss	3,2
  3371  04B3  0832               	movf	___fladd@bexp,w
  3372  04B4  1D03               	btfss	3,2
  3373  04B5  2CC1               	goto	l2867
  3374  04B6  3000               	movlw	0
  3375  04B7  00A3               	movwf	___fladd@b+3
  3376  04B8  3000               	movlw	0
  3377  04B9  00A2               	movwf	___fladd@b+2
  3378  04BA  3000               	movlw	0
  3379  04BB  00A1               	movwf	___fladd@b+1
  3380  04BC  3000               	movlw	0
  3381  04BD  00A0               	movwf	___fladd@b
  3382  04BE  0832               	movf	___fladd@bexp,w
  3383  04BF  1903               	btfsc	3,2
  3384  04C0  01B0               	clrf	___fladd@signs
  3385  04C1                     l2867:	
  3386  04C1  1C32               	btfss	___fladd@bexp,0
  3387  04C2  2CC5               	goto	l2871
  3388  04C3  17A2               	bsf	___fladd@b+2,7
  3389  04C4  2CC9               	goto	l750
  3390  04C5                     l2871:	
  3391  04C5  307F               	movlw	127
  3392  04C6  00A8               	movwf	??___fladd
  3393  04C7  0828               	movf	??___fladd,w
  3394  04C8  05A2               	andwf	___fladd@b+2,f
  3395  04C9                     l750:	
  3396  04C9  0832               	movf	___fladd@bexp,w
  3397  04CA  00A8               	movwf	??___fladd
  3398  04CB  1003               	clrc
  3399  04CC  0C28               	rrf	??___fladd,w
  3400  04CD  00A9               	movwf	??___fladd+1
  3401  04CE  0829               	movf	??___fladd+1,w
  3402  04CF  00A3               	movwf	___fladd@b+3
  3403  04D0  1FB0               	btfss	___fladd@signs,7
  3404  04D1  0008               	return
  3405  04D2  17A3               	bsf	___fladd@b+3,7
  3406  04D3  0008               	return
  3407  04D4                     __end_of___fladd:	
  3408                           
  3409                           	psect	text10
  3410  0CA8                     __ptext10:	
  3411 ;; *************** function _VerificarInversionGiro *****************
  3412 ;; Defined at:
  3413 ;;		line 153 in file "Config.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  2  291[None  ] int 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3427 ;;      Params:         0       0       0       0       0
  3428 ;;      Locals:         0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0
  3430 ;;      Totals:         0       0       0       0       0
  3431 ;;Total ram usage:        0 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    2
  3434 ;; This function calls:
  3435 ;;		___flge
  3436 ;;		___flmul
  3437 ;;		___xxtofl
  3438 ;; This function is called by:
  3439 ;;		_Encoder
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _VerificarInversionGiro
  3445  0CA8                     _VerificarInversionGiro:	
  3446                           
  3447                           ;Config.c: 154:     if (RC0 && (Grados * 0.097 >= CmHorario)) {
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _VerificarInversionGiro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3451  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  3452  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  3453  0CAA  1C07               	btfss	7,0	;volatile
  3454  0CAB  2D07               	goto	l292
  3455  0CAC  303D               	movlw	61
  3456  0CAD  00A3               	movwf	___flmul@b+3
  3457  0CAE  30C6               	movlw	198
  3458  0CAF  00A2               	movwf	___flmul@b+2
  3459  0CB0  30A7               	movlw	167
  3460  0CB1  00A1               	movwf	___flmul@b+1
  3461  0CB2  30F0               	movlw	240
  3462  0CB3  00A0               	movwf	___flmul@b
  3463  0CB4  0860               	movf	_Grados,w
  3464  0CB5  00F0               	movwf	___xxtofl@val
  3465  0CB6  0861               	movf	_Grados+1,w
  3466  0CB7  00F1               	movwf	___xxtofl@val+1
  3467  0CB8  3000               	movlw	0
  3468  0CB9  1BF1               	btfsc	___xxtofl@val+1,7
  3469  0CBA  30FF               	movlw	255
  3470  0CBB  00F2               	movwf	___xxtofl@val+2
  3471  0CBC  00F3               	movwf	___xxtofl@val+3
  3472  0CBD  3001               	movlw	1
  3473  0CBE  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3474  0CC3  0873               	movf	?___xxtofl+3,w
  3475  0CC4  1283               	bcf	3,5	;RP0=0, select bank0
  3476  0CC5  1303               	bcf	3,6	;RP1=0, select bank0
  3477  0CC6  00A7               	movwf	___flmul@a+3
  3478  0CC7  0872               	movf	?___xxtofl+2,w
  3479  0CC8  00A6               	movwf	___flmul@a+2
  3480  0CC9  0871               	movf	?___xxtofl+1,w
  3481  0CCA  00A5               	movwf	___flmul@a+1
  3482  0CCB  0870               	movf	?___xxtofl,w
  3483  0CCC  00A4               	movwf	___flmul@a
  3484  0CCD  120A  118A  24D4  120A  158A  	fcall	___flmul
  3485  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
  3486  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0CD4  0823               	movf	?___flmul+3,w
  3488  0CD5  00BD               	movwf	___flge@ff1+3
  3489  0CD6  0822               	movf	?___flmul+2,w
  3490  0CD7  00BC               	movwf	___flge@ff1+2
  3491  0CD8  0821               	movf	?___flmul+1,w
  3492  0CD9  00BB               	movwf	___flge@ff1+1
  3493  0CDA  0820               	movf	?___flmul,w
  3494  0CDB  00BA               	movwf	___flge@ff1
  3495  0CDC  085E               	movf	_CmHorario,w
  3496  0CDD  00F0               	movwf	___xxtofl@val
  3497  0CDE  085F               	movf	_CmHorario+1,w
  3498  0CDF  00F1               	movwf	___xxtofl@val+1
  3499  0CE0  3000               	movlw	0
  3500  0CE1  1BF1               	btfsc	___xxtofl@val+1,7
  3501  0CE2  30FF               	movlw	255
  3502  0CE3  00F2               	movwf	___xxtofl@val+2
  3503  0CE4  00F3               	movwf	___xxtofl@val+3
  3504  0CE5  3001               	movlw	1
  3505  0CE6  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3506  0CEB  0873               	movf	?___xxtofl+3,w
  3507  0CEC  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0CED  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0CEE  00C1               	movwf	___flge@ff2+3
  3510  0CEF  0872               	movf	?___xxtofl+2,w
  3511  0CF0  00C0               	movwf	___flge@ff2+2
  3512  0CF1  0871               	movf	?___xxtofl+1,w
  3513  0CF2  00BF               	movwf	___flge@ff2+1
  3514  0CF3  0870               	movf	?___xxtofl,w
  3515  0CF4  00BE               	movwf	___flge@ff2
  3516  0CF5  120A  158A  2370  120A  158A  	fcall	___flge
  3517  0CFA  1C03               	btfss	3,0
  3518  0CFB  2D07               	goto	l292
  3519  0CFC                     l2617:	
  3520                           
  3521                           ;Config.c: 155:         Grados = 0;
  3522  0CFC  1283               	bcf	3,5	;RP0=0, select bank0
  3523  0CFD  1303               	bcf	3,6	;RP1=0, select bank0
  3524  0CFE  01E0               	clrf	_Grados
  3525  0CFF  01E1               	clrf	_Grados+1
  3526                           
  3527                           ;Config.c: 156:         RC0 = !RC0;
  3528  0D00  3001               	movlw	1
  3529  0D01  0687               	xorwf	7,f
  3530                           
  3531                           ;Config.c: 157:         RC1 = !RC1;
  3532  0D02  3002               	movlw	2
  3533  0D03  0687               	xorwf	7,f
  3534                           
  3535                           ;Config.c: 158:         lastCm = 0;
  3536  0D04  01D8               	clrf	_lastCm
  3537  0D05  01D9               	clrf	_lastCm+1
  3538                           
  3539                           ;Config.c: 159:     } else if (RC1 && Grados * 0.097 >= CmAntiHorario) {
  3540  0D06  0008               	return
  3541  0D07                     l292:	
  3542  0D07  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0D08  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0D09  1C87               	btfss	7,1	;volatile
  3545  0D0A  0008               	return
  3546  0D0B  303D               	movlw	61
  3547  0D0C  00A3               	movwf	___flmul@b+3
  3548  0D0D  30C6               	movlw	198
  3549  0D0E  00A2               	movwf	___flmul@b+2
  3550  0D0F  30A7               	movlw	167
  3551  0D10  00A1               	movwf	___flmul@b+1
  3552  0D11  30F0               	movlw	240
  3553  0D12  00A0               	movwf	___flmul@b
  3554  0D13  0860               	movf	_Grados,w
  3555  0D14  00F0               	movwf	___xxtofl@val
  3556  0D15  0861               	movf	_Grados+1,w
  3557  0D16  00F1               	movwf	___xxtofl@val+1
  3558  0D17  3000               	movlw	0
  3559  0D18  1BF1               	btfsc	___xxtofl@val+1,7
  3560  0D19  30FF               	movlw	255
  3561  0D1A  00F2               	movwf	___xxtofl@val+2
  3562  0D1B  00F3               	movwf	___xxtofl@val+3
  3563  0D1C  3001               	movlw	1
  3564  0D1D  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3565  0D22  0873               	movf	?___xxtofl+3,w
  3566  0D23  1283               	bcf	3,5	;RP0=0, select bank0
  3567  0D24  1303               	bcf	3,6	;RP1=0, select bank0
  3568  0D25  00A7               	movwf	___flmul@a+3
  3569  0D26  0872               	movf	?___xxtofl+2,w
  3570  0D27  00A6               	movwf	___flmul@a+2
  3571  0D28  0871               	movf	?___xxtofl+1,w
  3572  0D29  00A5               	movwf	___flmul@a+1
  3573  0D2A  0870               	movf	?___xxtofl,w
  3574  0D2B  00A4               	movwf	___flmul@a
  3575  0D2C  120A  118A  24D4  120A  158A  	fcall	___flmul
  3576  0D31  1283               	bcf	3,5	;RP0=0, select bank0
  3577  0D32  1303               	bcf	3,6	;RP1=0, select bank0
  3578  0D33  0823               	movf	?___flmul+3,w
  3579  0D34  00BD               	movwf	___flge@ff1+3
  3580  0D35  0822               	movf	?___flmul+2,w
  3581  0D36  00BC               	movwf	___flge@ff1+2
  3582  0D37  0821               	movf	?___flmul+1,w
  3583  0D38  00BB               	movwf	___flge@ff1+1
  3584  0D39  0820               	movf	?___flmul,w
  3585  0D3A  00BA               	movwf	___flge@ff1
  3586  0D3B  085C               	movf	_CmAntiHorario,w
  3587  0D3C  00F0               	movwf	___xxtofl@val
  3588  0D3D  085D               	movf	_CmAntiHorario+1,w
  3589  0D3E  00F1               	movwf	___xxtofl@val+1
  3590  0D3F  3000               	movlw	0
  3591  0D40  1BF1               	btfsc	___xxtofl@val+1,7
  3592  0D41  30FF               	movlw	255
  3593  0D42  00F2               	movwf	___xxtofl@val+2
  3594  0D43  00F3               	movwf	___xxtofl@val+3
  3595  0D44  3001               	movlw	1
  3596  0D45  120A  158A  2405  120A  158A  	fcall	___xxtofl
  3597  0D4A  0873               	movf	?___xxtofl+3,w
  3598  0D4B  1283               	bcf	3,5	;RP0=0, select bank0
  3599  0D4C  1303               	bcf	3,6	;RP1=0, select bank0
  3600  0D4D  00C1               	movwf	___flge@ff2+3
  3601  0D4E  0872               	movf	?___xxtofl+2,w
  3602  0D4F  00C0               	movwf	___flge@ff2+2
  3603  0D50  0871               	movf	?___xxtofl+1,w
  3604  0D51  00BF               	movwf	___flge@ff2+1
  3605  0D52  0870               	movf	?___xxtofl,w
  3606  0D53  00BE               	movwf	___flge@ff2
  3607  0D54  120A  158A  2370  120A  158A  	fcall	___flge
  3608  0D59  1C03               	btfss	3,0
  3609  0D5A  0008               	return
  3610  0D5B  2CFC               	goto	l2617
  3611  0D5C                     __end_of_VerificarInversionGiro:	
  3612                           
  3613                           	psect	text11
  3614  0C05                     __ptext11:	
  3615 ;; *************** function ___xxtofl *****************
  3616 ;; Defined at:
  3617 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;  sign            1    wreg     unsigned char 
  3620 ;;  val             4    0[COMMON] long 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  sign            1    8[COMMON] unsigned char 
  3623 ;;  arg             4   10[COMMON] unsigned long 
  3624 ;;  exp             1    9[COMMON] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  4    0[COMMON] unsigned char 
  3627 ;; Registers used:
  3628 ;;		wreg, status,2, status,0
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3634 ;;      Params:         4       0       0       0       0
  3635 ;;      Locals:         6       0       0       0       0
  3636 ;;      Temps:          4       0       0       0       0
  3637 ;;      Totals:        14       0       0       0       0
  3638 ;;Total ram usage:       14 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; This function calls:
  3641 ;;		Nothing
  3642 ;; This function is called by:
  3643 ;;		_VerificarInversionGiro
  3644 ;;		_Encoder
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           
  3649                           ;psect for function ___xxtofl
  3650  0C05                     ___xxtofl:	
  3651                           
  3652                           ;incstack = 0
  3653                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  3654                           ;___xxtofl@sign stored from wreg
  3655  0C05  00F8               	movwf	___xxtofl@sign
  3656  0C06  0878               	movf	___xxtofl@sign,w
  3657  0C07  1D03               	btfss	3,2
  3658  0C08  1FF3               	btfss	___xxtofl@val+3,7
  3659  0C09  2C1A               	goto	l2453
  3660  0C0A  0970               	comf	___xxtofl@val,w
  3661  0C0B  00FA               	movwf	___xxtofl@arg
  3662  0C0C  0971               	comf	___xxtofl@val+1,w
  3663  0C0D  00FB               	movwf	___xxtofl@arg+1
  3664  0C0E  0972               	comf	___xxtofl@val+2,w
  3665  0C0F  00FC               	movwf	___xxtofl@arg+2
  3666  0C10  0973               	comf	___xxtofl@val+3,w
  3667  0C11  00FD               	movwf	___xxtofl@arg+3
  3668  0C12  0AFA               	incf	___xxtofl@arg,f
  3669  0C13  1903               	skipnz
  3670  0C14  0AFB               	incf	___xxtofl@arg+1,f
  3671  0C15  1903               	skipnz
  3672  0C16  0AFC               	incf	___xxtofl@arg+2,f
  3673  0C17  1903               	skipnz
  3674  0C18  0AFD               	incf	___xxtofl@arg+3,f
  3675  0C19  2C22               	goto	l842
  3676  0C1A                     l2453:	
  3677  0C1A  0873               	movf	___xxtofl@val+3,w
  3678  0C1B  00FD               	movwf	___xxtofl@arg+3
  3679  0C1C  0872               	movf	___xxtofl@val+2,w
  3680  0C1D  00FC               	movwf	___xxtofl@arg+2
  3681  0C1E  0871               	movf	___xxtofl@val+1,w
  3682  0C1F  00FB               	movwf	___xxtofl@arg+1
  3683  0C20  0870               	movf	___xxtofl@val,w
  3684  0C21  00FA               	movwf	___xxtofl@arg
  3685  0C22                     l842:	
  3686  0C22  0873               	movf	___xxtofl@val+3,w
  3687  0C23  0472               	iorwf	___xxtofl@val+2,w
  3688  0C24  0471               	iorwf	___xxtofl@val+1,w
  3689  0C25  0470               	iorwf	___xxtofl@val,w
  3690  0C26  1D03               	skipz
  3691  0C27  2C31               	goto	l2459
  3692  0C28  3000               	movlw	0
  3693  0C29  00F3               	movwf	?___xxtofl+3
  3694  0C2A  3000               	movlw	0
  3695  0C2B  00F2               	movwf	?___xxtofl+2
  3696  0C2C  3000               	movlw	0
  3697  0C2D  00F1               	movwf	?___xxtofl+1
  3698  0C2E  3000               	movlw	0
  3699  0C2F  00F0               	movwf	?___xxtofl
  3700  0C30  0008               	return
  3701  0C31                     l2459:	
  3702  0C31  3096               	movlw	150
  3703  0C32  00F4               	movwf	??___xxtofl
  3704  0C33  0874               	movf	??___xxtofl,w
  3705  0C34  00F9               	movwf	___xxtofl@exp
  3706  0C35                     l2463:	
  3707  0C35  30FE               	movlw	254
  3708  0C36  057D               	andwf	___xxtofl@arg+3,w
  3709  0C37  1903               	btfsc	3,2
  3710  0C38  2C62               	goto	l848
  3711  0C39  3001               	movlw	1
  3712  0C3A  00F4               	movwf	??___xxtofl
  3713  0C3B  0874               	movf	??___xxtofl,w
  3714  0C3C  07F9               	addwf	___xxtofl@exp,f
  3715  0C3D  3001               	movlw	1
  3716  0C3E                     u2995:	
  3717  0C3E  1003               	clrc
  3718  0C3F  0CFD               	rrf	___xxtofl@arg+3,f
  3719  0C40  0CFC               	rrf	___xxtofl@arg+2,f
  3720  0C41  0CFB               	rrf	___xxtofl@arg+1,f
  3721  0C42  0CFA               	rrf	___xxtofl@arg,f
  3722  0C43  3EFF               	addlw	-1
  3723  0C44  1D03               	skipz
  3724  0C45  2C3E               	goto	u2995
  3725  0C46  2C35               	goto	l2463
  3726  0C47                     l2465:	
  3727  0C47  3001               	movlw	1
  3728  0C48  00F4               	movwf	??___xxtofl
  3729  0C49  0874               	movf	??___xxtofl,w
  3730  0C4A  07F9               	addwf	___xxtofl@exp,f
  3731  0C4B  3001               	movlw	1
  3732  0C4C  07FA               	addwf	___xxtofl@arg,f
  3733  0C4D  3000               	movlw	0
  3734  0C4E  1803               	skipnc
  3735  0C4F  3001               	movlw	1
  3736  0C50  07FB               	addwf	___xxtofl@arg+1,f
  3737  0C51  3000               	movlw	0
  3738  0C52  1803               	skipnc
  3739  0C53  3001               	movlw	1
  3740  0C54  07FC               	addwf	___xxtofl@arg+2,f
  3741  0C55  3000               	movlw	0
  3742  0C56  1803               	skipnc
  3743  0C57  3001               	movlw	1
  3744  0C58  07FD               	addwf	___xxtofl@arg+3,f
  3745  0C59  3001               	movlw	1
  3746  0C5A                     u3015:	
  3747  0C5A  1003               	clrc
  3748  0C5B  0CFD               	rrf	___xxtofl@arg+3,f
  3749  0C5C  0CFC               	rrf	___xxtofl@arg+2,f
  3750  0C5D  0CFB               	rrf	___xxtofl@arg+1,f
  3751  0C5E  0CFA               	rrf	___xxtofl@arg,f
  3752  0C5F  3EFF               	addlw	-1
  3753  0C60  1D03               	skipz
  3754  0C61  2C5A               	goto	u3015
  3755  0C62                     l848:	
  3756  0C62  30FF               	movlw	255
  3757  0C63  057D               	andwf	___xxtofl@arg+3,w
  3758  0C64  1903               	btfsc	3,2
  3759  0C65  2C76               	goto	l2473
  3760  0C66  2C47               	goto	l2465
  3761  0C67                     l2475:	
  3762  0C67  3002               	movlw	2
  3763  0C68  0279               	subwf	___xxtofl@exp,w
  3764  0C69  1C03               	btfss	3,0
  3765  0C6A  2C78               	goto	l855
  3766  0C6B  3001               	movlw	1
  3767  0C6C  02F9               	subwf	___xxtofl@exp,f
  3768  0C6D  3001               	movlw	1
  3769  0C6E  00F4               	movwf	??___xxtofl
  3770  0C6F                     u3035:	
  3771  0C6F  1003               	clrc
  3772  0C70  0DFA               	rlf	___xxtofl@arg,f
  3773  0C71  0DFB               	rlf	___xxtofl@arg+1,f
  3774  0C72  0DFC               	rlf	___xxtofl@arg+2,f
  3775  0C73  0DFD               	rlf	___xxtofl@arg+3,f
  3776  0C74  0BF4               	decfsz	??___xxtofl,f
  3777  0C75  2C6F               	goto	u3035
  3778  0C76                     l2473:	
  3779  0C76  1FFC               	btfss	___xxtofl@arg+2,7
  3780  0C77  2C67               	goto	l2475
  3781  0C78                     l855:	
  3782  0C78  1879               	btfsc	___xxtofl@exp,0
  3783  0C79  2C82               	goto	l856
  3784  0C7A  30FF               	movlw	255
  3785  0C7B  05FA               	andwf	___xxtofl@arg,f
  3786  0C7C  30FF               	movlw	255
  3787  0C7D  05FB               	andwf	___xxtofl@arg+1,f
  3788  0C7E  307F               	movlw	127
  3789  0C7F  05FC               	andwf	___xxtofl@arg+2,f
  3790  0C80  30FF               	movlw	255
  3791  0C81  05FD               	andwf	___xxtofl@arg+3,f
  3792  0C82                     l856:	
  3793  0C82  1003               	clrc
  3794  0C83  0CF9               	rrf	___xxtofl@exp,f
  3795  0C84  0879               	movf	___xxtofl@exp,w
  3796  0C85  00F4               	movwf	??___xxtofl
  3797  0C86  01F5               	clrf	??___xxtofl+1
  3798  0C87  01F6               	clrf	??___xxtofl+2
  3799  0C88  01F7               	clrf	??___xxtofl+3
  3800  0C89  3018               	movlw	24
  3801  0C8A                     u3075:	
  3802  0C8A  1003               	clrc
  3803  0C8B  0DF4               	rlf	??___xxtofl,f
  3804  0C8C  0DF5               	rlf	??___xxtofl+1,f
  3805  0C8D  0DF6               	rlf	??___xxtofl+2,f
  3806  0C8E  0DF7               	rlf	??___xxtofl+3,f
  3807  0C8F  3EFF               	addlw	-1
  3808  0C90  1D03               	skipz
  3809  0C91  2C8A               	goto	u3075
  3810  0C92  0874               	movf	??___xxtofl,w
  3811  0C93  04FA               	iorwf	___xxtofl@arg,f
  3812  0C94  0875               	movf	??___xxtofl+1,w
  3813  0C95  04FB               	iorwf	___xxtofl@arg+1,f
  3814  0C96  0876               	movf	??___xxtofl+2,w
  3815  0C97  04FC               	iorwf	___xxtofl@arg+2,f
  3816  0C98  0877               	movf	??___xxtofl+3,w
  3817  0C99  04FD               	iorwf	___xxtofl@arg+3,f
  3818  0C9A  0878               	movf	___xxtofl@sign,w
  3819  0C9B  1D03               	btfss	3,2
  3820  0C9C  1FF3               	btfss	___xxtofl@val+3,7
  3821  0C9D  2C9F               	goto	l2487
  3822  0C9E  17FD               	bsf	___xxtofl@arg+3,7
  3823  0C9F                     l2487:	
  3824  0C9F  087D               	movf	___xxtofl@arg+3,w
  3825  0CA0  00F3               	movwf	?___xxtofl+3
  3826  0CA1  087C               	movf	___xxtofl@arg+2,w
  3827  0CA2  00F2               	movwf	?___xxtofl+2
  3828  0CA3  087B               	movf	___xxtofl@arg+1,w
  3829  0CA4  00F1               	movwf	?___xxtofl+1
  3830  0CA5  087A               	movf	___xxtofl@arg,w
  3831  0CA6  00F0               	movwf	?___xxtofl
  3832  0CA7  0008               	return
  3833  0CA8                     __end_of___xxtofl:	
  3834                           
  3835                           	psect	text12
  3836  04D4                     __ptext12:	
  3837 ;; *************** function ___flmul *****************
  3838 ;; Defined at:
  3839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  b               4    0[BANK0 ] unsigned char 
  3842 ;;  a               4    4[BANK0 ] unsigned char 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  prod            4   20[BANK0 ] struct .
  3845 ;;  grs             4   14[BANK0 ] unsigned long 
  3846 ;;  temp            2   24[BANK0 ] struct .
  3847 ;;  bexp            1   19[BANK0 ] unsigned char 
  3848 ;;  aexp            1   18[BANK0 ] unsigned char 
  3849 ;;  sign            1   13[BANK0 ] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  4    0[BANK0 ] unsigned char 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3859 ;;      Params:         0       8       0       0       0
  3860 ;;      Locals:         0      13       0       0       0
  3861 ;;      Temps:          0       5       0       0       0
  3862 ;;      Totals:         0      26       0       0       0
  3863 ;;Total ram usage:       26 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    1
  3866 ;; This function calls:
  3867 ;;		__Umul8_16
  3868 ;; This function is called by:
  3869 ;;		_VerificarInversionGiro
  3870 ;;		_Encoder
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function ___flmul
  3876  04D4                     ___flmul:	
  3877                           
  3878                           ;incstack = 0
  3879                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3880  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  3881  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  3882  04D6  0823               	movf	___flmul@b+3,w
  3883  04D7  3980               	andlw	128
  3884  04D8  00A8               	movwf	??___flmul
  3885  04D9  0828               	movf	??___flmul,w
  3886  04DA  00AD               	movwf	___flmul@sign
  3887  04DB  0823               	movf	___flmul@b+3,w
  3888  04DC  00A8               	movwf	??___flmul
  3889  04DD  0728               	addwf	??___flmul,w
  3890  04DE  00A9               	movwf	??___flmul+1
  3891  04DF  0829               	movf	??___flmul+1,w
  3892  04E0  00B3               	movwf	___flmul@bexp
  3893  04E1  1BA2               	btfsc	___flmul@b+2,7
  3894  04E2  1433               	bsf	___flmul@bexp,0
  3895  04E3  0833               	movf	___flmul@bexp,w
  3896  04E4  1903               	btfsc	3,2
  3897  04E5  2CF3               	goto	l2323
  3898  04E6  0A33               	incf	___flmul@bexp,w
  3899  04E7  1D03               	btfss	3,2
  3900  04E8  2CF1               	goto	l2321
  3901  04E9  3000               	movlw	0
  3902  04EA  00A3               	movwf	___flmul@b+3
  3903  04EB  3000               	movlw	0
  3904  04EC  00A2               	movwf	___flmul@b+2
  3905  04ED  3000               	movlw	0
  3906  04EE  00A1               	movwf	___flmul@b+1
  3907  04EF  3000               	movlw	0
  3908  04F0  00A0               	movwf	___flmul@b
  3909  04F1                     l2321:	
  3910  04F1  17A2               	bsf	___flmul@b+2,7
  3911  04F2  2CFB               	goto	l2325
  3912  04F3                     l2323:	
  3913  04F3  3000               	movlw	0
  3914  04F4  00A3               	movwf	___flmul@b+3
  3915  04F5  3000               	movlw	0
  3916  04F6  00A2               	movwf	___flmul@b+2
  3917  04F7  3000               	movlw	0
  3918  04F8  00A1               	movwf	___flmul@b+1
  3919  04F9  3000               	movlw	0
  3920  04FA  00A0               	movwf	___flmul@b
  3921  04FB                     l2325:	
  3922  04FB  0827               	movf	___flmul@a+3,w
  3923  04FC  3980               	andlw	128
  3924  04FD  00A8               	movwf	??___flmul
  3925  04FE  0828               	movf	??___flmul,w
  3926  04FF  06AD               	xorwf	___flmul@sign,f
  3927  0500  0827               	movf	___flmul@a+3,w
  3928  0501  00A8               	movwf	??___flmul
  3929  0502  0728               	addwf	??___flmul,w
  3930  0503  00A9               	movwf	??___flmul+1
  3931  0504  0829               	movf	??___flmul+1,w
  3932  0505  00B2               	movwf	___flmul@aexp
  3933  0506  1BA6               	btfsc	___flmul@a+2,7
  3934  0507  1432               	bsf	___flmul@aexp,0
  3935  0508  0832               	movf	___flmul@aexp,w
  3936  0509  1903               	btfsc	3,2
  3937  050A  2D18               	goto	l2341
  3938  050B  0A32               	incf	___flmul@aexp,w
  3939  050C  1D03               	btfss	3,2
  3940  050D  2D16               	goto	l2339
  3941  050E  3000               	movlw	0
  3942  050F  00A7               	movwf	___flmul@a+3
  3943  0510  3000               	movlw	0
  3944  0511  00A6               	movwf	___flmul@a+2
  3945  0512  3000               	movlw	0
  3946  0513  00A5               	movwf	___flmul@a+1
  3947  0514  3000               	movlw	0
  3948  0515  00A4               	movwf	___flmul@a
  3949  0516                     l2339:	
  3950  0516  17A6               	bsf	___flmul@a+2,7
  3951  0517  2D20               	goto	l2343
  3952  0518                     l2341:	
  3953  0518  3000               	movlw	0
  3954  0519  00A7               	movwf	___flmul@a+3
  3955  051A  3000               	movlw	0
  3956  051B  00A6               	movwf	___flmul@a+2
  3957  051C  3000               	movlw	0
  3958  051D  00A5               	movwf	___flmul@a+1
  3959  051E  3000               	movlw	0
  3960  051F  00A4               	movwf	___flmul@a
  3961  0520                     l2343:	
  3962  0520  0832               	movf	___flmul@aexp,w
  3963  0521  1D03               	btfss	3,2
  3964  0522  0833               	movf	___flmul@bexp,w
  3965  0523  1D03               	btfss	3,2
  3966  0524  2D2E               	goto	l2351
  3967  0525  3000               	movlw	0
  3968  0526  00A3               	movwf	?___flmul+3
  3969  0527  3000               	movlw	0
  3970  0528  00A2               	movwf	?___flmul+2
  3971  0529  3000               	movlw	0
  3972  052A  00A1               	movwf	?___flmul+1
  3973  052B  3000               	movlw	0
  3974  052C  00A0               	movwf	?___flmul
  3975  052D  0008               	return
  3976  052E                     l2351:	
  3977  052E  0820               	movf	___flmul@b,w
  3978  052F  00A8               	movwf	??___flmul
  3979  0530  0828               	movf	??___flmul,w
  3980  0531  00F0               	movwf	__Umul8_16@multiplicand
  3981  0532  0826               	movf	___flmul@a+2,w
  3982  0533  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  3983  0538  0871               	movf	?__Umul8_16+1,w
  3984  0539  1283               	bcf	3,5	;RP0=0, select bank0
  3985  053A  1303               	bcf	3,6	;RP1=0, select bank0
  3986  053B  00B9               	movwf	___flmul@temp+1
  3987  053C  0870               	movf	?__Umul8_16,w
  3988  053D  00B8               	movwf	___flmul@temp
  3989  053E  0838               	movf	___flmul@temp,w
  3990  053F  00A8               	movwf	??___flmul
  3991  0540  01A9               	clrf	??___flmul+1
  3992  0541  01AA               	clrf	??___flmul+2
  3993  0542  01AB               	clrf	??___flmul+3
  3994  0543  082B               	movf	??___flmul+3,w
  3995  0544  00B1               	movwf	___flmul@grs+3
  3996  0545  082A               	movf	??___flmul+2,w
  3997  0546  00B0               	movwf	___flmul@grs+2
  3998  0547  0829               	movf	??___flmul+1,w
  3999  0548  00AF               	movwf	___flmul@grs+1
  4000  0549  0828               	movf	??___flmul,w
  4001  054A  00AE               	movwf	___flmul@grs
  4002  054B  0839               	movf	___flmul@temp+1,w
  4003  054C  00A8               	movwf	??___flmul
  4004  054D  01A9               	clrf	??___flmul+1
  4005  054E  01AA               	clrf	??___flmul+2
  4006  054F  01AB               	clrf	??___flmul+3
  4007  0550  082B               	movf	??___flmul+3,w
  4008  0551  00B7               	movwf	___flmul@prod+3
  4009  0552  082A               	movf	??___flmul+2,w
  4010  0553  00B6               	movwf	___flmul@prod+2
  4011  0554  0829               	movf	??___flmul+1,w
  4012  0555  00B5               	movwf	___flmul@prod+1
  4013  0556  0828               	movf	??___flmul,w
  4014  0557  00B4               	movwf	___flmul@prod
  4015  0558  0821               	movf	___flmul@b+1,w
  4016  0559  00A8               	movwf	??___flmul
  4017  055A  0828               	movf	??___flmul,w
  4018  055B  00F0               	movwf	__Umul8_16@multiplicand
  4019  055C  0825               	movf	___flmul@a+1,w
  4020  055D  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4021  0562  0871               	movf	?__Umul8_16+1,w
  4022  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4023  0564  1303               	bcf	3,6	;RP1=0, select bank0
  4024  0565  00B9               	movwf	___flmul@temp+1
  4025  0566  0870               	movf	?__Umul8_16,w
  4026  0567  00B8               	movwf	___flmul@temp
  4027  0568  0838               	movf	___flmul@temp,w
  4028  0569  00A8               	movwf	??___flmul
  4029  056A  01A9               	clrf	??___flmul+1
  4030  056B  01AA               	clrf	??___flmul+2
  4031  056C  01AB               	clrf	??___flmul+3
  4032  056D  0828               	movf	??___flmul,w
  4033  056E  07AE               	addwf	___flmul@grs,f
  4034  056F  0829               	movf	??___flmul+1,w
  4035  0570  1103               	clrz
  4036  0571  1803               	skipnc
  4037  0572  3E01               	addlw	1
  4038  0573  1D03               	btfss	3,2
  4039  0574  07AF               	addwf	___flmul@grs+1,f
  4040  0575  082A               	movf	??___flmul+2,w
  4041  0576  1103               	clrz
  4042  0577  1803               	skipnc
  4043  0578  3E01               	addlw	1
  4044  0579  1D03               	btfss	3,2
  4045  057A  07B0               	addwf	___flmul@grs+2,f
  4046  057B  082B               	movf	??___flmul+3,w
  4047  057C  1103               	clrz
  4048  057D  1803               	skipnc
  4049  057E  3E01               	addlw	1
  4050  057F  1D03               	btfss	3,2
  4051  0580  07B1               	addwf	___flmul@grs+3,f
  4052  0581  0839               	movf	___flmul@temp+1,w
  4053  0582  00A8               	movwf	??___flmul
  4054  0583  01A9               	clrf	??___flmul+1
  4055  0584  01AA               	clrf	??___flmul+2
  4056  0585  01AB               	clrf	??___flmul+3
  4057  0586  0828               	movf	??___flmul,w
  4058  0587  07B4               	addwf	___flmul@prod,f
  4059  0588  0829               	movf	??___flmul+1,w
  4060  0589  1103               	clrz
  4061  058A  1803               	skipnc
  4062  058B  3E01               	addlw	1
  4063  058C  1D03               	btfss	3,2
  4064  058D  07B5               	addwf	___flmul@prod+1,f
  4065  058E  082A               	movf	??___flmul+2,w
  4066  058F  1103               	clrz
  4067  0590  1803               	skipnc
  4068  0591  3E01               	addlw	1
  4069  0592  1D03               	btfss	3,2
  4070  0593  07B6               	addwf	___flmul@prod+2,f
  4071  0594  082B               	movf	??___flmul+3,w
  4072  0595  1103               	clrz
  4073  0596  1803               	skipnc
  4074  0597  3E01               	addlw	1
  4075  0598  1D03               	btfss	3,2
  4076  0599  07B7               	addwf	___flmul@prod+3,f
  4077  059A  0822               	movf	___flmul@b+2,w
  4078  059B  00A8               	movwf	??___flmul
  4079  059C  0828               	movf	??___flmul,w
  4080  059D  00F0               	movwf	__Umul8_16@multiplicand
  4081  059E  0824               	movf	___flmul@a,w
  4082  059F  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4083  05A4  0871               	movf	?__Umul8_16+1,w
  4084  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  4085  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  4086  05A7  00B9               	movwf	___flmul@temp+1
  4087  05A8  0870               	movf	?__Umul8_16,w
  4088  05A9  00B8               	movwf	___flmul@temp
  4089  05AA  0838               	movf	___flmul@temp,w
  4090  05AB  00A8               	movwf	??___flmul
  4091  05AC  01A9               	clrf	??___flmul+1
  4092  05AD  01AA               	clrf	??___flmul+2
  4093  05AE  01AB               	clrf	??___flmul+3
  4094  05AF  0828               	movf	??___flmul,w
  4095  05B0  07AE               	addwf	___flmul@grs,f
  4096  05B1  0829               	movf	??___flmul+1,w
  4097  05B2  1103               	clrz
  4098  05B3  1803               	skipnc
  4099  05B4  3E01               	addlw	1
  4100  05B5  1D03               	btfss	3,2
  4101  05B6  07AF               	addwf	___flmul@grs+1,f
  4102  05B7  082A               	movf	??___flmul+2,w
  4103  05B8  1103               	clrz
  4104  05B9  1803               	skipnc
  4105  05BA  3E01               	addlw	1
  4106  05BB  1D03               	btfss	3,2
  4107  05BC  07B0               	addwf	___flmul@grs+2,f
  4108  05BD  082B               	movf	??___flmul+3,w
  4109  05BE  1103               	clrz
  4110  05BF  1803               	skipnc
  4111  05C0  3E01               	addlw	1
  4112  05C1  1D03               	btfss	3,2
  4113  05C2  07B1               	addwf	___flmul@grs+3,f
  4114  05C3  0839               	movf	___flmul@temp+1,w
  4115  05C4  00A8               	movwf	??___flmul
  4116  05C5  01A9               	clrf	??___flmul+1
  4117  05C6  01AA               	clrf	??___flmul+2
  4118  05C7  01AB               	clrf	??___flmul+3
  4119  05C8  0828               	movf	??___flmul,w
  4120  05C9  07B4               	addwf	___flmul@prod,f
  4121  05CA  0829               	movf	??___flmul+1,w
  4122  05CB  1103               	clrz
  4123  05CC  1803               	skipnc
  4124  05CD  3E01               	addlw	1
  4125  05CE  1D03               	btfss	3,2
  4126  05CF  07B5               	addwf	___flmul@prod+1,f
  4127  05D0  082A               	movf	??___flmul+2,w
  4128  05D1  1103               	clrz
  4129  05D2  1803               	skipnc
  4130  05D3  3E01               	addlw	1
  4131  05D4  1D03               	btfss	3,2
  4132  05D5  07B6               	addwf	___flmul@prod+2,f
  4133  05D6  082B               	movf	??___flmul+3,w
  4134  05D7  1103               	clrz
  4135  05D8  1803               	skipnc
  4136  05D9  3E01               	addlw	1
  4137  05DA  1D03               	btfss	3,2
  4138  05DB  07B7               	addwf	___flmul@prod+3,f
  4139  05DC  3008               	movlw	8
  4140  05DD  00A8               	movwf	??___flmul
  4141  05DE                     u2715:	
  4142  05DE  1003               	clrc
  4143  05DF  0DAE               	rlf	___flmul@grs,f
  4144  05E0  0DAF               	rlf	___flmul@grs+1,f
  4145  05E1  0DB0               	rlf	___flmul@grs+2,f
  4146  05E2  0DB1               	rlf	___flmul@grs+3,f
  4147  05E3  0BA8               	decfsz	??___flmul,f
  4148  05E4  2DDE               	goto	u2715
  4149  05E5  0821               	movf	___flmul@b+1,w
  4150  05E6  00A8               	movwf	??___flmul
  4151  05E7  0828               	movf	??___flmul,w
  4152  05E8  00F0               	movwf	__Umul8_16@multiplicand
  4153  05E9  0824               	movf	___flmul@a,w
  4154  05EA  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4155  05EF  0871               	movf	?__Umul8_16+1,w
  4156  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  4157  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  4158  05F2  00B9               	movwf	___flmul@temp+1
  4159  05F3  0870               	movf	?__Umul8_16,w
  4160  05F4  00B8               	movwf	___flmul@temp
  4161  05F5  0838               	movf	___flmul@temp,w
  4162  05F6  00A8               	movwf	??___flmul
  4163  05F7  0839               	movf	___flmul@temp+1,w
  4164  05F8  00A9               	movwf	??___flmul+1
  4165  05F9  01AA               	clrf	??___flmul+2
  4166  05FA  01AB               	clrf	??___flmul+3
  4167  05FB  0828               	movf	??___flmul,w
  4168  05FC  07AE               	addwf	___flmul@grs,f
  4169  05FD  0829               	movf	??___flmul+1,w
  4170  05FE  1103               	clrz
  4171  05FF  1803               	skipnc
  4172  0600  3E01               	addlw	1
  4173  0601  1D03               	btfss	3,2
  4174  0602  07AF               	addwf	___flmul@grs+1,f
  4175  0603  082A               	movf	??___flmul+2,w
  4176  0604  1103               	clrz
  4177  0605  1803               	skipnc
  4178  0606  3E01               	addlw	1
  4179  0607  1D03               	btfss	3,2
  4180  0608  07B0               	addwf	___flmul@grs+2,f
  4181  0609  082B               	movf	??___flmul+3,w
  4182  060A  1103               	clrz
  4183  060B  1803               	skipnc
  4184  060C  3E01               	addlw	1
  4185  060D  1D03               	btfss	3,2
  4186  060E  07B1               	addwf	___flmul@grs+3,f
  4187  060F  0820               	movf	___flmul@b,w
  4188  0610  00A8               	movwf	??___flmul
  4189  0611  0828               	movf	??___flmul,w
  4190  0612  00F0               	movwf	__Umul8_16@multiplicand
  4191  0613  0825               	movf	___flmul@a+1,w
  4192  0614  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4193  0619  0871               	movf	?__Umul8_16+1,w
  4194  061A  1283               	bcf	3,5	;RP0=0, select bank0
  4195  061B  1303               	bcf	3,6	;RP1=0, select bank0
  4196  061C  00B9               	movwf	___flmul@temp+1
  4197  061D  0870               	movf	?__Umul8_16,w
  4198  061E  00B8               	movwf	___flmul@temp
  4199  061F  0838               	movf	___flmul@temp,w
  4200  0620  00A8               	movwf	??___flmul
  4201  0621  0839               	movf	___flmul@temp+1,w
  4202  0622  00A9               	movwf	??___flmul+1
  4203  0623  01AA               	clrf	??___flmul+2
  4204  0624  01AB               	clrf	??___flmul+3
  4205  0625  0828               	movf	??___flmul,w
  4206  0626  07AE               	addwf	___flmul@grs,f
  4207  0627  0829               	movf	??___flmul+1,w
  4208  0628  1103               	clrz
  4209  0629  1803               	skipnc
  4210  062A  3E01               	addlw	1
  4211  062B  1D03               	btfss	3,2
  4212  062C  07AF               	addwf	___flmul@grs+1,f
  4213  062D  082A               	movf	??___flmul+2,w
  4214  062E  1103               	clrz
  4215  062F  1803               	skipnc
  4216  0630  3E01               	addlw	1
  4217  0631  1D03               	btfss	3,2
  4218  0632  07B0               	addwf	___flmul@grs+2,f
  4219  0633  082B               	movf	??___flmul+3,w
  4220  0634  1103               	clrz
  4221  0635  1803               	skipnc
  4222  0636  3E01               	addlw	1
  4223  0637  1D03               	btfss	3,2
  4224  0638  07B1               	addwf	___flmul@grs+3,f
  4225  0639  3008               	movlw	8
  4226  063A  00A8               	movwf	??___flmul
  4227  063B                     u2745:	
  4228  063B  1003               	clrc
  4229  063C  0DAE               	rlf	___flmul@grs,f
  4230  063D  0DAF               	rlf	___flmul@grs+1,f
  4231  063E  0DB0               	rlf	___flmul@grs+2,f
  4232  063F  0DB1               	rlf	___flmul@grs+3,f
  4233  0640  0BA8               	decfsz	??___flmul,f
  4234  0641  2E3B               	goto	u2745
  4235  0642  0820               	movf	___flmul@b,w
  4236  0643  00A8               	movwf	??___flmul
  4237  0644  0828               	movf	??___flmul,w
  4238  0645  00F0               	movwf	__Umul8_16@multiplicand
  4239  0646  0824               	movf	___flmul@a,w
  4240  0647  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4241  064C  0871               	movf	?__Umul8_16+1,w
  4242  064D  1283               	bcf	3,5	;RP0=0, select bank0
  4243  064E  1303               	bcf	3,6	;RP1=0, select bank0
  4244  064F  00B9               	movwf	___flmul@temp+1
  4245  0650  0870               	movf	?__Umul8_16,w
  4246  0651  00B8               	movwf	___flmul@temp
  4247  0652  0838               	movf	___flmul@temp,w
  4248  0653  00A8               	movwf	??___flmul
  4249  0654  0839               	movf	___flmul@temp+1,w
  4250  0655  00A9               	movwf	??___flmul+1
  4251  0656  01AA               	clrf	??___flmul+2
  4252  0657  01AB               	clrf	??___flmul+3
  4253  0658  0828               	movf	??___flmul,w
  4254  0659  07AE               	addwf	___flmul@grs,f
  4255  065A  0829               	movf	??___flmul+1,w
  4256  065B  1103               	clrz
  4257  065C  1803               	skipnc
  4258  065D  3E01               	addlw	1
  4259  065E  1D03               	btfss	3,2
  4260  065F  07AF               	addwf	___flmul@grs+1,f
  4261  0660  082A               	movf	??___flmul+2,w
  4262  0661  1103               	clrz
  4263  0662  1803               	skipnc
  4264  0663  3E01               	addlw	1
  4265  0664  1D03               	btfss	3,2
  4266  0665  07B0               	addwf	___flmul@grs+2,f
  4267  0666  082B               	movf	??___flmul+3,w
  4268  0667  1103               	clrz
  4269  0668  1803               	skipnc
  4270  0669  3E01               	addlw	1
  4271  066A  1D03               	btfss	3,2
  4272  066B  07B1               	addwf	___flmul@grs+3,f
  4273  066C  0821               	movf	___flmul@b+1,w
  4274  066D  00A8               	movwf	??___flmul
  4275  066E  0828               	movf	??___flmul,w
  4276  066F  00F0               	movwf	__Umul8_16@multiplicand
  4277  0670  0826               	movf	___flmul@a+2,w
  4278  0671  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4279  0676  0871               	movf	?__Umul8_16+1,w
  4280  0677  1283               	bcf	3,5	;RP0=0, select bank0
  4281  0678  1303               	bcf	3,6	;RP1=0, select bank0
  4282  0679  00B9               	movwf	___flmul@temp+1
  4283  067A  0870               	movf	?__Umul8_16,w
  4284  067B  00B8               	movwf	___flmul@temp
  4285  067C  0838               	movf	___flmul@temp,w
  4286  067D  00A8               	movwf	??___flmul
  4287  067E  0839               	movf	___flmul@temp+1,w
  4288  067F  00A9               	movwf	??___flmul+1
  4289  0680  01AA               	clrf	??___flmul+2
  4290  0681  01AB               	clrf	??___flmul+3
  4291  0682  0828               	movf	??___flmul,w
  4292  0683  07B4               	addwf	___flmul@prod,f
  4293  0684  0829               	movf	??___flmul+1,w
  4294  0685  1103               	clrz
  4295  0686  1803               	skipnc
  4296  0687  3E01               	addlw	1
  4297  0688  1D03               	btfss	3,2
  4298  0689  07B5               	addwf	___flmul@prod+1,f
  4299  068A  082A               	movf	??___flmul+2,w
  4300  068B  1103               	clrz
  4301  068C  1803               	skipnc
  4302  068D  3E01               	addlw	1
  4303  068E  1D03               	btfss	3,2
  4304  068F  07B6               	addwf	___flmul@prod+2,f
  4305  0690  082B               	movf	??___flmul+3,w
  4306  0691  1103               	clrz
  4307  0692  1803               	skipnc
  4308  0693  3E01               	addlw	1
  4309  0694  1D03               	btfss	3,2
  4310  0695  07B7               	addwf	___flmul@prod+3,f
  4311  0696  0822               	movf	___flmul@b+2,w
  4312  0697  00A8               	movwf	??___flmul
  4313  0698  0828               	movf	??___flmul,w
  4314  0699  00F0               	movwf	__Umul8_16@multiplicand
  4315  069A  0825               	movf	___flmul@a+1,w
  4316  069B  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4317  06A0  0871               	movf	?__Umul8_16+1,w
  4318  06A1  1283               	bcf	3,5	;RP0=0, select bank0
  4319  06A2  1303               	bcf	3,6	;RP1=0, select bank0
  4320  06A3  00B9               	movwf	___flmul@temp+1
  4321  06A4  0870               	movf	?__Umul8_16,w
  4322  06A5  00B8               	movwf	___flmul@temp
  4323  06A6  0838               	movf	___flmul@temp,w
  4324  06A7  00A8               	movwf	??___flmul
  4325  06A8  0839               	movf	___flmul@temp+1,w
  4326  06A9  00A9               	movwf	??___flmul+1
  4327  06AA  01AA               	clrf	??___flmul+2
  4328  06AB  01AB               	clrf	??___flmul+3
  4329  06AC  0828               	movf	??___flmul,w
  4330  06AD  07B4               	addwf	___flmul@prod,f
  4331  06AE  0829               	movf	??___flmul+1,w
  4332  06AF  1103               	clrz
  4333  06B0  1803               	skipnc
  4334  06B1  3E01               	addlw	1
  4335  06B2  1D03               	btfss	3,2
  4336  06B3  07B5               	addwf	___flmul@prod+1,f
  4337  06B4  082A               	movf	??___flmul+2,w
  4338  06B5  1103               	clrz
  4339  06B6  1803               	skipnc
  4340  06B7  3E01               	addlw	1
  4341  06B8  1D03               	btfss	3,2
  4342  06B9  07B6               	addwf	___flmul@prod+2,f
  4343  06BA  082B               	movf	??___flmul+3,w
  4344  06BB  1103               	clrz
  4345  06BC  1803               	skipnc
  4346  06BD  3E01               	addlw	1
  4347  06BE  1D03               	btfss	3,2
  4348  06BF  07B7               	addwf	___flmul@prod+3,f
  4349  06C0  0822               	movf	___flmul@b+2,w
  4350  06C1  00A8               	movwf	??___flmul
  4351  06C2  0828               	movf	??___flmul,w
  4352  06C3  00F0               	movwf	__Umul8_16@multiplicand
  4353  06C4  0826               	movf	___flmul@a+2,w
  4354  06C5  120A  158A  207C  120A  118A  	fcall	__Umul8_16
  4355  06CA  0871               	movf	?__Umul8_16+1,w
  4356  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  4357  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  4358  06CD  00B9               	movwf	___flmul@temp+1
  4359  06CE  0870               	movf	?__Umul8_16,w
  4360  06CF  00B8               	movwf	___flmul@temp
  4361  06D0  0838               	movf	___flmul@temp,w
  4362  06D1  00A8               	movwf	??___flmul
  4363  06D2  0839               	movf	___flmul@temp+1,w
  4364  06D3  00A9               	movwf	??___flmul+1
  4365  06D4  01AA               	clrf	??___flmul+2
  4366  06D5  01AB               	clrf	??___flmul+3
  4367  06D6  3008               	movlw	8
  4368  06D7                     u2785:	
  4369  06D7  1003               	clrc
  4370  06D8  0DA8               	rlf	??___flmul,f
  4371  06D9  0DA9               	rlf	??___flmul+1,f
  4372  06DA  0DAA               	rlf	??___flmul+2,f
  4373  06DB  0DAB               	rlf	??___flmul+3,f
  4374  06DC  3EFF               	addlw	-1
  4375  06DD  1D03               	skipz
  4376  06DE  2ED7               	goto	u2785
  4377  06DF  0828               	movf	??___flmul,w
  4378  06E0  07B4               	addwf	___flmul@prod,f
  4379  06E1  0829               	movf	??___flmul+1,w
  4380  06E2  1103               	clrz
  4381  06E3  1803               	skipnc
  4382  06E4  3E01               	addlw	1
  4383  06E5  1D03               	btfss	3,2
  4384  06E6  07B5               	addwf	___flmul@prod+1,f
  4385  06E7  082A               	movf	??___flmul+2,w
  4386  06E8  1103               	clrz
  4387  06E9  1803               	skipnc
  4388  06EA  3E01               	addlw	1
  4389  06EB  1D03               	btfss	3,2
  4390  06EC  07B6               	addwf	___flmul@prod+2,f
  4391  06ED  082B               	movf	??___flmul+3,w
  4392  06EE  1103               	clrz
  4393  06EF  1803               	skipnc
  4394  06F0  3E01               	addlw	1
  4395  06F1  1D03               	btfss	3,2
  4396  06F2  07B7               	addwf	___flmul@prod+3,f
  4397  06F3  082E               	movf	___flmul@grs,w
  4398  06F4  00A8               	movwf	??___flmul
  4399  06F5  082F               	movf	___flmul@grs+1,w
  4400  06F6  00A9               	movwf	??___flmul+1
  4401  06F7  0830               	movf	___flmul@grs+2,w
  4402  06F8  00AA               	movwf	??___flmul+2
  4403  06F9  0831               	movf	___flmul@grs+3,w
  4404  06FA  00AB               	movwf	??___flmul+3
  4405  06FB  3018               	movlw	24
  4406  06FC                     u2805:	
  4407  06FC  1003               	clrc
  4408  06FD  0CAB               	rrf	??___flmul+3,f
  4409  06FE  0CAA               	rrf	??___flmul+2,f
  4410  06FF  0CA9               	rrf	??___flmul+1,f
  4411  0700  0CA8               	rrf	??___flmul,f
  4412  0701  3EFF               	addlw	-1
  4413  0702  1D03               	skipz
  4414  0703  2EFC               	goto	u2805
  4415  0704  0828               	movf	??___flmul,w
  4416  0705  07B4               	addwf	___flmul@prod,f
  4417  0706  0829               	movf	??___flmul+1,w
  4418  0707  1103               	clrz
  4419  0708  1803               	skipnc
  4420  0709  3E01               	addlw	1
  4421  070A  1D03               	btfss	3,2
  4422  070B  07B5               	addwf	___flmul@prod+1,f
  4423  070C  082A               	movf	??___flmul+2,w
  4424  070D  1103               	clrz
  4425  070E  1803               	skipnc
  4426  070F  3E01               	addlw	1
  4427  0710  1D03               	btfss	3,2
  4428  0711  07B6               	addwf	___flmul@prod+2,f
  4429  0712  082B               	movf	??___flmul+3,w
  4430  0713  1103               	clrz
  4431  0714  1803               	skipnc
  4432  0715  3E01               	addlw	1
  4433  0716  1D03               	btfss	3,2
  4434  0717  07B7               	addwf	___flmul@prod+3,f
  4435  0718  3008               	movlw	8
  4436  0719  00A8               	movwf	??___flmul
  4437  071A                     u2825:	
  4438  071A  1003               	clrc
  4439  071B  0DAE               	rlf	___flmul@grs,f
  4440  071C  0DAF               	rlf	___flmul@grs+1,f
  4441  071D  0DB0               	rlf	___flmul@grs+2,f
  4442  071E  0DB1               	rlf	___flmul@grs+3,f
  4443  071F  0BA8               	decfsz	??___flmul,f
  4444  0720  2F1A               	goto	u2825
  4445  0721  0833               	movf	___flmul@bexp,w
  4446  0722  0732               	addwf	___flmul@aexp,w
  4447  0723  00A8               	movwf	??___flmul
  4448  0724  01A9               	clrf	??___flmul+1
  4449  0725  0DA9               	rlf	??___flmul+1,f
  4450  0726  0828               	movf	??___flmul,w
  4451  0727  3E82               	addlw	130
  4452  0728  00B8               	movwf	___flmul@temp
  4453  0729  0829               	movf	??___flmul+1,w
  4454  072A  1803               	skipnc
  4455  072B  3E01               	addlw	1
  4456  072C  3EFF               	addlw	255
  4457  072D  00B9               	movwf	___flmul@temp+1
  4458  072E                     l2403:	
  4459  072E  1BB6               	btfsc	___flmul@prod+2,7
  4460  072F  2F4B               	goto	l2405
  4461  0730  3001               	movlw	1
  4462  0731  00A8               	movwf	??___flmul
  4463  0732                     u2835:	
  4464  0732  1003               	clrc
  4465  0733  0DB4               	rlf	___flmul@prod,f
  4466  0734  0DB5               	rlf	___flmul@prod+1,f
  4467  0735  0DB6               	rlf	___flmul@prod+2,f
  4468  0736  0DB7               	rlf	___flmul@prod+3,f
  4469  0737  0BA8               	decfsz	??___flmul,f
  4470  0738  2F32               	goto	u2835
  4471  0739  1BB1               	btfsc	___flmul@grs+3,7
  4472  073A  1434               	bsf	___flmul@prod,0
  4473  073B  3001               	movlw	1
  4474  073C  00A8               	movwf	??___flmul
  4475  073D                     u2855:	
  4476  073D  1003               	clrc
  4477  073E  0DAE               	rlf	___flmul@grs,f
  4478  073F  0DAF               	rlf	___flmul@grs+1,f
  4479  0740  0DB0               	rlf	___flmul@grs+2,f
  4480  0741  0DB1               	rlf	___flmul@grs+3,f
  4481  0742  0BA8               	decfsz	??___flmul,f
  4482  0743  2F3D               	goto	u2855
  4483  0744  30FF               	movlw	255
  4484  0745  07B8               	addwf	___flmul@temp,f
  4485  0746  1803               	skipnc
  4486  0747  0AB9               	incf	___flmul@temp+1,f
  4487  0748  30FF               	movlw	255
  4488  0749  07B9               	addwf	___flmul@temp+1,f
  4489  074A  2F2E               	goto	l2403
  4490  074B                     l2405:	
  4491  074B  01B2               	clrf	___flmul@aexp
  4492  074C  1FB1               	btfss	___flmul@grs+3,7
  4493  074D  2F64               	goto	l2415
  4494  074E  30FF               	movlw	255
  4495  074F  052E               	andwf	___flmul@grs,w
  4496  0750  00A8               	movwf	??___flmul
  4497  0751  30FF               	movlw	255
  4498  0752  052F               	andwf	___flmul@grs+1,w
  4499  0753  00A9               	movwf	??___flmul+1
  4500  0754  30FF               	movlw	255
  4501  0755  0530               	andwf	___flmul@grs+2,w
  4502  0756  00AA               	movwf	??___flmul+2
  4503  0757  307F               	movlw	127
  4504  0758  0531               	andwf	___flmul@grs+3,w
  4505  0759  00AB               	movwf	??___flmul+3
  4506  075A  082B               	movf	??___flmul+3,w
  4507  075B  042A               	iorwf	??___flmul+2,w
  4508  075C  0429               	iorwf	??___flmul+1,w
  4509  075D  0428               	iorwf	??___flmul,w
  4510  075E  1903               	skipnz
  4511  075F  1834               	btfsc	___flmul@prod,0
  4512  0760  2F62               	goto	l2411
  4513  0761  2F64               	goto	l2415
  4514  0762                     l2411:	
  4515  0762  01B2               	clrf	___flmul@aexp
  4516  0763  0AB2               	incf	___flmul@aexp,f
  4517  0764                     l2415:	
  4518  0764  0832               	movf	___flmul@aexp,w
  4519  0765  1903               	btfsc	3,2
  4520  0766  2F96               	goto	l2425
  4521  0767  3001               	movlw	1
  4522  0768  07B4               	addwf	___flmul@prod,f
  4523  0769  3000               	movlw	0
  4524  076A  1803               	skipnc
  4525  076B  3001               	movlw	1
  4526  076C  07B5               	addwf	___flmul@prod+1,f
  4527  076D  3000               	movlw	0
  4528  076E  1803               	skipnc
  4529  076F  3001               	movlw	1
  4530  0770  07B6               	addwf	___flmul@prod+2,f
  4531  0771  3000               	movlw	0
  4532  0772  1803               	skipnc
  4533  0773  3001               	movlw	1
  4534  0774  07B7               	addwf	___flmul@prod+3,f
  4535  0775  1C37               	btfss	___flmul@prod+3,0
  4536  0776  2F96               	goto	l2425
  4537  0777  0834               	movf	___flmul@prod,w
  4538  0778  00A8               	movwf	??___flmul
  4539  0779  0835               	movf	___flmul@prod+1,w
  4540  077A  00A9               	movwf	??___flmul+1
  4541  077B  0836               	movf	___flmul@prod+2,w
  4542  077C  00AA               	movwf	??___flmul+2
  4543  077D  0837               	movf	___flmul@prod+3,w
  4544  077E  00AB               	movwf	??___flmul+3
  4545  077F  3001               	movlw	1
  4546  0780  00AC               	movwf	??___flmul+4
  4547  0781                     u2925:	
  4548  0781  0D2B               	rlf	??___flmul+3,w
  4549  0782  0CAB               	rrf	??___flmul+3,f
  4550  0783  0CAA               	rrf	??___flmul+2,f
  4551  0784  0CA9               	rrf	??___flmul+1,f
  4552  0785  0CA8               	rrf	??___flmul,f
  4553  0786  0BAC               	decfsz	??___flmul+4,f
  4554  0787  2F81               	goto	u2925
  4555  0788  082B               	movf	??___flmul+3,w
  4556  0789  00B7               	movwf	___flmul@prod+3
  4557  078A  082A               	movf	??___flmul+2,w
  4558  078B  00B6               	movwf	___flmul@prod+2
  4559  078C  0829               	movf	??___flmul+1,w
  4560  078D  00B5               	movwf	___flmul@prod+1
  4561  078E  0828               	movf	??___flmul,w
  4562  078F  00B4               	movwf	___flmul@prod
  4563  0790  3001               	movlw	1
  4564  0791  07B8               	addwf	___flmul@temp,f
  4565  0792  1803               	skipnc
  4566  0793  0AB9               	incf	___flmul@temp+1,f
  4567  0794  3000               	movlw	0
  4568  0795  07B9               	addwf	___flmul@temp+1,f
  4569  0796                     l2425:	
  4570  0796  0839               	movf	___flmul@temp+1,w
  4571  0797  3A80               	xorlw	128
  4572  0798  00FF               	movwf	127
  4573  0799  3080               	movlw	128
  4574  079A  027F               	subwf	127,w
  4575  079B  1D03               	skipz
  4576  079C  2F9F               	goto	u2935
  4577  079D  30FF               	movlw	255
  4578  079E  0238               	subwf	___flmul@temp,w
  4579  079F                     u2935:	
  4580  079F  1C03               	skipc
  4581  07A0  2FAC               	goto	l2429
  4582  07A1  307F               	movlw	127
  4583  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  4584  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  4585  07A4  00B7               	movwf	___flmul@prod+3
  4586  07A5  3080               	movlw	128
  4587  07A6  00B6               	movwf	___flmul@prod+2
  4588  07A7  3000               	movlw	0
  4589  07A8  00B5               	movwf	___flmul@prod+1
  4590  07A9  3000               	movlw	0
  4591  07AA  00B4               	movwf	___flmul@prod
  4592  07AB  2FDC               	goto	l816
  4593  07AC                     l2429:	
  4594  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  4595  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  4596  07AE  0839               	movf	___flmul@temp+1,w
  4597  07AF  3A80               	xorlw	128
  4598  07B0  00FF               	movwf	127
  4599  07B1  3080               	movlw	128
  4600  07B2  027F               	subwf	127,w
  4601  07B3  1D03               	skipz
  4602  07B4  2FB7               	goto	u2945
  4603  07B5  3001               	movlw	1
  4604  07B6  0238               	subwf	___flmul@temp,w
  4605  07B7                     u2945:	
  4606  07B7  1803               	skipnc
  4607  07B8  2FC5               	goto	l2435
  4608  07B9  3000               	movlw	0
  4609  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  4610  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  4611  07BC  00B7               	movwf	___flmul@prod+3
  4612  07BD  3000               	movlw	0
  4613  07BE  00B6               	movwf	___flmul@prod+2
  4614  07BF  3000               	movlw	0
  4615  07C0  00B5               	movwf	___flmul@prod+1
  4616  07C1  3000               	movlw	0
  4617  07C2  00B4               	movwf	___flmul@prod
  4618  07C3  01AD               	clrf	___flmul@sign
  4619  07C4  2FDC               	goto	l816
  4620  07C5                     l2435:	
  4621  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  4622  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  4623  07C7  0838               	movf	___flmul@temp,w
  4624  07C8  00A8               	movwf	??___flmul
  4625  07C9  0828               	movf	??___flmul,w
  4626  07CA  00B3               	movwf	___flmul@bexp
  4627  07CB  30FF               	movlw	255
  4628  07CC  05B4               	andwf	___flmul@prod,f
  4629  07CD  30FF               	movlw	255
  4630  07CE  05B5               	andwf	___flmul@prod+1,f
  4631  07CF  307F               	movlw	127
  4632  07D0  05B6               	andwf	___flmul@prod+2,f
  4633  07D1  3000               	movlw	0
  4634  07D2  05B7               	andwf	___flmul@prod+3,f
  4635  07D3  1833               	btfsc	___flmul@bexp,0
  4636  07D4  17B6               	bsf	___flmul@prod+2,7
  4637  07D5  0833               	movf	___flmul@bexp,w
  4638  07D6  00A8               	movwf	??___flmul
  4639  07D7  1003               	clrc
  4640  07D8  0C28               	rrf	??___flmul,w
  4641  07D9  00A9               	movwf	??___flmul+1
  4642  07DA  0829               	movf	??___flmul+1,w
  4643  07DB  00B7               	movwf	___flmul@prod+3
  4644  07DC                     l816:	
  4645  07DC  082D               	movf	___flmul@sign,w
  4646  07DD  00A8               	movwf	??___flmul
  4647  07DE  0828               	movf	??___flmul,w
  4648  07DF  04B7               	iorwf	___flmul@prod+3,f
  4649  07E0  0837               	movf	___flmul@prod+3,w
  4650  07E1  00A3               	movwf	?___flmul+3
  4651  07E2  0836               	movf	___flmul@prod+2,w
  4652  07E3  00A2               	movwf	?___flmul+2
  4653  07E4  0835               	movf	___flmul@prod+1,w
  4654  07E5  00A1               	movwf	?___flmul+1
  4655  07E6  0834               	movf	___flmul@prod,w
  4656  07E7  00A0               	movwf	?___flmul
  4657  07E8  0008               	return
  4658  07E9                     __end_of___flmul:	
  4659                           
  4660                           	psect	text13
  4661  087C                     __ptext13:	
  4662 ;; *************** function __Umul8_16 *****************
  4663 ;; Defined at:
  4664 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8_16.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  multiplier      1    wreg     unsigned char 
  4667 ;;  multiplicand    1    0[COMMON] unsigned char 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;  multiplier      1    8[COMMON] unsigned char 
  4670 ;;  word_mpld       2    6[COMMON] unsigned int 
  4671 ;;  product         2    4[COMMON] unsigned int 
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  2    0[COMMON] unsigned int 
  4674 ;; Registers used:
  4675 ;;		wreg, status,2, status,0
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4681 ;;      Params:         2       0       0       0       0
  4682 ;;      Locals:         5       0       0       0       0
  4683 ;;      Temps:          2       0       0       0       0
  4684 ;;      Totals:         9       0       0       0       0
  4685 ;;Total ram usage:        9 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		___flmul
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           
  4695                           ;psect for function __Umul8_16
  4696  087C                     __Umul8_16:	
  4697                           
  4698                           ;incstack = 0
  4699                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4700                           ;__Umul8_16@multiplier stored from wreg
  4701  087C  00F8               	movwf	__Umul8_16@multiplier
  4702  087D  01F4               	clrf	__Umul8_16@product
  4703  087E  01F5               	clrf	__Umul8_16@product+1
  4704  087F  0870               	movf	__Umul8_16@multiplicand,w
  4705  0880  00F2               	movwf	??__Umul8_16
  4706  0881  01F3               	clrf	??__Umul8_16+1
  4707  0882  0872               	movf	??__Umul8_16,w
  4708  0883  00F6               	movwf	__Umul8_16@word_mpld
  4709  0884  0873               	movf	??__Umul8_16+1,w
  4710  0885  00F7               	movwf	__Umul8_16@word_mpld+1
  4711  0886                     l2157:	
  4712  0886  1C78               	btfss	__Umul8_16@multiplier,0
  4713  0887  288E               	goto	l861
  4714  0888  0876               	movf	__Umul8_16@word_mpld,w
  4715  0889  07F4               	addwf	__Umul8_16@product,f
  4716  088A  1803               	skipnc
  4717  088B  0AF5               	incf	__Umul8_16@product+1,f
  4718  088C  0877               	movf	__Umul8_16@word_mpld+1,w
  4719  088D  07F5               	addwf	__Umul8_16@product+1,f
  4720  088E                     l861:	
  4721  088E  3001               	movlw	1
  4722  088F                     u2305:	
  4723  088F  1003               	clrc
  4724  0890  0DF6               	rlf	__Umul8_16@word_mpld,f
  4725  0891  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  4726  0892  3EFF               	addlw	-1
  4727  0893  1D03               	skipz
  4728  0894  288F               	goto	u2305
  4729  0895  1003               	clrc
  4730  0896  0CF8               	rrf	__Umul8_16@multiplier,f
  4731  0897  0878               	movf	__Umul8_16@multiplier,w
  4732  0898  1D03               	btfss	3,2
  4733  0899  2886               	goto	l2157
  4734  089A  0875               	movf	__Umul8_16@product+1,w
  4735  089B  00F1               	movwf	?__Umul8_16+1
  4736  089C  0874               	movf	__Umul8_16@product,w
  4737  089D  00F0               	movwf	?__Umul8_16
  4738  089E  0008               	return
  4739  089F                     __end_of__Umul8_16:	
  4740                           
  4741                           	psect	text14
  4742  0B70                     __ptext14:	
  4743 ;; *************** function ___flge *****************
  4744 ;; Defined at:
  4745 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\flge.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  ff1             4   26[BANK0 ] unsigned int 
  4748 ;;  ff2             4   30[BANK0 ] unsigned int 
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;		None               void
  4753 ;; Registers used:
  4754 ;;		wreg, status,2, status,0
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4760 ;;      Params:         0       8       0       0       0
  4761 ;;      Locals:         0       0       0       0       0
  4762 ;;      Temps:          0       4       0       0       0
  4763 ;;      Totals:         0      12       0       0       0
  4764 ;;Total ram usage:       12 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; This function calls:
  4767 ;;		Nothing
  4768 ;; This function is called by:
  4769 ;;		_VerificarInversionGiro
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           
  4774                           ;psect for function ___flge
  4775  0B70                     ___flge:	
  4776                           
  4777                           ;incstack = 0
  4778                           ; Regs used in ___flge: [wreg+status,2+status,0]
  4779  0B70  3000               	movlw	0
  4780  0B71  1283               	bcf	3,5	;RP0=0, select bank0
  4781  0B72  1303               	bcf	3,6	;RP1=0, select bank0
  4782  0B73  053A               	andwf	___flge@ff1,w
  4783  0B74  00C2               	movwf	??___flge
  4784  0B75  3000               	movlw	0
  4785  0B76  053B               	andwf	___flge@ff1+1,w
  4786  0B77  00C3               	movwf	??___flge+1
  4787  0B78  3080               	movlw	128
  4788  0B79  053C               	andwf	___flge@ff1+2,w
  4789  0B7A  00C4               	movwf	??___flge+2
  4790  0B7B  307F               	movlw	127
  4791  0B7C  053D               	andwf	___flge@ff1+3,w
  4792  0B7D  00C5               	movwf	??___flge+3
  4793  0B7E  0845               	movf	??___flge+3,w
  4794  0B7F  0444               	iorwf	??___flge+2,w
  4795  0B80  0443               	iorwf	??___flge+1,w
  4796  0B81  0442               	iorwf	??___flge,w
  4797  0B82  1D03               	skipz
  4798  0B83  2B8C               	goto	l589
  4799  0B84  3000               	movlw	0
  4800  0B85  00BD               	movwf	___flge@ff1+3
  4801  0B86  3000               	movlw	0
  4802  0B87  00BC               	movwf	___flge@ff1+2
  4803  0B88  3000               	movlw	0
  4804  0B89  00BB               	movwf	___flge@ff1+1
  4805  0B8A  3000               	movlw	0
  4806  0B8B  00BA               	movwf	___flge@ff1
  4807  0B8C                     l589:	
  4808  0B8C  3000               	movlw	0
  4809  0B8D  053E               	andwf	___flge@ff2,w
  4810  0B8E  00C2               	movwf	??___flge
  4811  0B8F  3000               	movlw	0
  4812  0B90  053F               	andwf	___flge@ff2+1,w
  4813  0B91  00C3               	movwf	??___flge+1
  4814  0B92  3080               	movlw	128
  4815  0B93  0540               	andwf	___flge@ff2+2,w
  4816  0B94  00C4               	movwf	??___flge+2
  4817  0B95  307F               	movlw	127
  4818  0B96  0541               	andwf	___flge@ff2+3,w
  4819  0B97  00C5               	movwf	??___flge+3
  4820  0B98  0845               	movf	??___flge+3,w
  4821  0B99  0444               	iorwf	??___flge+2,w
  4822  0B9A  0443               	iorwf	??___flge+1,w
  4823  0B9B  0442               	iorwf	??___flge,w
  4824  0B9C  1D03               	skipz
  4825  0B9D  2BA6               	goto	l2293
  4826  0B9E  3000               	movlw	0
  4827  0B9F  00C1               	movwf	___flge@ff2+3
  4828  0BA0  3000               	movlw	0
  4829  0BA1  00C0               	movwf	___flge@ff2+2
  4830  0BA2  3000               	movlw	0
  4831  0BA3  00BF               	movwf	___flge@ff2+1
  4832  0BA4  3000               	movlw	0
  4833  0BA5  00BE               	movwf	___flge@ff2
  4834  0BA6                     l2293:	
  4835  0BA6  1FBD               	btfss	___flge@ff1+3,7
  4836  0BA7  2BCC               	goto	l2297
  4837  0BA8  3000               	movlw	0
  4838  0BA9  00C2               	movwf	??___flge
  4839  0BAA  3000               	movlw	0
  4840  0BAB  00C3               	movwf	??___flge+1
  4841  0BAC  3000               	movlw	0
  4842  0BAD  00C4               	movwf	??___flge+2
  4843  0BAE  3080               	movlw	128
  4844  0BAF  00C5               	movwf	??___flge+3
  4845  0BB0  083A               	movf	___flge@ff1,w
  4846  0BB1  02C2               	subwf	??___flge,f
  4847  0BB2  083B               	movf	___flge@ff1+1,w
  4848  0BB3  1C03               	skipc
  4849  0BB4  0F3B               	incfsz	___flge@ff1+1,w
  4850  0BB5  2BB7               	goto	u2551
  4851  0BB6  2BB8               	goto	u2552
  4852  0BB7                     u2551:	
  4853  0BB7  02C3               	subwf	??___flge+1,f
  4854  0BB8                     u2552:	
  4855  0BB8  083C               	movf	___flge@ff1+2,w
  4856  0BB9  1C03               	skipc
  4857  0BBA  0F3C               	incfsz	___flge@ff1+2,w
  4858  0BBB  2BBD               	goto	u2553
  4859  0BBC  2BBE               	goto	u2554
  4860  0BBD                     u2553:	
  4861  0BBD  02C4               	subwf	??___flge+2,f
  4862  0BBE                     u2554:	
  4863  0BBE  083D               	movf	___flge@ff1+3,w
  4864  0BBF  1C03               	skipc
  4865  0BC0  0F3D               	incfsz	___flge@ff1+3,w
  4866  0BC1  2BC3               	goto	u2555
  4867  0BC2  2BC4               	goto	u2556
  4868  0BC3                     u2555:	
  4869  0BC3  02C5               	subwf	??___flge+3,f
  4870  0BC4                     u2556:	
  4871  0BC4  0845               	movf	??___flge+3,w
  4872  0BC5  00BD               	movwf	___flge@ff1+3
  4873  0BC6  0844               	movf	??___flge+2,w
  4874  0BC7  00BC               	movwf	___flge@ff1+2
  4875  0BC8  0843               	movf	??___flge+1,w
  4876  0BC9  00BB               	movwf	___flge@ff1+1
  4877  0BCA  0842               	movf	??___flge,w
  4878  0BCB  00BA               	movwf	___flge@ff1
  4879  0BCC                     l2297:	
  4880  0BCC  1FC1               	btfss	___flge@ff2+3,7
  4881  0BCD  2BF2               	goto	l592
  4882  0BCE  3000               	movlw	0
  4883  0BCF  00C2               	movwf	??___flge
  4884  0BD0  3000               	movlw	0
  4885  0BD1  00C3               	movwf	??___flge+1
  4886  0BD2  3000               	movlw	0
  4887  0BD3  00C4               	movwf	??___flge+2
  4888  0BD4  3080               	movlw	128
  4889  0BD5  00C5               	movwf	??___flge+3
  4890  0BD6  083E               	movf	___flge@ff2,w
  4891  0BD7  02C2               	subwf	??___flge,f
  4892  0BD8  083F               	movf	___flge@ff2+1,w
  4893  0BD9  1C03               	skipc
  4894  0BDA  0F3F               	incfsz	___flge@ff2+1,w
  4895  0BDB  2BDD               	goto	u2571
  4896  0BDC  2BDE               	goto	u2572
  4897  0BDD                     u2571:	
  4898  0BDD  02C3               	subwf	??___flge+1,f
  4899  0BDE                     u2572:	
  4900  0BDE  0840               	movf	___flge@ff2+2,w
  4901  0BDF  1C03               	skipc
  4902  0BE0  0F40               	incfsz	___flge@ff2+2,w
  4903  0BE1  2BE3               	goto	u2573
  4904  0BE2  2BE4               	goto	u2574
  4905  0BE3                     u2573:	
  4906  0BE3  02C4               	subwf	??___flge+2,f
  4907  0BE4                     u2574:	
  4908  0BE4  0841               	movf	___flge@ff2+3,w
  4909  0BE5  1C03               	skipc
  4910  0BE6  0F41               	incfsz	___flge@ff2+3,w
  4911  0BE7  2BE9               	goto	u2575
  4912  0BE8  2BEA               	goto	u2576
  4913  0BE9                     u2575:	
  4914  0BE9  02C5               	subwf	??___flge+3,f
  4915  0BEA                     u2576:	
  4916  0BEA  0845               	movf	??___flge+3,w
  4917  0BEB  00C1               	movwf	___flge@ff2+3
  4918  0BEC  0844               	movf	??___flge+2,w
  4919  0BED  00C0               	movwf	___flge@ff2+2
  4920  0BEE  0843               	movf	??___flge+1,w
  4921  0BEF  00BF               	movwf	___flge@ff2+1
  4922  0BF0  0842               	movf	??___flge,w
  4923  0BF1  00BE               	movwf	___flge@ff2
  4924  0BF2                     l592:	
  4925  0BF2  3080               	movlw	128
  4926  0BF3  06BD               	xorwf	___flge@ff1+3,f
  4927  0BF4  3080               	movlw	128
  4928  0BF5  06C1               	xorwf	___flge@ff2+3,f
  4929  0BF6  0841               	movf	___flge@ff2+3,w
  4930  0BF7  023D               	subwf	___flge@ff1+3,w
  4931  0BF8  1D03               	skipz
  4932  0BF9  0008               	return
  4933  0BFA  0840               	movf	___flge@ff2+2,w
  4934  0BFB  023C               	subwf	___flge@ff1+2,w
  4935  0BFC  1D03               	skipz
  4936  0BFD  0008               	return
  4937  0BFE  083F               	movf	___flge@ff2+1,w
  4938  0BFF  023B               	subwf	___flge@ff1+1,w
  4939  0C00  1D03               	skipz
  4940  0C01  0008               	return
  4941  0C02  083E               	movf	___flge@ff2,w
  4942  0C03  023A               	subwf	___flge@ff1,w
  4943  0C04  0008               	return
  4944  0C05                     __end_of___flge:	
  4945                           
  4946                           	psect	text15
  4947  0003                     __ptext15:	
  4948 ;; *************** function _Lcd_Write_Integer *****************
  4949 ;; Defined at:
  4950 ;;		line 99 in file "./lcd.h"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  a               2   37[BANK0 ] int 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  Data           10   40[BANK0 ] unsigned char [10]
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      void 
  4957 ;; Registers used:
  4958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4964 ;;      Params:         0       2       0       0       0
  4965 ;;      Locals:         0      10       0       0       0
  4966 ;;      Temps:          0       1       0       0       0
  4967 ;;      Totals:         0      13       0       0       0
  4968 ;;Total ram usage:       13 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    3
  4971 ;; This function calls:
  4972 ;;		_Lcd_Write_String
  4973 ;;		_sprintf
  4974 ;; This function is called by:
  4975 ;;		_configurarAntiHorario
  4976 ;;		_configurarHorario
  4977 ;;		_Encoder
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           
  4982                           ;psect for function _Lcd_Write_Integer
  4983  0003                     _Lcd_Write_Integer:	
  4984                           
  4985                           ;./lcd.h: 100:     char Data[10];;./lcd.h: 101:     sprintf(Data, "%d", a);
  4986                           
  4987                           ;incstack = 0
  4988                           ; Regs used in _Lcd_Write_Integer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4989  0003  3067               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4990  0004  1283               	bcf	3,5	;RP0=0, select bank0
  4991  0005  1303               	bcf	3,6	;RP1=0, select bank0
  4992  0006  00C7               	movwf	??_Lcd_Write_Integer
  4993  0007  0847               	movf	??_Lcd_Write_Integer,w
  4994  0008  00A0               	movwf	sprintf@f
  4995  0009  0846               	movf	Lcd_Write_Integer@a+1,w
  4996  000A  00A2               	movwf	?_sprintf+2
  4997  000B  0845               	movf	Lcd_Write_Integer@a,w
  4998  000C  00A1               	movwf	?_sprintf+1
  4999  000D  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5000  000E  120A  158A  2632  120A  118A  	fcall	_sprintf
  5001                           
  5002                           ;./lcd.h: 102:     Lcd_Write_String(Data);
  5003  0013  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  5004  0014  00F5               	movwf	Lcd_Write_String@a
  5005  0015  3000               	movlw	0
  5006  0016  00F6               	movwf	Lcd_Write_String@a+1
  5007  0017  120A  158A  209F   	fcall	_Lcd_Write_String
  5008  001A  0008               	return
  5009  001B                     __end_of_Lcd_Write_Integer:	
  5010                           
  5011                           	psect	text16
  5012  0E32                     __ptext16:	
  5013 ;; *************** function _sprintf *****************
  5014 ;; Defined at:
  5015 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  sp              1    wreg     PTR unsigned char 
  5018 ;;		 -> Lcd_Write_Integer@Data(10), UART_Write_Integer@Data(10), 
  5019 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  5020 ;;		 -> STR_2(3), STR_1(3), 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  5023 ;;		 -> Lcd_Write_Integer@Data(10), UART_Write_Integer@Data(10), 
  5024 ;;  tmpval          4    0        struct .
  5025 ;;  val             2    9[BANK0 ] unsigned int 
  5026 ;;  cp              2    0        PTR const unsigned char 
  5027 ;;  len             2    0        unsigned int 
  5028 ;;  c               1   12[BANK0 ] unsigned char 
  5029 ;;  prec            1    8[BANK0 ] char 
  5030 ;;  flag            1    7[BANK0 ] unsigned char 
  5031 ;;  ap              1    6[BANK0 ] PTR void [1]
  5032 ;;		 -> ?_sprintf(2), 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  2    0[BANK0 ] int 
  5035 ;; Registers used:
  5036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5042 ;;      Params:         0       3       0       0       0
  5043 ;;      Locals:         0       7       0       0       0
  5044 ;;      Temps:          0       3       0       0       0
  5045 ;;      Totals:         0      13       0       0       0
  5046 ;;Total ram usage:       13 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    1
  5049 ;; This function calls:
  5050 ;;		___lwdiv
  5051 ;;		___lwmod
  5052 ;; This function is called by:
  5053 ;;		_Lcd_Write_Integer
  5054 ;;		_UART_Write_Integer
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           
  5059                           ;psect for function _sprintf
  5060  0E32                     _sprintf:	
  5061                           
  5062                           ;incstack = 0
  5063                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5064                           ;sprintf@sp stored from wreg
  5065  0E32  1283               	bcf	3,5	;RP0=0, select bank0
  5066  0E33  1303               	bcf	3,6	;RP1=0, select bank0
  5067  0E34  00AB               	movwf	sprintf@sp
  5068                           
  5069                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  5070  0E35  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  5071  0E36  00A3               	movwf	??_sprintf
  5072  0E37  0823               	movf	??_sprintf,w
  5073  0E38  00A6               	movwf	sprintf@ap
  5074  0E39                     l2219:	
  5075                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5076                           
  5077                           
  5078                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  5079  0E39  3001               	movlw	1
  5080  0E3A  07A0               	addwf	sprintf@f,f
  5081  0E3B  30FF               	movlw	-1
  5082  0E3C  0720               	addwf	sprintf@f,w
  5083  0E3D  0084               	movwf	4
  5084  0E3E  120A  158A  200A  120A  158A  	fcall	stringdir
  5085  0E43  00A3               	movwf	??_sprintf
  5086  0E44  0823               	movf	??_sprintf,w
  5087  0E45  00AC               	movwf	sprintf@c
  5088  0E46  082C               	movf	sprintf@c,w
  5089  0E47  1903               	btfsc	3,2
  5090  0E48  2F05               	goto	l2221
  5091                           
  5092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  5093  0E49  3025               	movlw	37
  5094  0E4A  062C               	xorwf	sprintf@c,w
  5095  0E4B  1903               	btfsc	3,2
  5096  0E4C  2E59               	goto	l2175
  5097                           
  5098                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  5099  0E4D  082C               	movf	sprintf@c,w
  5100  0E4E  00A3               	movwf	??_sprintf
  5101  0E4F  082B               	movf	sprintf@sp,w
  5102  0E50  0084               	movwf	4
  5103  0E51  0823               	movf	??_sprintf,w
  5104  0E52  1383               	bcf	3,7	;select IRP bank0
  5105  0E53  0080               	movwf	0
  5106  0E54  3001               	movlw	1
  5107  0E55  00A3               	movwf	??_sprintf
  5108  0E56  0823               	movf	??_sprintf,w
  5109  0E57  07AB               	addwf	sprintf@sp,f
  5110                           
  5111                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  5112  0E58  2E39               	goto	l2219
  5113  0E59                     l2175:	
  5114                           
  5115                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  5116  0E59  01A7               	clrf	sprintf@flag
  5117                           
  5118                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  5119  0E5A  3001               	movlw	1
  5120  0E5B  07A0               	addwf	sprintf@f,f
  5121  0E5C  30FF               	movlw	-1
  5122  0E5D  0720               	addwf	sprintf@f,w
  5123  0E5E  0084               	movwf	4
  5124  0E5F  120A  158A  200A  120A  158A  	fcall	stringdir
  5125  0E64  00AC               	movwf	sprintf@c
  5126  0E65  00A3               	movwf	??_sprintf
  5127  0E66  01A4               	clrf	??_sprintf+1
  5128                           
  5129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5130                           ; Switch size 1, requested type "simple"
  5131                           ; Number of cases is 1, Range of values is 0 to 0
  5132                           ; switch strategies available:
  5133                           ; Name         Instructions Cycles
  5134                           ; simple_byte            4     3 (average)
  5135                           ; direct_byte           11     8 (fixed)
  5136                           ; jumptable            260     6 (fixed)
  5137                           ;	Chosen strategy is simple_byte
  5138  0E67  0824               	movf	??_sprintf+1,w
  5139  0E68  3A00               	xorlw	0	; case 0
  5140  0E69  1903               	skipnz
  5141  0E6A  2E6C               	goto	l3189
  5142  0E6B  2E39               	goto	l2219
  5143  0E6C                     l3189:	
  5144                           
  5145                           ; Switch size 1, requested type "simple"
  5146                           ; Number of cases is 3, Range of values is 0 to 105
  5147                           ; switch strategies available:
  5148                           ; Name         Instructions Cycles
  5149                           ; simple_byte           10     6 (average)
  5150                           ; jumptable            260     6 (fixed)
  5151                           ;	Chosen strategy is simple_byte
  5152  0E6C  0823               	movf	??_sprintf,w
  5153  0E6D  3A00               	xorlw	0	; case 0
  5154  0E6E  1903               	skipnz
  5155  0E6F  2F05               	goto	l2221
  5156  0E70  3A64               	xorlw	100	; case 100
  5157  0E71  1903               	skipnz
  5158  0E72  2E77               	goto	l2181
  5159  0E73  3A0D               	xorlw	13	; case 105
  5160  0E74  1903               	skipnz
  5161  0E75  2E77               	goto	l2181
  5162  0E76  2E39               	goto	l2219
  5163  0E77                     l2181:	
  5164                           
  5165                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5166  0E77  0826               	movf	sprintf@ap,w
  5167  0E78  0084               	movwf	4
  5168  0E79  1383               	bcf	3,7	;select IRP bank0
  5169  0E7A  0800               	movf	0,w
  5170  0E7B  00A9               	movwf	sprintf@val
  5171  0E7C  0A84               	incf	4,f
  5172  0E7D  0800               	movf	0,w
  5173  0E7E  00AA               	movwf	sprintf@val+1
  5174  0E7F  3002               	movlw	2
  5175  0E80  00A3               	movwf	??_sprintf
  5176  0E81  0823               	movf	??_sprintf,w
  5177  0E82  07A6               	addwf	sprintf@ap,f
  5178                           
  5179                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  5180  0E83  1FAA               	btfss	sprintf@val+1,7
  5181  0E84  2E8E               	goto	l2191
  5182                           
  5183                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  5184  0E85  3003               	movlw	3
  5185  0E86  00A3               	movwf	??_sprintf
  5186  0E87  0823               	movf	??_sprintf,w
  5187  0E88  04A7               	iorwf	sprintf@flag,f
  5188                           
  5189                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  5190  0E89  09A9               	comf	sprintf@val,f
  5191  0E8A  09AA               	comf	sprintf@val+1,f
  5192  0E8B  0AA9               	incf	sprintf@val,f
  5193  0E8C  1903               	skipnz
  5194  0E8D  0AAA               	incf	sprintf@val+1,f
  5195  0E8E                     l2191:	
  5196                           
  5197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5198  0E8E  01AC               	clrf	sprintf@c
  5199  0E8F  0AAC               	incf	sprintf@c,f
  5200  0E90                     l2197:	
  5201                           
  5202                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  5203  0E90  082C               	movf	sprintf@c,w
  5204  0E91  00A3               	movwf	??_sprintf
  5205  0E92  0723               	addwf	??_sprintf,w
  5206  0E93  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5207  0E94  0084               	movwf	4
  5208  0E95  120A  158A  200A  120A  158A  	fcall	stringdir
  5209  0E9A  00A4               	movwf	??_sprintf+1
  5210  0E9B  120A  158A  200A  120A  158A  	fcall	stringdir
  5211  0EA0  00A5               	movwf	??_sprintf+2
  5212  0EA1  0825               	movf	??_sprintf+2,w
  5213  0EA2  022A               	subwf	sprintf@val+1,w
  5214  0EA3  1D03               	skipz
  5215  0EA4  2EA7               	goto	u2345
  5216  0EA5  0824               	movf	??_sprintf+1,w
  5217  0EA6  0229               	subwf	sprintf@val,w
  5218  0EA7                     u2345:	
  5219  0EA7  1C03               	btfss	3,0
  5220  0EA8  2EB1               	goto	l2203
  5221  0EA9  3001               	movlw	1
  5222  0EAA  00A3               	movwf	??_sprintf
  5223  0EAB  0823               	movf	??_sprintf,w
  5224  0EAC  07AC               	addwf	sprintf@c,f
  5225  0EAD  3005               	movlw	5
  5226  0EAE  062C               	xorwf	sprintf@c,w
  5227  0EAF  1D03               	btfss	3,2
  5228  0EB0  2E90               	goto	l2197
  5229  0EB1                     l2203:	
  5230                           
  5231                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  5232  0EB1  0827               	movf	sprintf@flag,w
  5233  0EB2  3903               	andlw	3
  5234  0EB3  1903               	btfsc	3,2
  5235  0EB4  2EC0               	goto	l2209
  5236                           
  5237                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  5238  0EB5  302D               	movlw	45
  5239  0EB6  00A3               	movwf	??_sprintf
  5240  0EB7  082B               	movf	sprintf@sp,w
  5241  0EB8  0084               	movwf	4
  5242  0EB9  0823               	movf	??_sprintf,w
  5243  0EBA  1383               	bcf	3,7	;select IRP bank0
  5244  0EBB  0080               	movwf	0
  5245  0EBC  3001               	movlw	1
  5246  0EBD  00A3               	movwf	??_sprintf
  5247  0EBE  0823               	movf	??_sprintf,w
  5248  0EBF  07AB               	addwf	sprintf@sp,f
  5249  0EC0                     l2209:	
  5250                           
  5251                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  5252  0EC0  082C               	movf	sprintf@c,w
  5253  0EC1  00A3               	movwf	??_sprintf
  5254  0EC2  0823               	movf	??_sprintf,w
  5255  0EC3  00A8               	movwf	sprintf@prec
  5256  0EC4                     l2217:	
  5257                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5258                           
  5259                           
  5260                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  5261  0EC4  30FF               	movlw	255
  5262  0EC5  00A3               	movwf	??_sprintf
  5263  0EC6  0823               	movf	??_sprintf,w
  5264  0EC7  07A8               	addwf	sprintf@prec,f
  5265  0EC8  0A28               	incf	sprintf@prec,w
  5266  0EC9  1903               	btfsc	3,2
  5267  0ECA  2E39               	goto	l2219
  5268                           
  5269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  5270  0ECB  300A               	movlw	10
  5271  0ECC  00F8               	movwf	___lwmod@divisor
  5272  0ECD  3000               	movlw	0
  5273  0ECE  00F9               	movwf	___lwmod@divisor+1
  5274  0ECF  0828               	movf	sprintf@prec,w
  5275  0ED0  00A3               	movwf	??_sprintf
  5276  0ED1  0723               	addwf	??_sprintf,w
  5277  0ED2  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5278  0ED3  0084               	movwf	4
  5279  0ED4  120A  158A  200A  120A  158A  	fcall	stringdir
  5280  0ED9  00F0               	movwf	___lwdiv@divisor
  5281  0EDA  120A  158A  200A  120A  158A  	fcall	stringdir
  5282  0EDF  00F1               	movwf	___lwdiv@divisor+1
  5283  0EE0  082A               	movf	sprintf@val+1,w
  5284  0EE1  00F3               	movwf	___lwdiv@dividend+1
  5285  0EE2  0829               	movf	sprintf@val,w
  5286  0EE3  00F2               	movwf	___lwdiv@dividend
  5287  0EE4  160A  118A  27C4  120A  158A  	fcall	___lwdiv
  5288  0EE9  0871               	movf	?___lwdiv+1,w
  5289  0EEA  00FB               	movwf	___lwmod@dividend+1
  5290  0EEB  0870               	movf	?___lwdiv,w
  5291  0EEC  00FA               	movwf	___lwmod@dividend
  5292  0EED  160A  118A  2759  120A  158A  	fcall	___lwmod
  5293  0EF2  0878               	movf	?___lwmod,w
  5294  0EF3  3E30               	addlw	48
  5295  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  5296  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  5297  0EF6  00A4               	movwf	??_sprintf+1
  5298  0EF7  0824               	movf	??_sprintf+1,w
  5299  0EF8  00AC               	movwf	sprintf@c
  5300                           
  5301                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  5302  0EF9  082C               	movf	sprintf@c,w
  5303  0EFA  00A3               	movwf	??_sprintf
  5304  0EFB  082B               	movf	sprintf@sp,w
  5305  0EFC  0084               	movwf	4
  5306  0EFD  0823               	movf	??_sprintf,w
  5307  0EFE  1383               	bcf	3,7	;select IRP bank0
  5308  0EFF  0080               	movwf	0
  5309  0F00  3001               	movlw	1
  5310  0F01  00A3               	movwf	??_sprintf
  5311  0F02  0823               	movf	??_sprintf,w
  5312  0F03  07AB               	addwf	sprintf@sp,f
  5313  0F04  2EC4               	goto	l2217
  5314  0F05                     l2221:	
  5315                           
  5316                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  5317  0F05  082B               	movf	sprintf@sp,w
  5318  0F06  0084               	movwf	4
  5319  0F07  1383               	bcf	3,7	;select IRP bank0
  5320  0F08  0180               	clrf	0
  5321  0F09  0008               	return
  5322  0F0A                     __end_of_sprintf:	
  5323                           
  5324                           	psect	text17
  5325  1759                     __ptext17:	
  5326 ;; *************** function ___lwmod *****************
  5327 ;; Defined at:
  5328 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  divisor         2    8[COMMON] unsigned int 
  5331 ;;  dividend        2   10[COMMON] unsigned int 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  counter         1   13[COMMON] unsigned char 
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  2    8[COMMON] unsigned int 
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, status,0
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5343 ;;      Params:         4       0       0       0       0
  5344 ;;      Locals:         1       0       0       0       0
  5345 ;;      Temps:          1       0       0       0       0
  5346 ;;      Totals:         6       0       0       0       0
  5347 ;;Total ram usage:        6 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_sprintf
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           
  5357                           ;psect for function ___lwmod
  5358  1759                     ___lwmod:	
  5359                           
  5360                           ;incstack = 0
  5361                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5362  1759  0878               	movf	___lwmod@divisor,w
  5363  175A  0479               	iorwf	___lwmod@divisor+1,w
  5364  175B  1903               	btfsc	3,2
  5365  175C  2F86               	goto	l2149
  5366  175D  01FD               	clrf	___lwmod@counter
  5367  175E  0AFD               	incf	___lwmod@counter,f
  5368  175F                     l2139:	
  5369  175F  1BF9               	btfsc	___lwmod@divisor+1,7
  5370  1760  2F6D               	goto	l2141
  5371  1761  3001               	movlw	1
  5372  1762                     u2245:	
  5373  1762  1003               	clrc
  5374  1763  0DF8               	rlf	___lwmod@divisor,f
  5375  1764  0DF9               	rlf	___lwmod@divisor+1,f
  5376  1765  3EFF               	addlw	-1
  5377  1766  1D03               	skipz
  5378  1767  2F62               	goto	u2245
  5379  1768  3001               	movlw	1
  5380  1769  00FC               	movwf	??___lwmod
  5381  176A  087C               	movf	??___lwmod,w
  5382  176B  07FD               	addwf	___lwmod@counter,f
  5383  176C  2F5F               	goto	l2139
  5384  176D                     l2141:	
  5385  176D  0879               	movf	___lwmod@divisor+1,w
  5386  176E  027B               	subwf	___lwmod@dividend+1,w
  5387  176F  1D03               	skipz
  5388  1770  2F73               	goto	u2265
  5389  1771  0878               	movf	___lwmod@divisor,w
  5390  1772  027A               	subwf	___lwmod@dividend,w
  5391  1773                     u2265:	
  5392  1773  1C03               	skipc
  5393  1774  2F7B               	goto	l2145
  5394  1775  0878               	movf	___lwmod@divisor,w
  5395  1776  02FA               	subwf	___lwmod@dividend,f
  5396  1777  0879               	movf	___lwmod@divisor+1,w
  5397  1778  1C03               	skipc
  5398  1779  03FB               	decf	___lwmod@dividend+1,f
  5399  177A  02FB               	subwf	___lwmod@dividend+1,f
  5400  177B                     l2145:	
  5401  177B  3001               	movlw	1
  5402  177C                     u2275:	
  5403  177C  1003               	clrc
  5404  177D  0CF9               	rrf	___lwmod@divisor+1,f
  5405  177E  0CF8               	rrf	___lwmod@divisor,f
  5406  177F  3EFF               	addlw	-1
  5407  1780  1D03               	skipz
  5408  1781  2F7C               	goto	u2275
  5409  1782  3001               	movlw	1
  5410  1783  02FD               	subwf	___lwmod@counter,f
  5411  1784  1D03               	btfss	3,2
  5412  1785  2F6D               	goto	l2141
  5413  1786                     l2149:	
  5414  1786  087B               	movf	___lwmod@dividend+1,w
  5415  1787  00F9               	movwf	?___lwmod+1
  5416  1788  087A               	movf	___lwmod@dividend,w
  5417  1789  00F8               	movwf	?___lwmod
  5418  178A  0008               	return
  5419  178B                     __end_of___lwmod:	
  5420                           
  5421                           	psect	text18
  5422  17C4                     __ptext18:	
  5423 ;; *************** function ___lwdiv *****************
  5424 ;; Defined at:
  5425 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  divisor         2    0[COMMON] unsigned int 
  5428 ;;  dividend        2    2[COMMON] unsigned int 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  quotient        2    5[COMMON] unsigned int 
  5431 ;;  counter         1    7[COMMON] unsigned char 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  2    0[COMMON] unsigned int 
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5441 ;;      Params:         4       0       0       0       0
  5442 ;;      Locals:         3       0       0       0       0
  5443 ;;      Temps:          1       0       0       0       0
  5444 ;;      Totals:         8       0       0       0       0
  5445 ;;Total ram usage:        8 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_sprintf
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function ___lwdiv
  5456  17C4                     ___lwdiv:	
  5457                           
  5458                           ;incstack = 0
  5459                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5460  17C4  01F5               	clrf	___lwdiv@quotient
  5461  17C5  01F6               	clrf	___lwdiv@quotient+1
  5462  17C6  0870               	movf	___lwdiv@divisor,w
  5463  17C7  0471               	iorwf	___lwdiv@divisor+1,w
  5464  17C8  1903               	btfsc	3,2
  5465  17C9  2FFB               	goto	l2127
  5466  17CA  01F7               	clrf	___lwdiv@counter
  5467  17CB  0AF7               	incf	___lwdiv@counter,f
  5468  17CC                     l2115:	
  5469  17CC  1BF1               	btfsc	___lwdiv@divisor+1,7
  5470  17CD  2FDA               	goto	l2117
  5471  17CE  3001               	movlw	1
  5472  17CF                     u2175:	
  5473  17CF  1003               	clrc
  5474  17D0  0DF0               	rlf	___lwdiv@divisor,f
  5475  17D1  0DF1               	rlf	___lwdiv@divisor+1,f
  5476  17D2  3EFF               	addlw	-1
  5477  17D3  1D03               	skipz
  5478  17D4  2FCF               	goto	u2175
  5479  17D5  3001               	movlw	1
  5480  17D6  00F4               	movwf	??___lwdiv
  5481  17D7  0874               	movf	??___lwdiv,w
  5482  17D8  07F7               	addwf	___lwdiv@counter,f
  5483  17D9  2FCC               	goto	l2115
  5484  17DA                     l2117:	
  5485  17DA  3001               	movlw	1
  5486  17DB                     u2195:	
  5487  17DB  1003               	clrc
  5488  17DC  0DF5               	rlf	___lwdiv@quotient,f
  5489  17DD  0DF6               	rlf	___lwdiv@quotient+1,f
  5490  17DE  3EFF               	addlw	-1
  5491  17DF  1D03               	skipz
  5492  17E0  2FDB               	goto	u2195
  5493  17E1  0871               	movf	___lwdiv@divisor+1,w
  5494  17E2  0273               	subwf	___lwdiv@dividend+1,w
  5495  17E3  1D03               	skipz
  5496  17E4  2FE7               	goto	u2205
  5497  17E5  0870               	movf	___lwdiv@divisor,w
  5498  17E6  0272               	subwf	___lwdiv@dividend,w
  5499  17E7                     u2205:	
  5500  17E7  1C03               	skipc
  5501  17E8  2FF0               	goto	l2123
  5502  17E9  0870               	movf	___lwdiv@divisor,w
  5503  17EA  02F2               	subwf	___lwdiv@dividend,f
  5504  17EB  0871               	movf	___lwdiv@divisor+1,w
  5505  17EC  1C03               	skipc
  5506  17ED  03F3               	decf	___lwdiv@dividend+1,f
  5507  17EE  02F3               	subwf	___lwdiv@dividend+1,f
  5508  17EF  1475               	bsf	___lwdiv@quotient,0
  5509  17F0                     l2123:	
  5510  17F0  3001               	movlw	1
  5511  17F1                     u2215:	
  5512  17F1  1003               	clrc
  5513  17F2  0CF1               	rrf	___lwdiv@divisor+1,f
  5514  17F3  0CF0               	rrf	___lwdiv@divisor,f
  5515  17F4  3EFF               	addlw	-1
  5516  17F5  1D03               	skipz
  5517  17F6  2FF1               	goto	u2215
  5518  17F7  3001               	movlw	1
  5519  17F8  02F7               	subwf	___lwdiv@counter,f
  5520  17F9  1D03               	btfss	3,2
  5521  17FA  2FDA               	goto	l2117
  5522  17FB                     l2127:	
  5523  17FB  0876               	movf	___lwdiv@quotient+1,w
  5524  17FC  00F1               	movwf	?___lwdiv+1
  5525  17FD  0875               	movf	___lwdiv@quotient,w
  5526  17FE  00F0               	movwf	?___lwdiv
  5527  17FF  0008               	return
  5528  1800                     __end_of___lwdiv:	
  5529                           
  5530                           	psect	text19
  5531  089F                     __ptext19:	
  5532 ;; *************** function _Lcd_Write_String *****************
  5533 ;; Defined at:
  5534 ;;		line 93 in file "./lcd.h"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;  a               2    5[COMMON] PTR unsigned char 
  5537 ;;		 -> STR_16(9), STR_15(11), STR_14(9), STR_13(14), 
  5538 ;;		 -> STR_12(4), STR_11(5), STR_10(11), STR_9(5), 
  5539 ;;		 -> STR_8(11), STR_7(4), STR_6(5), STR_5(8), 
  5540 ;;		 -> STR_4(5), STR_3(8), Lcd_Write_Integer@Data(10), 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  i               2   10[COMMON] int 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5552 ;;      Params:         2       0       0       0       0
  5553 ;;      Locals:         2       0       0       0       0
  5554 ;;      Temps:          3       0       0       0       0
  5555 ;;      Totals:         7       0       0       0       0
  5556 ;;Total ram usage:        7 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    2
  5559 ;; This function calls:
  5560 ;;		_Lcd_Write_Char
  5561 ;; This function is called by:
  5562 ;;		_Lcd_Write_Integer
  5563 ;;		_configurarAntiHorario
  5564 ;;		_configurarHorario
  5565 ;;		_Encoder
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           
  5570                           ;psect for function _Lcd_Write_String
  5571  089F                     _Lcd_Write_String:	
  5572                           
  5573                           ;./lcd.h: 94:     int i;;./lcd.h: 95:     for (i = 0; a[i] != '\0'; i++)
  5574                           
  5575                           ;incstack = 0
  5576                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5577  089F  01FA               	clrf	Lcd_Write_String@i
  5578  08A0  01FB               	clrf	Lcd_Write_String@i+1
  5579  08A1                     l2245:	
  5580  08A1  087A               	movf	Lcd_Write_String@i,w
  5581  08A2  0775               	addwf	Lcd_Write_String@a,w
  5582  08A3  00F8               	movwf	??_Lcd_Write_String+1
  5583  08A4  0876               	movf	Lcd_Write_String@a+1,w
  5584  08A5  00F7               	movwf	??_Lcd_Write_String
  5585  08A6  1803               	skipnc
  5586  08A7  0AF7               	incf	??_Lcd_Write_String,f
  5587  08A8  1BFA               	btfsc	Lcd_Write_String@i,7
  5588  08A9  03F7               	decf	??_Lcd_Write_String,f
  5589  08AA  0877               	movf	??_Lcd_Write_String,w
  5590  08AB  00F9               	movwf	??_Lcd_Write_String+2
  5591  08AC  0879               	movf	??_Lcd_Write_String+2,w
  5592  08AD  1283               	bcf	3,5	;RP0=0, select bank0
  5593  08AE  1303               	bcf	3,6	;RP1=0, select bank0
  5594  08AF  00FF               	movwf	127
  5595  08B0  0878               	movf	??_Lcd_Write_String+1,w
  5596  08B1  0084               	movwf	4
  5597  08B2  120A  158A  2000  120A  158A  	fcall	stringtab
  5598  08B7  3A00               	xorlw	0
  5599  08B8  1903               	btfsc	3,2
  5600  08B9  0008               	return
  5601                           
  5602                           ;./lcd.h: 96:         Lcd_Write_Char(a[i]);
  5603  08BA  087A               	movf	Lcd_Write_String@i,w
  5604  08BB  0775               	addwf	Lcd_Write_String@a,w
  5605  08BC  00F8               	movwf	??_Lcd_Write_String+1
  5606  08BD  0876               	movf	Lcd_Write_String@a+1,w
  5607  08BE  00F7               	movwf	??_Lcd_Write_String
  5608  08BF  1803               	skipnc
  5609  08C0  0AF7               	incf	??_Lcd_Write_String,f
  5610  08C1  1BFA               	btfsc	Lcd_Write_String@i,7
  5611  08C2  03F7               	decf	??_Lcd_Write_String,f
  5612  08C3  0877               	movf	??_Lcd_Write_String,w
  5613  08C4  00F9               	movwf	??_Lcd_Write_String+2
  5614  08C5  0879               	movf	??_Lcd_Write_String+2,w
  5615  08C6  1283               	bcf	3,5	;RP0=0, select bank0
  5616  08C7  1303               	bcf	3,6	;RP1=0, select bank0
  5617  08C8  00FF               	movwf	127
  5618  08C9  0878               	movf	??_Lcd_Write_String+1,w
  5619  08CA  0084               	movwf	4
  5620  08CB  120A  158A  2000  120A  158A  	fcall	stringtab
  5621  08D0  160A  118A  278B  120A  158A  	fcall	_Lcd_Write_Char
  5622  08D5  3001               	movlw	1
  5623  08D6  07FA               	addwf	Lcd_Write_String@i,f
  5624  08D7  1803               	skipnc
  5625  08D8  0AFB               	incf	Lcd_Write_String@i+1,f
  5626  08D9  3000               	movlw	0
  5627  08DA  07FB               	addwf	Lcd_Write_String@i+1,f
  5628  08DB  28A1               	goto	l2245
  5629  08DC                     __end_of_Lcd_Write_String:	
  5630                           
  5631                           	psect	text20
  5632  178B                     __ptext20:	
  5633 ;; *************** function _Lcd_Write_Char *****************
  5634 ;; Defined at:
  5635 ;;		line 78 in file "./lcd.h"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  a               1    wreg     unsigned char 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  a               1    4[COMMON] unsigned char 
  5640 ;;  y               1    3[COMMON] unsigned char 
  5641 ;;  temp            1    2[COMMON] unsigned char 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      void 
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0, pclath, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5651 ;;      Params:         0       0       0       0       0
  5652 ;;      Locals:         3       0       0       0       0
  5653 ;;      Temps:          1       0       0       0       0
  5654 ;;      Totals:         4       0       0       0       0
  5655 ;;Total ram usage:        4 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; Hardware stack levels required when called:    1
  5658 ;; This function calls:
  5659 ;;		_Lcd_Port
  5660 ;; This function is called by:
  5661 ;;		_Lcd_Write_String
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           
  5666                           ;psect for function _Lcd_Write_Char
  5667  178B                     _Lcd_Write_Char:	
  5668                           
  5669                           ;incstack = 0
  5670                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5671                           ;Lcd_Write_Char@a stored from wreg
  5672  178B  00F4               	movwf	Lcd_Write_Char@a
  5673                           
  5674                           ;./lcd.h: 79:     char temp, y;;./lcd.h: 80:     temp = a & 0x0F;
  5675  178C  0874               	movf	Lcd_Write_Char@a,w
  5676  178D  390F               	andlw	15
  5677  178E  00F1               	movwf	??_Lcd_Write_Char
  5678  178F  0871               	movf	??_Lcd_Write_Char,w
  5679  1790  00F2               	movwf	Lcd_Write_Char@temp
  5680                           
  5681                           ;./lcd.h: 81:     y = a & 0xF0;
  5682  1791  0874               	movf	Lcd_Write_Char@a,w
  5683  1792  39F0               	andlw	240
  5684  1793  00F1               	movwf	??_Lcd_Write_Char
  5685  1794  0871               	movf	??_Lcd_Write_Char,w
  5686  1795  00F3               	movwf	Lcd_Write_Char@y
  5687                           
  5688                           ;./lcd.h: 82:     RB2 = 1;
  5689  1796  1283               	bcf	3,5	;RP0=0, select bank0
  5690  1797  1303               	bcf	3,6	;RP1=0, select bank0
  5691  1798  1506               	bsf	6,2	;volatile
  5692                           
  5693                           ;./lcd.h: 83:     Lcd_Port(y >> 4);
  5694  1799  0873               	movf	Lcd_Write_Char@y,w
  5695  179A  00F1               	movwf	??_Lcd_Write_Char
  5696  179B  3004               	movlw	4
  5697  179C                     u2155:	
  5698  179C  1003               	clrc
  5699  179D  0CF1               	rrf	??_Lcd_Write_Char,f
  5700  179E  3EFF               	addlw	-1
  5701  179F  1D03               	skipz
  5702  17A0  2F9C               	goto	u2155
  5703  17A1  0871               	movf	??_Lcd_Write_Char,w
  5704  17A2  160A  118A  26DB  160A  118A  	fcall	_Lcd_Port
  5705                           
  5706                           ;./lcd.h: 84:     RB3 = 1;
  5707  17A7  1283               	bcf	3,5	;RP0=0, select bank0
  5708  17A8  1303               	bcf	3,6	;RP1=0, select bank0
  5709  17A9  1586               	bsf	6,3	;volatile
  5710                           
  5711                           ;./lcd.h: 85:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5712  17AA  301A               	movlw	26
  5713  17AB  00F1               	movwf	??_Lcd_Write_Char
  5714  17AC                     u4197:	
  5715  17AC  0BF1               	decfsz	??_Lcd_Write_Char,f
  5716  17AD  2FAC               	goto	u4197
  5717  17AE  0000               	nop
  5718                           
  5719                           ;./lcd.h: 86:     RB3 = 0;
  5720  17AF  1283               	bcf	3,5	;RP0=0, select bank0
  5721  17B0  1303               	bcf	3,6	;RP1=0, select bank0
  5722  17B1  1186               	bcf	6,3	;volatile
  5723                           
  5724                           ;./lcd.h: 87:     Lcd_Port(temp);
  5725  17B2  0872               	movf	Lcd_Write_Char@temp,w
  5726  17B3  160A  118A  26DB  160A  118A  	fcall	_Lcd_Port
  5727                           
  5728                           ;./lcd.h: 88:     RB3 = 1;
  5729  17B8  1283               	bcf	3,5	;RP0=0, select bank0
  5730  17B9  1303               	bcf	3,6	;RP1=0, select bank0
  5731  17BA  1586               	bsf	6,3	;volatile
  5732                           
  5733                           ;./lcd.h: 89:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  5734  17BB  301A               	movlw	26
  5735  17BC  00F1               	movwf	??_Lcd_Write_Char
  5736  17BD                     u4207:	
  5737  17BD  0BF1               	decfsz	??_Lcd_Write_Char,f
  5738  17BE  2FBD               	goto	u4207
  5739  17BF  0000               	nop
  5740                           
  5741                           ;./lcd.h: 90:     RB3 = 0;
  5742  17C0  1283               	bcf	3,5	;RP0=0, select bank0
  5743  17C1  1303               	bcf	3,6	;RP1=0, select bank0
  5744  17C2  1186               	bcf	6,3	;volatile
  5745  17C3  0008               	return
  5746  17C4                     __end_of_Lcd_Write_Char:	
  5747                           
  5748                           	psect	text21
  5749  08DC                     __ptext21:	
  5750 ;; *************** function _Lcd_Set_Cursor *****************
  5751 ;; Defined at:
  5752 ;;		line 43 in file "./lcd.h"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  a               1    wreg     unsigned char 
  5755 ;;  b               1    4[COMMON] unsigned char 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  a               1    7[COMMON] unsigned char 
  5758 ;;  temp            1   10[COMMON] unsigned char 
  5759 ;;  y               1    9[COMMON] unsigned char 
  5760 ;;  z               1    8[COMMON] unsigned char 
  5761 ;; Return value:  Size  Location     Type
  5762 ;;                  1    wreg      void 
  5763 ;; Registers used:
  5764 ;;		wreg, status,2, status,0, pclath, cstack
  5765 ;; Tracked objects:
  5766 ;;		On entry : 0/0
  5767 ;;		On exit  : 0/0
  5768 ;;		Unchanged: 0/0
  5769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5770 ;;      Params:         1       0       0       0       0
  5771 ;;      Locals:         4       0       0       0       0
  5772 ;;      Temps:          2       0       0       0       0
  5773 ;;      Totals:         7       0       0       0       0
  5774 ;;Total ram usage:        7 bytes
  5775 ;; Hardware stack levels used:    1
  5776 ;; Hardware stack levels required when called:    2
  5777 ;; This function calls:
  5778 ;;		_Lcd_Cmd
  5779 ;; This function is called by:
  5780 ;;		_configurarAntiHorario
  5781 ;;		_configurarHorario
  5782 ;;		_Encoder
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function _Lcd_Set_Cursor
  5788  08DC                     _Lcd_Set_Cursor:	
  5789                           
  5790                           ;incstack = 0
  5791                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5792                           ;Lcd_Set_Cursor@a stored from wreg
  5793  08DC  00F7               	movwf	Lcd_Set_Cursor@a
  5794                           
  5795                           ;./lcd.h: 44:     char temp, z, y;;./lcd.h: 45:     if (a == 1) {
  5796  08DD  0377               	decf	Lcd_Set_Cursor@a,w
  5797  08DE  1D03               	btfss	3,2
  5798  08DF  2901               	goto	l2591
  5799                           
  5800                           ;./lcd.h: 46:         temp = 0x80 + b - 1;
  5801  08E0  0874               	movf	Lcd_Set_Cursor@b,w
  5802  08E1  3E7F               	addlw	127
  5803  08E2  00F5               	movwf	??_Lcd_Set_Cursor
  5804  08E3  0875               	movf	??_Lcd_Set_Cursor,w
  5805  08E4  00FA               	movwf	Lcd_Set_Cursor@temp
  5806                           
  5807                           ;./lcd.h: 47:         z = temp >> 4;
  5808  08E5  087A               	movf	Lcd_Set_Cursor@temp,w
  5809  08E6  00F5               	movwf	??_Lcd_Set_Cursor
  5810  08E7  3004               	movlw	4
  5811  08E8                     u3385:	
  5812  08E8  1003               	clrc
  5813  08E9  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5814  08EA  3EFF               	addlw	-1
  5815  08EB  1D03               	skipz
  5816  08EC  28E8               	goto	u3385
  5817  08ED  0875               	movf	??_Lcd_Set_Cursor,w
  5818  08EE  00F6               	movwf	??_Lcd_Set_Cursor+1
  5819  08EF  0876               	movf	??_Lcd_Set_Cursor+1,w
  5820  08F0  00F8               	movwf	Lcd_Set_Cursor@z
  5821                           
  5822                           ;./lcd.h: 48:         y = temp & 0x0F;
  5823  08F1  087A               	movf	Lcd_Set_Cursor@temp,w
  5824  08F2  390F               	andlw	15
  5825  08F3  00F5               	movwf	??_Lcd_Set_Cursor
  5826  08F4  0875               	movf	??_Lcd_Set_Cursor,w
  5827  08F5  00F9               	movwf	Lcd_Set_Cursor@y
  5828                           
  5829                           ;./lcd.h: 49:         Lcd_Cmd(z);
  5830  08F6  0878               	movf	Lcd_Set_Cursor@z,w
  5831  08F7  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  5832                           
  5833                           ;./lcd.h: 50:         Lcd_Cmd(y);
  5834  08FC  0879               	movf	Lcd_Set_Cursor@y,w
  5835  08FD  160A  118A  26F5   	fcall	_Lcd_Cmd
  5836                           
  5837                           ;./lcd.h: 51:     } else if (a == 2) {
  5838  0900  0008               	return
  5839  0901                     l2591:	
  5840  0901  3002               	movlw	2
  5841  0902  0677               	xorwf	Lcd_Set_Cursor@a,w
  5842  0903  1D03               	btfss	3,2
  5843  0904  0008               	return
  5844                           
  5845                           ;./lcd.h: 52:         temp = 0xC0 + b - 1;
  5846  0905  0874               	movf	Lcd_Set_Cursor@b,w
  5847  0906  3EBF               	addlw	191
  5848  0907  00F5               	movwf	??_Lcd_Set_Cursor
  5849  0908  0875               	movf	??_Lcd_Set_Cursor,w
  5850  0909  00FA               	movwf	Lcd_Set_Cursor@temp
  5851                           
  5852                           ;./lcd.h: 53:         z = temp >> 4;
  5853  090A  087A               	movf	Lcd_Set_Cursor@temp,w
  5854  090B  00F5               	movwf	??_Lcd_Set_Cursor
  5855  090C  3004               	movlw	4
  5856  090D                     u3405:	
  5857  090D  1003               	clrc
  5858  090E  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5859  090F  3EFF               	addlw	-1
  5860  0910  1D03               	skipz
  5861  0911  290D               	goto	u3405
  5862  0912  0875               	movf	??_Lcd_Set_Cursor,w
  5863  0913  00F6               	movwf	??_Lcd_Set_Cursor+1
  5864  0914  0876               	movf	??_Lcd_Set_Cursor+1,w
  5865  0915  00F8               	movwf	Lcd_Set_Cursor@z
  5866                           
  5867                           ;./lcd.h: 54:         y = temp & 0x0F;
  5868  0916  087A               	movf	Lcd_Set_Cursor@temp,w
  5869  0917  390F               	andlw	15
  5870  0918  00F5               	movwf	??_Lcd_Set_Cursor
  5871  0919  0875               	movf	??_Lcd_Set_Cursor,w
  5872  091A  00F9               	movwf	Lcd_Set_Cursor@y
  5873                           
  5874                           ;./lcd.h: 55:         Lcd_Cmd(z);
  5875  091B  0878               	movf	Lcd_Set_Cursor@z,w
  5876  091C  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  5877                           
  5878                           ;./lcd.h: 56:         Lcd_Cmd(y);
  5879  0921  0879               	movf	Lcd_Set_Cursor@y,w
  5880  0922  160A  118A  26F5   	fcall	_Lcd_Cmd
  5881  0925  0008               	return
  5882  0926                     __end_of_Lcd_Set_Cursor:	
  5883                           
  5884                           	psect	text22
  5885  16C3                     __ptext22:	
  5886 ;; *************** function _Lcd_Clear *****************
  5887 ;; Defined at:
  5888 ;;		line 38 in file "./lcd.h"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;		None
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  1    wreg      void 
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0, pclath, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5902 ;;      Params:         0       0       0       0       0
  5903 ;;      Locals:         0       0       0       0       0
  5904 ;;      Temps:          0       0       0       0       0
  5905 ;;      Totals:         0       0       0       0       0
  5906 ;;Total ram usage:        0 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    2
  5909 ;; This function calls:
  5910 ;;		_Lcd_Cmd
  5911 ;; This function is called by:
  5912 ;;		_configurarAntiHorario
  5913 ;;		_configurarHorario
  5914 ;;		_Encoder
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _Lcd_Clear
  5920  16C3                     _Lcd_Clear:	
  5921                           
  5922                           ;./lcd.h: 39:     Lcd_Cmd(0);
  5923                           
  5924                           ;incstack = 0
  5925                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5926  16C3  3000               	movlw	0
  5927  16C4  160A  118A  26F5  160A  118A  	fcall	_Lcd_Cmd
  5928                           
  5929                           ;./lcd.h: 40:     Lcd_Cmd(1);
  5930  16C9  3001               	movlw	1
  5931  16CA  160A  118A  26F5   	fcall	_Lcd_Cmd
  5932  16CD  0008               	return
  5933  16CE                     __end_of_Lcd_Clear:	
  5934                           
  5935                           	psect	text23
  5936  1730                     __ptext23:	
  5937 ;; *************** function _ConfigInit *****************
  5938 ;; Defined at:
  5939 ;;		line 9 in file "Config.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0, pclath, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5953 ;;      Params:         0       0       0       0       0
  5954 ;;      Locals:         0       0       0       0       0
  5955 ;;      Temps:          0       0       0       0       0
  5956 ;;      Totals:         0       0       0       0       0
  5957 ;;Total ram usage:        0 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    3
  5960 ;; This function calls:
  5961 ;;		_Lcd_Init
  5962 ;;		_UART_Init
  5963 ;; This function is called by:
  5964 ;;		_main
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           
  5969                           ;psect for function _ConfigInit
  5970  1730                     _ConfigInit:	
  5971                           
  5972                           ;Config.c: 12:     ANSELH = ANSEL = 0;
  5973                           
  5974                           ;incstack = 0
  5975                           ; Regs used in _ConfigInit: [wreg+status,2+status,0+pclath+cstack]
  5976  1730  1683               	bsf	3,5	;RP0=1, select bank3
  5977  1731  1703               	bsf	3,6	;RP1=1, select bank3
  5978  1732  0188               	clrf	8	;volatile
  5979  1733  0189               	clrf	9	;volatile
  5980                           
  5981                           ;Config.c: 15:     TRISB = 0x01;
  5982  1734  3001               	movlw	1
  5983  1735  1683               	bsf	3,5	;RP0=1, select bank1
  5984  1736  1303               	bcf	3,6	;RP1=0, select bank1
  5985  1737  0086               	movwf	6	;volatile
  5986                           
  5987                           ;Config.c: 18:     TRISC = 0x00;
  5988  1738  0187               	clrf	7	;volatile
  5989                           
  5990                           ;Config.c: 19:     PORTC = 0x00;
  5991  1739  1283               	bcf	3,5	;RP0=0, select bank0
  5992  173A  1303               	bcf	3,6	;RP1=0, select bank0
  5993  173B  0187               	clrf	7	;volatile
  5994                           
  5995                           ;Config.c: 22:     TRISA = 0xf0;
  5996  173C  30F0               	movlw	240
  5997  173D  1683               	bsf	3,5	;RP0=1, select bank1
  5998  173E  1303               	bcf	3,6	;RP1=0, select bank1
  5999  173F  0085               	movwf	5	;volatile
  6000                           
  6001                           ;Config.c: 23:     PORTA = 0x00;
  6002  1740  1283               	bcf	3,5	;RP0=0, select bank0
  6003  1741  1303               	bcf	3,6	;RP1=0, select bank0
  6004  1742  0185               	clrf	5	;volatile
  6005                           
  6006                           ;Config.c: 26:     nRBPU = 0;
  6007  1743  1683               	bsf	3,5	;RP0=1, select bank1
  6008  1744  1303               	bcf	3,6	;RP1=0, select bank1
  6009  1745  1381               	bcf	1,7	;volatile
  6010                           
  6011                           ;Config.c: 27:     UART_Init(9600);
  6012  1746  3000               	movlw	0
  6013  1747  1283               	bcf	3,5	;RP0=0, select bank0
  6014  1748  1303               	bcf	3,6	;RP1=0, select bank0
  6015  1749  00A9               	movwf	UART_Init@baudrate+3
  6016  174A  3000               	movlw	0
  6017  174B  00A8               	movwf	UART_Init@baudrate+2
  6018  174C  3025               	movlw	37
  6019  174D  00A7               	movwf	UART_Init@baudrate+1
  6020  174E  3080               	movlw	128
  6021  174F  00A6               	movwf	UART_Init@baudrate
  6022  1750  120A  158A  255C  160A  118A  	fcall	_UART_Init
  6023                           
  6024                           ;Config.c: 28:     Lcd_Init();
  6025  1755  120A  158A  2126   	fcall	_Lcd_Init
  6026  1758  0008               	return
  6027  1759                     __end_of_ConfigInit:	
  6028                           
  6029                           	psect	text24
  6030  0D5C                     __ptext24:	
  6031 ;; *************** function _UART_Init *****************
  6032 ;; Defined at:
  6033 ;;		line 3 in file "./uart.h"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  baudrate        4    6[BANK0 ] const long 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  x               2    9[COMMON] unsigned int 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      unsigned char 
  6040 ;; Registers used:
  6041 ;;		wreg, status,2, status,0, pclath, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6047 ;;      Params:         0       4       0       0       0
  6048 ;;      Locals:         2       0       0       0       0
  6049 ;;      Temps:          0      12       0       0       0
  6050 ;;      Totals:         2      16       0       0       0
  6051 ;;Total ram usage:       18 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    1
  6054 ;; This function calls:
  6055 ;;		___aldiv
  6056 ;; This function is called by:
  6057 ;;		_ConfigInit
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           
  6062                           ;psect for function _UART_Init
  6063  0D5C                     _UART_Init:	
  6064                           
  6065                           ;./uart.h: 4:     unsigned int x;;./uart.h: 5:     x = (8000000 - baudrate * 64) / (baud
      +                          rate * 64);
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  6069  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  6070  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  6071  0D5E  0826               	movf	UART_Init@baudrate,w
  6072  0D5F  00AA               	movwf	??_UART_Init
  6073  0D60  0827               	movf	UART_Init@baudrate+1,w
  6074  0D61  00AB               	movwf	??_UART_Init+1
  6075  0D62  0828               	movf	UART_Init@baudrate+2,w
  6076  0D63  00AC               	movwf	??_UART_Init+2
  6077  0D64  0829               	movf	UART_Init@baudrate+3,w
  6078  0D65  00AD               	movwf	??_UART_Init+3
  6079  0D66  3006               	movlw	6
  6080  0D67                     u3295:	
  6081  0D67  1003               	clrc
  6082  0D68  0DAA               	rlf	??_UART_Init,f
  6083  0D69  0DAB               	rlf	??_UART_Init+1,f
  6084  0D6A  0DAC               	rlf	??_UART_Init+2,f
  6085  0D6B  0DAD               	rlf	??_UART_Init+3,f
  6086  0D6C  3EFF               	addlw	-1
  6087  0D6D  1D03               	skipz
  6088  0D6E  2D67               	goto	u3295
  6089  0D6F  082D               	movf	??_UART_Init+3,w
  6090  0D70  00F3               	movwf	___aldiv@divisor+3
  6091  0D71  082C               	movf	??_UART_Init+2,w
  6092  0D72  00F2               	movwf	___aldiv@divisor+2
  6093  0D73  082B               	movf	??_UART_Init+1,w
  6094  0D74  00F1               	movwf	___aldiv@divisor+1
  6095  0D75  082A               	movf	??_UART_Init,w
  6096  0D76  00F0               	movwf	___aldiv@divisor
  6097  0D77  0826               	movf	UART_Init@baudrate,w
  6098  0D78  00AE               	movwf	??_UART_Init+4
  6099  0D79  0827               	movf	UART_Init@baudrate+1,w
  6100  0D7A  00AF               	movwf	??_UART_Init+5
  6101  0D7B  0828               	movf	UART_Init@baudrate+2,w
  6102  0D7C  00B0               	movwf	??_UART_Init+6
  6103  0D7D  0829               	movf	UART_Init@baudrate+3,w
  6104  0D7E  00B1               	movwf	??_UART_Init+7
  6105  0D7F  3006               	movlw	6
  6106  0D80                     u3305:	
  6107  0D80  1003               	clrc
  6108  0D81  0DAE               	rlf	??_UART_Init+4,f
  6109  0D82  0DAF               	rlf	??_UART_Init+5,f
  6110  0D83  0DB0               	rlf	??_UART_Init+6,f
  6111  0D84  0DB1               	rlf	??_UART_Init+7,f
  6112  0D85  3EFF               	addlw	-1
  6113  0D86  1D03               	skipz
  6114  0D87  2D80               	goto	u3305
  6115  0D88  3000               	movlw	0
  6116  0D89  00B2               	movwf	??_UART_Init+8
  6117  0D8A  3012               	movlw	18
  6118  0D8B  00B3               	movwf	??_UART_Init+9
  6119  0D8C  307A               	movlw	122
  6120  0D8D  00B4               	movwf	??_UART_Init+10
  6121  0D8E  3000               	movlw	0
  6122  0D8F  00B5               	movwf	??_UART_Init+11
  6123  0D90  082E               	movf	??_UART_Init+4,w
  6124  0D91  02B2               	subwf	??_UART_Init+8,f
  6125  0D92  082F               	movf	??_UART_Init+5,w
  6126  0D93  1C03               	skipc
  6127  0D94  0F2F               	incfsz	??_UART_Init+5,w
  6128  0D95  2D97               	goto	u3311
  6129  0D96  2D98               	goto	u3312
  6130  0D97                     u3311:	
  6131  0D97  02B3               	subwf	??_UART_Init+9,f
  6132  0D98                     u3312:	
  6133  0D98  0830               	movf	??_UART_Init+6,w
  6134  0D99  1C03               	skipc
  6135  0D9A  0F30               	incfsz	??_UART_Init+6,w
  6136  0D9B  2D9D               	goto	u3313
  6137  0D9C  2D9E               	goto	u3314
  6138  0D9D                     u3313:	
  6139  0D9D  02B4               	subwf	??_UART_Init+10,f
  6140  0D9E                     u3314:	
  6141  0D9E  0831               	movf	??_UART_Init+7,w
  6142  0D9F  1C03               	skipc
  6143  0DA0  0F31               	incfsz	??_UART_Init+7,w
  6144  0DA1  2DA3               	goto	u3315
  6145  0DA2  2DA4               	goto	u3316
  6146  0DA3                     u3315:	
  6147  0DA3  02B5               	subwf	??_UART_Init+11,f
  6148  0DA4                     u3316:	
  6149  0DA4  0835               	movf	??_UART_Init+11,w
  6150  0DA5  00F7               	movwf	___aldiv@dividend+3
  6151  0DA6  0834               	movf	??_UART_Init+10,w
  6152  0DA7  00F6               	movwf	___aldiv@dividend+2
  6153  0DA8  0833               	movf	??_UART_Init+9,w
  6154  0DA9  00F5               	movwf	___aldiv@dividend+1
  6155  0DAA  0832               	movf	??_UART_Init+8,w
  6156  0DAB  00F4               	movwf	___aldiv@dividend
  6157  0DAC  120A  158A  2250  120A  158A  	fcall	___aldiv
  6158  0DB1  0871               	movf	?___aldiv+1,w
  6159  0DB2  00FA               	movwf	UART_Init@x+1
  6160  0DB3  0870               	movf	?___aldiv,w
  6161  0DB4  00F9               	movwf	UART_Init@x
  6162                           
  6163                           ;./uart.h: 6:     if (x > 255) {
  6164  0DB5  3001               	movlw	1
  6165  0DB6  027A               	subwf	UART_Init@x+1,w
  6166  0DB7  3000               	movlw	0
  6167  0DB8  1903               	skipnz
  6168  0DB9  0279               	subwf	UART_Init@x,w
  6169  0DBA  1C03               	skipc
  6170  0DBB  2E18               	goto	l2561
  6171                           
  6172                           ;./uart.h: 7:         x = (8000000 - baudrate * 16) / (baudrate * 16);
  6173  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  6174  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  6175  0DBE  0826               	movf	UART_Init@baudrate,w
  6176  0DBF  00AA               	movwf	??_UART_Init
  6177  0DC0  0827               	movf	UART_Init@baudrate+1,w
  6178  0DC1  00AB               	movwf	??_UART_Init+1
  6179  0DC2  0828               	movf	UART_Init@baudrate+2,w
  6180  0DC3  00AC               	movwf	??_UART_Init+2
  6181  0DC4  0829               	movf	UART_Init@baudrate+3,w
  6182  0DC5  00AD               	movwf	??_UART_Init+3
  6183  0DC6  3004               	movlw	4
  6184  0DC7                     u3335:	
  6185  0DC7  1003               	clrc
  6186  0DC8  0DAA               	rlf	??_UART_Init,f
  6187  0DC9  0DAB               	rlf	??_UART_Init+1,f
  6188  0DCA  0DAC               	rlf	??_UART_Init+2,f
  6189  0DCB  0DAD               	rlf	??_UART_Init+3,f
  6190  0DCC  3EFF               	addlw	-1
  6191  0DCD  1D03               	skipz
  6192  0DCE  2DC7               	goto	u3335
  6193  0DCF  082D               	movf	??_UART_Init+3,w
  6194  0DD0  00F3               	movwf	___aldiv@divisor+3
  6195  0DD1  082C               	movf	??_UART_Init+2,w
  6196  0DD2  00F2               	movwf	___aldiv@divisor+2
  6197  0DD3  082B               	movf	??_UART_Init+1,w
  6198  0DD4  00F1               	movwf	___aldiv@divisor+1
  6199  0DD5  082A               	movf	??_UART_Init,w
  6200  0DD6  00F0               	movwf	___aldiv@divisor
  6201  0DD7  0826               	movf	UART_Init@baudrate,w
  6202  0DD8  00AE               	movwf	??_UART_Init+4
  6203  0DD9  0827               	movf	UART_Init@baudrate+1,w
  6204  0DDA  00AF               	movwf	??_UART_Init+5
  6205  0DDB  0828               	movf	UART_Init@baudrate+2,w
  6206  0DDC  00B0               	movwf	??_UART_Init+6
  6207  0DDD  0829               	movf	UART_Init@baudrate+3,w
  6208  0DDE  00B1               	movwf	??_UART_Init+7
  6209  0DDF  3004               	movlw	4
  6210  0DE0                     u3345:	
  6211  0DE0  1003               	clrc
  6212  0DE1  0DAE               	rlf	??_UART_Init+4,f
  6213  0DE2  0DAF               	rlf	??_UART_Init+5,f
  6214  0DE3  0DB0               	rlf	??_UART_Init+6,f
  6215  0DE4  0DB1               	rlf	??_UART_Init+7,f
  6216  0DE5  3EFF               	addlw	-1
  6217  0DE6  1D03               	skipz
  6218  0DE7  2DE0               	goto	u3345
  6219  0DE8  3000               	movlw	0
  6220  0DE9  00B2               	movwf	??_UART_Init+8
  6221  0DEA  3012               	movlw	18
  6222  0DEB  00B3               	movwf	??_UART_Init+9
  6223  0DEC  307A               	movlw	122
  6224  0DED  00B4               	movwf	??_UART_Init+10
  6225  0DEE  3000               	movlw	0
  6226  0DEF  00B5               	movwf	??_UART_Init+11
  6227  0DF0  082E               	movf	??_UART_Init+4,w
  6228  0DF1  02B2               	subwf	??_UART_Init+8,f
  6229  0DF2  082F               	movf	??_UART_Init+5,w
  6230  0DF3  1C03               	skipc
  6231  0DF4  0F2F               	incfsz	??_UART_Init+5,w
  6232  0DF5  2DF7               	goto	u3351
  6233  0DF6  2DF8               	goto	u3352
  6234  0DF7                     u3351:	
  6235  0DF7  02B3               	subwf	??_UART_Init+9,f
  6236  0DF8                     u3352:	
  6237  0DF8  0830               	movf	??_UART_Init+6,w
  6238  0DF9  1C03               	skipc
  6239  0DFA  0F30               	incfsz	??_UART_Init+6,w
  6240  0DFB  2DFD               	goto	u3353
  6241  0DFC  2DFE               	goto	u3354
  6242  0DFD                     u3353:	
  6243  0DFD  02B4               	subwf	??_UART_Init+10,f
  6244  0DFE                     u3354:	
  6245  0DFE  0831               	movf	??_UART_Init+7,w
  6246  0DFF  1C03               	skipc
  6247  0E00  0F31               	incfsz	??_UART_Init+7,w
  6248  0E01  2E03               	goto	u3355
  6249  0E02  2E04               	goto	u3356
  6250  0E03                     u3355:	
  6251  0E03  02B5               	subwf	??_UART_Init+11,f
  6252  0E04                     u3356:	
  6253  0E04  0835               	movf	??_UART_Init+11,w
  6254  0E05  00F7               	movwf	___aldiv@dividend+3
  6255  0E06  0834               	movf	??_UART_Init+10,w
  6256  0E07  00F6               	movwf	___aldiv@dividend+2
  6257  0E08  0833               	movf	??_UART_Init+9,w
  6258  0E09  00F5               	movwf	___aldiv@dividend+1
  6259  0E0A  0832               	movf	??_UART_Init+8,w
  6260  0E0B  00F4               	movwf	___aldiv@dividend
  6261  0E0C  120A  158A  2250  120A  158A  	fcall	___aldiv
  6262  0E11  0871               	movf	?___aldiv+1,w
  6263  0E12  00FA               	movwf	UART_Init@x+1
  6264  0E13  0870               	movf	?___aldiv,w
  6265  0E14  00F9               	movwf	UART_Init@x
  6266                           
  6267                           ;./uart.h: 8:         BRGH = 1;
  6268  0E15  1683               	bsf	3,5	;RP0=1, select bank1
  6269  0E16  1303               	bcf	3,6	;RP1=0, select bank1
  6270  0E17  1518               	bsf	24,2	;volatile
  6271  0E18                     l2561:	
  6272                           
  6273                           ;./uart.h: 10:     if (x < 256) {
  6274  0E18  3001               	movlw	1
  6275  0E19  027A               	subwf	UART_Init@x+1,w
  6276  0E1A  3000               	movlw	0
  6277  0E1B  1903               	skipnz
  6278  0E1C  0279               	subwf	UART_Init@x,w
  6279  0E1D  1803               	skipnc
  6280  0E1E  0008               	return
  6281                           
  6282                           ;./uart.h: 11:         SPBRG = x;
  6283  0E1F  0879               	movf	UART_Init@x,w
  6284  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  6285  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  6286  0E22  0099               	movwf	25	;volatile
  6287                           
  6288                           ;./uart.h: 12:         SYNC = 0;
  6289  0E23  1218               	bcf	24,4	;volatile
  6290                           
  6291                           ;./uart.h: 13:         SPEN = 1;
  6292  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  6293  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  6294  0E26  1798               	bsf	24,7	;volatile
  6295                           
  6296                           ;./uart.h: 14:         TRISC7 = 1;
  6297  0E27  1683               	bsf	3,5	;RP0=1, select bank1
  6298  0E28  1303               	bcf	3,6	;RP1=0, select bank1
  6299  0E29  1787               	bsf	7,7	;volatile
  6300                           
  6301                           ;./uart.h: 15:         TRISC6 = 1;
  6302  0E2A  1707               	bsf	7,6	;volatile
  6303                           
  6304                           ;./uart.h: 16:         CREN = 1;
  6305  0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  6306  0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  6307  0E2D  1618               	bsf	24,4	;volatile
  6308                           
  6309                           ;./uart.h: 17:         TXEN = 1;
  6310  0E2E  1683               	bsf	3,5	;RP0=1, select bank1
  6311  0E2F  1303               	bcf	3,6	;RP1=0, select bank1
  6312  0E30  1698               	bsf	24,5	;volatile
  6313  0E31  0008               	return
  6314  0E32                     __end_of_UART_Init:	
  6315                           
  6316                           	psect	text25
  6317  0A50                     __ptext25:	
  6318 ;; *************** function ___aldiv *****************
  6319 ;; Defined at:
  6320 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  divisor         4    0[COMMON] long 
  6323 ;;  dividend        4    4[COMMON] long 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  quotient        4    2[BANK0 ] long 
  6326 ;;  sign            1    1[BANK0 ] unsigned char 
  6327 ;;  counter         1    0[BANK0 ] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  4    0[COMMON] long 
  6330 ;; Registers used:
  6331 ;;		wreg, status,2, status,0
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6337 ;;      Params:         8       0       0       0       0
  6338 ;;      Locals:         0       6       0       0       0
  6339 ;;      Temps:          1       0       0       0       0
  6340 ;;      Totals:         9       6       0       0       0
  6341 ;;Total ram usage:       15 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; This function calls:
  6344 ;;		Nothing
  6345 ;; This function is called by:
  6346 ;;		_UART_Init
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function ___aldiv
  6352  0A50                     ___aldiv:	
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6356  0A50  1283               	bcf	3,5	;RP0=0, select bank0
  6357  0A51  1303               	bcf	3,6	;RP1=0, select bank0
  6358  0A52  01A1               	clrf	___aldiv@sign
  6359  0A53  1FF3               	btfss	___aldiv@divisor+3,7
  6360  0A54  2A62               	goto	l480
  6361  0A55  09F0               	comf	___aldiv@divisor,f
  6362  0A56  09F1               	comf	___aldiv@divisor+1,f
  6363  0A57  09F2               	comf	___aldiv@divisor+2,f
  6364  0A58  09F3               	comf	___aldiv@divisor+3,f
  6365  0A59  0AF0               	incf	___aldiv@divisor,f
  6366  0A5A  1903               	skipnz
  6367  0A5B  0AF1               	incf	___aldiv@divisor+1,f
  6368  0A5C  1903               	skipnz
  6369  0A5D  0AF2               	incf	___aldiv@divisor+2,f
  6370  0A5E  1903               	skipnz
  6371  0A5F  0AF3               	incf	___aldiv@divisor+3,f
  6372  0A60  01A1               	clrf	___aldiv@sign
  6373  0A61  0AA1               	incf	___aldiv@sign,f
  6374  0A62                     l480:	
  6375  0A62  1FF7               	btfss	___aldiv@dividend+3,7
  6376  0A63  2A73               	goto	l2257
  6377  0A64  09F4               	comf	___aldiv@dividend,f
  6378  0A65  09F5               	comf	___aldiv@dividend+1,f
  6379  0A66  09F6               	comf	___aldiv@dividend+2,f
  6380  0A67  09F7               	comf	___aldiv@dividend+3,f
  6381  0A68  0AF4               	incf	___aldiv@dividend,f
  6382  0A69  1903               	skipnz
  6383  0A6A  0AF5               	incf	___aldiv@dividend+1,f
  6384  0A6B  1903               	skipnz
  6385  0A6C  0AF6               	incf	___aldiv@dividend+2,f
  6386  0A6D  1903               	skipnz
  6387  0A6E  0AF7               	incf	___aldiv@dividend+3,f
  6388  0A6F  3001               	movlw	1
  6389  0A70  00F8               	movwf	??___aldiv
  6390  0A71  0878               	movf	??___aldiv,w
  6391  0A72  06A1               	xorwf	___aldiv@sign,f
  6392  0A73                     l2257:	
  6393  0A73  3000               	movlw	0
  6394  0A74  00A5               	movwf	___aldiv@quotient+3
  6395  0A75  3000               	movlw	0
  6396  0A76  00A4               	movwf	___aldiv@quotient+2
  6397  0A77  3000               	movlw	0
  6398  0A78  00A3               	movwf	___aldiv@quotient+1
  6399  0A79  3000               	movlw	0
  6400  0A7A  00A2               	movwf	___aldiv@quotient
  6401  0A7B  0873               	movf	___aldiv@divisor+3,w
  6402  0A7C  0472               	iorwf	___aldiv@divisor+2,w
  6403  0A7D  0471               	iorwf	___aldiv@divisor+1,w
  6404  0A7E  0470               	iorwf	___aldiv@divisor,w
  6405  0A7F  1903               	skipnz
  6406  0A80  2AC8               	goto	l2279
  6407  0A81  01A0               	clrf	___aldiv@counter
  6408  0A82  0AA0               	incf	___aldiv@counter,f
  6409  0A83                     l2265:	
  6410  0A83  1BF3               	btfsc	___aldiv@divisor+3,7
  6411  0A84  2A93               	goto	l2267
  6412  0A85  3001               	movlw	1
  6413  0A86  00F8               	movwf	??___aldiv
  6414  0A87                     u2455:	
  6415  0A87  1003               	clrc
  6416  0A88  0DF0               	rlf	___aldiv@divisor,f
  6417  0A89  0DF1               	rlf	___aldiv@divisor+1,f
  6418  0A8A  0DF2               	rlf	___aldiv@divisor+2,f
  6419  0A8B  0DF3               	rlf	___aldiv@divisor+3,f
  6420  0A8C  0BF8               	decfsz	??___aldiv,f
  6421  0A8D  2A87               	goto	u2455
  6422  0A8E  3001               	movlw	1
  6423  0A8F  00F8               	movwf	??___aldiv
  6424  0A90  0878               	movf	??___aldiv,w
  6425  0A91  07A0               	addwf	___aldiv@counter,f
  6426  0A92  2A83               	goto	l2265
  6427  0A93                     l2267:	
  6428  0A93  3001               	movlw	1
  6429  0A94  00F8               	movwf	??___aldiv
  6430  0A95                     u2475:	
  6431  0A95  1003               	clrc
  6432  0A96  0DA2               	rlf	___aldiv@quotient,f
  6433  0A97  0DA3               	rlf	___aldiv@quotient+1,f
  6434  0A98  0DA4               	rlf	___aldiv@quotient+2,f
  6435  0A99  0DA5               	rlf	___aldiv@quotient+3,f
  6436  0A9A  0BF8               	decfsz	??___aldiv,f
  6437  0A9B  2A95               	goto	u2475
  6438  0A9C  0873               	movf	___aldiv@divisor+3,w
  6439  0A9D  0277               	subwf	___aldiv@dividend+3,w
  6440  0A9E  1D03               	skipz
  6441  0A9F  2AAA               	goto	u2485
  6442  0AA0  0872               	movf	___aldiv@divisor+2,w
  6443  0AA1  0276               	subwf	___aldiv@dividend+2,w
  6444  0AA2  1D03               	skipz
  6445  0AA3  2AAA               	goto	u2485
  6446  0AA4  0871               	movf	___aldiv@divisor+1,w
  6447  0AA5  0275               	subwf	___aldiv@dividend+1,w
  6448  0AA6  1D03               	skipz
  6449  0AA7  2AAA               	goto	u2485
  6450  0AA8  0870               	movf	___aldiv@divisor,w
  6451  0AA9  0274               	subwf	___aldiv@dividend,w
  6452  0AAA                     u2485:	
  6453  0AAA  1C03               	skipc
  6454  0AAB  2ABB               	goto	l2275
  6455  0AAC  0870               	movf	___aldiv@divisor,w
  6456  0AAD  02F4               	subwf	___aldiv@dividend,f
  6457  0AAE  0871               	movf	___aldiv@divisor+1,w
  6458  0AAF  1C03               	skipc
  6459  0AB0  0F71               	incfsz	___aldiv@divisor+1,w
  6460  0AB1  02F5               	subwf	___aldiv@dividend+1,f
  6461  0AB2  0872               	movf	___aldiv@divisor+2,w
  6462  0AB3  1C03               	skipc
  6463  0AB4  0F72               	incfsz	___aldiv@divisor+2,w
  6464  0AB5  02F6               	subwf	___aldiv@dividend+2,f
  6465  0AB6  0873               	movf	___aldiv@divisor+3,w
  6466  0AB7  1C03               	skipc
  6467  0AB8  0F73               	incfsz	___aldiv@divisor+3,w
  6468  0AB9  02F7               	subwf	___aldiv@dividend+3,f
  6469  0ABA  1422               	bsf	___aldiv@quotient,0
  6470  0ABB                     l2275:	
  6471  0ABB  3001               	movlw	1
  6472  0ABC                     u2495:	
  6473  0ABC  1003               	clrc
  6474  0ABD  0CF3               	rrf	___aldiv@divisor+3,f
  6475  0ABE  0CF2               	rrf	___aldiv@divisor+2,f
  6476  0ABF  0CF1               	rrf	___aldiv@divisor+1,f
  6477  0AC0  0CF0               	rrf	___aldiv@divisor,f
  6478  0AC1  3EFF               	addlw	-1
  6479  0AC2  1D03               	skipz
  6480  0AC3  2ABC               	goto	u2495
  6481  0AC4  3001               	movlw	1
  6482  0AC5  02A0               	subwf	___aldiv@counter,f
  6483  0AC6  1D03               	btfss	3,2
  6484  0AC7  2A93               	goto	l2267
  6485  0AC8                     l2279:	
  6486  0AC8  0821               	movf	___aldiv@sign,w
  6487  0AC9  1903               	btfsc	3,2
  6488  0ACA  2AD6               	goto	l2283
  6489  0ACB  09A2               	comf	___aldiv@quotient,f
  6490  0ACC  09A3               	comf	___aldiv@quotient+1,f
  6491  0ACD  09A4               	comf	___aldiv@quotient+2,f
  6492  0ACE  09A5               	comf	___aldiv@quotient+3,f
  6493  0ACF  0AA2               	incf	___aldiv@quotient,f
  6494  0AD0  1903               	skipnz
  6495  0AD1  0AA3               	incf	___aldiv@quotient+1,f
  6496  0AD2  1903               	skipnz
  6497  0AD3  0AA4               	incf	___aldiv@quotient+2,f
  6498  0AD4  1903               	skipnz
  6499  0AD5  0AA5               	incf	___aldiv@quotient+3,f
  6500  0AD6                     l2283:	
  6501  0AD6  0825               	movf	___aldiv@quotient+3,w
  6502  0AD7  00F3               	movwf	?___aldiv+3
  6503  0AD8  0824               	movf	___aldiv@quotient+2,w
  6504  0AD9  00F2               	movwf	?___aldiv+2
  6505  0ADA  0823               	movf	___aldiv@quotient+1,w
  6506  0ADB  00F1               	movwf	?___aldiv+1
  6507  0ADC  0822               	movf	___aldiv@quotient,w
  6508  0ADD  00F0               	movwf	?___aldiv
  6509  0ADE  0008               	return
  6510  0ADF                     __end_of___aldiv:	
  6511                           
  6512                           	psect	text26
  6513  0926                     __ptext26:	
  6514 ;; *************** function _Lcd_Init *****************
  6515 ;; Defined at:
  6516 ;;		line 60 in file "./lcd.h"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;		None
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;		None
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  1    wreg      void 
  6523 ;; Registers used:
  6524 ;;		wreg, status,2, status,0, pclath, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6530 ;;      Params:         0       0       0       0       0
  6531 ;;      Locals:         0       0       0       0       0
  6532 ;;      Temps:          2       0       0       0       0
  6533 ;;      Totals:         2       0       0       0       0
  6534 ;;Total ram usage:        2 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    2
  6537 ;; This function calls:
  6538 ;;		_Lcd_Cmd
  6539 ;;		_Lcd_Port
  6540 ;; This function is called by:
  6541 ;;		_ConfigInit
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _Lcd_Init
  6547  0926                     _Lcd_Init:	
  6548                           
  6549                           ;./lcd.h: 61:     Lcd_Port(0x00);
  6550                           
  6551                           ;incstack = 0
  6552                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6553  0926  3000               	movlw	0
  6554  0927  160A  118A  26DB  120A  158A  	fcall	_Lcd_Port
  6555                           
  6556                           ;./lcd.h: 62:     _delay((unsigned long)((20)*(8000000/4000.0)));
  6557  092C  3034               	movlw	52
  6558  092D  00F5               	movwf	??_Lcd_Init+1
  6559  092E  30F1               	movlw	241
  6560  092F  00F4               	movwf	??_Lcd_Init
  6561  0930                     u4217:	
  6562  0930  0BF4               	decfsz	??_Lcd_Init,f
  6563  0931  2930               	goto	u4217
  6564  0932  0BF5               	decfsz	??_Lcd_Init+1,f
  6565  0933  2930               	goto	u4217
  6566  0934  2935               	nop2
  6567                           
  6568                           ;./lcd.h: 63:     Lcd_Cmd(0x03);
  6569  0935  3003               	movlw	3
  6570  0936  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6571                           
  6572                           ;./lcd.h: 64:     _delay((unsigned long)((5)*(8000000/4000.0)));
  6573  093B  300D               	movlw	13
  6574  093C  00F5               	movwf	??_Lcd_Init+1
  6575  093D  30FB               	movlw	251
  6576  093E  00F4               	movwf	??_Lcd_Init
  6577  093F                     u4227:	
  6578  093F  0BF4               	decfsz	??_Lcd_Init,f
  6579  0940  293F               	goto	u4227
  6580  0941  0BF5               	decfsz	??_Lcd_Init+1,f
  6581  0942  293F               	goto	u4227
  6582  0943  2944               	nop2
  6583                           
  6584                           ;./lcd.h: 65:     Lcd_Cmd(0x03);
  6585  0944  3003               	movlw	3
  6586  0945  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6587                           
  6588                           ;./lcd.h: 66:     _delay((unsigned long)((11)*(8000000/4000.0)));
  6589  094A  301D               	movlw	29
  6590  094B  00F5               	movwf	??_Lcd_Init+1
  6591  094C  3091               	movlw	145
  6592  094D  00F4               	movwf	??_Lcd_Init
  6593  094E                     u4237:	
  6594  094E  0BF4               	decfsz	??_Lcd_Init,f
  6595  094F  294E               	goto	u4237
  6596  0950  0BF5               	decfsz	??_Lcd_Init+1,f
  6597  0951  294E               	goto	u4237
  6598                           
  6599                           ;./lcd.h: 67:     Lcd_Cmd(0x03);
  6600  0952  3003               	movlw	3
  6601  0953  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6602                           
  6603                           ;./lcd.h: 69:     Lcd_Cmd(0x02);
  6604  0958  3002               	movlw	2
  6605  0959  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6606                           
  6607                           ;./lcd.h: 70:     Lcd_Cmd(0x02);
  6608  095E  3002               	movlw	2
  6609  095F  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6610                           
  6611                           ;./lcd.h: 71:     Lcd_Cmd(0x08);
  6612  0964  3008               	movlw	8
  6613  0965  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6614                           
  6615                           ;./lcd.h: 72:     Lcd_Cmd(0x00);
  6616  096A  3000               	movlw	0
  6617  096B  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6618                           
  6619                           ;./lcd.h: 73:     Lcd_Cmd(0x0C);
  6620  0970  300C               	movlw	12
  6621  0971  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6622                           
  6623                           ;./lcd.h: 74:     Lcd_Cmd(0x00);
  6624  0976  3000               	movlw	0
  6625  0977  160A  118A  26F5  120A  158A  	fcall	_Lcd_Cmd
  6626                           
  6627                           ;./lcd.h: 75:     Lcd_Cmd(0x06);
  6628  097C  3006               	movlw	6
  6629  097D  160A  118A  26F5   	fcall	_Lcd_Cmd
  6630  0980  0008               	return
  6631  0981                     __end_of_Lcd_Init:	
  6632                           
  6633                           	psect	text27
  6634  16F5                     __ptext27:	
  6635 ;; *************** function _Lcd_Cmd *****************
  6636 ;; Defined at:
  6637 ;;		line 30 in file "./lcd.h"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  a               1    wreg     unsigned char 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  a               1    3[COMMON] unsigned char 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      void 
  6644 ;; Registers used:
  6645 ;;		wreg, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6651 ;;      Params:         0       0       0       0       0
  6652 ;;      Locals:         1       0       0       0       0
  6653 ;;      Temps:          2       0       0       0       0
  6654 ;;      Totals:         3       0       0       0       0
  6655 ;;Total ram usage:        3 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    1
  6658 ;; This function calls:
  6659 ;;		_Lcd_Port
  6660 ;; This function is called by:
  6661 ;;		_Lcd_Clear
  6662 ;;		_Lcd_Set_Cursor
  6663 ;;		_Lcd_Init
  6664 ;;		_Lcd_Shift_Right
  6665 ;;		_Lcd_Shift_Left
  6666 ;; This function uses a non-reentrant model
  6667 ;;
  6668                           
  6669                           
  6670                           ;psect for function _Lcd_Cmd
  6671  16F5                     _Lcd_Cmd:	
  6672                           
  6673                           ;incstack = 0
  6674                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6675                           ;Lcd_Cmd@a stored from wreg
  6676  16F5  00F3               	movwf	Lcd_Cmd@a
  6677                           
  6678                           ;./lcd.h: 31:     RB2 = 0;
  6679  16F6  1283               	bcf	3,5	;RP0=0, select bank0
  6680  16F7  1303               	bcf	3,6	;RP1=0, select bank0
  6681  16F8  1106               	bcf	6,2	;volatile
  6682                           
  6683                           ;./lcd.h: 32:     Lcd_Port(a);
  6684  16F9  0873               	movf	Lcd_Cmd@a,w
  6685  16FA  160A  118A  26DB  160A  118A  	fcall	_Lcd_Port
  6686                           
  6687                           ;./lcd.h: 33:     RB3 = 1;
  6688  16FF  1283               	bcf	3,5	;RP0=0, select bank0
  6689  1700  1303               	bcf	3,6	;RP1=0, select bank0
  6690  1701  1586               	bsf	6,3	;volatile
  6691                           
  6692                           ;./lcd.h: 34:     _delay((unsigned long)((4)*(8000000/4000.0)));
  6693  1702  300B               	movlw	11
  6694  1703  00F2               	movwf	??_Lcd_Cmd+1
  6695  1704  3062               	movlw	98
  6696  1705  00F1               	movwf	??_Lcd_Cmd
  6697  1706                     u4247:	
  6698  1706  0BF1               	decfsz	??_Lcd_Cmd,f
  6699  1707  2F06               	goto	u4247
  6700  1708  0BF2               	decfsz	??_Lcd_Cmd+1,f
  6701  1709  2F06               	goto	u4247
  6702  170A  0000               	nop
  6703                           
  6704                           ;./lcd.h: 35:     RB3 = 0;
  6705  170B  1283               	bcf	3,5	;RP0=0, select bank0
  6706  170C  1303               	bcf	3,6	;RP1=0, select bank0
  6707  170D  1186               	bcf	6,3	;volatile
  6708  170E  0008               	return
  6709  170F                     __end_of_Lcd_Cmd:	
  6710                           
  6711                           	psect	text28
  6712  16DB                     __ptext28:	
  6713 ;; *************** function _Lcd_Port *****************
  6714 ;; Defined at:
  6715 ;;		line 8 in file "./lcd.h"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  a               1    wreg     unsigned char 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  a               1    0[COMMON] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      void 
  6722 ;; Registers used:
  6723 ;;		wreg
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6729 ;;      Params:         0       0       0       0       0
  6730 ;;      Locals:         1       0       0       0       0
  6731 ;;      Temps:          0       0       0       0       0
  6732 ;;      Totals:         1       0       0       0       0
  6733 ;;Total ram usage:        1 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_Lcd_Cmd
  6739 ;;		_Lcd_Init
  6740 ;;		_Lcd_Write_Char
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           
  6745                           ;psect for function _Lcd_Port
  6746  16DB                     _Lcd_Port:	
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _Lcd_Port: [wreg]
  6750                           ;Lcd_Port@a stored from wreg
  6751  16DB  00F0               	movwf	Lcd_Port@a
  6752                           
  6753                           ;./lcd.h: 9:     if (a & 1)
  6754  16DC  1C70               	btfss	Lcd_Port@a,0
  6755  16DD  2EE2               	goto	l204
  6756                           
  6757                           ;./lcd.h: 10:         RB4 = 1;
  6758  16DE  1283               	bcf	3,5	;RP0=0, select bank0
  6759  16DF  1303               	bcf	3,6	;RP1=0, select bank0
  6760  16E0  1606               	bsf	6,4	;volatile
  6761  16E1  2EE5               	goto	l205
  6762  16E2                     l204:	
  6763                           ;./lcd.h: 11:     else
  6764                           
  6765                           
  6766                           ;./lcd.h: 12:         RB4 = 0;
  6767  16E2  1283               	bcf	3,5	;RP0=0, select bank0
  6768  16E3  1303               	bcf	3,6	;RP1=0, select bank0
  6769  16E4  1206               	bcf	6,4	;volatile
  6770  16E5                     l205:	
  6771                           
  6772                           ;./lcd.h: 14:     if (a & 2)
  6773  16E5  1CF0               	btfss	Lcd_Port@a,1
  6774  16E6  2EE9               	goto	l206
  6775                           
  6776                           ;./lcd.h: 15:         RB5 = 1;
  6777  16E7  1686               	bsf	6,5	;volatile
  6778  16E8  2EEA               	goto	l207
  6779  16E9                     l206:	
  6780                           ;./lcd.h: 16:     else
  6781                           
  6782                           
  6783                           ;./lcd.h: 17:         RB5 = 0;
  6784  16E9  1286               	bcf	6,5	;volatile
  6785  16EA                     l207:	
  6786                           
  6787                           ;./lcd.h: 19:     if (a & 4)
  6788  16EA  1D70               	btfss	Lcd_Port@a,2
  6789  16EB  2EEE               	goto	l208
  6790                           
  6791                           ;./lcd.h: 20:         RB6 = 1;
  6792  16EC  1706               	bsf	6,6	;volatile
  6793  16ED  2EEF               	goto	l209
  6794  16EE                     l208:	
  6795                           ;./lcd.h: 21:     else
  6796                           
  6797                           
  6798                           ;./lcd.h: 22:         RB6 = 0;
  6799  16EE  1306               	bcf	6,6	;volatile
  6800  16EF                     l209:	
  6801                           
  6802                           ;./lcd.h: 24:     if (a & 8)
  6803  16EF  1DF0               	btfss	Lcd_Port@a,3
  6804  16F0  2EF3               	goto	l210
  6805                           
  6806                           ;./lcd.h: 25:         RB7 = 1;
  6807  16F1  1786               	bsf	6,7	;volatile
  6808  16F2  0008               	return
  6809  16F3                     l210:	
  6810                           ;./lcd.h: 26:     else
  6811                           
  6812                           
  6813                           ;./lcd.h: 27:         RB7 = 0;
  6814  16F3  1386               	bcf	6,7	;volatile
  6815  16F4  0008               	return
  6816  16F5                     __end_of_Lcd_Port:	
  6817  007E                     btemp	set	126	;btemp
  6818  007E                     wtemp0	set	126


Data Sizes:
    Strings     61
    Constant    44
    Data        2
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     56      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Lcd_Write_Integer@Data(BANK0[10]), UART_Write_Integer@Data(COMMON[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[9]), STR_15(CODE[11]), STR_14(CODE[9]), STR_13(CODE[14]), 
		 -> STR_12(CODE[4]), STR_11(CODE[5]), STR_10(CODE[11]), STR_9(CODE[5]), 
		 -> STR_8(CODE[11]), STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[8]), 
		 -> STR_4(CODE[5]), STR_3(CODE[8]), Lcd_Write_Integer@Data(BANK0[10]), 


Critical Paths under _main in COMMON

    _Encoder->___xxtofl
    ___fltol->___xxtofl
    ___fladd->___xxtofl
    _VerificarInversionGiro->___xxtofl
    ___flmul->___xxtofl
    ___flge->___xxtofl
    _Lcd_Write_Integer->___xxtofl
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _ConfigInit->_UART_Init
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_configurarAntiHorario
    _main->_configurarHorario
    _configurarHorario->_Lcd_Write_Integer
    _configurarAntiHorario->_Lcd_Write_Integer
    _Encoder->_Lcd_Write_Integer
    ___fltol->___flmul
    _VerificarInversionGiro->___flge
    ___flge->___flmul
    _Lcd_Write_Integer->___fltol
    _ConfigInit->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   32678
                                             54 BANK0      2     2      0
                         _ConfigInit
                            _Encoder
                       _KeyPadGetKey
                           _RunMotor
                          _StopMotor
              _configurarAntiHorario
                  _configurarHorario
 ---------------------------------------------------------------------------------
 (1) _configurarHorario                                    4     4      0    6823
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _configurarAntiHorario                                4     4      0    6823
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _StopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunMotor                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _KeyPadGetKey                                         6     4      2     205
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Encoder                                              1     1      0   17793
                                             50 BANK0      1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
             _VerificarInversionGiro
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             11     7      4     609
                                             26 BANK0     11     7      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fladd                                             20    12      8    2414
                                              0 BANK0     20    12      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _VerificarInversionGiro                               0     0      0    4517
                             ___flge
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1006
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    3025
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     486
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   13    11      2    3260
                                             37 BANK0     13    11      2
                   _Lcd_Write_String
                            ___flmul (ARG)
                            ___fltol (ARG)
                           ___xxtofl (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2    1408
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1444
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _ConfigInit                                           0     0      0    1034
                           _Lcd_Init
                          _UART_Init
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigInit
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _UART_Init
       ___aldiv
   _Encoder
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _VerificarInversionGiro
       ___flge
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl
     ___fladd
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _KeyPadGetKey
   _RunMotor
   _StopMotor
   _configurarAntiHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul
   _configurarHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___fladd (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      12        0.0%
ABS                  0      0      58       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 02 19:35:07 2019

                              pc 0002                      __CFG_CP$OFF 0000                               l40 09D2  
                             l47 09DF                               _cm 005A                               fsr 0004  
            ___wmul@multiplicand 0072              __Umul8_16@word_mpld 0076                              l210 16F3  
                            l204 16E2                              l205 16E5                              l206 16E9  
                            l207 16EA                              l208 16EE                              l209 16EF  
                            l415 1719                              l193 0AE2                              l194 0B47  
                            l292 0D07                              l276 00D6                              l480 0A62  
                            l712 0390                              l608 0A32                              l714 036E  
                            l298 01AA                              l708 02F7                              l750 04C9  
                            l742 04B1                              l592 0BF2                              l816 07DC  
                            l729 0449                              l842 0C22                              l589 0B8C  
                            l861 088E                              l855 0C78                              l856 0C82  
                            l848 0C62                              _RA0 0028                              _RA1 0029  
                            _RB0 0030                              _RA2 002A                              _RA3 002B  
                            _RA4 002C                              _RB2 0032                              _RC0 0038  
                            _RA5 002D                              _RB3 0033                              _RC1 0039  
                            _RA6 002E                              _RB4 0034                              _RA7 002F  
                            _RB5 0035                              _RB6 0036                              _RB7 0037  
                   __CFG_CPD$OFF 0000                              _key 0063                              fsr0 0004  
                            indf 0000                    _CmAntiHorario 005C                     __CFG_IESO$ON 0000  
                   ___flmul@aexp 0032                     ___flmul@bexp 0033                     ___flmul@sign 002D  
                   ___flmul@temp 0038                     ___flmul@prod 0034                     __CFG_LVP$OFF 0000  
                 ??_KeyPadGetKey 0072                     ___fltol@exp1 0044                             l2123 17F0  
                           l2115 17CC                             l2203 0EB1                             l3003 0FDC  
                           l2117 17DA                             l2141 176D                             l2221 0F05  
                           l3005 0FF5                             l2127 17FB                             l2145 177B  
                           l2217 0EC4                             l2209 0EC0                             l2321 04F1  
                           l2139 175F                             l2219 0E39                             l2411 0762  
                           l2403 072E                             l2323 04F3                             l2245 08A1  
                           l2149 1786                             l2181 0E77                             l2157 0886  
                           l2405 074B                             l2341 0518                             l2325 04FB  
                           l2501 0AEB                             l2191 0E8E                             l2175 0E59  
                           l2415 0764                             l2351 052E                             l2343 0520  
                           l2503 0B1E                             l2265 0A83                             l2257 0A73  
                           l2425 0796                             l3073 09A4                             l2283 0AD6  
                           l2275 0ABB                             l2267 0A93                             l2435 07C5  
                           l2339 0516                             l3075 09AA                             l3083 09BC  
                           l3067 0995                             l2197 0E90                             l2293 0BA6  
                           l2429 07AC                             l2453 0C1A                             l2701 02C5  
                           l3077 09B0                             l2279 0AC8                             l2463 0C35  
                           l2703 02CD                             l2543 0B63                             l3183 09C4  
                           l3079 09B6                             l2561 0E18                             l2297 0BCC  
                           l2473 0C76                             l2465 0C47                             l2617 0CFC  
                           l2721 02EC                             l3185 00C2                             l2475 0C67  
                           l2459 0C31                             l2731 0301                             l2635 1711  
                           l3187 0FE1                             l3189 0E6C                             l2805 03D1  
                           l2725 02EF                             l2653 09F7                             l2591 0901  
                           l2487 0C9F                             l2831 046A                             l2823 045B  
                           l2815 043B                             l2671 0A2E                             l2761 033D  
                           l2649 09EE                             l2913 0044                             l2771 037B  
                           l2907 0092                             l2845 047C                             l2837 0471  
                           l2669 0A1E                             l2925 0047                             l2871 04C5  
                           l2839 0473                             l2679 0A41                             l2935 0059  
                           l2849 047E                             l2769 0379                             l2697 02C2  
                           l2867 04C1                             l2795 03BF                             l2787 039E  
                           l2779 038A                             l2971 0F66                             l2797 03C1  
                           l2965 0F3A                             l2983 0F90                             l2993 0FA2  
                           STR_1 0876                             STR_2 0876                             STR_3 0869  
                           STR_4 0871                             STR_5 0869                             STR_6 0871  
                           STR_7 0872                             STR_8 084A                             STR_9 0871  
                           _BRGH 04C2                             _CREN 00C4                             u3100 0AE8  
                           u2205 17E7                             u2215 17F1                             u3015 0C5A  
                           u2305 088F                             u3130 0AF9                             u2155 179C  
                           u3035 0C6F                             u2245 1762                             u3125 0AEE  
                           u3311 0D97                             u2175 17CF                             u3312 0D98  
                           u3160 0B0A                             u3144 0AFC                             u3313 0D9D  
                           u3305 0D80                             u2265 1773                             u2345 0EA7  
                           u4105 012F                             u3314 0D9E                             u3315 0DA3  
                           u2195 17DB                             u2275 177C                             u3075 0C8A  
                           u3155 0AFF                             u3316 0DA4                             u3405 090D  
                           u4125 01B8                             u3190 0B1B                             u3174 0B0D  
                           u2455 0A87                             u3351 0DF7                             u3335 0DC7  
                           u4207 17BD                             u2551 0BB7                             u4055 00B4  
                           u3352 0DF8                             u2552 0BB8                             u4217 0930  
                           u3353 0DFD                             u3345 0DE0                             u2553 0BBD  
                           u3505 0A00                             u3185 0B10                             u3354 0DFE  
                           u2554 0BBE                             u4227 093F                             u2475 0A95  
                           u3355 0E03                             u2571 0BDD                             u2555 0BC3  
                           u2715 05DE                             u4075 0F5C                             u3356 0E04  
                           u2572 0BDE                             u2556 0BC4                             u3700 035E  
                           u4237 094E                             u2485 0AAA                             u2573 0BE3  
                           u2805 06FC                             u2574 0BE4                             u4247 1706  
                           u2495 0ABC                             u3295 0D67                             u2575 0BE9  
                           u3535 0A1F                             u2576 0BEA                             u3385 08E8  
                           u2825 071A                             u2745 063B                             u3465 171A  
                           u4177 0FFB                             u2835 0732                             u4187 0B22  
                           u3475 1721                             u4197 17AC                             u2925 0781  
                           u3565 0A37                             u2935 079F                             u2855 073D  
                           u3831 03FC                             u3823 03E3                             u3815 03C5  
                           u3735 037F                             u3840 0410                             u3832 03FD  
                           u2945 07B7                             u2785 06D7                             u3841 0411  
                           u3833 0402                             u3842 0416                             u3834 0403  
                           u3690 035D                             u3843 0417                             u3835 0408  
                           u3836 0409                             _RCIF 0065                             u3685 0351  
                           u2995 0C3E                             u3885 045D                             u3985 049B  
                           _SPEN 00C7                             _TRMT 04C1                             _TXEN 04C5  
                           _SYNC 04C4                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
              ?_Lcd_Write_String 0075                             _key2 0068                             _main 0981  
                           btemp 007E                    __CFG_BOREN$ON 0000                             start 0000  
             ??_Lcd_Write_String 0077                  __end_of_Lcd_Cmd 170F                    __CFG_MCLRE$ON 0000  
                __end_of_Encoder 02A5                _Lcd_Write_Integer 0003                    ___fltol@sign1 0043  
                __end_of___aldiv 0ADF                  __end_of___fladd 04D4                            ?_main 0070  
                          STR_10 084A                            STR_11 0871                            STR_12 0872  
                          STR_13 083C                            STR_14 0860                            STR_15 0855  
                          STR_16 0860                    __CFG_WDTE$OFF 0000                  __end_of___flmul 07E9  
                __end_of___fltol 0A50                            _ANSEL 0188               ?_Lcd_Write_Integer 0045  
                __end_of___lwdiv 1800                  __end_of___lwmod 178B                            _RCREG 001A  
                     _ConfigInit 1730                            _SPBRG 0099                            _PORTA 0005  
                          _PORTC 0007          __size_of_Lcd_Set_Cursor 004A                            _TRISA 0085  
                          _TRISB 0086                            _TRISC 0087                            _TXREG 0019  
                          _nRBPU 040F               __size_of_UART_Init 00D6                  __end_of_dpowers 083C  
            ??_Lcd_Write_Integer 0047                            pclath 000A                            status 0003  
                          wtemp0 007E                  __end_of_sprintf 0F0A                 __end_of_Lcd_Init 0981  
               __end_of_Lcd_Port 16F5                  __initialization 07E9                     __end_of_main 09E3  
      __end_of_Lcd_Write_Integer 001B                           ??_main 0056               __size_of_Lcd_Clear 000B  
               __end_of_RunMotor 16DB                           _ANSELH 0189                        ??_Lcd_Cmd 0071  
        __size_of_Lcd_Write_Char 0039                        ??_Encoder 0052                           _TRISC6 043E  
                         _TRISC7 043F                 __end_of___xxtofl 0CA8                   __CFG_PWRTE$OFF 0000  
                         _Grados 0060                __end_of_UART_Init 0E32                           ___flge 0B70  
                      ??___aldiv 0078                        ??___fladd 0028                           ___wmul 170F  
                      ??___flmul 0028                        ??___fltol 003E                        ??___lwdiv 0074  
                      ??___lwmod 007C                           _buffer 0066                _configurarHorario 001B  
           __end_of_KeyPadGetKey 0B70                           _lastCm 0058               ?_configurarHorario 0070  
                KeyPadGetKey@key 0074                  KeyPadGetKey@row 0075                      ?_ConfigInit 0070  
             __size_of__Umul8_16 0023            _configurarAntiHorario 0F0A              ??_configurarHorario 0052  
                      ??_sprintf 0023                  Lcd_Set_Cursor@a 0077                  Lcd_Set_Cursor@b 0074  
                Lcd_Set_Cursor@y 0079                  Lcd_Set_Cursor@z 0078               __size_of_StopMotor 0005  
                     ___flge@ff1 003A                       ___flge@ff2 003E                     ___xxtofl@arg 007A  
                   ___xxtofl@exp 0079                     ___xxtofl@val 0070          __end_of__initialization 07FC  
              __end_of_Lcd_Clear 16CE                       ___fltol@f1 003A                   __pcstackCOMMON 0070  
      __end_of_configurarHorario 00D7                     __pidataBANK0 087A       __size_of_Lcd_Write_Integer 0018  
                 _Lcd_Set_Cursor 08DC             __end_of_keyPadMatrix 0832                        ?_Lcd_Init 0070  
                      ?_Lcd_Port 0070                       __pbssBANK0 0058              __size_of_ConfigInit 0029  
              __end_of__Umul8_16 089F                       __pmaintext 0981                          ?___flge 003A  
                        ?___wmul 0070                        ?_RunMotor 0070                __end_of_StopMotor 16BB  
      __size_of_Lcd_Write_String 003D           __end_of_Lcd_Set_Cursor 0926           ?_configurarAntiHorario 0070  
                      ?___xxtofl 0070                       ??_Lcd_Init 0074         ??_VerificarInversionGiro 007E  
                     ??_Lcd_Port 0070                       __stringtab 0800                   _Lcd_Write_Char 178B  
                        _Lcd_Cmd 16F5                          _Encoder 00D7            __size_of_KeyPadGetKey 0091  
     __size_of_configurarHorario 00BC                          ___aldiv 0A50                  __size_of___flge 0095  
                        ___fladd 02A5                       ??_RunMotor 0070                          ___flmul 04D4  
                        ___fltol 09E3                  __size_of___wmul 0021                          ___lwdiv 17C4  
                        ___lwmod 1759                  ?_Lcd_Set_Cursor 0074                          __ptext1 001B  
                        __ptext2 0F0A                          __ptext3 170F                          __ptext4 16B6  
                        __ptext5 16CE                          __ptext6 0ADF                          __ptext7 00D7  
                        __ptext8 09E3                          __ptext9 02A5                          _dpowers 0832  
                     ??___xxtofl 0074                          _old_key 0062                 ___aldiv@dividend 0074  
                        _sprintf 0E32                          clrloop0 16BC           __end_of_Lcd_Write_Char 17C4  
           end_of_initialization 07FC                     _KeyPadGetKey 0ADF                 ___aldiv@quotient 0022  
                      Lcd_Port@a 0070                        _UART_Init 0D5C                     ??_ConfigInit 007B  
                    ___fladd@grs 0033                    ___xxtofl@sign 0078  __size_of_VerificarInversionGiro 00B4  
                ?_Lcd_Write_Char 0070                        _CmHorario 005E                Lcd_Write_String@a 0075  
              Lcd_Write_String@i 007A                      ___flmul@grs 002E               __end_of_ConfigInit 1759  
                   _keyPadMatrix 0810                        _Lcd_Clear 16C3                   __end_of___flge 0C05  
                 __end_of___wmul 1730                 _Lcd_Write_String 089F                       ?_UART_Init 0026  
            start_initialization 07E9                        _LastState 0065                __size_of_Lcd_Init 005B  
              __size_of_Lcd_Port 001A         __CFG_FOSC$INTRC_NOCLKOUT 0000                       ?_Lcd_Clear 0070  
                       ??___flge 0042           _VerificarInversionGiro 0CA8                         ??___wmul 0074  
                      __Umul8_16 087C                      __pdataBANK0 0068                  Lcd_Write_Char@a 0074  
                Lcd_Write_Char@y 0073          ??_configurarAntiHorario 0052                __size_of_RunMotor 000D  
                      ___fladd@a 0024                        ___fladd@b 0020                        _StopMotor 16B6  
                      ___flmul@a 0024                        ___flmul@b 0020                        ___latbits 0002  
                  __pcstackBANK0 0020                __size_of___xxtofl 00A3                         ?_Lcd_Cmd 0070  
                    sprintf@flag 0027                         ?_Encoder 0070                      sprintf@prec 0028  
               ___lwdiv@dividend 0072                 ??_Lcd_Set_Cursor 0075                         ?___aldiv 0070  
                       ?___fladd 0020                         ?___flmul 0020                         ?___fltol 003A  
                     ?__Umul8_16 0070                         ?___lwdiv 0070                         ?___lwmod 0078  
                    ??_UART_Init 002A                        __pstrings 0800                       ?_StopMotor 0070  
               ___lwdiv@quotient 0075                         ?_sprintf 0020                       UART_Init@x 0079  
                ___aldiv@divisor 0070                  ___aldiv@counter 0020                   ___wmul@product 0074  
                      clear_ram0 16BB                         Lcd_Cmd@a 0073                      ??_Lcd_Clear 0074  
          Lcd_Write_Integer@Data 0048                UART_Init@baudrate 0026                      __stringbase 080F  
              ___wmul@multiplier 0070                 ??_Lcd_Write_Char 0071                         _Lcd_Init 0926  
                       _Lcd_Port 16DB         __end_of_Lcd_Write_String 08DC                 __size_of_Lcd_Cmd 001A  
               __size_of_Encoder 01CE                         _RunMotor 16CE                      ??__Umul8_16 0072  
               __size_of___aldiv 008F                 __size_of___fladd 022F                 __size_of___flmul 0315  
               __size_of___fltol 006D                 __size_of___lwdiv 003C                 __size_of___lwmod 0032  
             __end_of__stringtab 0810                      ??_StopMotor 0070                       sprintf@val 0029  
                       ___xxtofl 0C05                  ___lwdiv@divisor 0070                  ___lwdiv@counter 0077  
                       __ptext10 0CA8                         __ptext11 0C05                         __ptext20 178B  
                       __ptext12 04D4                         __ptext21 08DC                         __ptext13 087C  
                       __ptext22 16C3                         __ptext14 0B70                         __ptext23 1730  
                       __ptext15 0003                         __ptext24 0D5C                         __ptext16 0E32  
                       __ptext25 0A50                         __ptext17 1759                         __ptext26 0926  
                       __ptext18 17C4                         __ptext27 16F5                         __ptext19 089F  
                       __ptext28 16DB                __CFG_BOR4V$BOR40V 0000                 __size_of_sprintf 00D8  
                  __size_of_main 0062                         _keypress 0064          ?_VerificarInversionGiro 0070  
 __size_of_configurarAntiHorario 00F6    __end_of_configurarAntiHorario 1000               Lcd_Write_Char@temp 0072  
                      sprintf@ap 0026                        sprintf@sp 002B                 ___lwmod@dividend 007A  
 __end_of_VerificarInversionGiro 0D5C                        stringcode 080A               Lcd_Set_Cursor@temp 007A  
         __Umul8_16@multiplicand 0070                         sprintf@c 002C                         sprintf@f 0020  
                ___lwmod@divisor 0078                  ___lwmod@counter 007D                         stringdir 080A  
                       stringtab 0800                     ___aldiv@sign 0021               Lcd_Write_Integer@a 0045  
                  ___fladd@signs 0030                    ?_KeyPadGetKey 0070                     ___fladd@aexp 0031  
                   ___fladd@bexp 0032             __Umul8_16@multiplier 0078                __Umul8_16@product 0074  
