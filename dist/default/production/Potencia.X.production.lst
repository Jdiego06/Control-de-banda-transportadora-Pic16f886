

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 01 13:16:07 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 2.05
    41                           ; Generated 20/12/2018 GMT
    42                           ; 
    43                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F886 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226                           
   227                           	psect	idataBANK0
   228  0003                     __pidataBANK0:	
   229                           
   230                           ;initializer for _key2
   231  0003  3430               	retlw	48
   232  0004  3400               	retlw	0
   233                           
   234                           ;initializer for _keypress
   235  0005  3430               	retlw	48
   236                           
   237                           	psect	strings
   238  0800                     __pstrings:	
   239  0800                     stringtab:	
   240  0800                     __stringtab:	
   241                           
   242                           ;	String table - string pointers are 1 byte each
   243  0800  1BFF               	btfsc	btemp+1,7
   244  0801  280A               	ljmp	stringcode
   245  0802  1383               	bcf	3,7
   246  0803  187F               	btfsc	btemp+1,0
   247  0804  1783               	bsf	3,7
   248  0805  0800               	movf	0,w
   249  0806  0A84               	incf	4,f
   250  0807  1903               	skipnz
   251  0808  0AFF               	incf	btemp+1,f
   252  0809  0008               	return
   253  080A                     stringcode:	
   254  080A                     stringdir:	
   255  080A  3008               	movlw	high stringdir
   256  080B  008A               	movwf	10
   257  080C  0804               	movf	4,w
   258  080D  0A84               	incf	4,f
   259  080E  0782               	addwf	2,f
   260  080F                     __stringbase:	
   261  080F  3400               	retlw	0
   262  0810                     __end_of__stringtab:	
   263  0810                     _keyPadMatrix:	
   264  0810  3441               	retlw	65
   265  0811  3400               	retlw	0
   266  0812  3431               	retlw	49
   267  0813  3400               	retlw	0
   268  0814  3432               	retlw	50
   269  0815  3400               	retlw	0
   270  0816  3433               	retlw	51
   271  0817  3400               	retlw	0
   272  0818  3442               	retlw	66
   273  0819  3400               	retlw	0
   274  081A  3434               	retlw	52
   275  081B  3400               	retlw	0
   276  081C  3435               	retlw	53
   277  081D  3400               	retlw	0
   278  081E  3436               	retlw	54
   279  081F  3400               	retlw	0
   280  0820  3443               	retlw	67
   281  0821  3400               	retlw	0
   282  0822  3437               	retlw	55
   283  0823  3400               	retlw	0
   284  0824  3438               	retlw	56
   285  0825  3400               	retlw	0
   286  0826  3439               	retlw	57
   287  0827  3400               	retlw	0
   288  0828  3444               	retlw	68
   289  0829  3400               	retlw	0
   290  082A  342A               	retlw	42
   291  082B  3400               	retlw	0
   292  082C  3430               	retlw	48
   293  082D  3400               	retlw	0
   294  082E  3423               	retlw	35
   295  082F  3400               	retlw	0
   296  0830  34FF               	retlw	255
   297  0831  3400               	retlw	0
   298  0832                     __end_of_keyPadMatrix:	
   299  0832                     _dpowers:	
   300  0832  3401               	retlw	1
   301  0833  3400               	retlw	0
   302  0834  340A               	retlw	10
   303  0835  3400               	retlw	0
   304  0836  3464               	retlw	100
   305  0837  3400               	retlw	0
   306  0838  34E8               	retlw	232
   307  0839  3403               	retlw	3
   308  083A  3410               	retlw	16
   309  083B  3427               	retlw	39
   310  083C                     __end_of_dpowers:	
   311  0005                     _PORTA	set	5
   312  0039                     _RC1	set	57
   313  0038                     _RC0	set	56
   314  0030                     _RB0	set	48
   315  002F                     _RA7	set	47
   316  002E                     _RA6	set	46
   317  002D                     _RA5	set	45
   318  002C                     _RA4	set	44
   319  002B                     _RA3	set	43
   320  002A                     _RA2	set	42
   321  0029                     _RA1	set	41
   322  0028                     _RA0	set	40
   323  0033                     _RB3	set	51
   324  0032                     _RB2	set	50
   325  0037                     _RB7	set	55
   326  0036                     _RB6	set	54
   327  0035                     _RB5	set	53
   328  0034                     _RB4	set	52
   329  0085                     _TRISA	set	133
   330  0087                     _TRISC	set	135
   331  0086                     _TRISB	set	134
   332  0188                     _ANSEL	set	392
   333  0189                     _ANSELH	set	393
   334  083C                     STR_12:	
   335  083C  3444               	retlw	68	;'D'
   336  083D  3469               	retlw	105	;'i'
   337  083E  3472               	retlw	114	;'r'
   338  083F  343A               	retlw	58	;':'
   339  0840  3420               	retlw	32	;' '
   340  0841  3441               	retlw	65	;'A'
   341  0842  3464               	retlw	100	;'d'
   342  0843  3465               	retlw	101	;'e'
   343  0844  346C               	retlw	108	;'l'
   344  0845  3461               	retlw	97	;'a'
   345  0846  346E               	retlw	110	;'n'
   346  0847  3474               	retlw	116	;'t'
   347  0848  3465               	retlw	101	;'e'
   348  0849  3400               	retlw	0
   349  084A                     STR_2:	
   350  084A  3441               	retlw	65	;'A'
   351  084B  3464               	retlw	100	;'d'
   352  084C  3465               	retlw	101	;'e'
   353  084D  346C               	retlw	108	;'l'
   354  084E  3461               	retlw	97	;'a'
   355  084F  346E               	retlw	110	;'n'
   356  0850  3474               	retlw	116	;'t'
   357  0851  3465               	retlw	101	;'e'
   358  0852  343A               	retlw	58	;':'
   359  0853  3420               	retlw	32	;' '
   360  0854  3400               	retlw	0
   361  0855                     STR_14:	
   362  0855  3444               	retlw	68	;'D'
   363  0856  3469               	retlw	105	;'i'
   364  0857  3472               	retlw	114	;'r'
   365  0858  343A               	retlw	58	;':'
   366  0859  3420               	retlw	32	;' '
   367  085A  3441               	retlw	65	;'A'
   368  085B  3474               	retlw	116	;'t'
   369  085C  3472               	retlw	114	;'r'
   370  085D  3461               	retlw	97	;'a'
   371  085E  3473               	retlw	115	;'s'
   372  085F  3400               	retlw	0
   373  0860                     STR_13:	
   374  0860  3420               	retlw	32	;' '
   375  0861  3443               	retlw	67	;'C'
   376  0862  346D               	retlw	109	;'m'
   377  0863  3420               	retlw	32	;' '
   378  0864  3464               	retlw	100	;'d'
   379  0865  3465               	retlw	101	;'e'
   380  0866  343A               	retlw	58	;':'
   381  0867  3420               	retlw	32	;' '
   382  0868  3400               	retlw	0
   383  0869                     STR_7:	
   384  0869  3441               	retlw	65	;'A'
   385  086A  3474               	retlw	116	;'t'
   386  086B  3472               	retlw	114	;'r'
   387  086C  3461               	retlw	97	;'a'
   388  086D  3473               	retlw	115	;'s'
   389  086E  343A               	retlw	58	;':'
   390  086F  3420               	retlw	32	;' '
   391  0870  3400               	retlw	0
   392  0871                     STR_3:	
   393  0871  3430               	retlw	48	;'0'
   394  0872  3420               	retlw	32	;' '
   395  0873  3443               	retlw	67	;'C'
   396  0874  346D               	retlw	109	;'m'
   397  0875  3400               	retlw	0
   398  0876                     STR_1:	
   399  0876  3425               	retlw	37	;'%'
   400  0877  3464               	retlw	100	;'d'
   401  0878  3400               	retlw	0
   402  0860                     
   403                           ; #config settings
   404  0000                     
   405                           	psect	cinit
   406  07DF                     start_initialization:	
   407  07DF                     __initialization:	
   408                           
   409                           ; Initialize objects allocated to BANK0
   410  07DF  120A  118A  2003  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   411  07E4  00E7               	movwf	__pdataBANK0& (0+127)
   412  07E5  120A  118A  2004  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   413  07EA  00E8               	movwf	(__pdataBANK0+1)& (0+127)
   414  07EB  120A  118A  2005   	fcall	__pidataBANK0+2	;fetch initializer
   415  07EE  00E9               	movwf	(__pdataBANK0+2)& (0+127)
   416                           
   417                           ; Clear objects allocated to BANK0
   418  07EF  01DA               	clrf	__pbssBANK0& (0+127)
   419  07F0  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   420  07F1  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   421  07F2  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   422  07F3  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   423  07F4  01DF               	clrf	(__pbssBANK0+5)& (0+127)
   424  07F5  01E0               	clrf	(__pbssBANK0+6)& (0+127)
   425  07F6  01E1               	clrf	(__pbssBANK0+7)& (0+127)
   426  07F7  01E2               	clrf	(__pbssBANK0+8)& (0+127)
   427  07F8  01E3               	clrf	(__pbssBANK0+9)& (0+127)
   428  07F9  01E4               	clrf	(__pbssBANK0+10)& (0+127)
   429  07FA  01E5               	clrf	(__pbssBANK0+11)& (0+127)
   430  07FB  01E6               	clrf	(__pbssBANK0+12)& (0+127)
   431  07FC                     end_of_initialization:	
   432                           ;End of C runtime variable initialization code
   433                           
   434  07FC                     __end_of__initialization:	
   435  07FC  0183               	clrf	3
   436  07FD  120A  158A  2CDC   	ljmp	_main	;jump to C main() function
   437                           
   438                           	psect	bssBANK0
   439  005A                     __pbssBANK0:	
   440  005A                     _cm:	
   441  005A                     	ds	2
   442  005C                     _CmAntiHorario:	
   443  005C                     	ds	2
   444  005E                     _CmHorario:	
   445  005E                     	ds	2
   446  0060                     _Grados:	
   447  0060                     	ds	2
   448  0062                     _LastState:	
   449  0062                     	ds	1
   450  0063                     _old_key:	
   451  0063                     	ds	1
   452  0064                     _key:	
   453  0064                     	ds	1
   454  0065                     _buffer:	
   455  0065                     	ds	2
   456                           
   457                           	psect	dataBANK0
   458  0067                     __pdataBANK0:	
   459  0067                     _key2:	
   460  0067                     	ds	2
   461  0069                     _keypress:	
   462  0069                     	ds	1
   463                           
   464                           	psect	cstackCOMMON
   465  0070                     __pcstackCOMMON:	
   466  0070                     ??_StopMotor:	
   467  0070                     ??_RunMotor:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0070                     ?_PinsInit:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0070                     ??_PinsInit:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0070                     ?_Lcd_Port:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ??_Lcd_Port:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_Lcd_Cmd:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ?_Lcd_Clear:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_Lcd_Init:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_Lcd_Write_Char:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_StopMotor:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_configurarHorario:	
   498                           ; 2 bytes @ 0x0
   499                           
   500  0070                     ?_configurarAntiHorario:	
   501                           ; 2 bytes @ 0x0
   502                           
   503  0070                     ?_RunMotor:	
   504                           ; 2 bytes @ 0x0
   505                           
   506  0070                     ?_Encoder:	
   507                           ; 2 bytes @ 0x0
   508                           
   509  0070                     ?__Umul8_16:	
   510                           ; 2 bytes @ 0x0
   511                           
   512  0070                     ?_KeyPadGetKey:	
   513                           ; 2 bytes @ 0x0
   514                           
   515  0070                     ?_main:	
   516                           ; 2 bytes @ 0x0
   517                           
   518  0070                     ?_VerificarInversionGiro:	
   519                           ; 2 bytes @ 0x0
   520                           
   521  0070                     ?___wmul:	
   522                           ; 2 bytes @ 0x0
   523                           
   524  0070                     ?___lwdiv:	
   525                           ; 2 bytes @ 0x0
   526                           
   527  0070                     ?___xxtofl:	
   528                           ; 2 bytes @ 0x0
   529                           
   530  0070                     Lcd_Port@a:	
   531                           ; 4 bytes @ 0x0
   532                           
   533  0070                     __Umul8_16@multiplicand:	
   534                           ; 1 bytes @ 0x0
   535                           
   536  0070                     ___wmul@multiplier:	
   537                           ; 1 bytes @ 0x0
   538                           
   539  0070                     ___lwdiv@divisor:	
   540                           ; 2 bytes @ 0x0
   541                           
   542  0070                     ___xxtofl@val:	
   543                           ; 2 bytes @ 0x0
   544                           
   545                           
   546                           ; 4 bytes @ 0x0
   547  0070                     	ds	1
   548  0071                     ??_Lcd_Cmd:	
   549  0071                     ??_Lcd_Write_Char:	
   550                           ; 1 bytes @ 0x1
   551                           
   552                           
   553                           ; 1 bytes @ 0x1
   554  0071                     	ds	1
   555  0072                     ??__Umul8_16:	
   556  0072                     ??_KeyPadGetKey:	
   557                           ; 1 bytes @ 0x2
   558                           
   559  0072                     Lcd_Write_Char@temp:	
   560                           ; 1 bytes @ 0x2
   561                           
   562  0072                     ___wmul@multiplicand:	
   563                           ; 1 bytes @ 0x2
   564                           
   565  0072                     ___lwdiv@dividend:	
   566                           ; 2 bytes @ 0x2
   567                           
   568                           
   569                           ; 2 bytes @ 0x2
   570  0072                     	ds	1
   571  0073                     Lcd_Cmd@a:	
   572  0073                     Lcd_Write_Char@y:	
   573                           ; 1 bytes @ 0x3
   574                           
   575  0073                     KeyPadGetKey@key:	
   576                           ; 1 bytes @ 0x3
   577                           
   578                           
   579                           ; 1 bytes @ 0x3
   580  0073                     	ds	1
   581  0074                     ??_Lcd_Clear:	
   582  0074                     ?_Lcd_Set_Cursor:	
   583                           ; 1 bytes @ 0x4
   584                           
   585  0074                     ??_Lcd_Init:	
   586                           ; 1 bytes @ 0x4
   587                           
   588  0074                     ??___wmul:	
   589                           ; 1 bytes @ 0x4
   590                           
   591  0074                     ??___lwdiv:	
   592                           ; 1 bytes @ 0x4
   593                           
   594  0074                     ??___xxtofl:	
   595                           ; 1 bytes @ 0x4
   596                           
   597  0074                     Lcd_Set_Cursor@b:	
   598                           ; 1 bytes @ 0x4
   599                           
   600  0074                     Lcd_Write_Char@a:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0074                     KeyPadGetKey@row:	
   604                           ; 1 bytes @ 0x4
   605                           
   606  0074                     ___wmul@product:	
   607                           ; 1 bytes @ 0x4
   608                           
   609  0074                     __Umul8_16@product:	
   610                           ; 2 bytes @ 0x4
   611                           
   612                           
   613                           ; 2 bytes @ 0x4
   614  0074                     	ds	1
   615  0075                     ??_Lcd_Set_Cursor:	
   616  0075                     ?_Lcd_Write_String:	
   617                           ; 1 bytes @ 0x5
   618                           
   619  0075                     Lcd_Write_String@a:	
   620                           ; 1 bytes @ 0x5
   621                           
   622  0075                     ___lwdiv@quotient:	
   623                           ; 2 bytes @ 0x5
   624                           
   625                           
   626                           ; 2 bytes @ 0x5
   627  0075                     	ds	1
   628  0076                     __Umul8_16@word_mpld:	
   629                           
   630                           ; 2 bytes @ 0x6
   631  0076                     	ds	1
   632  0077                     ??_Lcd_Write_String:	
   633  0077                     Lcd_Set_Cursor@a:	
   634                           ; 1 bytes @ 0x7
   635                           
   636  0077                     ___lwdiv@counter:	
   637                           ; 1 bytes @ 0x7
   638                           
   639                           
   640                           ; 1 bytes @ 0x7
   641  0077                     	ds	1
   642  0078                     ?___lwmod:	
   643  0078                     Lcd_Set_Cursor@z:	
   644                           ; 2 bytes @ 0x8
   645                           
   646  0078                     ___xxtofl@sign:	
   647                           ; 1 bytes @ 0x8
   648                           
   649  0078                     __Umul8_16@multiplier:	
   650                           ; 1 bytes @ 0x8
   651                           
   652  0078                     ___lwmod@divisor:	
   653                           ; 1 bytes @ 0x8
   654                           
   655                           
   656                           ; 2 bytes @ 0x8
   657  0078                     	ds	1
   658  0079                     Lcd_Set_Cursor@y:	
   659  0079                     ___xxtofl@exp:	
   660                           ; 1 bytes @ 0x9
   661                           
   662                           
   663                           ; 1 bytes @ 0x9
   664  0079                     	ds	1
   665  007A                     Lcd_Set_Cursor@temp:	
   666  007A                     Lcd_Write_String@i:	
   667                           ; 1 bytes @ 0xA
   668                           
   669  007A                     ___lwmod@dividend:	
   670                           ; 2 bytes @ 0xA
   671                           
   672  007A                     ___xxtofl@arg:	
   673                           ; 2 bytes @ 0xA
   674                           
   675                           
   676                           ; 4 bytes @ 0xA
   677  007A                     	ds	2
   678  007C                     ??___lwmod:	
   679                           
   680                           ; 1 bytes @ 0xC
   681  007C                     	ds	1
   682  007D                     ___lwmod@counter:	
   683                           
   684                           ; 1 bytes @ 0xD
   685  007D                     	ds	1
   686  007E                     ??_Encoder:	
   687  007E                     ??_VerificarInversionGiro:	
   688                           ; 1 bytes @ 0xE
   689                           
   690                           
   691                           	psect	cstackBANK0
   692  0020                     __pcstackBANK0:	
   693                           ; 1 bytes @ 0xE
   694                           
   695  0020                     ?_sprintf:	
   696  0020                     ?___flmul:	
   697                           ; 2 bytes @ 0x0
   698                           
   699  0020                     sprintf@f:	
   700                           ; 4 bytes @ 0x0
   701                           
   702  0020                     ___flmul@b:	
   703                           ; 1 bytes @ 0x0
   704                           
   705                           
   706                           ; 4 bytes @ 0x0
   707  0020                     	ds	3
   708  0023                     ??_sprintf:	
   709                           
   710                           ; 1 bytes @ 0x3
   711  0023                     	ds	1
   712  0024                     ___flmul@a:	
   713                           
   714                           ; 4 bytes @ 0x4
   715  0024                     	ds	2
   716  0026                     sprintf@ap:	
   717                           
   718                           ; 1 bytes @ 0x6
   719  0026                     	ds	1
   720  0027                     sprintf@flag:	
   721                           
   722                           ; 1 bytes @ 0x7
   723  0027                     	ds	1
   724  0028                     ??___flmul:	
   725  0028                     sprintf@prec:	
   726                           ; 1 bytes @ 0x8
   727                           
   728                           
   729                           ; 1 bytes @ 0x8
   730  0028                     	ds	1
   731  0029                     sprintf@val:	
   732                           
   733                           ; 2 bytes @ 0x9
   734  0029                     	ds	2
   735  002B                     sprintf@sp:	
   736                           
   737                           ; 1 bytes @ 0xB
   738  002B                     	ds	1
   739  002C                     sprintf@c:	
   740                           
   741                           ; 1 bytes @ 0xC
   742  002C                     	ds	1
   743  002D                     ___flmul@sign:	
   744                           
   745                           ; 1 bytes @ 0xD
   746  002D                     	ds	1
   747  002E                     ___flmul@grs:	
   748                           
   749                           ; 4 bytes @ 0xE
   750  002E                     	ds	4
   751  0032                     ___flmul@aexp:	
   752                           
   753                           ; 1 bytes @ 0x12
   754  0032                     	ds	1
   755  0033                     ___flmul@bexp:	
   756                           
   757                           ; 1 bytes @ 0x13
   758  0033                     	ds	1
   759  0034                     ___flmul@prod:	
   760                           
   761                           ; 4 bytes @ 0x14
   762  0034                     	ds	4
   763  0038                     ___flmul@temp:	
   764                           
   765                           ; 2 bytes @ 0x18
   766  0038                     	ds	2
   767  003A                     ?___fleq:	
   768  003A                     ?___flge:	
   769                           ; 1 bit 
   770                           
   771  003A                     ?___fltol:	
   772                           ; 1 bit 
   773                           
   774  003A                     ___fleq@ff1:	
   775                           ; 4 bytes @ 0x1A
   776                           
   777  003A                     ___flge@ff1:	
   778                           ; 4 bytes @ 0x1A
   779                           
   780  003A                     ___fltol@f1:	
   781                           ; 4 bytes @ 0x1A
   782                           
   783                           
   784                           ; 4 bytes @ 0x1A
   785  003A                     	ds	4
   786  003E                     ??___fltol:	
   787  003E                     ___fleq@ff2:	
   788                           ; 1 bytes @ 0x1E
   789                           
   790  003E                     ___flge@ff2:	
   791                           ; 4 bytes @ 0x1E
   792                           
   793                           
   794                           ; 4 bytes @ 0x1E
   795  003E                     	ds	4
   796  0042                     ??___fleq:	
   797  0042                     ??___flge:	
   798                           ; 1 bytes @ 0x22
   799                           
   800                           
   801                           ; 1 bytes @ 0x22
   802  0042                     	ds	1
   803  0043                     ___fltol@sign1:	
   804                           
   805                           ; 1 bytes @ 0x23
   806  0043                     	ds	1
   807  0044                     ___fltol@exp1:	
   808                           
   809                           ; 1 bytes @ 0x24
   810  0044                     	ds	1
   811  0045                     ?_Lcd_Write_Integer:	
   812  0045                     Lcd_Write_Integer@a:	
   813                           ; 1 bytes @ 0x25
   814                           
   815                           
   816                           ; 2 bytes @ 0x25
   817  0045                     	ds	2
   818  0047                     ??_Lcd_Write_Integer:	
   819                           
   820                           ; 1 bytes @ 0x27
   821  0047                     	ds	1
   822  0048                     Lcd_Write_Integer@Data:	
   823                           
   824                           ; 10 bytes @ 0x28
   825  0048                     	ds	10
   826  0052                     ??_configurarHorario:	
   827  0052                     ??_configurarAntiHorario:	
   828                           ; 1 bytes @ 0x32
   829                           
   830                           
   831                           ; 1 bytes @ 0x32
   832  0052                     	ds	4
   833  0056                     ??_main:	
   834                           
   835                           ; 1 bytes @ 0x36
   836  0056                     	ds	4
   837                           
   838                           	psect	maintext
   839  0CDC                     __pmaintext:	
   840 ;;
   841 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   842 ;;
   843 ;; *************** function _main *****************
   844 ;; Defined at:
   845 ;;		line 22 in file "main.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  2  144[None  ] int 
   852 ;; Registers used:
   853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : B00/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   859 ;;      Params:         0       0       0       0       0
   860 ;;      Locals:         0       0       0       0       0
   861 ;;      Temps:          0       4       0       0       0
   862 ;;      Totals:         0       4       0       0       0
   863 ;;Total ram usage:        4 bytes
   864 ;; Hardware stack levels required when called:    5
   865 ;; This function calls:
   866 ;;		_Encoder
   867 ;;		_KeyPadGetKey
   868 ;;		_Lcd_Init
   869 ;;		_PinsInit
   870 ;;		_RunMotor
   871 ;;		_StopMotor
   872 ;;		_configurarAntiHorario
   873 ;;		_configurarHorario
   874 ;; This function is called by:
   875 ;;		Startup code after reset
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _main
   881  0CDC                     _main:	
   882                           
   883                           ;main.c: 25:     PinsInit();
   884                           
   885                           ;incstack = 0
   886                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   887  0CDC  120A  118A  2006  120A  158A  	fcall	_PinsInit
   888                           
   889                           ;main.c: 26:     Lcd_Init();
   890  0CE1  120A  158A  2414  120A  158A  	fcall	_Lcd_Init
   891                           
   892                           ;main.c: 28:     StopMotor();
   893  0CE6  120A  158A  21F1  120A  158A  	fcall	_StopMotor
   894                           
   895                           ;main.c: 29:     configurarHorario();
   896  0CEB  120A  118A  21BB  120A  158A  	fcall	_configurarHorario
   897                           
   898                           ;main.c: 30:     configurarAntiHorario();
   899  0CF0  120A  118A  20C7  120A  158A  	fcall	_configurarAntiHorario
   900  0CF5                     l2457:	
   901                           
   902                           ;main.c: 34:         keypress = KeyPadGetKey();
   903  0CF5  120A  158A  2561  120A  158A  	fcall	_KeyPadGetKey
   904  0CFA  0870               	movf	?_KeyPadGetKey,w
   905  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
   906  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
   907  0CFD  00D6               	movwf	??_main
   908  0CFE  0856               	movf	??_main,w
   909  0CFF  00E9               	movwf	_keypress
   910                           
   911                           ;main.c: 37:         if (keypress != keyPadMatrix[ 0x10 ]) {
   912  0D00  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
   913  0D01  0084               	movwf	4
   914  0D02  120A  158A  200A  120A  158A  	fcall	stringdir
   915  0D07  00D6               	movwf	??_main
   916  0D08  120A  158A  200A  120A  158A  	fcall	stringdir
   917  0D0D  00D7               	movwf	??_main+1
   918  0D0E  0869               	movf	_keypress,w
   919  0D0F  00D8               	movwf	??_main+2
   920  0D10  01D9               	clrf	??_main+3
   921  0D11  0857               	movf	??_main+1,w
   922  0D12  0659               	xorwf	??_main+3,w
   923  0D13  1D03               	skipz
   924  0D14  2D17               	goto	u2875
   925  0D15  0856               	movf	??_main,w
   926  0D16  0658               	xorwf	??_main+2,w
   927  0D17                     u2875:	
   928  0D17  1D03               	btfss	3,2
   929  0D18  2D32               	goto	l2473
   930  0D19  2D48               	goto	l146
   931  0D1A                     l2463:	
   932                           
   933                           ;main.c: 41:                     configurarHorario();
   934  0D1A  120A  118A  21BB  120A  158A  	fcall	_configurarHorario
   935                           
   936                           ;main.c: 42:                     break;
   937  0D1F  2D48               	goto	l146
   938  0D20                     l2465:	
   939                           
   940                           ;main.c: 44:                     configurarAntiHorario();
   941  0D20  120A  118A  20C7  120A  158A  	fcall	_configurarAntiHorario
   942                           
   943                           ;main.c: 45:                     break;
   944  0D25  2D48               	goto	l146
   945  0D26                     l2467:	
   946                           
   947                           ;main.c: 47:                     StopMotor();
   948  0D26  120A  158A  21F1  120A  158A  	fcall	_StopMotor
   949                           
   950                           ;main.c: 48:                     break;
   951  0D2B  2D48               	goto	l146
   952  0D2C                     l2469:	
   953                           
   954                           ;main.c: 50:                     RunMotor();
   955  0D2C  120A  158A  2201  120A  158A  	fcall	_RunMotor
   956                           
   957                           ;main.c: 51:                     break;
   958  0D31  2D48               	goto	l146
   959  0D32                     l2473:	
   960  0D32  0869               	movf	_keypress,w
   961  0D33  00D6               	movwf	??_main
   962  0D34  01D7               	clrf	??_main+1
   963                           
   964                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   965                           ; Switch size 1, requested type "simple"
   966                           ; Number of cases is 1, Range of values is 0 to 0
   967                           ; switch strategies available:
   968                           ; Name         Instructions Cycles
   969                           ; simple_byte            4     3 (average)
   970                           ; direct_byte           11     8 (fixed)
   971                           ; jumptable            260     6 (fixed)
   972                           ;	Chosen strategy is simple_byte
   973  0D35  0857               	movf	??_main+1,w
   974  0D36  3A00               	xorlw	0	; case 0
   975  0D37  1903               	skipnz
   976  0D38  2D3A               	goto	l2567
   977  0D39  2D48               	goto	l146
   978  0D3A                     l2567:	
   979                           
   980                           ; Switch size 1, requested type "simple"
   981                           ; Number of cases is 4, Range of values is 65 to 68
   982                           ; switch strategies available:
   983                           ; Name         Instructions Cycles
   984                           ; simple_byte           13     7 (average)
   985                           ; direct_byte           23    11 (fixed)
   986                           ; jumptable            263     9 (fixed)
   987                           ;	Chosen strategy is simple_byte
   988  0D3A  0856               	movf	??_main,w
   989  0D3B  3A41               	xorlw	65	; case 65
   990  0D3C  1903               	skipnz
   991  0D3D  2D1A               	goto	l2463
   992  0D3E  3A03               	xorlw	3	; case 66
   993  0D3F  1903               	skipnz
   994  0D40  2D20               	goto	l2465
   995  0D41  3A01               	xorlw	1	; case 67
   996  0D42  1903               	skipnz
   997  0D43  2D26               	goto	l2467
   998  0D44  3A07               	xorlw	7	; case 68
   999  0D45  1903               	skipnz
  1000  0D46  2D2C               	goto	l2469
  1001  0D47  2D48               	goto	l146
  1002  0D48                     l146:	
  1003                           ;main.c: 53:         }
  1004                           
  1005                           
  1006                           ;main.c: 56:         if (RB0 == 1 && LastState == 0) {
  1007  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  1008  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  1009  0D4A  1C06               	btfss	6,0	;volatile
  1010  0D4B  2D55               	goto	l153
  1011  0D4C  0862               	movf	_LastState,w
  1012  0D4D  1D03               	btfss	3,2
  1013  0D4E  2D55               	goto	l153
  1014                           
  1015                           ;main.c: 57:             Encoder();
  1016  0D4F  120A  118A  22AF  120A  158A  	fcall	_Encoder
  1017                           
  1018                           ;main.c: 58:         } else if (RB0 == 0) {
  1019  0D54  2D58               	goto	l2481
  1020  0D55                     l153:	
  1021  0D55  1806               	btfsc	6,0	;volatile
  1022  0D56  2D58               	goto	l2481
  1023                           
  1024                           ;main.c: 59:             LastState = 0;
  1025  0D57  01E2               	clrf	_LastState
  1026  0D58                     l2481:	
  1027                           
  1028                           ;main.c: 61:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1029  0D58  30C7               	movlw	199
  1030  0D59  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0D5A  1303               	bcf	3,6	;RP1=0, select bank0
  1032  0D5B  00D6               	movwf	??_main
  1033  0D5C                     u2917:	
  1034  0D5C  2D5D               	nop2
  1035  0D5D  0BD6               	decfsz	??_main,f
  1036  0D5E  2D5C               	goto	u2917
  1037  0D5F  2D60               	nop2
  1038  0D60  2CF5               	goto	l2457
  1039  0D61                     __end_of_main:	
  1040                           
  1041                           	psect	text1
  1042  01BB                     __ptext1:	
  1043 ;; *************** function _configurarHorario *****************
  1044 ;; Defined at:
  1045 ;;		line 83 in file "main.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;		None
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  2   48[None  ] int 
  1052 ;; Registers used:
  1053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1059 ;;      Params:         0       0       0       0       0
  1060 ;;      Locals:         0       0       0       0       0
  1061 ;;      Temps:          0       4       0       0       0
  1062 ;;      Totals:         0       4       0       0       0
  1063 ;;Total ram usage:        4 bytes
  1064 ;; Hardware stack levels used:    1
  1065 ;; Hardware stack levels required when called:    4
  1066 ;; This function calls:
  1067 ;;		_KeyPadGetKey
  1068 ;;		_Lcd_Clear
  1069 ;;		_Lcd_Set_Cursor
  1070 ;;		_Lcd_Write_Integer
  1071 ;;		_Lcd_Write_String
  1072 ;;		_RunMotor
  1073 ;;		_StopMotor
  1074 ;;		___wmul
  1075 ;; This function is called by:
  1076 ;;		_main
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           
  1081                           ;psect for function _configurarHorario
  1082  01BB                     _configurarHorario:	
  1083                           
  1084                           ;main.c: 85:     buffer = 0;
  1085                           
  1086                           ;incstack = 0
  1087                           ; Regs used in _configurarHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1088  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1089  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1090  01BD  01E5               	clrf	_buffer
  1091  01BE  01E6               	clrf	_buffer+1
  1092                           
  1093                           ;main.c: 86:     StopMotor();
  1094  01BF  120A  158A  21F1  120A  118A  	fcall	_StopMotor
  1095                           
  1096                           ;main.c: 88:     Lcd_Clear();
  1097  01C4  120A  158A  21F6  120A  118A  	fcall	_Lcd_Clear
  1098                           
  1099                           ;main.c: 89:     Lcd_Set_Cursor(1, 1);
  1100  01C9  01F4               	clrf	Lcd_Set_Cursor@b
  1101  01CA  0AF4               	incf	Lcd_Set_Cursor@b,f
  1102  01CB  3001               	movlw	1
  1103  01CC  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1104                           
  1105                           ;main.c: 90:     Lcd_Write_String("Adelante: ");
  1106  01D1  303B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1107  01D2  00F5               	movwf	Lcd_Write_String@a
  1108  01D3  3080               	movlw	128
  1109  01D4  00F6               	movwf	Lcd_Write_String@a+1
  1110  01D5  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1111                           
  1112                           ;main.c: 91:     Lcd_Set_Cursor(2, 1);
  1113  01DA  01F4               	clrf	Lcd_Set_Cursor@b
  1114  01DB  0AF4               	incf	Lcd_Set_Cursor@b,f
  1115  01DC  3002               	movlw	2
  1116  01DD  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1117                           
  1118                           ;main.c: 92:     Lcd_Write_String("0 Cm");
  1119  01E2  3062               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1120  01E3  00F5               	movwf	Lcd_Write_String@a
  1121  01E4  3080               	movlw	128
  1122  01E5  00F6               	movwf	Lcd_Write_String@a+1
  1123  01E6  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1124  01EB                     l2291:	
  1125                           
  1126                           ;main.c: 96:         keypress = KeyPadGetKey();
  1127  01EB  120A  158A  2561  120A  118A  	fcall	_KeyPadGetKey
  1128  01F0  0870               	movf	?_KeyPadGetKey,w
  1129  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1130  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1131  01F3  00D2               	movwf	??_configurarHorario
  1132  01F4  0852               	movf	??_configurarHorario,w
  1133  01F5  00E9               	movwf	_keypress
  1134                           
  1135                           ;main.c: 97:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1136  01F6  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1137  01F7  0084               	movwf	4
  1138  01F8  120A  158A  200A  120A  118A  	fcall	stringdir
  1139  01FD  00D2               	movwf	??_configurarHorario
  1140  01FE  120A  158A  200A  120A  118A  	fcall	stringdir
  1141  0203  00D3               	movwf	??_configurarHorario+1
  1142  0204  0869               	movf	_keypress,w
  1143  0205  00D4               	movwf	??_configurarHorario+2
  1144  0206  01D5               	clrf	??_configurarHorario+3
  1145  0207  0853               	movf	??_configurarHorario+1,w
  1146  0208  0655               	xorwf	??_configurarHorario+3,w
  1147  0209  1D03               	skipz
  1148  020A  2A0D               	goto	u2795
  1149  020B  0852               	movf	??_configurarHorario,w
  1150  020C  0654               	xorwf	??_configurarHorario+2,w
  1151  020D                     u2795:	
  1152  020D  1903               	skipnz
  1153  020E  2AA6               	goto	l2331
  1154                           
  1155                           ;main.c: 98:             key2 = keypress;
  1156  020F  0869               	movf	_keypress,w
  1157  0210  00D2               	movwf	??_configurarHorario
  1158  0211  01D3               	clrf	??_configurarHorario+1
  1159  0212  0852               	movf	??_configurarHorario,w
  1160  0213  00E7               	movwf	_key2
  1161  0214  0853               	movf	??_configurarHorario+1,w
  1162  0215  00E8               	movwf	_key2+1
  1163                           
  1164                           ;main.c: 99:             switch (key2) {
  1165  0216  2A8D               	goto	l2329
  1166  0217                     l2297:	
  1167                           
  1168                           ;main.c: 102:                     buffer = 0;
  1169  0217  01E5               	clrf	_buffer
  1170  0218  01E6               	clrf	_buffer+1
  1171                           
  1172                           ;main.c: 103:                     Lcd_Clear();
  1173  0219  120A  158A  21F6  120A  118A  	fcall	_Lcd_Clear
  1174                           
  1175                           ;main.c: 104:                     Lcd_Set_Cursor(1, 1);
  1176  021E  01F4               	clrf	Lcd_Set_Cursor@b
  1177  021F  0AF4               	incf	Lcd_Set_Cursor@b,f
  1178  0220  3001               	movlw	1
  1179  0221  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1180                           
  1181                           ;main.c: 105:                     Lcd_Write_String("Adelante: ");
  1182  0226  303B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1183  0227  00F5               	movwf	Lcd_Write_String@a
  1184  0228  3080               	movlw	128
  1185  0229  00F6               	movwf	Lcd_Write_String@a+1
  1186  022A  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1187                           
  1188                           ;main.c: 106:                     Lcd_Set_Cursor(2, 1);
  1189  022F  01F4               	clrf	Lcd_Set_Cursor@b
  1190  0230  0AF4               	incf	Lcd_Set_Cursor@b,f
  1191  0231  3002               	movlw	2
  1192  0232  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1193                           
  1194                           ;main.c: 107:                     Lcd_Write_String("0 Cm");
  1195  0237  3062               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1196  0238  00F5               	movwf	Lcd_Write_String@a
  1197  0239  3080               	movlw	128
  1198  023A  00F6               	movwf	Lcd_Write_String@a+1
  1199  023B  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1200                           
  1201                           ;main.c: 108:                     break;
  1202  0240  2AA6               	goto	l2331
  1203  0241                     l2309:	
  1204                           
  1205                           ;main.c: 114:                     Grados = 0;
  1206  0241  01E0               	clrf	_Grados
  1207  0242  01E1               	clrf	_Grados+1
  1208                           
  1209                           ;main.c: 115:                     CmHorario = buffer;
  1210  0243  0866               	movf	_buffer+1,w
  1211  0244  00DF               	movwf	_CmHorario+1
  1212  0245  0865               	movf	_buffer,w
  1213  0246  00DE               	movwf	_CmHorario
  1214                           
  1215                           ;main.c: 116:                     RunMotor();
  1216  0247  120A  158A  2201  120A  118A  	fcall	_RunMotor
  1217                           
  1218                           ;main.c: 117:                     if (CmHorario != 0) {
  1219  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1220  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1221  024E  085E               	movf	_CmHorario,w
  1222  024F  045F               	iorwf	_CmHorario+1,w
  1223  0250  1D03               	btfss	3,2
  1224  0251  0008               	return
  1225  0252  2AA6               	goto	l2331
  1226  0253                     l2319:	
  1227                           
  1228                           ;main.c: 126:                     buffer = (10 * buffer + key2);
  1229  0253  0866               	movf	_buffer+1,w
  1230  0254  00F1               	movwf	___wmul@multiplier+1
  1231  0255  0865               	movf	_buffer,w
  1232  0256  00F0               	movwf	___wmul@multiplier
  1233  0257  300A               	movlw	10
  1234  0258  00F2               	movwf	___wmul@multiplicand
  1235  0259  3000               	movlw	0
  1236  025A  00F3               	movwf	___wmul@multiplicand+1
  1237  025B  120A  158A  225A  120A  118A  	fcall	___wmul
  1238  0260  1283               	bcf	3,5	;RP0=0, select bank0
  1239  0261  1303               	bcf	3,6	;RP1=0, select bank0
  1240  0262  0867               	movf	_key2,w
  1241  0263  0770               	addwf	?___wmul,w
  1242  0264  00E5               	movwf	_buffer
  1243  0265  0868               	movf	_key2+1,w
  1244  0266  1803               	skipnc
  1245  0267  0A68               	incf	_key2+1,w
  1246  0268  0771               	addwf	?___wmul+1,w
  1247  0269  00E6               	movwf	_buffer+1
  1248                           
  1249                           ;main.c: 127:                     buffer -= 48;
  1250  026A  30D0               	movlw	208
  1251  026B  07E5               	addwf	_buffer,f
  1252  026C  1803               	skipnc
  1253  026D  0AE6               	incf	_buffer+1,f
  1254  026E  30FF               	movlw	255
  1255  026F  07E6               	addwf	_buffer+1,f
  1256                           
  1257                           ;main.c: 128:                     Lcd_Set_Cursor(2, 1);
  1258  0270  01F4               	clrf	Lcd_Set_Cursor@b
  1259  0271  0AF4               	incf	Lcd_Set_Cursor@b,f
  1260  0272  3002               	movlw	2
  1261  0273  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1262                           
  1263                           ;main.c: 129:                     Lcd_Write_Integer(buffer);
  1264  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1265  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1266  027A  0866               	movf	_buffer+1,w
  1267  027B  00C6               	movwf	Lcd_Write_Integer@a+1
  1268  027C  0865               	movf	_buffer,w
  1269  027D  00C5               	movwf	Lcd_Write_Integer@a
  1270  027E  120A  158A  220E  120A  118A  	fcall	_Lcd_Write_Integer
  1271                           
  1272                           ;main.c: 130:                     Lcd_Write_String(" Cm");
  1273  0283  3063               	movlw	(low (((STR_3+1)-__stringbase)| (0+32768)))& (0+255)
  1274  0284  00F5               	movwf	Lcd_Write_String@a
  1275  0285  3080               	movlw	128
  1276  0286  00F6               	movwf	Lcd_Write_String@a+1
  1277  0287  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1278                           
  1279                           ;main.c: 131:             }
  1280  028C  2AA6               	goto	l2331
  1281  028D                     l2329:	
  1282                           
  1283                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1284                           ; Switch size 1, requested type "simple"
  1285                           ; Number of cases is 1, Range of values is 0 to 0
  1286                           ; switch strategies available:
  1287                           ; Name         Instructions Cycles
  1288                           ; simple_byte            4     3 (average)
  1289                           ; direct_byte           11     8 (fixed)
  1290                           ; jumptable            260     6 (fixed)
  1291                           ;	Chosen strategy is simple_byte
  1292  028D  0868               	movf	_key2+1,w
  1293  028E  3A00               	xorlw	0	; case 0
  1294  028F  1903               	skipnz
  1295  0290  2A92               	goto	l2569
  1296  0291  2A53               	goto	l2319
  1297  0292                     l2569:	
  1298                           
  1299                           ; Switch size 1, requested type "simple"
  1300                           ; Number of cases is 6, Range of values is 35 to 68
  1301                           ; switch strategies available:
  1302                           ; Name         Instructions Cycles
  1303                           ; simple_byte           19    10 (average)
  1304                           ; direct_byte          113    11 (fixed)
  1305                           ; jumptable            263     9 (fixed)
  1306                           ;	Chosen strategy is simple_byte
  1307  0292  0867               	movf	_key2,w
  1308  0293  3A23               	xorlw	35	; case 35
  1309  0294  1903               	skipnz
  1310  0295  2AA6               	goto	l2331
  1311  0296  3A09               	xorlw	9	; case 42
  1312  0297  1903               	skipnz
  1313  0298  2AA6               	goto	l2331
  1314  0299  3A6B               	xorlw	107	; case 65
  1315  029A  1903               	skipnz
  1316  029B  2A17               	goto	l2297
  1317  029C  3A03               	xorlw	3	; case 66
  1318  029D  1903               	skipnz
  1319  029E  2AA6               	goto	l2331
  1320  029F  3A01               	xorlw	1	; case 67
  1321  02A0  1903               	skipnz
  1322  02A1  2AA6               	goto	l2331
  1323  02A2  3A07               	xorlw	7	; case 68
  1324  02A3  1903               	skipnz
  1325  02A4  2A41               	goto	l2309
  1326  02A5  2A53               	goto	l2319
  1327  02A6                     l2331:	
  1328                           
  1329                           ;main.c: 133:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1330  02A6  30C7               	movlw	199
  1331  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  1332  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  1333  02A9  00D2               	movwf	??_configurarHorario
  1334  02AA                     u2927:	
  1335  02AA  2AAB               	nop2
  1336  02AB  0BD2               	decfsz	??_configurarHorario,f
  1337  02AC  2AAA               	goto	u2927
  1338  02AD  2AAE               	nop2
  1339  02AE  29EB               	goto	l2291
  1340  02AF                     __end_of_configurarHorario:	
  1341                           
  1342                           	psect	text2
  1343  00C7                     __ptext2:	
  1344 ;; *************** function _configurarAntiHorario *****************
  1345 ;; Defined at:
  1346 ;;		line 137 in file "main.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;		None
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  2   50[None  ] int 
  1353 ;; Registers used:
  1354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1360 ;;      Params:         0       0       0       0       0
  1361 ;;      Locals:         0       0       0       0       0
  1362 ;;      Temps:          0       4       0       0       0
  1363 ;;      Totals:         0       4       0       0       0
  1364 ;;Total ram usage:        4 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; Hardware stack levels required when called:    4
  1367 ;; This function calls:
  1368 ;;		_KeyPadGetKey
  1369 ;;		_Lcd_Clear
  1370 ;;		_Lcd_Set_Cursor
  1371 ;;		_Lcd_Write_Integer
  1372 ;;		_Lcd_Write_String
  1373 ;;		_RunMotor
  1374 ;;		_StopMotor
  1375 ;;		___wmul
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _configurarAntiHorario
  1383  00C7                     _configurarAntiHorario:	
  1384                           
  1385                           ;main.c: 139:     buffer = 0;
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in _configurarAntiHorario: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  1389  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1390  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1391  00C9  01E5               	clrf	_buffer
  1392  00CA  01E6               	clrf	_buffer+1
  1393                           
  1394                           ;main.c: 140:     StopMotor();
  1395  00CB  120A  158A  21F1  120A  118A  	fcall	_StopMotor
  1396                           
  1397                           ;main.c: 142:     Lcd_Clear();
  1398  00D0  120A  158A  21F6  120A  118A  	fcall	_Lcd_Clear
  1399                           
  1400                           ;main.c: 143:     Lcd_Set_Cursor(1, 1);
  1401  00D5  01F4               	clrf	Lcd_Set_Cursor@b
  1402  00D6  0AF4               	incf	Lcd_Set_Cursor@b,f
  1403  00D7  3001               	movlw	1
  1404  00D8  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1405                           
  1406                           ;main.c: 144:     Lcd_Write_String("Atras: ");
  1407  00DD  305A               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1408  00DE  00F5               	movwf	Lcd_Write_String@a
  1409  00DF  3080               	movlw	128
  1410  00E0  00F6               	movwf	Lcd_Write_String@a+1
  1411  00E1  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1412                           
  1413                           ;main.c: 145:     Lcd_Set_Cursor(2, 1);
  1414  00E6  01F4               	clrf	Lcd_Set_Cursor@b
  1415  00E7  0AF4               	incf	Lcd_Set_Cursor@b,f
  1416  00E8  3002               	movlw	2
  1417  00E9  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1418                           
  1419                           ;main.c: 146:     Lcd_Write_String("0 Cm");
  1420  00EE  3062               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1421  00EF  00F5               	movwf	Lcd_Write_String@a
  1422  00F0  3080               	movlw	128
  1423  00F1  00F6               	movwf	Lcd_Write_String@a+1
  1424  00F2  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1425  00F7                     l2351:	
  1426                           
  1427                           ;main.c: 150:         keypress = KeyPadGetKey();
  1428  00F7  120A  158A  2561  120A  118A  	fcall	_KeyPadGetKey
  1429  00FC  0870               	movf	?_KeyPadGetKey,w
  1430  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1431  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1432  00FF  00D2               	movwf	??_configurarAntiHorario
  1433  0100  0852               	movf	??_configurarAntiHorario,w
  1434  0101  00E9               	movwf	_keypress
  1435                           
  1436                           ;main.c: 151:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1437  0102  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1438  0103  0084               	movwf	4
  1439  0104  120A  158A  200A  120A  118A  	fcall	stringdir
  1440  0109  00D2               	movwf	??_configurarAntiHorario
  1441  010A  120A  158A  200A  120A  118A  	fcall	stringdir
  1442  010F  00D3               	movwf	??_configurarAntiHorario+1
  1443  0110  0869               	movf	_keypress,w
  1444  0111  00D4               	movwf	??_configurarAntiHorario+2
  1445  0112  01D5               	clrf	??_configurarAntiHorario+3
  1446  0113  0853               	movf	??_configurarAntiHorario+1,w
  1447  0114  0655               	xorwf	??_configurarAntiHorario+3,w
  1448  0115  1D03               	skipz
  1449  0116  2919               	goto	u2815
  1450  0117  0852               	movf	??_configurarAntiHorario,w
  1451  0118  0654               	xorwf	??_configurarAntiHorario+2,w
  1452  0119                     u2815:	
  1453  0119  1903               	skipnz
  1454  011A  29B2               	goto	l2391
  1455                           
  1456                           ;main.c: 152:             key2 = keypress;
  1457  011B  0869               	movf	_keypress,w
  1458  011C  00D2               	movwf	??_configurarAntiHorario
  1459  011D  01D3               	clrf	??_configurarAntiHorario+1
  1460  011E  0852               	movf	??_configurarAntiHorario,w
  1461  011F  00E7               	movwf	_key2
  1462  0120  0853               	movf	??_configurarAntiHorario+1,w
  1463  0121  00E8               	movwf	_key2+1
  1464                           
  1465                           ;main.c: 153:             switch (key2) {
  1466  0122  2999               	goto	l2389
  1467  0123                     l2357:	
  1468                           
  1469                           ;main.c: 157:                     buffer = 0;
  1470  0123  01E5               	clrf	_buffer
  1471  0124  01E6               	clrf	_buffer+1
  1472                           
  1473                           ;main.c: 158:                     Lcd_Clear();
  1474  0125  120A  158A  21F6  120A  118A  	fcall	_Lcd_Clear
  1475                           
  1476                           ;main.c: 159:                     Lcd_Set_Cursor(1, 1);
  1477  012A  01F4               	clrf	Lcd_Set_Cursor@b
  1478  012B  0AF4               	incf	Lcd_Set_Cursor@b,f
  1479  012C  3001               	movlw	1
  1480  012D  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1481                           
  1482                           ;main.c: 160:                     Lcd_Write_String("Atras: ");
  1483  0132  305A               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1484  0133  00F5               	movwf	Lcd_Write_String@a
  1485  0134  3080               	movlw	128
  1486  0135  00F6               	movwf	Lcd_Write_String@a+1
  1487  0136  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1488                           
  1489                           ;main.c: 161:                     Lcd_Set_Cursor(2, 1);
  1490  013B  01F4               	clrf	Lcd_Set_Cursor@b
  1491  013C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1492  013D  3002               	movlw	2
  1493  013E  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1494                           
  1495                           ;main.c: 162:                     Lcd_Write_String("0 Cm");
  1496  0143  3062               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1497  0144  00F5               	movwf	Lcd_Write_String@a
  1498  0145  3080               	movlw	128
  1499  0146  00F6               	movwf	Lcd_Write_String@a+1
  1500  0147  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1501                           
  1502                           ;main.c: 163:                     break;
  1503  014C  29B2               	goto	l2391
  1504  014D                     l2369:	
  1505                           
  1506                           ;main.c: 167:                     Grados = 0;
  1507  014D  01E0               	clrf	_Grados
  1508  014E  01E1               	clrf	_Grados+1
  1509                           
  1510                           ;main.c: 168:                     CmAntiHorario = buffer;
  1511  014F  0866               	movf	_buffer+1,w
  1512  0150  00DD               	movwf	_CmAntiHorario+1
  1513  0151  0865               	movf	_buffer,w
  1514  0152  00DC               	movwf	_CmAntiHorario
  1515                           
  1516                           ;main.c: 169:                     RunMotor();
  1517  0153  120A  158A  2201  120A  118A  	fcall	_RunMotor
  1518                           
  1519                           ;main.c: 170:                     if (CmAntiHorario != 0) {
  1520  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1521  0159  1303               	bcf	3,6	;RP1=0, select bank0
  1522  015A  085C               	movf	_CmAntiHorario,w
  1523  015B  045D               	iorwf	_CmAntiHorario+1,w
  1524  015C  1D03               	btfss	3,2
  1525  015D  0008               	return
  1526  015E  29B2               	goto	l2391
  1527  015F                     l2379:	
  1528                           
  1529                           ;main.c: 179:                     buffer = (10 * buffer + key2);
  1530  015F  0866               	movf	_buffer+1,w
  1531  0160  00F1               	movwf	___wmul@multiplier+1
  1532  0161  0865               	movf	_buffer,w
  1533  0162  00F0               	movwf	___wmul@multiplier
  1534  0163  300A               	movlw	10
  1535  0164  00F2               	movwf	___wmul@multiplicand
  1536  0165  3000               	movlw	0
  1537  0166  00F3               	movwf	___wmul@multiplicand+1
  1538  0167  120A  158A  225A  120A  118A  	fcall	___wmul
  1539  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1540  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1541  016E  0867               	movf	_key2,w
  1542  016F  0770               	addwf	?___wmul,w
  1543  0170  00E5               	movwf	_buffer
  1544  0171  0868               	movf	_key2+1,w
  1545  0172  1803               	skipnc
  1546  0173  0A68               	incf	_key2+1,w
  1547  0174  0771               	addwf	?___wmul+1,w
  1548  0175  00E6               	movwf	_buffer+1
  1549                           
  1550                           ;main.c: 180:                     buffer -= 48;
  1551  0176  30D0               	movlw	208
  1552  0177  07E5               	addwf	_buffer,f
  1553  0178  1803               	skipnc
  1554  0179  0AE6               	incf	_buffer+1,f
  1555  017A  30FF               	movlw	255
  1556  017B  07E6               	addwf	_buffer+1,f
  1557                           
  1558                           ;main.c: 181:                     Lcd_Set_Cursor(2, 1);
  1559  017C  01F4               	clrf	Lcd_Set_Cursor@b
  1560  017D  0AF4               	incf	Lcd_Set_Cursor@b,f
  1561  017E  3002               	movlw	2
  1562  017F  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  1563                           
  1564                           ;main.c: 182:                     Lcd_Write_Integer(buffer);
  1565  0184  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0185  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0186  0866               	movf	_buffer+1,w
  1568  0187  00C6               	movwf	Lcd_Write_Integer@a+1
  1569  0188  0865               	movf	_buffer,w
  1570  0189  00C5               	movwf	Lcd_Write_Integer@a
  1571  018A  120A  158A  220E  120A  118A  	fcall	_Lcd_Write_Integer
  1572                           
  1573                           ;main.c: 183:                     Lcd_Write_String(" Cm");
  1574  018F  3063               	movlw	(low (((STR_3+1)-__stringbase)| (0+32768)))& (0+255)
  1575  0190  00F5               	movwf	Lcd_Write_String@a
  1576  0191  3080               	movlw	128
  1577  0192  00F6               	movwf	Lcd_Write_String@a+1
  1578  0193  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  1579                           
  1580                           ;main.c: 184:             }
  1581  0198  29B2               	goto	l2391
  1582  0199                     l2389:	
  1583                           
  1584                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1585                           ; Switch size 1, requested type "simple"
  1586                           ; Number of cases is 1, Range of values is 0 to 0
  1587                           ; switch strategies available:
  1588                           ; Name         Instructions Cycles
  1589                           ; simple_byte            4     3 (average)
  1590                           ; direct_byte           11     8 (fixed)
  1591                           ; jumptable            260     6 (fixed)
  1592                           ;	Chosen strategy is simple_byte
  1593  0199  0868               	movf	_key2+1,w
  1594  019A  3A00               	xorlw	0	; case 0
  1595  019B  1903               	skipnz
  1596  019C  299E               	goto	l2571
  1597  019D  295F               	goto	l2379
  1598  019E                     l2571:	
  1599                           
  1600                           ; Switch size 1, requested type "simple"
  1601                           ; Number of cases is 6, Range of values is 35 to 68
  1602                           ; switch strategies available:
  1603                           ; Name         Instructions Cycles
  1604                           ; simple_byte           19    10 (average)
  1605                           ; direct_byte          113    11 (fixed)
  1606                           ; jumptable            263     9 (fixed)
  1607                           ;	Chosen strategy is simple_byte
  1608  019E  0867               	movf	_key2,w
  1609  019F  3A23               	xorlw	35	; case 35
  1610  01A0  1903               	skipnz
  1611  01A1  29B2               	goto	l2391
  1612  01A2  3A09               	xorlw	9	; case 42
  1613  01A3  1903               	skipnz
  1614  01A4  29B2               	goto	l2391
  1615  01A5  3A6B               	xorlw	107	; case 65
  1616  01A6  1903               	skipnz
  1617  01A7  29B2               	goto	l2391
  1618  01A8  3A03               	xorlw	3	; case 66
  1619  01A9  1903               	skipnz
  1620  01AA  2923               	goto	l2357
  1621  01AB  3A01               	xorlw	1	; case 67
  1622  01AC  1903               	skipnz
  1623  01AD  29B2               	goto	l2391
  1624  01AE  3A07               	xorlw	7	; case 68
  1625  01AF  1903               	skipnz
  1626  01B0  294D               	goto	l2369
  1627  01B1  295F               	goto	l2379
  1628  01B2                     l2391:	
  1629                           
  1630                           ;main.c: 186:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1631  01B2  30C7               	movlw	199
  1632  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1633  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1634  01B5  00D2               	movwf	??_configurarAntiHorario
  1635  01B6                     u2937:	
  1636  01B6  29B7               	nop2
  1637  01B7  0BD2               	decfsz	??_configurarAntiHorario,f
  1638  01B8  29B6               	goto	u2937
  1639  01B9  29BA               	nop2
  1640  01BA  28F7               	goto	l2351
  1641  01BB                     __end_of_configurarAntiHorario:	
  1642                           
  1643                           	psect	text3
  1644  0A5A                     __ptext3:	
  1645 ;; *************** function ___wmul *****************
  1646 ;; Defined at:
  1647 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  multiplier      2    0[COMMON] unsigned int 
  1650 ;;  multiplicand    2    2[COMMON] unsigned int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  product         2    4[COMMON] unsigned int 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  2    0[COMMON] unsigned int 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1662 ;;      Params:         4       0       0       0       0
  1663 ;;      Locals:         2       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0
  1665 ;;      Totals:         6       0       0       0       0
  1666 ;;Total ram usage:        6 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_configurarHorario
  1672 ;;		_configurarAntiHorario
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function ___wmul
  1678  0A5A                     ___wmul:	
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1682  0A5A  01F4               	clrf	___wmul@product
  1683  0A5B  01F5               	clrf	___wmul@product+1
  1684  0A5C                     l2199:	
  1685  0A5C  1C70               	btfss	___wmul@multiplier,0
  1686  0A5D  2A64               	goto	l325
  1687  0A5E  0872               	movf	___wmul@multiplicand,w
  1688  0A5F  07F4               	addwf	___wmul@product,f
  1689  0A60  1803               	skipnc
  1690  0A61  0AF5               	incf	___wmul@product+1,f
  1691  0A62  0873               	movf	___wmul@multiplicand+1,w
  1692  0A63  07F5               	addwf	___wmul@product+1,f
  1693  0A64                     l325:	
  1694  0A64  3001               	movlw	1
  1695  0A65                     u2635:	
  1696  0A65  1003               	clrc
  1697  0A66  0DF2               	rlf	___wmul@multiplicand,f
  1698  0A67  0DF3               	rlf	___wmul@multiplicand+1,f
  1699  0A68  3EFF               	addlw	-1
  1700  0A69  1D03               	skipz
  1701  0A6A  2A65               	goto	u2635
  1702  0A6B  3001               	movlw	1
  1703  0A6C                     u2645:	
  1704  0A6C  1003               	clrc
  1705  0A6D  0CF1               	rrf	___wmul@multiplier+1,f
  1706  0A6E  0CF0               	rrf	___wmul@multiplier,f
  1707  0A6F  3EFF               	addlw	-1
  1708  0A70  1D03               	skipz
  1709  0A71  2A6C               	goto	u2645
  1710  0A72  0870               	movf	___wmul@multiplier,w
  1711  0A73  0471               	iorwf	___wmul@multiplier+1,w
  1712  0A74  1D03               	btfss	3,2
  1713  0A75  2A5C               	goto	l2199
  1714  0A76  0875               	movf	___wmul@product+1,w
  1715  0A77  00F1               	movwf	?___wmul+1
  1716  0A78  0874               	movf	___wmul@product,w
  1717  0A79  00F0               	movwf	?___wmul
  1718  0A7A  0008               	return
  1719  0A7B                     __end_of___wmul:	
  1720                           
  1721                           	psect	text4
  1722  09F1                     __ptext4:	
  1723 ;; *************** function _StopMotor *****************
  1724 ;; Defined at:
  1725 ;;		line 77 in file "main.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;		None
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  2   46[None  ] int 
  1732 ;; Registers used:
  1733 ;;		None
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       0       0       0       0
  1740 ;;      Locals:         0       0       0       0       0
  1741 ;;      Temps:          0       0       0       0       0
  1742 ;;      Totals:         0       0       0       0       0
  1743 ;;Total ram usage:        0 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;;		_configurarHorario
  1750 ;;		_configurarAntiHorario
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           
  1755                           ;psect for function _StopMotor
  1756  09F1                     _StopMotor:	
  1757                           
  1758                           ;main.c: 78:     RC1 = 0;
  1759                           
  1760                           ;incstack = 0
  1761                           ; Regs used in _StopMotor: []
  1762  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  1763  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  1764  09F3  1087               	bcf	7,1	;volatile
  1765                           
  1766                           ;main.c: 79:     RC0 = 0;
  1767  09F4  1007               	bcf	7,0	;volatile
  1768                           
  1769                           ;main.c: 80:     return 0;;	Return value of _StopMotor is never used
  1770  09F5  0008               	return
  1771  09F6                     __end_of_StopMotor:	
  1772                           
  1773                           	psect	text5
  1774  0A01                     __ptext5:	
  1775 ;; *************** function _RunMotor *****************
  1776 ;; Defined at:
  1777 ;;		line 69 in file "main.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  2   52[None  ] int 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1791 ;;      Params:         0       0       0       0       0
  1792 ;;      Locals:         0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0
  1794 ;;      Totals:         0       0       0       0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;;		_configurarHorario
  1802 ;;		_configurarAntiHorario
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           
  1807                           ;psect for function _RunMotor
  1808  0A01                     _RunMotor:	
  1809                           
  1810                           ;main.c: 70:     if (CmAntiHorario != 0 && CmHorario != 0) {
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _RunMotor: [wreg+status,2+status,0]
  1814  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0A03  085C               	movf	_CmAntiHorario,w
  1817  0A04  045D               	iorwf	_CmAntiHorario+1,w
  1818  0A05  1903               	btfsc	3,2
  1819  0A06  0008               	return
  1820  0A07  085E               	movf	_CmHorario,w
  1821  0A08  045F               	iorwf	_CmHorario+1,w
  1822  0A09  1903               	btfsc	3,2
  1823  0A0A  0008               	return
  1824                           
  1825                           ;main.c: 71:         RC0 = 1;
  1826  0A0B  1407               	bsf	7,0	;volatile
  1827                           
  1828                           ;main.c: 72:         RC1 = 0;
  1829  0A0C  1087               	bcf	7,1	;volatile
  1830  0A0D  0008               	return
  1831  0A0E                     __end_of_RunMotor:	
  1832                           
  1833                           	psect	text6
  1834  0D61                     __ptext6:	
  1835 ;; *************** function _KeyPadGetKey *****************
  1836 ;; Defined at:
  1837 ;;		line 16 in file "./KeyPad.h"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  row             1    4[COMMON] unsigned char 
  1842 ;;  key             1    3[COMMON] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  2    0[COMMON] int 
  1845 ;; Registers used:
  1846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1852 ;;      Params:         2       0       0       0       0
  1853 ;;      Locals:         2       0       0       0       0
  1854 ;;      Temps:          1       0       0       0       0
  1855 ;;      Totals:         5       0       0       0       0
  1856 ;;Total ram usage:        5 bytes
  1857 ;; Hardware stack levels used:    2
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;;		_configurarHorario
  1863 ;;		_configurarAntiHorario
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           
  1868                           ;psect for function _KeyPadGetKey
  1869  0D61                     _KeyPadGetKey:	
  1870                           
  1871                           ;./KeyPad.h: 18:     char key = 0, row;
  1872                           
  1873                           ;incstack = 0
  1874                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  1875  0D61  01F3               	clrf	KeyPadGetKey@key
  1876                           
  1877                           ;./KeyPad.h: 20:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  1878  0D62  01F4               	clrf	KeyPadGetKey@row
  1879  0D63  0AF4               	incf	KeyPadGetKey@row,f
  1880  0D64                     l116:	
  1881                           
  1882                           ;./KeyPad.h: 21:         {;./KeyPad.h: 22:             RA0 = (row & 0x0001) >> 0;
  1883  0D64  1C74               	btfss	KeyPadGetKey@row,0
  1884  0D65  2D6A               	goto	u2390
  1885  0D66  1283               	bcf	3,5	;RP0=0, select bank0
  1886  0D67  1303               	bcf	3,6	;RP1=0, select bank0
  1887  0D68  1405               	bsf	5,0	;volatile
  1888  0D69  2D6D               	goto	l2123
  1889  0D6A                     u2390:	
  1890  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
  1891  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  1892  0D6C  1005               	bcf	5,0	;volatile
  1893  0D6D                     l2123:	
  1894                           
  1895                           ;./KeyPad.h: 23:             RA1 = (row & 0x0002) >> 1;
  1896  0D6D  0874               	movf	KeyPadGetKey@row,w
  1897  0D6E  00F2               	movwf	??_KeyPadGetKey
  1898  0D6F  3001               	movlw	1
  1899  0D70                     u2415:	
  1900  0D70  1003               	clrc
  1901  0D71  0CF2               	rrf	??_KeyPadGetKey,f
  1902  0D72  3EFF               	addlw	-1
  1903  0D73  1D03               	skipz
  1904  0D74  2D70               	goto	u2415
  1905  0D75  1C72               	btfss	??_KeyPadGetKey,0
  1906  0D76  2D7B               	goto	u2420
  1907  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  1908  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  1909  0D79  1485               	bsf	5,1	;volatile
  1910  0D7A  2D7E               	goto	u2434
  1911  0D7B                     u2420:	
  1912  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  1913  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0D7D  1085               	bcf	5,1	;volatile
  1915  0D7E                     u2434:	
  1916                           
  1917                           ;./KeyPad.h: 24:             RA2 = (row & 0x0004) >> 2;
  1918  0D7E  0874               	movf	KeyPadGetKey@row,w
  1919  0D7F  00F2               	movwf	??_KeyPadGetKey
  1920  0D80  3002               	movlw	2
  1921  0D81                     u2445:	
  1922  0D81  1003               	clrc
  1923  0D82  0CF2               	rrf	??_KeyPadGetKey,f
  1924  0D83  3EFF               	addlw	-1
  1925  0D84  1D03               	skipz
  1926  0D85  2D81               	goto	u2445
  1927  0D86  1C72               	btfss	??_KeyPadGetKey,0
  1928  0D87  2D8C               	goto	u2450
  1929  0D88  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0D89  1303               	bcf	3,6	;RP1=0, select bank0
  1931  0D8A  1505               	bsf	5,2	;volatile
  1932  0D8B  2D8F               	goto	u2464
  1933  0D8C                     u2450:	
  1934  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
  1935  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
  1936  0D8E  1105               	bcf	5,2	;volatile
  1937  0D8F                     u2464:	
  1938                           
  1939                           ;./KeyPad.h: 25:             RA3 = (row & 0x0008) >> 3;
  1940  0D8F  0874               	movf	KeyPadGetKey@row,w
  1941  0D90  00F2               	movwf	??_KeyPadGetKey
  1942  0D91  3003               	movlw	3
  1943  0D92                     u2475:	
  1944  0D92  1003               	clrc
  1945  0D93  0CF2               	rrf	??_KeyPadGetKey,f
  1946  0D94  3EFF               	addlw	-1
  1947  0D95  1D03               	skipz
  1948  0D96  2D92               	goto	u2475
  1949  0D97  1C72               	btfss	??_KeyPadGetKey,0
  1950  0D98  2D9D               	goto	u2480
  1951  0D99  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0D9A  1303               	bcf	3,6	;RP1=0, select bank0
  1953  0D9B  1585               	bsf	5,3	;volatile
  1954  0D9C  2DA0               	goto	l2125
  1955  0D9D                     u2480:	
  1956  0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  1957  0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0D9F  1185               	bcf	5,3	;volatile
  1959  0DA0                     l2125:	
  1960                           
  1961                           ;./KeyPad.h: 26:             _delay((unsigned long)((1)*(4000000/4000.0)));
  1962  0DA0  30C7               	movlw	199
  1963  0DA1  00F2               	movwf	??_KeyPadGetKey
  1964  0DA2                     u2947:	
  1965  0DA2  2DA3               	nop2
  1966  0DA3  0BF2               	decfsz	??_KeyPadGetKey,f
  1967  0DA4  2DA2               	goto	u2947
  1968  0DA5  2DA6               	nop2
  1969  0DA6  2DA7               	nop2
  1970                           
  1971                           ;./KeyPad.h: 27:         };./KeyPad.h: 29:         if (RA4)break;
  1972  0DA7  1283               	bcf	3,5	;RP0=0, select bank0
  1973  0DA8  1303               	bcf	3,6	;RP1=0, select bank0
  1974  0DA9  1A05               	btfsc	5,4	;volatile
  1975  0DAA  2DC7               	goto	l117
  1976                           
  1977                           ;./KeyPad.h: 30:         key++;
  1978  0DAB  3001               	movlw	1
  1979  0DAC  00F2               	movwf	??_KeyPadGetKey
  1980  0DAD  0872               	movf	??_KeyPadGetKey,w
  1981  0DAE  07F3               	addwf	KeyPadGetKey@key,f
  1982                           
  1983                           ;./KeyPad.h: 31:         if (RA5)break;
  1984  0DAF  1A85               	btfsc	5,5	;volatile
  1985  0DB0  2DC7               	goto	l117
  1986                           
  1987                           ;./KeyPad.h: 32:         key++;
  1988  0DB1  3001               	movlw	1
  1989  0DB2  00F2               	movwf	??_KeyPadGetKey
  1990  0DB3  0872               	movf	??_KeyPadGetKey,w
  1991  0DB4  07F3               	addwf	KeyPadGetKey@key,f
  1992                           
  1993                           ;./KeyPad.h: 33:         if (RA6)break;
  1994  0DB5  1B05               	btfsc	5,6	;volatile
  1995  0DB6  2DC7               	goto	l117
  1996                           
  1997                           ;./KeyPad.h: 34:         key++;
  1998  0DB7  3001               	movlw	1
  1999  0DB8  00F2               	movwf	??_KeyPadGetKey
  2000  0DB9  0872               	movf	??_KeyPadGetKey,w
  2001  0DBA  07F3               	addwf	KeyPadGetKey@key,f
  2002                           
  2003                           ;./KeyPad.h: 35:         if (RA7)break;
  2004  0DBB  1B85               	btfsc	5,7	;volatile
  2005  0DBC  2DC7               	goto	l117
  2006                           
  2007                           ;./KeyPad.h: 36:         key++;
  2008  0DBD  3001               	movlw	1
  2009  0DBE  00F2               	movwf	??_KeyPadGetKey
  2010  0DBF  0872               	movf	??_KeyPadGetKey,w
  2011  0DC0  07F3               	addwf	KeyPadGetKey@key,f
  2012                           
  2013                           ;./KeyPad.h: 37:     }
  2014  0DC1  1003               	clrc
  2015  0DC2  0DF4               	rlf	KeyPadGetKey@row,f
  2016  0DC3  3010               	movlw	16
  2017  0DC4  0274               	subwf	KeyPadGetKey@row,w
  2018  0DC5  1C03               	skipc
  2019  0DC6  2D64               	goto	l116
  2020  0DC7                     l117:	
  2021                           
  2022                           ;./KeyPad.h: 38:     RA0 = 0;
  2023  0DC7  1005               	bcf	5,0	;volatile
  2024                           
  2025                           ;./KeyPad.h: 39:     RA1 = 0;
  2026  0DC8  1085               	bcf	5,1	;volatile
  2027                           
  2028                           ;./KeyPad.h: 40:     RA2 = 0;
  2029  0DC9  1105               	bcf	5,2	;volatile
  2030                           
  2031                           ;./KeyPad.h: 41:     RA3 = 0;
  2032  0DCA  1185               	bcf	5,3	;volatile
  2033                           
  2034                           ;./KeyPad.h: 42:     if (key != old_key) {
  2035  0DCB  0873               	movf	KeyPadGetKey@key,w
  2036  0DCC  0663               	xorwf	_old_key,w
  2037  0DCD  1903               	skipnz
  2038  0DCE  2DE3               	goto	l2165
  2039                           
  2040                           ;./KeyPad.h: 43:         old_key = key;
  2041  0DCF  0873               	movf	KeyPadGetKey@key,w
  2042  0DD0  00F2               	movwf	??_KeyPadGetKey
  2043  0DD1  0872               	movf	??_KeyPadGetKey,w
  2044  0DD2  00E3               	movwf	_old_key
  2045                           
  2046                           ;./KeyPad.h: 44:         return keyPadMatrix[ key ];
  2047  0DD3  0873               	movf	KeyPadGetKey@key,w
  2048  0DD4  00F2               	movwf	??_KeyPadGetKey
  2049  0DD5  0772               	addwf	??_KeyPadGetKey,w
  2050  0DD6  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  2051  0DD7  0084               	movwf	4
  2052  0DD8  120A  158A  200A  120A  158A  	fcall	stringdir
  2053  0DDD  00F0               	movwf	?_KeyPadGetKey
  2054  0DDE  120A  158A  200A   	fcall	stringdir
  2055  0DE1  00F1               	movwf	?_KeyPadGetKey+1
  2056  0DE2  0008               	return
  2057  0DE3                     l2165:	
  2058                           
  2059                           ;./KeyPad.h: 46:         return keyPadMatrix[ 0x10 ];
  2060  0DE3  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  2061  0DE4  0084               	movwf	4
  2062  0DE5  120A  158A  200A  120A  158A  	fcall	stringdir
  2063  0DEA  00F0               	movwf	?_KeyPadGetKey
  2064  0DEB  120A  158A  200A   	fcall	stringdir
  2065  0DEE  00F1               	movwf	?_KeyPadGetKey+1
  2066  0DEF  0008               	return
  2067  0DF0                     __end_of_KeyPadGetKey:	
  2068                           
  2069                           	psect	text7
  2070  0006                     __ptext7:	
  2071 ;; *************** function _PinsInit *****************
  2072 ;; Defined at:
  2073 ;;		line 52 in file "./Config.h"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2087 ;;      Params:         0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0
  2090 ;;      Totals:         0       0       0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           
  2101                           ;psect for function _PinsInit
  2102  0006                     _PinsInit:	
  2103                           
  2104                           ;incstack = 0
  2105                           ; Regs used in _PinsInit: [wreg+status,2]
  2106  0006  1683               	bsf	3,5	;RP0=1, select bank3
  2107  0007  1703               	bsf	3,6	;RP1=1, select bank3
  2108  0008  0188               	clrf	8	;volatile
  2109  0009  0189               	clrf	9	;volatile
  2110  000A  3001               	movlw	1
  2111  000B  1683               	bsf	3,5	;RP0=1, select bank1
  2112  000C  1303               	bcf	3,6	;RP1=0, select bank1
  2113  000D  0086               	movwf	6	;volatile
  2114  000E  0187               	clrf	7	;volatile
  2115  000F  30F0               	movlw	240
  2116  0010  0085               	movwf	5	;volatile
  2117  0011  1283               	bcf	3,5	;RP0=0, select bank0
  2118  0012  1303               	bcf	3,6	;RP1=0, select bank0
  2119  0013  0185               	clrf	5	;volatile
  2120  0014  0008               	return
  2121  0015                     __end_of_PinsInit:	
  2122                           
  2123                           	psect	text8
  2124  0C14                     __ptext8:	
  2125 ;; *************** function _Lcd_Init *****************
  2126 ;; Defined at:
  2127 ;;		line 57 in file "./lcd.h"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;		None
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      void 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, status,0, pclath, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2141 ;;      Params:         0       0       0       0       0
  2142 ;;      Locals:         0       0       0       0       0
  2143 ;;      Temps:          2       0       0       0       0
  2144 ;;      Totals:         2       0       0       0       0
  2145 ;;Total ram usage:        2 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    2
  2148 ;; This function calls:
  2149 ;;		_Lcd_Cmd
  2150 ;;		_Lcd_Port
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           
  2157                           ;psect for function _Lcd_Init
  2158  0C14                     _Lcd_Init:	
  2159                           
  2160                           ;./lcd.h: 58:     Lcd_Port(0x00);
  2161                           
  2162                           ;incstack = 0
  2163                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2164  0C14  3000               	movlw	0
  2165  0C15  120A  158A  2226  120A  158A  	fcall	_Lcd_Port
  2166                           
  2167                           ;./lcd.h: 59:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2168  0C1A  301A               	movlw	26
  2169  0C1B  00F5               	movwf	??_Lcd_Init+1
  2170  0C1C  30F8               	movlw	248
  2171  0C1D  00F4               	movwf	??_Lcd_Init
  2172  0C1E                     u2957:	
  2173  0C1E  0BF4               	decfsz	??_Lcd_Init,f
  2174  0C1F  2C1E               	goto	u2957
  2175  0C20  0BF5               	decfsz	??_Lcd_Init+1,f
  2176  0C21  2C1E               	goto	u2957
  2177  0C22  0000               	nop
  2178                           
  2179                           ;./lcd.h: 60:     Lcd_Cmd(0x03);
  2180  0C23  3003               	movlw	3
  2181  0C24  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2182                           
  2183                           ;./lcd.h: 61:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2184  0C29  3007               	movlw	7
  2185  0C2A  00F5               	movwf	??_Lcd_Init+1
  2186  0C2B  307D               	movlw	125
  2187  0C2C  00F4               	movwf	??_Lcd_Init
  2188  0C2D                     u2967:	
  2189  0C2D  0BF4               	decfsz	??_Lcd_Init,f
  2190  0C2E  2C2D               	goto	u2967
  2191  0C2F  0BF5               	decfsz	??_Lcd_Init+1,f
  2192  0C30  2C2D               	goto	u2967
  2193                           
  2194                           ;./lcd.h: 62:     Lcd_Cmd(0x03);
  2195  0C31  3003               	movlw	3
  2196  0C32  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2197                           
  2198                           ;./lcd.h: 63:     _delay((unsigned long)((11)*(4000000/4000.0)));
  2199  0C37  300F               	movlw	15
  2200  0C38  00F5               	movwf	??_Lcd_Init+1
  2201  0C39  3047               	movlw	71
  2202  0C3A  00F4               	movwf	??_Lcd_Init
  2203  0C3B                     u2977:	
  2204  0C3B  0BF4               	decfsz	??_Lcd_Init,f
  2205  0C3C  2C3B               	goto	u2977
  2206  0C3D  0BF5               	decfsz	??_Lcd_Init+1,f
  2207  0C3E  2C3B               	goto	u2977
  2208  0C3F  2C40               	nop2
  2209                           
  2210                           ;./lcd.h: 64:     Lcd_Cmd(0x03);
  2211  0C40  3003               	movlw	3
  2212  0C41  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2213                           
  2214                           ;./lcd.h: 66:     Lcd_Cmd(0x02);
  2215  0C46  3002               	movlw	2
  2216  0C47  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2217                           
  2218                           ;./lcd.h: 67:     Lcd_Cmd(0x02);
  2219  0C4C  3002               	movlw	2
  2220  0C4D  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2221                           
  2222                           ;./lcd.h: 68:     Lcd_Cmd(0x08);
  2223  0C52  3008               	movlw	8
  2224  0C53  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2225                           
  2226                           ;./lcd.h: 69:     Lcd_Cmd(0x00);
  2227  0C58  3000               	movlw	0
  2228  0C59  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2229                           
  2230                           ;./lcd.h: 70:     Lcd_Cmd(0x0C);
  2231  0C5E  300C               	movlw	12
  2232  0C5F  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2233                           
  2234                           ;./lcd.h: 71:     Lcd_Cmd(0x00);
  2235  0C64  3000               	movlw	0
  2236  0C65  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  2237                           
  2238                           ;./lcd.h: 72:     Lcd_Cmd(0x06);
  2239  0C6A  3006               	movlw	6
  2240  0C6B  120A  158A  2240   	fcall	_Lcd_Cmd
  2241  0C6E  0008               	return
  2242  0C6F                     __end_of_Lcd_Init:	
  2243                           
  2244                           	psect	text9
  2245  02AF                     __ptext9:	
  2246 ;; *************** function _Encoder *****************
  2247 ;; Defined at:
  2248 ;;		line 203 in file "main.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  2   56[None  ] int 
  2255 ;; Registers used:
  2256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2262 ;;      Params:         0       0       0       0       0
  2263 ;;      Locals:         0       0       0       0       0
  2264 ;;      Temps:          0       0       0       0       0
  2265 ;;      Totals:         0       0       0       0       0
  2266 ;;Total ram usage:        0 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    4
  2269 ;; This function calls:
  2270 ;;		_Lcd_Clear
  2271 ;;		_Lcd_Set_Cursor
  2272 ;;		_Lcd_Write_Integer
  2273 ;;		_Lcd_Write_String
  2274 ;;		_VerificarInversionGiro
  2275 ;;		___fleq
  2276 ;;		___flmul
  2277 ;;		___fltol
  2278 ;;		___xxtofl
  2279 ;; This function is called by:
  2280 ;;		_main
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _Encoder
  2286  02AF                     _Encoder:	
  2287                           
  2288                           ;main.c: 204:     LastState = 1;
  2289                           
  2290                           ;incstack = 0
  2291                           ; Regs used in _Encoder: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2292  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2293  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2294  02B1  01E2               	clrf	_LastState
  2295  02B2  0AE2               	incf	_LastState,f
  2296                           
  2297                           ;main.c: 205:     Grados++;
  2298  02B3  3001               	movlw	1
  2299  02B4  07E0               	addwf	_Grados,f
  2300  02B5  1803               	skipnc
  2301  02B6  0AE1               	incf	_Grados+1,f
  2302  02B7  3000               	movlw	0
  2303  02B8  07E1               	addwf	_Grados+1,f
  2304                           
  2305                           ;main.c: 206:     VerificarInversionGiro();
  2306  02B9  120A  118A  2015  120A  118A  	fcall	_VerificarInversionGiro
  2307                           
  2308                           ;main.c: 208:     cm = Grados * 0.097;
  2309  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  2310  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  2311  02C0  0860               	movf	_Grados,w
  2312  02C1  00F0               	movwf	___xxtofl@val
  2313  02C2  0861               	movf	_Grados+1,w
  2314  02C3  00F1               	movwf	___xxtofl@val+1
  2315  02C4  3000               	movlw	0
  2316  02C5  1BF1               	btfsc	___xxtofl@val+1,7
  2317  02C6  30FF               	movlw	255
  2318  02C7  00F2               	movwf	___xxtofl@val+2
  2319  02C8  00F3               	movwf	___xxtofl@val+3
  2320  02C9  3001               	movlw	1
  2321  02CA  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2322  02CF  0873               	movf	?___xxtofl+3,w
  2323  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2324  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2325  02D2  00A7               	movwf	___flmul@a+3
  2326  02D3  0872               	movf	?___xxtofl+2,w
  2327  02D4  00A6               	movwf	___flmul@a+2
  2328  02D5  0871               	movf	?___xxtofl+1,w
  2329  02D6  00A5               	movwf	___flmul@a+1
  2330  02D7  0870               	movf	?___xxtofl,w
  2331  02D8  00A4               	movwf	___flmul@a
  2332  02D9  303D               	movlw	61
  2333  02DA  00A3               	movwf	___flmul@b+3
  2334  02DB  30C6               	movlw	198
  2335  02DC  00A2               	movwf	___flmul@b+2
  2336  02DD  30A7               	movlw	167
  2337  02DE  00A1               	movwf	___flmul@b+1
  2338  02DF  30F0               	movlw	240
  2339  02E0  00A0               	movwf	___flmul@b
  2340  02E1  120A  118A  24CA  120A  118A  	fcall	___flmul
  2341  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2342  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  2343  02E8  0823               	movf	?___flmul+3,w
  2344  02E9  00BD               	movwf	___fltol@f1+3
  2345  02EA  0822               	movf	?___flmul+2,w
  2346  02EB  00BC               	movwf	___fltol@f1+2
  2347  02EC  0821               	movf	?___flmul+1,w
  2348  02ED  00BB               	movwf	___fltol@f1+1
  2349  02EE  0820               	movf	?___flmul,w
  2350  02EF  00BA               	movwf	___fltol@f1
  2351  02F0  120A  158A  246F  120A  118A  	fcall	___fltol
  2352  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  2353  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  2354  02F7  083B               	movf	?___fltol+1,w
  2355  02F8  00DB               	movwf	_cm+1
  2356  02F9  083A               	movf	?___fltol,w
  2357  02FA  00DA               	movwf	_cm
  2358                           
  2359                           ;main.c: 210:     if (RC0 && (Grados * 0.097 != cm)) {
  2360  02FB  1C07               	btfss	7,0	;volatile
  2361  02FC  2BC6               	goto	l208
  2362  02FD  0860               	movf	_Grados,w
  2363  02FE  00F0               	movwf	___xxtofl@val
  2364  02FF  0861               	movf	_Grados+1,w
  2365  0300  00F1               	movwf	___xxtofl@val+1
  2366  0301  3000               	movlw	0
  2367  0302  1BF1               	btfsc	___xxtofl@val+1,7
  2368  0303  30FF               	movlw	255
  2369  0304  00F2               	movwf	___xxtofl@val+2
  2370  0305  00F3               	movwf	___xxtofl@val+3
  2371  0306  3001               	movlw	1
  2372  0307  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2373  030C  0873               	movf	?___xxtofl+3,w
  2374  030D  1283               	bcf	3,5	;RP0=0, select bank0
  2375  030E  1303               	bcf	3,6	;RP1=0, select bank0
  2376  030F  00A7               	movwf	___flmul@a+3
  2377  0310  0872               	movf	?___xxtofl+2,w
  2378  0311  00A6               	movwf	___flmul@a+2
  2379  0312  0871               	movf	?___xxtofl+1,w
  2380  0313  00A5               	movwf	___flmul@a+1
  2381  0314  0870               	movf	?___xxtofl,w
  2382  0315  00A4               	movwf	___flmul@a
  2383  0316  303D               	movlw	61
  2384  0317  00A3               	movwf	___flmul@b+3
  2385  0318  30C6               	movlw	198
  2386  0319  00A2               	movwf	___flmul@b+2
  2387  031A  30A7               	movlw	167
  2388  031B  00A1               	movwf	___flmul@b+1
  2389  031C  30F0               	movlw	240
  2390  031D  00A0               	movwf	___flmul@b
  2391  031E  120A  118A  24CA  120A  118A  	fcall	___flmul
  2392  0323  1283               	bcf	3,5	;RP0=0, select bank0
  2393  0324  1303               	bcf	3,6	;RP1=0, select bank0
  2394  0325  0823               	movf	?___flmul+3,w
  2395  0326  00BD               	movwf	___fleq@ff1+3
  2396  0327  0822               	movf	?___flmul+2,w
  2397  0328  00BC               	movwf	___fleq@ff1+2
  2398  0329  0821               	movf	?___flmul+1,w
  2399  032A  00BB               	movwf	___fleq@ff1+1
  2400  032B  0820               	movf	?___flmul,w
  2401  032C  00BA               	movwf	___fleq@ff1
  2402  032D  085A               	movf	_cm,w
  2403  032E  00F0               	movwf	___xxtofl@val
  2404  032F  085B               	movf	_cm+1,w
  2405  0330  00F1               	movwf	___xxtofl@val+1
  2406  0331  3000               	movlw	0
  2407  0332  1BF1               	btfsc	___xxtofl@val+1,7
  2408  0333  30FF               	movlw	255
  2409  0334  00F2               	movwf	___xxtofl@val+2
  2410  0335  00F3               	movwf	___xxtofl@val+3
  2411  0336  3001               	movlw	1
  2412  0337  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2413  033C  0873               	movf	?___xxtofl+3,w
  2414  033D  1283               	bcf	3,5	;RP0=0, select bank0
  2415  033E  1303               	bcf	3,6	;RP1=0, select bank0
  2416  033F  00C1               	movwf	___fleq@ff2+3
  2417  0340  0872               	movf	?___xxtofl+2,w
  2418  0341  00C0               	movwf	___fleq@ff2+2
  2419  0342  0871               	movf	?___xxtofl+1,w
  2420  0343  00BF               	movwf	___fleq@ff2+1
  2421  0344  0870               	movf	?___xxtofl,w
  2422  0345  00BE               	movwf	___fleq@ff2
  2423  0346  120A  158A  23CA  120A  118A  	fcall	___fleq
  2424  034B  1803               	btfsc	3,0
  2425  034C  2BC6               	goto	l208
  2426                           
  2427                           ;main.c: 211:         cm = Grados * 0.097;
  2428  034D  1283               	bcf	3,5	;RP0=0, select bank0
  2429  034E  1303               	bcf	3,6	;RP1=0, select bank0
  2430  034F  0860               	movf	_Grados,w
  2431  0350  00F0               	movwf	___xxtofl@val
  2432  0351  0861               	movf	_Grados+1,w
  2433  0352  00F1               	movwf	___xxtofl@val+1
  2434  0353  3000               	movlw	0
  2435  0354  1BF1               	btfsc	___xxtofl@val+1,7
  2436  0355  30FF               	movlw	255
  2437  0356  00F2               	movwf	___xxtofl@val+2
  2438  0357  00F3               	movwf	___xxtofl@val+3
  2439  0358  3001               	movlw	1
  2440  0359  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2441  035E  0873               	movf	?___xxtofl+3,w
  2442  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2443  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2444  0361  00A7               	movwf	___flmul@a+3
  2445  0362  0872               	movf	?___xxtofl+2,w
  2446  0363  00A6               	movwf	___flmul@a+2
  2447  0364  0871               	movf	?___xxtofl+1,w
  2448  0365  00A5               	movwf	___flmul@a+1
  2449  0366  0870               	movf	?___xxtofl,w
  2450  0367  00A4               	movwf	___flmul@a
  2451  0368  303D               	movlw	61
  2452  0369  00A3               	movwf	___flmul@b+3
  2453  036A  30C6               	movlw	198
  2454  036B  00A2               	movwf	___flmul@b+2
  2455  036C  30A7               	movlw	167
  2456  036D  00A1               	movwf	___flmul@b+1
  2457  036E  30F0               	movlw	240
  2458  036F  00A0               	movwf	___flmul@b
  2459  0370  120A  118A  24CA  120A  118A  	fcall	___flmul
  2460  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2461  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2462  0377  0823               	movf	?___flmul+3,w
  2463  0378  00BD               	movwf	___fltol@f1+3
  2464  0379  0822               	movf	?___flmul+2,w
  2465  037A  00BC               	movwf	___fltol@f1+2
  2466  037B  0821               	movf	?___flmul+1,w
  2467  037C  00BB               	movwf	___fltol@f1+1
  2468  037D  0820               	movf	?___flmul,w
  2469  037E  00BA               	movwf	___fltol@f1
  2470  037F  120A  158A  246F  120A  118A  	fcall	___fltol
  2471  0384  1283               	bcf	3,5	;RP0=0, select bank0
  2472  0385  1303               	bcf	3,6	;RP1=0, select bank0
  2473  0386  083B               	movf	?___fltol+1,w
  2474  0387  00DB               	movwf	_cm+1
  2475  0388  083A               	movf	?___fltol,w
  2476  0389  00DA               	movwf	_cm
  2477                           
  2478                           ;main.c: 212:         Lcd_Clear();
  2479  038A  120A  158A  21F6  120A  118A  	fcall	_Lcd_Clear
  2480                           
  2481                           ;main.c: 213:         Lcd_Set_Cursor(1, 1);
  2482  038F  01F4               	clrf	Lcd_Set_Cursor@b
  2483  0390  0AF4               	incf	Lcd_Set_Cursor@b,f
  2484  0391  3001               	movlw	1
  2485  0392  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  2486                           
  2487                           ;main.c: 214:         Lcd_Write_String("Dir: Adelante");
  2488  0397  302D               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2489  0398  00F5               	movwf	Lcd_Write_String@a
  2490  0399  3080               	movlw	128
  2491  039A  00F6               	movwf	Lcd_Write_String@a+1
  2492  039B  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  2493                           
  2494                           ;main.c: 215:         Lcd_Set_Cursor(2, 1);
  2495  03A0  01F4               	clrf	Lcd_Set_Cursor@b
  2496  03A1  0AF4               	incf	Lcd_Set_Cursor@b,f
  2497  03A2  3002               	movlw	2
  2498  03A3  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  2499                           
  2500                           ;main.c: 216:         Lcd_Write_Integer(cm);
  2501  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2502  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2503  03AA  085B               	movf	_cm+1,w
  2504  03AB  00C6               	movwf	Lcd_Write_Integer@a+1
  2505  03AC  085A               	movf	_cm,w
  2506  03AD  00C5               	movwf	Lcd_Write_Integer@a
  2507  03AE  120A  158A  220E  120A  118A  	fcall	_Lcd_Write_Integer
  2508                           
  2509                           ;main.c: 217:         Lcd_Write_String(" Cm de: ");
  2510  03B3  3051               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2511  03B4  00F5               	movwf	Lcd_Write_String@a
  2512  03B5  3080               	movlw	128
  2513  03B6  00F6               	movwf	Lcd_Write_String@a+1
  2514  03B7  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  2515                           
  2516                           ;main.c: 218:         Lcd_Write_Integer(CmHorario);
  2517  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  2518  03BD  1303               	bcf	3,6	;RP1=0, select bank0
  2519  03BE  085F               	movf	_CmHorario+1,w
  2520  03BF  00C6               	movwf	Lcd_Write_Integer@a+1
  2521  03C0  085E               	movf	_CmHorario,w
  2522  03C1  00C5               	movwf	Lcd_Write_Integer@a
  2523  03C2  120A  158A  220E   	fcall	_Lcd_Write_Integer
  2524                           
  2525                           ;main.c: 219:     } else if (RC1 && (Grados * 0.097 != cm)) {
  2526  03C5  0008               	return
  2527  03C6                     l208:	
  2528  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2529  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  2530  03C8  1C87               	btfss	7,1	;volatile
  2531  03C9  0008               	return
  2532  03CA  0860               	movf	_Grados,w
  2533  03CB  00F0               	movwf	___xxtofl@val
  2534  03CC  0861               	movf	_Grados+1,w
  2535  03CD  00F1               	movwf	___xxtofl@val+1
  2536  03CE  3000               	movlw	0
  2537  03CF  1BF1               	btfsc	___xxtofl@val+1,7
  2538  03D0  30FF               	movlw	255
  2539  03D1  00F2               	movwf	___xxtofl@val+2
  2540  03D2  00F3               	movwf	___xxtofl@val+3
  2541  03D3  3001               	movlw	1
  2542  03D4  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2543  03D9  0873               	movf	?___xxtofl+3,w
  2544  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  2545  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  2546  03DC  00A7               	movwf	___flmul@a+3
  2547  03DD  0872               	movf	?___xxtofl+2,w
  2548  03DE  00A6               	movwf	___flmul@a+2
  2549  03DF  0871               	movf	?___xxtofl+1,w
  2550  03E0  00A5               	movwf	___flmul@a+1
  2551  03E1  0870               	movf	?___xxtofl,w
  2552  03E2  00A4               	movwf	___flmul@a
  2553  03E3  303D               	movlw	61
  2554  03E4  00A3               	movwf	___flmul@b+3
  2555  03E5  30C6               	movlw	198
  2556  03E6  00A2               	movwf	___flmul@b+2
  2557  03E7  30A7               	movlw	167
  2558  03E8  00A1               	movwf	___flmul@b+1
  2559  03E9  30F0               	movlw	240
  2560  03EA  00A0               	movwf	___flmul@b
  2561  03EB  120A  118A  24CA  120A  118A  	fcall	___flmul
  2562  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2563  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2564  03F2  0823               	movf	?___flmul+3,w
  2565  03F3  00BD               	movwf	___fleq@ff1+3
  2566  03F4  0822               	movf	?___flmul+2,w
  2567  03F5  00BC               	movwf	___fleq@ff1+2
  2568  03F6  0821               	movf	?___flmul+1,w
  2569  03F7  00BB               	movwf	___fleq@ff1+1
  2570  03F8  0820               	movf	?___flmul,w
  2571  03F9  00BA               	movwf	___fleq@ff1
  2572  03FA  085A               	movf	_cm,w
  2573  03FB  00F0               	movwf	___xxtofl@val
  2574  03FC  085B               	movf	_cm+1,w
  2575  03FD  00F1               	movwf	___xxtofl@val+1
  2576  03FE  3000               	movlw	0
  2577  03FF  1BF1               	btfsc	___xxtofl@val+1,7
  2578  0400  30FF               	movlw	255
  2579  0401  00F2               	movwf	___xxtofl@val+2
  2580  0402  00F3               	movwf	___xxtofl@val+3
  2581  0403  3001               	movlw	1
  2582  0404  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2583  0409  0873               	movf	?___xxtofl+3,w
  2584  040A  1283               	bcf	3,5	;RP0=0, select bank0
  2585  040B  1303               	bcf	3,6	;RP1=0, select bank0
  2586  040C  00C1               	movwf	___fleq@ff2+3
  2587  040D  0872               	movf	?___xxtofl+2,w
  2588  040E  00C0               	movwf	___fleq@ff2+2
  2589  040F  0871               	movf	?___xxtofl+1,w
  2590  0410  00BF               	movwf	___fleq@ff2+1
  2591  0411  0870               	movf	?___xxtofl,w
  2592  0412  00BE               	movwf	___fleq@ff2
  2593  0413  120A  158A  23CA  120A  118A  	fcall	___fleq
  2594  0418  1803               	btfsc	3,0
  2595  0419  0008               	return
  2596                           
  2597                           ;main.c: 220:         cm = Grados * 0.097;
  2598  041A  1283               	bcf	3,5	;RP0=0, select bank0
  2599  041B  1303               	bcf	3,6	;RP1=0, select bank0
  2600  041C  0860               	movf	_Grados,w
  2601  041D  00F0               	movwf	___xxtofl@val
  2602  041E  0861               	movf	_Grados+1,w
  2603  041F  00F1               	movwf	___xxtofl@val+1
  2604  0420  3000               	movlw	0
  2605  0421  1BF1               	btfsc	___xxtofl@val+1,7
  2606  0422  30FF               	movlw	255
  2607  0423  00F2               	movwf	___xxtofl@val+2
  2608  0424  00F3               	movwf	___xxtofl@val+3
  2609  0425  3001               	movlw	1
  2610  0426  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2611  042B  0873               	movf	?___xxtofl+3,w
  2612  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2613  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2614  042E  00A7               	movwf	___flmul@a+3
  2615  042F  0872               	movf	?___xxtofl+2,w
  2616  0430  00A6               	movwf	___flmul@a+2
  2617  0431  0871               	movf	?___xxtofl+1,w
  2618  0432  00A5               	movwf	___flmul@a+1
  2619  0433  0870               	movf	?___xxtofl,w
  2620  0434  00A4               	movwf	___flmul@a
  2621  0435  303D               	movlw	61
  2622  0436  00A3               	movwf	___flmul@b+3
  2623  0437  30C6               	movlw	198
  2624  0438  00A2               	movwf	___flmul@b+2
  2625  0439  30A7               	movlw	167
  2626  043A  00A1               	movwf	___flmul@b+1
  2627  043B  30F0               	movlw	240
  2628  043C  00A0               	movwf	___flmul@b
  2629  043D  120A  118A  24CA  120A  118A  	fcall	___flmul
  2630  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2631  0443  1303               	bcf	3,6	;RP1=0, select bank0
  2632  0444  0823               	movf	?___flmul+3,w
  2633  0445  00BD               	movwf	___fltol@f1+3
  2634  0446  0822               	movf	?___flmul+2,w
  2635  0447  00BC               	movwf	___fltol@f1+2
  2636  0448  0821               	movf	?___flmul+1,w
  2637  0449  00BB               	movwf	___fltol@f1+1
  2638  044A  0820               	movf	?___flmul,w
  2639  044B  00BA               	movwf	___fltol@f1
  2640  044C  120A  158A  246F  120A  118A  	fcall	___fltol
  2641  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2642  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2643  0453  083B               	movf	?___fltol+1,w
  2644  0454  00DB               	movwf	_cm+1
  2645  0455  083A               	movf	?___fltol,w
  2646  0456  00DA               	movwf	_cm
  2647                           
  2648                           ;main.c: 221:         Lcd_Clear();
  2649  0457  120A  158A  21F6  120A  118A  	fcall	_Lcd_Clear
  2650                           
  2651                           ;main.c: 222:         Lcd_Set_Cursor(1, 1);
  2652  045C  01F4               	clrf	Lcd_Set_Cursor@b
  2653  045D  0AF4               	incf	Lcd_Set_Cursor@b,f
  2654  045E  3001               	movlw	1
  2655  045F  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  2656                           
  2657                           ;main.c: 223:         Lcd_Write_String("Dir: Atras");
  2658  0464  3046               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2659  0465  00F5               	movwf	Lcd_Write_String@a
  2660  0466  3080               	movlw	128
  2661  0467  00F6               	movwf	Lcd_Write_String@a+1
  2662  0468  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  2663                           
  2664                           ;main.c: 224:         Lcd_Set_Cursor(2, 1);
  2665  046D  01F4               	clrf	Lcd_Set_Cursor@b
  2666  046E  0AF4               	incf	Lcd_Set_Cursor@b,f
  2667  046F  3002               	movlw	2
  2668  0470  120A  158A  2380  120A  118A  	fcall	_Lcd_Set_Cursor
  2669                           
  2670                           ;main.c: 225:         Lcd_Write_Integer(Grados * 0.097);
  2671  0475  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0476  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0477  0860               	movf	_Grados,w
  2674  0478  00F0               	movwf	___xxtofl@val
  2675  0479  0861               	movf	_Grados+1,w
  2676  047A  00F1               	movwf	___xxtofl@val+1
  2677  047B  3000               	movlw	0
  2678  047C  1BF1               	btfsc	___xxtofl@val+1,7
  2679  047D  30FF               	movlw	255
  2680  047E  00F2               	movwf	___xxtofl@val+2
  2681  047F  00F3               	movwf	___xxtofl@val+3
  2682  0480  3001               	movlw	1
  2683  0481  120A  158A  2685  120A  118A  	fcall	___xxtofl
  2684  0486  0873               	movf	?___xxtofl+3,w
  2685  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2686  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2687  0489  00A7               	movwf	___flmul@a+3
  2688  048A  0872               	movf	?___xxtofl+2,w
  2689  048B  00A6               	movwf	___flmul@a+2
  2690  048C  0871               	movf	?___xxtofl+1,w
  2691  048D  00A5               	movwf	___flmul@a+1
  2692  048E  0870               	movf	?___xxtofl,w
  2693  048F  00A4               	movwf	___flmul@a
  2694  0490  303D               	movlw	61
  2695  0491  00A3               	movwf	___flmul@b+3
  2696  0492  30C6               	movlw	198
  2697  0493  00A2               	movwf	___flmul@b+2
  2698  0494  30A7               	movlw	167
  2699  0495  00A1               	movwf	___flmul@b+1
  2700  0496  30F0               	movlw	240
  2701  0497  00A0               	movwf	___flmul@b
  2702  0498  120A  118A  24CA  120A  118A  	fcall	___flmul
  2703  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2704  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2705  049F  0823               	movf	?___flmul+3,w
  2706  04A0  00BD               	movwf	___fltol@f1+3
  2707  04A1  0822               	movf	?___flmul+2,w
  2708  04A2  00BC               	movwf	___fltol@f1+2
  2709  04A3  0821               	movf	?___flmul+1,w
  2710  04A4  00BB               	movwf	___fltol@f1+1
  2711  04A5  0820               	movf	?___flmul,w
  2712  04A6  00BA               	movwf	___fltol@f1
  2713  04A7  120A  158A  246F  120A  118A  	fcall	___fltol
  2714  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  2715  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  2716  04AE  083B               	movf	?___fltol+1,w
  2717  04AF  00C6               	movwf	Lcd_Write_Integer@a+1
  2718  04B0  083A               	movf	?___fltol,w
  2719  04B1  00C5               	movwf	Lcd_Write_Integer@a
  2720  04B2  120A  158A  220E  120A  118A  	fcall	_Lcd_Write_Integer
  2721                           
  2722                           ;main.c: 226:         Lcd_Write_String(" Cm de: ");
  2723  04B7  3051               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2724  04B8  00F5               	movwf	Lcd_Write_String@a
  2725  04B9  3080               	movlw	128
  2726  04BA  00F6               	movwf	Lcd_Write_String@a+1
  2727  04BB  120A  158A  2343  120A  118A  	fcall	_Lcd_Write_String
  2728                           
  2729                           ;main.c: 227:         Lcd_Write_Integer(CmAntiHorario);
  2730  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2731  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2732  04C2  085D               	movf	_CmAntiHorario+1,w
  2733  04C3  00C6               	movwf	Lcd_Write_Integer@a+1
  2734  04C4  085C               	movf	_CmAntiHorario,w
  2735  04C5  00C5               	movwf	Lcd_Write_Integer@a
  2736  04C6  120A  158A  220E   	fcall	_Lcd_Write_Integer
  2737  04C9  0008               	return
  2738  04CA                     __end_of_Encoder:	
  2739                           
  2740                           	psect	text10
  2741  0C6F                     __ptext10:	
  2742 ;; *************** function ___fltol *****************
  2743 ;; Defined at:
  2744 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;  f1              4   26[BANK0 ] int 
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;  exp1            1   36[BANK0 ] unsigned char 
  2749 ;;  sign1           1   35[BANK0 ] unsigned char 
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  4   26[BANK0 ] long 
  2752 ;; Registers used:
  2753 ;;		wreg, status,2, status,0
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2759 ;;      Params:         0       4       0       0       0
  2760 ;;      Locals:         0       2       0       0       0
  2761 ;;      Temps:          0       5       0       0       0
  2762 ;;      Totals:         0      11       0       0       0
  2763 ;;Total ram usage:       11 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_Encoder
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function ___fltol
  2774  0C6F                     ___fltol:	
  2775                           
  2776                           ;incstack = 0
  2777                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  2778  0C6F  1003               	clrc
  2779  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  2780  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  2781  0C72  0D3C               	rlf	___fltol@f1+2,w
  2782  0C73  0D3D               	rlf	___fltol@f1+3,w
  2783  0C74  00BE               	movwf	??___fltol
  2784  0C75  083E               	movf	??___fltol,w
  2785  0C76  00C4               	movwf	___fltol@exp1
  2786  0C77  0844               	movf	___fltol@exp1,w
  2787  0C78  1D03               	btfss	3,2
  2788  0C79  2C83               	goto	l2229
  2789  0C7A                     l2225:	
  2790  0C7A  3000               	movlw	0
  2791  0C7B  00BD               	movwf	?___fltol+3
  2792  0C7C  3000               	movlw	0
  2793  0C7D  00BC               	movwf	?___fltol+2
  2794  0C7E  3000               	movlw	0
  2795  0C7F  00BB               	movwf	?___fltol+1
  2796  0C80  3000               	movlw	0
  2797  0C81  00BA               	movwf	?___fltol
  2798  0C82  0008               	return
  2799  0C83                     l2229:	
  2800  0C83  083A               	movf	___fltol@f1,w
  2801  0C84  00BE               	movwf	??___fltol
  2802  0C85  083B               	movf	___fltol@f1+1,w
  2803  0C86  00BF               	movwf	??___fltol+1
  2804  0C87  083C               	movf	___fltol@f1+2,w
  2805  0C88  00C0               	movwf	??___fltol+2
  2806  0C89  083D               	movf	___fltol@f1+3,w
  2807  0C8A  00C1               	movwf	??___fltol+3
  2808  0C8B  301F               	movlw	31
  2809  0C8C                     u2705:	
  2810  0C8C  1003               	clrc
  2811  0C8D  0CC1               	rrf	??___fltol+3,f
  2812  0C8E  0CC0               	rrf	??___fltol+2,f
  2813  0C8F  0CBF               	rrf	??___fltol+1,f
  2814  0C90  0CBE               	rrf	??___fltol,f
  2815  0C91  3EFF               	addlw	-1
  2816  0C92  1D03               	skipz
  2817  0C93  2C8C               	goto	u2705
  2818  0C94  083E               	movf	??___fltol,w
  2819  0C95  00C2               	movwf	??___fltol+4
  2820  0C96  0842               	movf	??___fltol+4,w
  2821  0C97  00C3               	movwf	___fltol@sign1
  2822  0C98  17BC               	bsf	___fltol@f1+2,7
  2823  0C99  30FF               	movlw	255
  2824  0C9A  05BA               	andwf	___fltol@f1,f
  2825  0C9B  30FF               	movlw	255
  2826  0C9C  05BB               	andwf	___fltol@f1+1,f
  2827  0C9D  30FF               	movlw	255
  2828  0C9E  05BC               	andwf	___fltol@f1+2,f
  2829  0C9F  3000               	movlw	0
  2830  0CA0  05BD               	andwf	___fltol@f1+3,f
  2831  0CA1  3096               	movlw	150
  2832  0CA2  02C4               	subwf	___fltol@exp1,f
  2833  0CA3  1FC4               	btfss	___fltol@exp1,7
  2834  0CA4  2CBA               	goto	l2247
  2835  0CA5  0844               	movf	___fltol@exp1,w
  2836  0CA6  3A80               	xorlw	128
  2837  0CA7  3E97               	addlw	151
  2838  0CA8  1C03               	btfss	3,0
  2839  0CA9  2C7A               	goto	l2225
  2840  0CAA                     l2245:	
  2841  0CAA  3001               	movlw	1
  2842  0CAB                     u2735:	
  2843  0CAB  1003               	clrc
  2844  0CAC  0CBD               	rrf	___fltol@f1+3,f
  2845  0CAD  0CBC               	rrf	___fltol@f1+2,f
  2846  0CAE  0CBB               	rrf	___fltol@f1+1,f
  2847  0CAF  0CBA               	rrf	___fltol@f1,f
  2848  0CB0  3EFF               	addlw	-1
  2849  0CB1  1D03               	skipz
  2850  0CB2  2CAB               	goto	u2735
  2851  0CB3  3001               	movlw	1
  2852  0CB4  00BE               	movwf	??___fltol
  2853  0CB5  083E               	movf	??___fltol,w
  2854  0CB6  07C4               	addwf	___fltol@exp1,f
  2855  0CB7  1903               	btfsc	3,2
  2856  0CB8  2CCD               	goto	l2255
  2857  0CB9  2CAA               	goto	l2245
  2858  0CBA                     l2247:	
  2859  0CBA  3020               	movlw	32
  2860  0CBB  0244               	subwf	___fltol@exp1,w
  2861  0CBC  1803               	btfsc	3,0
  2862  0CBD  2C7A               	goto	l2225
  2863  0CBE                     l518:	
  2864  0CBE  0844               	movf	___fltol@exp1,w
  2865  0CBF  1903               	btfsc	3,2
  2866  0CC0  2CCD               	goto	l2255
  2867  0CC1  3001               	movlw	1
  2868  0CC2  00BE               	movwf	??___fltol
  2869  0CC3                     u2765:	
  2870  0CC3  1003               	clrc
  2871  0CC4  0DBA               	rlf	___fltol@f1,f
  2872  0CC5  0DBB               	rlf	___fltol@f1+1,f
  2873  0CC6  0DBC               	rlf	___fltol@f1+2,f
  2874  0CC7  0DBD               	rlf	___fltol@f1+3,f
  2875  0CC8  0BBE               	decfsz	??___fltol,f
  2876  0CC9  2CC3               	goto	u2765
  2877  0CCA  3001               	movlw	1
  2878  0CCB  02C4               	subwf	___fltol@exp1,f
  2879  0CCC  2CBE               	goto	l518
  2880  0CCD                     l2255:	
  2881  0CCD  0843               	movf	___fltol@sign1,w
  2882  0CCE  1903               	btfsc	3,2
  2883  0CCF  0008               	return
  2884  0CD0  09BA               	comf	___fltol@f1,f
  2885  0CD1  09BB               	comf	___fltol@f1+1,f
  2886  0CD2  09BC               	comf	___fltol@f1+2,f
  2887  0CD3  09BD               	comf	___fltol@f1+3,f
  2888  0CD4  0ABA               	incf	___fltol@f1,f
  2889  0CD5  1903               	skipnz
  2890  0CD6  0ABB               	incf	___fltol@f1+1,f
  2891  0CD7  1903               	skipnz
  2892  0CD8  0ABC               	incf	___fltol@f1+2,f
  2893  0CD9  1903               	skipnz
  2894  0CDA  0ABD               	incf	___fltol@f1+3,f
  2895  0CDB  0008               	return
  2896  0CDC                     __end_of___fltol:	
  2897                           
  2898                           	psect	text11
  2899  0BCA                     __ptext11:	
  2900 ;; *************** function ___fleq *****************
  2901 ;; Defined at:
  2902 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fleq.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  ff1             4   26[BANK0 ] long 
  2905 ;;  ff2             4   30[BANK0 ] long 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;		None               void
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2917 ;;      Params:         0       8       0       0       0
  2918 ;;      Locals:         0       0       0       0       0
  2919 ;;      Temps:          0       4       0       0       0
  2920 ;;      Totals:         0      12       0       0       0
  2921 ;;Total ram usage:       12 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_Encoder
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function ___fleq
  2932  0BCA                     ___fleq:	
  2933                           
  2934                           ;incstack = 0
  2935                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  2936  0BCA  3000               	movlw	0
  2937  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  2938  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  2939  0BCD  053A               	andwf	___fleq@ff1,w
  2940  0BCE  00C2               	movwf	??___fleq
  2941  0BCF  3000               	movlw	0
  2942  0BD0  053B               	andwf	___fleq@ff1+1,w
  2943  0BD1  00C3               	movwf	??___fleq+1
  2944  0BD2  3080               	movlw	128
  2945  0BD3  053C               	andwf	___fleq@ff1+2,w
  2946  0BD4  00C4               	movwf	??___fleq+2
  2947  0BD5  307F               	movlw	127
  2948  0BD6  053D               	andwf	___fleq@ff1+3,w
  2949  0BD7  00C5               	movwf	??___fleq+3
  2950  0BD8  0845               	movf	??___fleq+3,w
  2951  0BD9  0444               	iorwf	??___fleq+2,w
  2952  0BDA  0443               	iorwf	??___fleq+1,w
  2953  0BDB  0442               	iorwf	??___fleq,w
  2954  0BDC  1D03               	skipz
  2955  0BDD  2BE6               	goto	l494
  2956  0BDE  3000               	movlw	0
  2957  0BDF  00BD               	movwf	___fleq@ff1+3
  2958  0BE0  3000               	movlw	0
  2959  0BE1  00BC               	movwf	___fleq@ff1+2
  2960  0BE2  3000               	movlw	0
  2961  0BE3  00BB               	movwf	___fleq@ff1+1
  2962  0BE4  3000               	movlw	0
  2963  0BE5  00BA               	movwf	___fleq@ff1
  2964  0BE6                     l494:	
  2965  0BE6  3000               	movlw	0
  2966  0BE7  053E               	andwf	___fleq@ff2,w
  2967  0BE8  00C2               	movwf	??___fleq
  2968  0BE9  3000               	movlw	0
  2969  0BEA  053F               	andwf	___fleq@ff2+1,w
  2970  0BEB  00C3               	movwf	??___fleq+1
  2971  0BEC  3080               	movlw	128
  2972  0BED  0540               	andwf	___fleq@ff2+2,w
  2973  0BEE  00C4               	movwf	??___fleq+2
  2974  0BEF  307F               	movlw	127
  2975  0BF0  0541               	andwf	___fleq@ff2+3,w
  2976  0BF1  00C5               	movwf	??___fleq+3
  2977  0BF2  0845               	movf	??___fleq+3,w
  2978  0BF3  0444               	iorwf	??___fleq+2,w
  2979  0BF4  0443               	iorwf	??___fleq+1,w
  2980  0BF5  0442               	iorwf	??___fleq,w
  2981  0BF6  1D03               	skipz
  2982  0BF7  2C00               	goto	l495
  2983  0BF8  3000               	movlw	0
  2984  0BF9  00C1               	movwf	___fleq@ff2+3
  2985  0BFA  3000               	movlw	0
  2986  0BFB  00C0               	movwf	___fleq@ff2+2
  2987  0BFC  3000               	movlw	0
  2988  0BFD  00BF               	movwf	___fleq@ff2+1
  2989  0BFE  3000               	movlw	0
  2990  0BFF  00BE               	movwf	___fleq@ff2
  2991  0C00                     l495:	
  2992  0C00  0841               	movf	___fleq@ff2+3,w
  2993  0C01  063D               	xorwf	___fleq@ff1+3,w
  2994  0C02  1D03               	skipz
  2995  0C03  2C0E               	goto	u2685
  2996  0C04  0840               	movf	___fleq@ff2+2,w
  2997  0C05  063C               	xorwf	___fleq@ff1+2,w
  2998  0C06  1D03               	skipz
  2999  0C07  2C0E               	goto	u2685
  3000  0C08  083F               	movf	___fleq@ff2+1,w
  3001  0C09  063B               	xorwf	___fleq@ff1+1,w
  3002  0C0A  1D03               	skipz
  3003  0C0B  2C0E               	goto	u2685
  3004  0C0C  083E               	movf	___fleq@ff2,w
  3005  0C0D  063A               	xorwf	___fleq@ff1,w
  3006  0C0E                     u2685:	
  3007  0C0E  1903               	skipnz
  3008  0C0F  2C12               	goto	l2219
  3009  0C10  1003               	clrc
  3010  0C11  0008               	return
  3011  0C12                     l2219:	
  3012  0C12  1403               	setc
  3013  0C13  0008               	return
  3014  0C14                     __end_of___fleq:	
  3015                           
  3016                           	psect	text12
  3017  0015                     __ptext12:	
  3018 ;; *************** function _VerificarInversionGiro *****************
  3019 ;; Defined at:
  3020 ;;		line 190 in file "main.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  2  201[None  ] int 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3034 ;;      Params:         0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0
  3037 ;;      Totals:         0       0       0       0       0
  3038 ;;Total ram usage:        0 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    2
  3041 ;; This function calls:
  3042 ;;		___flge
  3043 ;;		___flmul
  3044 ;;		___xxtofl
  3045 ;; This function is called by:
  3046 ;;		_Encoder
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _VerificarInversionGiro
  3052  0015                     _VerificarInversionGiro:	
  3053                           
  3054                           ;main.c: 191:     if (RC0 && (Grados * 0.097 >= CmHorario)) {
  3055                           
  3056                           ;incstack = 0
  3057                           ; Regs used in _VerificarInversionGiro: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3058  0015  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0016  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0017  1C07               	btfss	7,0	;volatile
  3061  0018  2872               	goto	l202
  3062  0019  303D               	movlw	61
  3063  001A  00A3               	movwf	___flmul@b+3
  3064  001B  30C6               	movlw	198
  3065  001C  00A2               	movwf	___flmul@b+2
  3066  001D  30A7               	movlw	167
  3067  001E  00A1               	movwf	___flmul@b+1
  3068  001F  30F0               	movlw	240
  3069  0020  00A0               	movwf	___flmul@b
  3070  0021  0860               	movf	_Grados,w
  3071  0022  00F0               	movwf	___xxtofl@val
  3072  0023  0861               	movf	_Grados+1,w
  3073  0024  00F1               	movwf	___xxtofl@val+1
  3074  0025  3000               	movlw	0
  3075  0026  1BF1               	btfsc	___xxtofl@val+1,7
  3076  0027  30FF               	movlw	255
  3077  0028  00F2               	movwf	___xxtofl@val+2
  3078  0029  00F3               	movwf	___xxtofl@val+3
  3079  002A  3001               	movlw	1
  3080  002B  120A  158A  2685  120A  118A  	fcall	___xxtofl
  3081  0030  0873               	movf	?___xxtofl+3,w
  3082  0031  1283               	bcf	3,5	;RP0=0, select bank0
  3083  0032  1303               	bcf	3,6	;RP1=0, select bank0
  3084  0033  00A7               	movwf	___flmul@a+3
  3085  0034  0872               	movf	?___xxtofl+2,w
  3086  0035  00A6               	movwf	___flmul@a+2
  3087  0036  0871               	movf	?___xxtofl+1,w
  3088  0037  00A5               	movwf	___flmul@a+1
  3089  0038  0870               	movf	?___xxtofl,w
  3090  0039  00A4               	movwf	___flmul@a
  3091  003A  120A  118A  24CA  120A  118A  	fcall	___flmul
  3092  003F  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0040  1303               	bcf	3,6	;RP1=0, select bank0
  3094  0041  0823               	movf	?___flmul+3,w
  3095  0042  00BD               	movwf	___flge@ff1+3
  3096  0043  0822               	movf	?___flmul+2,w
  3097  0044  00BC               	movwf	___flge@ff1+2
  3098  0045  0821               	movf	?___flmul+1,w
  3099  0046  00BB               	movwf	___flge@ff1+1
  3100  0047  0820               	movf	?___flmul,w
  3101  0048  00BA               	movwf	___flge@ff1
  3102  0049  085E               	movf	_CmHorario,w
  3103  004A  00F0               	movwf	___xxtofl@val
  3104  004B  085F               	movf	_CmHorario+1,w
  3105  004C  00F1               	movwf	___xxtofl@val+1
  3106  004D  3000               	movlw	0
  3107  004E  1BF1               	btfsc	___xxtofl@val+1,7
  3108  004F  30FF               	movlw	255
  3109  0050  00F2               	movwf	___xxtofl@val+2
  3110  0051  00F3               	movwf	___xxtofl@val+3
  3111  0052  3001               	movlw	1
  3112  0053  120A  158A  2685  120A  118A  	fcall	___xxtofl
  3113  0058  0873               	movf	?___xxtofl+3,w
  3114  0059  1283               	bcf	3,5	;RP0=0, select bank0
  3115  005A  1303               	bcf	3,6	;RP1=0, select bank0
  3116  005B  00C1               	movwf	___flge@ff2+3
  3117  005C  0872               	movf	?___xxtofl+2,w
  3118  005D  00C0               	movwf	___flge@ff2+2
  3119  005E  0871               	movf	?___xxtofl+1,w
  3120  005F  00BF               	movwf	___flge@ff2+1
  3121  0060  0870               	movf	?___xxtofl,w
  3122  0061  00BE               	movwf	___flge@ff2
  3123  0062  120A  158A  25F0  120A  118A  	fcall	___flge
  3124  0067  1C03               	btfss	3,0
  3125  0068  2872               	goto	l202
  3126  0069                     l2181:	
  3127                           
  3128                           ;main.c: 192:         Grados = 0;
  3129  0069  1283               	bcf	3,5	;RP0=0, select bank0
  3130  006A  1303               	bcf	3,6	;RP1=0, select bank0
  3131  006B  01E0               	clrf	_Grados
  3132  006C  01E1               	clrf	_Grados+1
  3133                           
  3134                           ;main.c: 193:         RC0 = !RC0;
  3135  006D  3001               	movlw	1
  3136  006E  0687               	xorwf	7,f
  3137                           
  3138                           ;main.c: 194:         RC1 = !RC1;
  3139  006F  3002               	movlw	2
  3140  0070  0687               	xorwf	7,f
  3141                           
  3142                           ;main.c: 195:     } else if (RC1 && Grados * 0.097 >= CmAntiHorario) {
  3143  0071  0008               	return
  3144  0072                     l202:	
  3145  0072  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0073  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0074  1C87               	btfss	7,1	;volatile
  3148  0075  0008               	return
  3149  0076  303D               	movlw	61
  3150  0077  00A3               	movwf	___flmul@b+3
  3151  0078  30C6               	movlw	198
  3152  0079  00A2               	movwf	___flmul@b+2
  3153  007A  30A7               	movlw	167
  3154  007B  00A1               	movwf	___flmul@b+1
  3155  007C  30F0               	movlw	240
  3156  007D  00A0               	movwf	___flmul@b
  3157  007E  0860               	movf	_Grados,w
  3158  007F  00F0               	movwf	___xxtofl@val
  3159  0080  0861               	movf	_Grados+1,w
  3160  0081  00F1               	movwf	___xxtofl@val+1
  3161  0082  3000               	movlw	0
  3162  0083  1BF1               	btfsc	___xxtofl@val+1,7
  3163  0084  30FF               	movlw	255
  3164  0085  00F2               	movwf	___xxtofl@val+2
  3165  0086  00F3               	movwf	___xxtofl@val+3
  3166  0087  3001               	movlw	1
  3167  0088  120A  158A  2685  120A  118A  	fcall	___xxtofl
  3168  008D  0873               	movf	?___xxtofl+3,w
  3169  008E  1283               	bcf	3,5	;RP0=0, select bank0
  3170  008F  1303               	bcf	3,6	;RP1=0, select bank0
  3171  0090  00A7               	movwf	___flmul@a+3
  3172  0091  0872               	movf	?___xxtofl+2,w
  3173  0092  00A6               	movwf	___flmul@a+2
  3174  0093  0871               	movf	?___xxtofl+1,w
  3175  0094  00A5               	movwf	___flmul@a+1
  3176  0095  0870               	movf	?___xxtofl,w
  3177  0096  00A4               	movwf	___flmul@a
  3178  0097  120A  118A  24CA  120A  118A  	fcall	___flmul
  3179  009C  1283               	bcf	3,5	;RP0=0, select bank0
  3180  009D  1303               	bcf	3,6	;RP1=0, select bank0
  3181  009E  0823               	movf	?___flmul+3,w
  3182  009F  00BD               	movwf	___flge@ff1+3
  3183  00A0  0822               	movf	?___flmul+2,w
  3184  00A1  00BC               	movwf	___flge@ff1+2
  3185  00A2  0821               	movf	?___flmul+1,w
  3186  00A3  00BB               	movwf	___flge@ff1+1
  3187  00A4  0820               	movf	?___flmul,w
  3188  00A5  00BA               	movwf	___flge@ff1
  3189  00A6  085C               	movf	_CmAntiHorario,w
  3190  00A7  00F0               	movwf	___xxtofl@val
  3191  00A8  085D               	movf	_CmAntiHorario+1,w
  3192  00A9  00F1               	movwf	___xxtofl@val+1
  3193  00AA  3000               	movlw	0
  3194  00AB  1BF1               	btfsc	___xxtofl@val+1,7
  3195  00AC  30FF               	movlw	255
  3196  00AD  00F2               	movwf	___xxtofl@val+2
  3197  00AE  00F3               	movwf	___xxtofl@val+3
  3198  00AF  3001               	movlw	1
  3199  00B0  120A  158A  2685  120A  118A  	fcall	___xxtofl
  3200  00B5  0873               	movf	?___xxtofl+3,w
  3201  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  3202  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  3203  00B8  00C1               	movwf	___flge@ff2+3
  3204  00B9  0872               	movf	?___xxtofl+2,w
  3205  00BA  00C0               	movwf	___flge@ff2+2
  3206  00BB  0871               	movf	?___xxtofl+1,w
  3207  00BC  00BF               	movwf	___flge@ff2+1
  3208  00BD  0870               	movf	?___xxtofl,w
  3209  00BE  00BE               	movwf	___flge@ff2
  3210  00BF  120A  158A  25F0  120A  118A  	fcall	___flge
  3211  00C4  1C03               	btfss	3,0
  3212  00C5  0008               	return
  3213  00C6  2869               	goto	l2181
  3214  00C7                     __end_of_VerificarInversionGiro:	
  3215                           
  3216                           	psect	text13
  3217  0E85                     __ptext13:	
  3218 ;; *************** function ___xxtofl *****************
  3219 ;; Defined at:
  3220 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  sign            1    wreg     unsigned char 
  3223 ;;  val             4    0[COMMON] long 
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;  sign            1    8[COMMON] unsigned char 
  3226 ;;  arg             4   10[COMMON] unsigned long 
  3227 ;;  exp             1    9[COMMON] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;                  4    0[COMMON] unsigned char 
  3230 ;; Registers used:
  3231 ;;		wreg, status,2, status,0
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3237 ;;      Params:         4       0       0       0       0
  3238 ;;      Locals:         6       0       0       0       0
  3239 ;;      Temps:          4       0       0       0       0
  3240 ;;      Totals:        14       0       0       0       0
  3241 ;;Total ram usage:       14 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; This function calls:
  3244 ;;		Nothing
  3245 ;; This function is called by:
  3246 ;;		_VerificarInversionGiro
  3247 ;;		_Encoder
  3248 ;; This function uses a non-reentrant model
  3249 ;;
  3250                           
  3251                           
  3252                           ;psect for function ___xxtofl
  3253  0E85                     ___xxtofl:	
  3254                           
  3255                           ;incstack = 0
  3256                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  3257                           ;___xxtofl@sign stored from wreg
  3258  0E85  00F8               	movwf	___xxtofl@sign
  3259  0E86  0878               	movf	___xxtofl@sign,w
  3260  0E87  1D03               	btfss	3,2
  3261  0E88  1FF3               	btfss	___xxtofl@val+3,7
  3262  0E89  2E9A               	goto	l2053
  3263  0E8A  0970               	comf	___xxtofl@val,w
  3264  0E8B  00FA               	movwf	___xxtofl@arg
  3265  0E8C  0971               	comf	___xxtofl@val+1,w
  3266  0E8D  00FB               	movwf	___xxtofl@arg+1
  3267  0E8E  0972               	comf	___xxtofl@val+2,w
  3268  0E8F  00FC               	movwf	___xxtofl@arg+2
  3269  0E90  0973               	comf	___xxtofl@val+3,w
  3270  0E91  00FD               	movwf	___xxtofl@arg+3
  3271  0E92  0AFA               	incf	___xxtofl@arg,f
  3272  0E93  1903               	skipnz
  3273  0E94  0AFB               	incf	___xxtofl@arg+1,f
  3274  0E95  1903               	skipnz
  3275  0E96  0AFC               	incf	___xxtofl@arg+2,f
  3276  0E97  1903               	skipnz
  3277  0E98  0AFD               	incf	___xxtofl@arg+3,f
  3278  0E99  2EA2               	goto	l752
  3279  0E9A                     l2053:	
  3280  0E9A  0873               	movf	___xxtofl@val+3,w
  3281  0E9B  00FD               	movwf	___xxtofl@arg+3
  3282  0E9C  0872               	movf	___xxtofl@val+2,w
  3283  0E9D  00FC               	movwf	___xxtofl@arg+2
  3284  0E9E  0871               	movf	___xxtofl@val+1,w
  3285  0E9F  00FB               	movwf	___xxtofl@arg+1
  3286  0EA0  0870               	movf	___xxtofl@val,w
  3287  0EA1  00FA               	movwf	___xxtofl@arg
  3288  0EA2                     l752:	
  3289  0EA2  0873               	movf	___xxtofl@val+3,w
  3290  0EA3  0472               	iorwf	___xxtofl@val+2,w
  3291  0EA4  0471               	iorwf	___xxtofl@val+1,w
  3292  0EA5  0470               	iorwf	___xxtofl@val,w
  3293  0EA6  1D03               	skipz
  3294  0EA7  2EB1               	goto	l2059
  3295  0EA8  3000               	movlw	0
  3296  0EA9  00F3               	movwf	?___xxtofl+3
  3297  0EAA  3000               	movlw	0
  3298  0EAB  00F2               	movwf	?___xxtofl+2
  3299  0EAC  3000               	movlw	0
  3300  0EAD  00F1               	movwf	?___xxtofl+1
  3301  0EAE  3000               	movlw	0
  3302  0EAF  00F0               	movwf	?___xxtofl
  3303  0EB0  0008               	return
  3304  0EB1                     l2059:	
  3305  0EB1  3096               	movlw	150
  3306  0EB2  00F4               	movwf	??___xxtofl
  3307  0EB3  0874               	movf	??___xxtofl,w
  3308  0EB4  00F9               	movwf	___xxtofl@exp
  3309  0EB5                     l2063:	
  3310  0EB5  30FE               	movlw	254
  3311  0EB6  057D               	andwf	___xxtofl@arg+3,w
  3312  0EB7  1903               	btfsc	3,2
  3313  0EB8  2EE2               	goto	l758
  3314  0EB9  3001               	movlw	1
  3315  0EBA  00F4               	movwf	??___xxtofl
  3316  0EBB  0874               	movf	??___xxtofl,w
  3317  0EBC  07F9               	addwf	___xxtofl@exp,f
  3318  0EBD  3001               	movlw	1
  3319  0EBE                     u2245:	
  3320  0EBE  1003               	clrc
  3321  0EBF  0CFD               	rrf	___xxtofl@arg+3,f
  3322  0EC0  0CFC               	rrf	___xxtofl@arg+2,f
  3323  0EC1  0CFB               	rrf	___xxtofl@arg+1,f
  3324  0EC2  0CFA               	rrf	___xxtofl@arg,f
  3325  0EC3  3EFF               	addlw	-1
  3326  0EC4  1D03               	skipz
  3327  0EC5  2EBE               	goto	u2245
  3328  0EC6  2EB5               	goto	l2063
  3329  0EC7                     l2065:	
  3330  0EC7  3001               	movlw	1
  3331  0EC8  00F4               	movwf	??___xxtofl
  3332  0EC9  0874               	movf	??___xxtofl,w
  3333  0ECA  07F9               	addwf	___xxtofl@exp,f
  3334  0ECB  3001               	movlw	1
  3335  0ECC  07FA               	addwf	___xxtofl@arg,f
  3336  0ECD  3000               	movlw	0
  3337  0ECE  1803               	skipnc
  3338  0ECF  3001               	movlw	1
  3339  0ED0  07FB               	addwf	___xxtofl@arg+1,f
  3340  0ED1  3000               	movlw	0
  3341  0ED2  1803               	skipnc
  3342  0ED3  3001               	movlw	1
  3343  0ED4  07FC               	addwf	___xxtofl@arg+2,f
  3344  0ED5  3000               	movlw	0
  3345  0ED6  1803               	skipnc
  3346  0ED7  3001               	movlw	1
  3347  0ED8  07FD               	addwf	___xxtofl@arg+3,f
  3348  0ED9  3001               	movlw	1
  3349  0EDA                     u2265:	
  3350  0EDA  1003               	clrc
  3351  0EDB  0CFD               	rrf	___xxtofl@arg+3,f
  3352  0EDC  0CFC               	rrf	___xxtofl@arg+2,f
  3353  0EDD  0CFB               	rrf	___xxtofl@arg+1,f
  3354  0EDE  0CFA               	rrf	___xxtofl@arg,f
  3355  0EDF  3EFF               	addlw	-1
  3356  0EE0  1D03               	skipz
  3357  0EE1  2EDA               	goto	u2265
  3358  0EE2                     l758:	
  3359  0EE2  30FF               	movlw	255
  3360  0EE3  057D               	andwf	___xxtofl@arg+3,w
  3361  0EE4  1903               	btfsc	3,2
  3362  0EE5  2EF6               	goto	l2073
  3363  0EE6  2EC7               	goto	l2065
  3364  0EE7                     l2075:	
  3365  0EE7  3002               	movlw	2
  3366  0EE8  0279               	subwf	___xxtofl@exp,w
  3367  0EE9  1C03               	btfss	3,0
  3368  0EEA  2EF8               	goto	l765
  3369  0EEB  3001               	movlw	1
  3370  0EEC  02F9               	subwf	___xxtofl@exp,f
  3371  0EED  3001               	movlw	1
  3372  0EEE  00F4               	movwf	??___xxtofl
  3373  0EEF                     u2285:	
  3374  0EEF  1003               	clrc
  3375  0EF0  0DFA               	rlf	___xxtofl@arg,f
  3376  0EF1  0DFB               	rlf	___xxtofl@arg+1,f
  3377  0EF2  0DFC               	rlf	___xxtofl@arg+2,f
  3378  0EF3  0DFD               	rlf	___xxtofl@arg+3,f
  3379  0EF4  0BF4               	decfsz	??___xxtofl,f
  3380  0EF5  2EEF               	goto	u2285
  3381  0EF6                     l2073:	
  3382  0EF6  1FFC               	btfss	___xxtofl@arg+2,7
  3383  0EF7  2EE7               	goto	l2075
  3384  0EF8                     l765:	
  3385  0EF8  1879               	btfsc	___xxtofl@exp,0
  3386  0EF9  2F02               	goto	l766
  3387  0EFA  30FF               	movlw	255
  3388  0EFB  05FA               	andwf	___xxtofl@arg,f
  3389  0EFC  30FF               	movlw	255
  3390  0EFD  05FB               	andwf	___xxtofl@arg+1,f
  3391  0EFE  307F               	movlw	127
  3392  0EFF  05FC               	andwf	___xxtofl@arg+2,f
  3393  0F00  30FF               	movlw	255
  3394  0F01  05FD               	andwf	___xxtofl@arg+3,f
  3395  0F02                     l766:	
  3396  0F02  1003               	clrc
  3397  0F03  0CF9               	rrf	___xxtofl@exp,f
  3398  0F04  0879               	movf	___xxtofl@exp,w
  3399  0F05  00F4               	movwf	??___xxtofl
  3400  0F06  01F5               	clrf	??___xxtofl+1
  3401  0F07  01F6               	clrf	??___xxtofl+2
  3402  0F08  01F7               	clrf	??___xxtofl+3
  3403  0F09  3018               	movlw	24
  3404  0F0A                     u2325:	
  3405  0F0A  1003               	clrc
  3406  0F0B  0DF4               	rlf	??___xxtofl,f
  3407  0F0C  0DF5               	rlf	??___xxtofl+1,f
  3408  0F0D  0DF6               	rlf	??___xxtofl+2,f
  3409  0F0E  0DF7               	rlf	??___xxtofl+3,f
  3410  0F0F  3EFF               	addlw	-1
  3411  0F10  1D03               	skipz
  3412  0F11  2F0A               	goto	u2325
  3413  0F12  0874               	movf	??___xxtofl,w
  3414  0F13  04FA               	iorwf	___xxtofl@arg,f
  3415  0F14  0875               	movf	??___xxtofl+1,w
  3416  0F15  04FB               	iorwf	___xxtofl@arg+1,f
  3417  0F16  0876               	movf	??___xxtofl+2,w
  3418  0F17  04FC               	iorwf	___xxtofl@arg+2,f
  3419  0F18  0877               	movf	??___xxtofl+3,w
  3420  0F19  04FD               	iorwf	___xxtofl@arg+3,f
  3421  0F1A  0878               	movf	___xxtofl@sign,w
  3422  0F1B  1D03               	btfss	3,2
  3423  0F1C  1FF3               	btfss	___xxtofl@val+3,7
  3424  0F1D  2F1F               	goto	l2087
  3425  0F1E  17FD               	bsf	___xxtofl@arg+3,7
  3426  0F1F                     l2087:	
  3427  0F1F  087D               	movf	___xxtofl@arg+3,w
  3428  0F20  00F3               	movwf	?___xxtofl+3
  3429  0F21  087C               	movf	___xxtofl@arg+2,w
  3430  0F22  00F2               	movwf	?___xxtofl+2
  3431  0F23  087B               	movf	___xxtofl@arg+1,w
  3432  0F24  00F1               	movwf	?___xxtofl+1
  3433  0F25  087A               	movf	___xxtofl@arg,w
  3434  0F26  00F0               	movwf	?___xxtofl
  3435  0F27  0008               	return
  3436  0F28                     __end_of___xxtofl:	
  3437                           
  3438                           	psect	text14
  3439  04CA                     __ptext14:	
  3440 ;; *************** function ___flmul *****************
  3441 ;; Defined at:
  3442 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  b               4    0[BANK0 ] unsigned char 
  3445 ;;  a               4    4[BANK0 ] unsigned char 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  prod            4   20[BANK0 ] struct .
  3448 ;;  grs             4   14[BANK0 ] unsigned long 
  3449 ;;  temp            2   24[BANK0 ] struct .
  3450 ;;  bexp            1   19[BANK0 ] unsigned char 
  3451 ;;  aexp            1   18[BANK0 ] unsigned char 
  3452 ;;  sign            1   13[BANK0 ] unsigned char 
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  4    0[BANK0 ] unsigned char 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3462 ;;      Params:         0       8       0       0       0
  3463 ;;      Locals:         0      13       0       0       0
  3464 ;;      Temps:          0       5       0       0       0
  3465 ;;      Totals:         0      26       0       0       0
  3466 ;;Total ram usage:       26 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    1
  3469 ;; This function calls:
  3470 ;;		__Umul8_16
  3471 ;; This function is called by:
  3472 ;;		_VerificarInversionGiro
  3473 ;;		_Encoder
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           
  3478                           ;psect for function ___flmul
  3479  04CA                     ___flmul:	
  3480                           
  3481                           ;incstack = 0
  3482                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3483  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  3484  04CB  1303               	bcf	3,6	;RP1=0, select bank0
  3485  04CC  0823               	movf	___flmul@b+3,w
  3486  04CD  3980               	andlw	128
  3487  04CE  00A8               	movwf	??___flmul
  3488  04CF  0828               	movf	??___flmul,w
  3489  04D0  00AD               	movwf	___flmul@sign
  3490  04D1  0823               	movf	___flmul@b+3,w
  3491  04D2  00A8               	movwf	??___flmul
  3492  04D3  0728               	addwf	??___flmul,w
  3493  04D4  00A9               	movwf	??___flmul+1
  3494  04D5  0829               	movf	??___flmul+1,w
  3495  04D6  00B3               	movwf	___flmul@bexp
  3496  04D7  1BA2               	btfsc	___flmul@b+2,7
  3497  04D8  1433               	bsf	___flmul@bexp,0
  3498  04D9  0833               	movf	___flmul@bexp,w
  3499  04DA  1903               	btfsc	3,2
  3500  04DB  2CE9               	goto	l1923
  3501  04DC  0A33               	incf	___flmul@bexp,w
  3502  04DD  1D03               	btfss	3,2
  3503  04DE  2CE7               	goto	l1921
  3504  04DF  3000               	movlw	0
  3505  04E0  00A3               	movwf	___flmul@b+3
  3506  04E1  3000               	movlw	0
  3507  04E2  00A2               	movwf	___flmul@b+2
  3508  04E3  3000               	movlw	0
  3509  04E4  00A1               	movwf	___flmul@b+1
  3510  04E5  3000               	movlw	0
  3511  04E6  00A0               	movwf	___flmul@b
  3512  04E7                     l1921:	
  3513  04E7  17A2               	bsf	___flmul@b+2,7
  3514  04E8  2CF1               	goto	l1925
  3515  04E9                     l1923:	
  3516  04E9  3000               	movlw	0
  3517  04EA  00A3               	movwf	___flmul@b+3
  3518  04EB  3000               	movlw	0
  3519  04EC  00A2               	movwf	___flmul@b+2
  3520  04ED  3000               	movlw	0
  3521  04EE  00A1               	movwf	___flmul@b+1
  3522  04EF  3000               	movlw	0
  3523  04F0  00A0               	movwf	___flmul@b
  3524  04F1                     l1925:	
  3525  04F1  0827               	movf	___flmul@a+3,w
  3526  04F2  3980               	andlw	128
  3527  04F3  00A8               	movwf	??___flmul
  3528  04F4  0828               	movf	??___flmul,w
  3529  04F5  06AD               	xorwf	___flmul@sign,f
  3530  04F6  0827               	movf	___flmul@a+3,w
  3531  04F7  00A8               	movwf	??___flmul
  3532  04F8  0728               	addwf	??___flmul,w
  3533  04F9  00A9               	movwf	??___flmul+1
  3534  04FA  0829               	movf	??___flmul+1,w
  3535  04FB  00B2               	movwf	___flmul@aexp
  3536  04FC  1BA6               	btfsc	___flmul@a+2,7
  3537  04FD  1432               	bsf	___flmul@aexp,0
  3538  04FE  0832               	movf	___flmul@aexp,w
  3539  04FF  1903               	btfsc	3,2
  3540  0500  2D0E               	goto	l1941
  3541  0501  0A32               	incf	___flmul@aexp,w
  3542  0502  1D03               	btfss	3,2
  3543  0503  2D0C               	goto	l1939
  3544  0504  3000               	movlw	0
  3545  0505  00A7               	movwf	___flmul@a+3
  3546  0506  3000               	movlw	0
  3547  0507  00A6               	movwf	___flmul@a+2
  3548  0508  3000               	movlw	0
  3549  0509  00A5               	movwf	___flmul@a+1
  3550  050A  3000               	movlw	0
  3551  050B  00A4               	movwf	___flmul@a
  3552  050C                     l1939:	
  3553  050C  17A6               	bsf	___flmul@a+2,7
  3554  050D  2D16               	goto	l1943
  3555  050E                     l1941:	
  3556  050E  3000               	movlw	0
  3557  050F  00A7               	movwf	___flmul@a+3
  3558  0510  3000               	movlw	0
  3559  0511  00A6               	movwf	___flmul@a+2
  3560  0512  3000               	movlw	0
  3561  0513  00A5               	movwf	___flmul@a+1
  3562  0514  3000               	movlw	0
  3563  0515  00A4               	movwf	___flmul@a
  3564  0516                     l1943:	
  3565  0516  0832               	movf	___flmul@aexp,w
  3566  0517  1D03               	btfss	3,2
  3567  0518  0833               	movf	___flmul@bexp,w
  3568  0519  1D03               	btfss	3,2
  3569  051A  2D24               	goto	l1951
  3570  051B  3000               	movlw	0
  3571  051C  00A3               	movwf	?___flmul+3
  3572  051D  3000               	movlw	0
  3573  051E  00A2               	movwf	?___flmul+2
  3574  051F  3000               	movlw	0
  3575  0520  00A1               	movwf	?___flmul+1
  3576  0521  3000               	movlw	0
  3577  0522  00A0               	movwf	?___flmul
  3578  0523  0008               	return
  3579  0524                     l1951:	
  3580  0524  0820               	movf	___flmul@b,w
  3581  0525  00A8               	movwf	??___flmul
  3582  0526  0828               	movf	??___flmul,w
  3583  0527  00F0               	movwf	__Umul8_16@multiplicand
  3584  0528  0826               	movf	___flmul@a+2,w
  3585  0529  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3586  052E  0871               	movf	?__Umul8_16+1,w
  3587  052F  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0530  1303               	bcf	3,6	;RP1=0, select bank0
  3589  0531  00B9               	movwf	___flmul@temp+1
  3590  0532  0870               	movf	?__Umul8_16,w
  3591  0533  00B8               	movwf	___flmul@temp
  3592  0534  0838               	movf	___flmul@temp,w
  3593  0535  00A8               	movwf	??___flmul
  3594  0536  01A9               	clrf	??___flmul+1
  3595  0537  01AA               	clrf	??___flmul+2
  3596  0538  01AB               	clrf	??___flmul+3
  3597  0539  082B               	movf	??___flmul+3,w
  3598  053A  00B1               	movwf	___flmul@grs+3
  3599  053B  082A               	movf	??___flmul+2,w
  3600  053C  00B0               	movwf	___flmul@grs+2
  3601  053D  0829               	movf	??___flmul+1,w
  3602  053E  00AF               	movwf	___flmul@grs+1
  3603  053F  0828               	movf	??___flmul,w
  3604  0540  00AE               	movwf	___flmul@grs
  3605  0541  0839               	movf	___flmul@temp+1,w
  3606  0542  00A8               	movwf	??___flmul
  3607  0543  01A9               	clrf	??___flmul+1
  3608  0544  01AA               	clrf	??___flmul+2
  3609  0545  01AB               	clrf	??___flmul+3
  3610  0546  082B               	movf	??___flmul+3,w
  3611  0547  00B7               	movwf	___flmul@prod+3
  3612  0548  082A               	movf	??___flmul+2,w
  3613  0549  00B6               	movwf	___flmul@prod+2
  3614  054A  0829               	movf	??___flmul+1,w
  3615  054B  00B5               	movwf	___flmul@prod+1
  3616  054C  0828               	movf	??___flmul,w
  3617  054D  00B4               	movwf	___flmul@prod
  3618  054E  0821               	movf	___flmul@b+1,w
  3619  054F  00A8               	movwf	??___flmul
  3620  0550  0828               	movf	??___flmul,w
  3621  0551  00F0               	movwf	__Umul8_16@multiplicand
  3622  0552  0825               	movf	___flmul@a+1,w
  3623  0553  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3624  0558  0871               	movf	?__Umul8_16+1,w
  3625  0559  1283               	bcf	3,5	;RP0=0, select bank0
  3626  055A  1303               	bcf	3,6	;RP1=0, select bank0
  3627  055B  00B9               	movwf	___flmul@temp+1
  3628  055C  0870               	movf	?__Umul8_16,w
  3629  055D  00B8               	movwf	___flmul@temp
  3630  055E  0838               	movf	___flmul@temp,w
  3631  055F  00A8               	movwf	??___flmul
  3632  0560  01A9               	clrf	??___flmul+1
  3633  0561  01AA               	clrf	??___flmul+2
  3634  0562  01AB               	clrf	??___flmul+3
  3635  0563  0828               	movf	??___flmul,w
  3636  0564  07AE               	addwf	___flmul@grs,f
  3637  0565  0829               	movf	??___flmul+1,w
  3638  0566  1103               	clrz
  3639  0567  1803               	skipnc
  3640  0568  3E01               	addlw	1
  3641  0569  1D03               	btfss	3,2
  3642  056A  07AF               	addwf	___flmul@grs+1,f
  3643  056B  082A               	movf	??___flmul+2,w
  3644  056C  1103               	clrz
  3645  056D  1803               	skipnc
  3646  056E  3E01               	addlw	1
  3647  056F  1D03               	btfss	3,2
  3648  0570  07B0               	addwf	___flmul@grs+2,f
  3649  0571  082B               	movf	??___flmul+3,w
  3650  0572  1103               	clrz
  3651  0573  1803               	skipnc
  3652  0574  3E01               	addlw	1
  3653  0575  1D03               	btfss	3,2
  3654  0576  07B1               	addwf	___flmul@grs+3,f
  3655  0577  0839               	movf	___flmul@temp+1,w
  3656  0578  00A8               	movwf	??___flmul
  3657  0579  01A9               	clrf	??___flmul+1
  3658  057A  01AA               	clrf	??___flmul+2
  3659  057B  01AB               	clrf	??___flmul+3
  3660  057C  0828               	movf	??___flmul,w
  3661  057D  07B4               	addwf	___flmul@prod,f
  3662  057E  0829               	movf	??___flmul+1,w
  3663  057F  1103               	clrz
  3664  0580  1803               	skipnc
  3665  0581  3E01               	addlw	1
  3666  0582  1D03               	btfss	3,2
  3667  0583  07B5               	addwf	___flmul@prod+1,f
  3668  0584  082A               	movf	??___flmul+2,w
  3669  0585  1103               	clrz
  3670  0586  1803               	skipnc
  3671  0587  3E01               	addlw	1
  3672  0588  1D03               	btfss	3,2
  3673  0589  07B6               	addwf	___flmul@prod+2,f
  3674  058A  082B               	movf	??___flmul+3,w
  3675  058B  1103               	clrz
  3676  058C  1803               	skipnc
  3677  058D  3E01               	addlw	1
  3678  058E  1D03               	btfss	3,2
  3679  058F  07B7               	addwf	___flmul@prod+3,f
  3680  0590  0822               	movf	___flmul@b+2,w
  3681  0591  00A8               	movwf	??___flmul
  3682  0592  0828               	movf	??___flmul,w
  3683  0593  00F0               	movwf	__Umul8_16@multiplicand
  3684  0594  0824               	movf	___flmul@a,w
  3685  0595  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3686  059A  0871               	movf	?__Umul8_16+1,w
  3687  059B  1283               	bcf	3,5	;RP0=0, select bank0
  3688  059C  1303               	bcf	3,6	;RP1=0, select bank0
  3689  059D  00B9               	movwf	___flmul@temp+1
  3690  059E  0870               	movf	?__Umul8_16,w
  3691  059F  00B8               	movwf	___flmul@temp
  3692  05A0  0838               	movf	___flmul@temp,w
  3693  05A1  00A8               	movwf	??___flmul
  3694  05A2  01A9               	clrf	??___flmul+1
  3695  05A3  01AA               	clrf	??___flmul+2
  3696  05A4  01AB               	clrf	??___flmul+3
  3697  05A5  0828               	movf	??___flmul,w
  3698  05A6  07AE               	addwf	___flmul@grs,f
  3699  05A7  0829               	movf	??___flmul+1,w
  3700  05A8  1103               	clrz
  3701  05A9  1803               	skipnc
  3702  05AA  3E01               	addlw	1
  3703  05AB  1D03               	btfss	3,2
  3704  05AC  07AF               	addwf	___flmul@grs+1,f
  3705  05AD  082A               	movf	??___flmul+2,w
  3706  05AE  1103               	clrz
  3707  05AF  1803               	skipnc
  3708  05B0  3E01               	addlw	1
  3709  05B1  1D03               	btfss	3,2
  3710  05B2  07B0               	addwf	___flmul@grs+2,f
  3711  05B3  082B               	movf	??___flmul+3,w
  3712  05B4  1103               	clrz
  3713  05B5  1803               	skipnc
  3714  05B6  3E01               	addlw	1
  3715  05B7  1D03               	btfss	3,2
  3716  05B8  07B1               	addwf	___flmul@grs+3,f
  3717  05B9  0839               	movf	___flmul@temp+1,w
  3718  05BA  00A8               	movwf	??___flmul
  3719  05BB  01A9               	clrf	??___flmul+1
  3720  05BC  01AA               	clrf	??___flmul+2
  3721  05BD  01AB               	clrf	??___flmul+3
  3722  05BE  0828               	movf	??___flmul,w
  3723  05BF  07B4               	addwf	___flmul@prod,f
  3724  05C0  0829               	movf	??___flmul+1,w
  3725  05C1  1103               	clrz
  3726  05C2  1803               	skipnc
  3727  05C3  3E01               	addlw	1
  3728  05C4  1D03               	btfss	3,2
  3729  05C5  07B5               	addwf	___flmul@prod+1,f
  3730  05C6  082A               	movf	??___flmul+2,w
  3731  05C7  1103               	clrz
  3732  05C8  1803               	skipnc
  3733  05C9  3E01               	addlw	1
  3734  05CA  1D03               	btfss	3,2
  3735  05CB  07B6               	addwf	___flmul@prod+2,f
  3736  05CC  082B               	movf	??___flmul+3,w
  3737  05CD  1103               	clrz
  3738  05CE  1803               	skipnc
  3739  05CF  3E01               	addlw	1
  3740  05D0  1D03               	btfss	3,2
  3741  05D1  07B7               	addwf	___flmul@prod+3,f
  3742  05D2  3008               	movlw	8
  3743  05D3  00A8               	movwf	??___flmul
  3744  05D4                     u1965:	
  3745  05D4  1003               	clrc
  3746  05D5  0DAE               	rlf	___flmul@grs,f
  3747  05D6  0DAF               	rlf	___flmul@grs+1,f
  3748  05D7  0DB0               	rlf	___flmul@grs+2,f
  3749  05D8  0DB1               	rlf	___flmul@grs+3,f
  3750  05D9  0BA8               	decfsz	??___flmul,f
  3751  05DA  2DD4               	goto	u1965
  3752  05DB  0821               	movf	___flmul@b+1,w
  3753  05DC  00A8               	movwf	??___flmul
  3754  05DD  0828               	movf	??___flmul,w
  3755  05DE  00F0               	movwf	__Umul8_16@multiplicand
  3756  05DF  0824               	movf	___flmul@a,w
  3757  05E0  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3758  05E5  0871               	movf	?__Umul8_16+1,w
  3759  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  3760  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  3761  05E8  00B9               	movwf	___flmul@temp+1
  3762  05E9  0870               	movf	?__Umul8_16,w
  3763  05EA  00B8               	movwf	___flmul@temp
  3764  05EB  0838               	movf	___flmul@temp,w
  3765  05EC  00A8               	movwf	??___flmul
  3766  05ED  0839               	movf	___flmul@temp+1,w
  3767  05EE  00A9               	movwf	??___flmul+1
  3768  05EF  01AA               	clrf	??___flmul+2
  3769  05F0  01AB               	clrf	??___flmul+3
  3770  05F1  0828               	movf	??___flmul,w
  3771  05F2  07AE               	addwf	___flmul@grs,f
  3772  05F3  0829               	movf	??___flmul+1,w
  3773  05F4  1103               	clrz
  3774  05F5  1803               	skipnc
  3775  05F6  3E01               	addlw	1
  3776  05F7  1D03               	btfss	3,2
  3777  05F8  07AF               	addwf	___flmul@grs+1,f
  3778  05F9  082A               	movf	??___flmul+2,w
  3779  05FA  1103               	clrz
  3780  05FB  1803               	skipnc
  3781  05FC  3E01               	addlw	1
  3782  05FD  1D03               	btfss	3,2
  3783  05FE  07B0               	addwf	___flmul@grs+2,f
  3784  05FF  082B               	movf	??___flmul+3,w
  3785  0600  1103               	clrz
  3786  0601  1803               	skipnc
  3787  0602  3E01               	addlw	1
  3788  0603  1D03               	btfss	3,2
  3789  0604  07B1               	addwf	___flmul@grs+3,f
  3790  0605  0820               	movf	___flmul@b,w
  3791  0606  00A8               	movwf	??___flmul
  3792  0607  0828               	movf	??___flmul,w
  3793  0608  00F0               	movwf	__Umul8_16@multiplicand
  3794  0609  0825               	movf	___flmul@a+1,w
  3795  060A  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3796  060F  0871               	movf	?__Umul8_16+1,w
  3797  0610  1283               	bcf	3,5	;RP0=0, select bank0
  3798  0611  1303               	bcf	3,6	;RP1=0, select bank0
  3799  0612  00B9               	movwf	___flmul@temp+1
  3800  0613  0870               	movf	?__Umul8_16,w
  3801  0614  00B8               	movwf	___flmul@temp
  3802  0615  0838               	movf	___flmul@temp,w
  3803  0616  00A8               	movwf	??___flmul
  3804  0617  0839               	movf	___flmul@temp+1,w
  3805  0618  00A9               	movwf	??___flmul+1
  3806  0619  01AA               	clrf	??___flmul+2
  3807  061A  01AB               	clrf	??___flmul+3
  3808  061B  0828               	movf	??___flmul,w
  3809  061C  07AE               	addwf	___flmul@grs,f
  3810  061D  0829               	movf	??___flmul+1,w
  3811  061E  1103               	clrz
  3812  061F  1803               	skipnc
  3813  0620  3E01               	addlw	1
  3814  0621  1D03               	btfss	3,2
  3815  0622  07AF               	addwf	___flmul@grs+1,f
  3816  0623  082A               	movf	??___flmul+2,w
  3817  0624  1103               	clrz
  3818  0625  1803               	skipnc
  3819  0626  3E01               	addlw	1
  3820  0627  1D03               	btfss	3,2
  3821  0628  07B0               	addwf	___flmul@grs+2,f
  3822  0629  082B               	movf	??___flmul+3,w
  3823  062A  1103               	clrz
  3824  062B  1803               	skipnc
  3825  062C  3E01               	addlw	1
  3826  062D  1D03               	btfss	3,2
  3827  062E  07B1               	addwf	___flmul@grs+3,f
  3828  062F  3008               	movlw	8
  3829  0630  00A8               	movwf	??___flmul
  3830  0631                     u1995:	
  3831  0631  1003               	clrc
  3832  0632  0DAE               	rlf	___flmul@grs,f
  3833  0633  0DAF               	rlf	___flmul@grs+1,f
  3834  0634  0DB0               	rlf	___flmul@grs+2,f
  3835  0635  0DB1               	rlf	___flmul@grs+3,f
  3836  0636  0BA8               	decfsz	??___flmul,f
  3837  0637  2E31               	goto	u1995
  3838  0638  0820               	movf	___flmul@b,w
  3839  0639  00A8               	movwf	??___flmul
  3840  063A  0828               	movf	??___flmul,w
  3841  063B  00F0               	movwf	__Umul8_16@multiplicand
  3842  063C  0824               	movf	___flmul@a,w
  3843  063D  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3844  0642  0871               	movf	?__Umul8_16+1,w
  3845  0643  1283               	bcf	3,5	;RP0=0, select bank0
  3846  0644  1303               	bcf	3,6	;RP1=0, select bank0
  3847  0645  00B9               	movwf	___flmul@temp+1
  3848  0646  0870               	movf	?__Umul8_16,w
  3849  0647  00B8               	movwf	___flmul@temp
  3850  0648  0838               	movf	___flmul@temp,w
  3851  0649  00A8               	movwf	??___flmul
  3852  064A  0839               	movf	___flmul@temp+1,w
  3853  064B  00A9               	movwf	??___flmul+1
  3854  064C  01AA               	clrf	??___flmul+2
  3855  064D  01AB               	clrf	??___flmul+3
  3856  064E  0828               	movf	??___flmul,w
  3857  064F  07AE               	addwf	___flmul@grs,f
  3858  0650  0829               	movf	??___flmul+1,w
  3859  0651  1103               	clrz
  3860  0652  1803               	skipnc
  3861  0653  3E01               	addlw	1
  3862  0654  1D03               	btfss	3,2
  3863  0655  07AF               	addwf	___flmul@grs+1,f
  3864  0656  082A               	movf	??___flmul+2,w
  3865  0657  1103               	clrz
  3866  0658  1803               	skipnc
  3867  0659  3E01               	addlw	1
  3868  065A  1D03               	btfss	3,2
  3869  065B  07B0               	addwf	___flmul@grs+2,f
  3870  065C  082B               	movf	??___flmul+3,w
  3871  065D  1103               	clrz
  3872  065E  1803               	skipnc
  3873  065F  3E01               	addlw	1
  3874  0660  1D03               	btfss	3,2
  3875  0661  07B1               	addwf	___flmul@grs+3,f
  3876  0662  0821               	movf	___flmul@b+1,w
  3877  0663  00A8               	movwf	??___flmul
  3878  0664  0828               	movf	??___flmul,w
  3879  0665  00F0               	movwf	__Umul8_16@multiplicand
  3880  0666  0826               	movf	___flmul@a+2,w
  3881  0667  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3882  066C  0871               	movf	?__Umul8_16+1,w
  3883  066D  1283               	bcf	3,5	;RP0=0, select bank0
  3884  066E  1303               	bcf	3,6	;RP1=0, select bank0
  3885  066F  00B9               	movwf	___flmul@temp+1
  3886  0670  0870               	movf	?__Umul8_16,w
  3887  0671  00B8               	movwf	___flmul@temp
  3888  0672  0838               	movf	___flmul@temp,w
  3889  0673  00A8               	movwf	??___flmul
  3890  0674  0839               	movf	___flmul@temp+1,w
  3891  0675  00A9               	movwf	??___flmul+1
  3892  0676  01AA               	clrf	??___flmul+2
  3893  0677  01AB               	clrf	??___flmul+3
  3894  0678  0828               	movf	??___flmul,w
  3895  0679  07B4               	addwf	___flmul@prod,f
  3896  067A  0829               	movf	??___flmul+1,w
  3897  067B  1103               	clrz
  3898  067C  1803               	skipnc
  3899  067D  3E01               	addlw	1
  3900  067E  1D03               	btfss	3,2
  3901  067F  07B5               	addwf	___flmul@prod+1,f
  3902  0680  082A               	movf	??___flmul+2,w
  3903  0681  1103               	clrz
  3904  0682  1803               	skipnc
  3905  0683  3E01               	addlw	1
  3906  0684  1D03               	btfss	3,2
  3907  0685  07B6               	addwf	___flmul@prod+2,f
  3908  0686  082B               	movf	??___flmul+3,w
  3909  0687  1103               	clrz
  3910  0688  1803               	skipnc
  3911  0689  3E01               	addlw	1
  3912  068A  1D03               	btfss	3,2
  3913  068B  07B7               	addwf	___flmul@prod+3,f
  3914  068C  0822               	movf	___flmul@b+2,w
  3915  068D  00A8               	movwf	??___flmul
  3916  068E  0828               	movf	??___flmul,w
  3917  068F  00F0               	movwf	__Umul8_16@multiplicand
  3918  0690  0825               	movf	___flmul@a+1,w
  3919  0691  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3920  0696  0871               	movf	?__Umul8_16+1,w
  3921  0697  1283               	bcf	3,5	;RP0=0, select bank0
  3922  0698  1303               	bcf	3,6	;RP1=0, select bank0
  3923  0699  00B9               	movwf	___flmul@temp+1
  3924  069A  0870               	movf	?__Umul8_16,w
  3925  069B  00B8               	movwf	___flmul@temp
  3926  069C  0838               	movf	___flmul@temp,w
  3927  069D  00A8               	movwf	??___flmul
  3928  069E  0839               	movf	___flmul@temp+1,w
  3929  069F  00A9               	movwf	??___flmul+1
  3930  06A0  01AA               	clrf	??___flmul+2
  3931  06A1  01AB               	clrf	??___flmul+3
  3932  06A2  0828               	movf	??___flmul,w
  3933  06A3  07B4               	addwf	___flmul@prod,f
  3934  06A4  0829               	movf	??___flmul+1,w
  3935  06A5  1103               	clrz
  3936  06A6  1803               	skipnc
  3937  06A7  3E01               	addlw	1
  3938  06A8  1D03               	btfss	3,2
  3939  06A9  07B5               	addwf	___flmul@prod+1,f
  3940  06AA  082A               	movf	??___flmul+2,w
  3941  06AB  1103               	clrz
  3942  06AC  1803               	skipnc
  3943  06AD  3E01               	addlw	1
  3944  06AE  1D03               	btfss	3,2
  3945  06AF  07B6               	addwf	___flmul@prod+2,f
  3946  06B0  082B               	movf	??___flmul+3,w
  3947  06B1  1103               	clrz
  3948  06B2  1803               	skipnc
  3949  06B3  3E01               	addlw	1
  3950  06B4  1D03               	btfss	3,2
  3951  06B5  07B7               	addwf	___flmul@prod+3,f
  3952  06B6  0822               	movf	___flmul@b+2,w
  3953  06B7  00A8               	movwf	??___flmul
  3954  06B8  0828               	movf	??___flmul,w
  3955  06B9  00F0               	movwf	__Umul8_16@multiplicand
  3956  06BA  0826               	movf	___flmul@a+2,w
  3957  06BB  120A  158A  227B  120A  118A  	fcall	__Umul8_16
  3958  06C0  0871               	movf	?__Umul8_16+1,w
  3959  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  3960  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  3961  06C3  00B9               	movwf	___flmul@temp+1
  3962  06C4  0870               	movf	?__Umul8_16,w
  3963  06C5  00B8               	movwf	___flmul@temp
  3964  06C6  0838               	movf	___flmul@temp,w
  3965  06C7  00A8               	movwf	??___flmul
  3966  06C8  0839               	movf	___flmul@temp+1,w
  3967  06C9  00A9               	movwf	??___flmul+1
  3968  06CA  01AA               	clrf	??___flmul+2
  3969  06CB  01AB               	clrf	??___flmul+3
  3970  06CC  3008               	movlw	8
  3971  06CD                     u2035:	
  3972  06CD  1003               	clrc
  3973  06CE  0DA8               	rlf	??___flmul,f
  3974  06CF  0DA9               	rlf	??___flmul+1,f
  3975  06D0  0DAA               	rlf	??___flmul+2,f
  3976  06D1  0DAB               	rlf	??___flmul+3,f
  3977  06D2  3EFF               	addlw	-1
  3978  06D3  1D03               	skipz
  3979  06D4  2ECD               	goto	u2035
  3980  06D5  0828               	movf	??___flmul,w
  3981  06D6  07B4               	addwf	___flmul@prod,f
  3982  06D7  0829               	movf	??___flmul+1,w
  3983  06D8  1103               	clrz
  3984  06D9  1803               	skipnc
  3985  06DA  3E01               	addlw	1
  3986  06DB  1D03               	btfss	3,2
  3987  06DC  07B5               	addwf	___flmul@prod+1,f
  3988  06DD  082A               	movf	??___flmul+2,w
  3989  06DE  1103               	clrz
  3990  06DF  1803               	skipnc
  3991  06E0  3E01               	addlw	1
  3992  06E1  1D03               	btfss	3,2
  3993  06E2  07B6               	addwf	___flmul@prod+2,f
  3994  06E3  082B               	movf	??___flmul+3,w
  3995  06E4  1103               	clrz
  3996  06E5  1803               	skipnc
  3997  06E6  3E01               	addlw	1
  3998  06E7  1D03               	btfss	3,2
  3999  06E8  07B7               	addwf	___flmul@prod+3,f
  4000  06E9  082E               	movf	___flmul@grs,w
  4001  06EA  00A8               	movwf	??___flmul
  4002  06EB  082F               	movf	___flmul@grs+1,w
  4003  06EC  00A9               	movwf	??___flmul+1
  4004  06ED  0830               	movf	___flmul@grs+2,w
  4005  06EE  00AA               	movwf	??___flmul+2
  4006  06EF  0831               	movf	___flmul@grs+3,w
  4007  06F0  00AB               	movwf	??___flmul+3
  4008  06F1  3018               	movlw	24
  4009  06F2                     u2055:	
  4010  06F2  1003               	clrc
  4011  06F3  0CAB               	rrf	??___flmul+3,f
  4012  06F4  0CAA               	rrf	??___flmul+2,f
  4013  06F5  0CA9               	rrf	??___flmul+1,f
  4014  06F6  0CA8               	rrf	??___flmul,f
  4015  06F7  3EFF               	addlw	-1
  4016  06F8  1D03               	skipz
  4017  06F9  2EF2               	goto	u2055
  4018  06FA  0828               	movf	??___flmul,w
  4019  06FB  07B4               	addwf	___flmul@prod,f
  4020  06FC  0829               	movf	??___flmul+1,w
  4021  06FD  1103               	clrz
  4022  06FE  1803               	skipnc
  4023  06FF  3E01               	addlw	1
  4024  0700  1D03               	btfss	3,2
  4025  0701  07B5               	addwf	___flmul@prod+1,f
  4026  0702  082A               	movf	??___flmul+2,w
  4027  0703  1103               	clrz
  4028  0704  1803               	skipnc
  4029  0705  3E01               	addlw	1
  4030  0706  1D03               	btfss	3,2
  4031  0707  07B6               	addwf	___flmul@prod+2,f
  4032  0708  082B               	movf	??___flmul+3,w
  4033  0709  1103               	clrz
  4034  070A  1803               	skipnc
  4035  070B  3E01               	addlw	1
  4036  070C  1D03               	btfss	3,2
  4037  070D  07B7               	addwf	___flmul@prod+3,f
  4038  070E  3008               	movlw	8
  4039  070F  00A8               	movwf	??___flmul
  4040  0710                     u2075:	
  4041  0710  1003               	clrc
  4042  0711  0DAE               	rlf	___flmul@grs,f
  4043  0712  0DAF               	rlf	___flmul@grs+1,f
  4044  0713  0DB0               	rlf	___flmul@grs+2,f
  4045  0714  0DB1               	rlf	___flmul@grs+3,f
  4046  0715  0BA8               	decfsz	??___flmul,f
  4047  0716  2F10               	goto	u2075
  4048  0717  0833               	movf	___flmul@bexp,w
  4049  0718  0732               	addwf	___flmul@aexp,w
  4050  0719  00A8               	movwf	??___flmul
  4051  071A  01A9               	clrf	??___flmul+1
  4052  071B  0DA9               	rlf	??___flmul+1,f
  4053  071C  0828               	movf	??___flmul,w
  4054  071D  3E82               	addlw	130
  4055  071E  00B8               	movwf	___flmul@temp
  4056  071F  0829               	movf	??___flmul+1,w
  4057  0720  1803               	skipnc
  4058  0721  3E01               	addlw	1
  4059  0722  3EFF               	addlw	255
  4060  0723  00B9               	movwf	___flmul@temp+1
  4061  0724                     l2003:	
  4062  0724  1BB6               	btfsc	___flmul@prod+2,7
  4063  0725  2F41               	goto	l2005
  4064  0726  3001               	movlw	1
  4065  0727  00A8               	movwf	??___flmul
  4066  0728                     u2085:	
  4067  0728  1003               	clrc
  4068  0729  0DB4               	rlf	___flmul@prod,f
  4069  072A  0DB5               	rlf	___flmul@prod+1,f
  4070  072B  0DB6               	rlf	___flmul@prod+2,f
  4071  072C  0DB7               	rlf	___flmul@prod+3,f
  4072  072D  0BA8               	decfsz	??___flmul,f
  4073  072E  2F28               	goto	u2085
  4074  072F  1BB1               	btfsc	___flmul@grs+3,7
  4075  0730  1434               	bsf	___flmul@prod,0
  4076  0731  3001               	movlw	1
  4077  0732  00A8               	movwf	??___flmul
  4078  0733                     u2105:	
  4079  0733  1003               	clrc
  4080  0734  0DAE               	rlf	___flmul@grs,f
  4081  0735  0DAF               	rlf	___flmul@grs+1,f
  4082  0736  0DB0               	rlf	___flmul@grs+2,f
  4083  0737  0DB1               	rlf	___flmul@grs+3,f
  4084  0738  0BA8               	decfsz	??___flmul,f
  4085  0739  2F33               	goto	u2105
  4086  073A  30FF               	movlw	255
  4087  073B  07B8               	addwf	___flmul@temp,f
  4088  073C  1803               	skipnc
  4089  073D  0AB9               	incf	___flmul@temp+1,f
  4090  073E  30FF               	movlw	255
  4091  073F  07B9               	addwf	___flmul@temp+1,f
  4092  0740  2F24               	goto	l2003
  4093  0741                     l2005:	
  4094  0741  01B2               	clrf	___flmul@aexp
  4095  0742  1FB1               	btfss	___flmul@grs+3,7
  4096  0743  2F5A               	goto	l2015
  4097  0744  30FF               	movlw	255
  4098  0745  052E               	andwf	___flmul@grs,w
  4099  0746  00A8               	movwf	??___flmul
  4100  0747  30FF               	movlw	255
  4101  0748  052F               	andwf	___flmul@grs+1,w
  4102  0749  00A9               	movwf	??___flmul+1
  4103  074A  30FF               	movlw	255
  4104  074B  0530               	andwf	___flmul@grs+2,w
  4105  074C  00AA               	movwf	??___flmul+2
  4106  074D  307F               	movlw	127
  4107  074E  0531               	andwf	___flmul@grs+3,w
  4108  074F  00AB               	movwf	??___flmul+3
  4109  0750  082B               	movf	??___flmul+3,w
  4110  0751  042A               	iorwf	??___flmul+2,w
  4111  0752  0429               	iorwf	??___flmul+1,w
  4112  0753  0428               	iorwf	??___flmul,w
  4113  0754  1903               	skipnz
  4114  0755  1834               	btfsc	___flmul@prod,0
  4115  0756  2F58               	goto	l2011
  4116  0757  2F5A               	goto	l2015
  4117  0758                     l2011:	
  4118  0758  01B2               	clrf	___flmul@aexp
  4119  0759  0AB2               	incf	___flmul@aexp,f
  4120  075A                     l2015:	
  4121  075A  0832               	movf	___flmul@aexp,w
  4122  075B  1903               	btfsc	3,2
  4123  075C  2F8C               	goto	l2025
  4124  075D  3001               	movlw	1
  4125  075E  07B4               	addwf	___flmul@prod,f
  4126  075F  3000               	movlw	0
  4127  0760  1803               	skipnc
  4128  0761  3001               	movlw	1
  4129  0762  07B5               	addwf	___flmul@prod+1,f
  4130  0763  3000               	movlw	0
  4131  0764  1803               	skipnc
  4132  0765  3001               	movlw	1
  4133  0766  07B6               	addwf	___flmul@prod+2,f
  4134  0767  3000               	movlw	0
  4135  0768  1803               	skipnc
  4136  0769  3001               	movlw	1
  4137  076A  07B7               	addwf	___flmul@prod+3,f
  4138  076B  1C37               	btfss	___flmul@prod+3,0
  4139  076C  2F8C               	goto	l2025
  4140  076D  0834               	movf	___flmul@prod,w
  4141  076E  00A8               	movwf	??___flmul
  4142  076F  0835               	movf	___flmul@prod+1,w
  4143  0770  00A9               	movwf	??___flmul+1
  4144  0771  0836               	movf	___flmul@prod+2,w
  4145  0772  00AA               	movwf	??___flmul+2
  4146  0773  0837               	movf	___flmul@prod+3,w
  4147  0774  00AB               	movwf	??___flmul+3
  4148  0775  3001               	movlw	1
  4149  0776  00AC               	movwf	??___flmul+4
  4150  0777                     u2175:	
  4151  0777  0D2B               	rlf	??___flmul+3,w
  4152  0778  0CAB               	rrf	??___flmul+3,f
  4153  0779  0CAA               	rrf	??___flmul+2,f
  4154  077A  0CA9               	rrf	??___flmul+1,f
  4155  077B  0CA8               	rrf	??___flmul,f
  4156  077C  0BAC               	decfsz	??___flmul+4,f
  4157  077D  2F77               	goto	u2175
  4158  077E  082B               	movf	??___flmul+3,w
  4159  077F  00B7               	movwf	___flmul@prod+3
  4160  0780  082A               	movf	??___flmul+2,w
  4161  0781  00B6               	movwf	___flmul@prod+2
  4162  0782  0829               	movf	??___flmul+1,w
  4163  0783  00B5               	movwf	___flmul@prod+1
  4164  0784  0828               	movf	??___flmul,w
  4165  0785  00B4               	movwf	___flmul@prod
  4166  0786  3001               	movlw	1
  4167  0787  07B8               	addwf	___flmul@temp,f
  4168  0788  1803               	skipnc
  4169  0789  0AB9               	incf	___flmul@temp+1,f
  4170  078A  3000               	movlw	0
  4171  078B  07B9               	addwf	___flmul@temp+1,f
  4172  078C                     l2025:	
  4173  078C  0839               	movf	___flmul@temp+1,w
  4174  078D  3A80               	xorlw	128
  4175  078E  00FF               	movwf	127
  4176  078F  3080               	movlw	128
  4177  0790  027F               	subwf	127,w
  4178  0791  1D03               	skipz
  4179  0792  2F95               	goto	u2185
  4180  0793  30FF               	movlw	255
  4181  0794  0238               	subwf	___flmul@temp,w
  4182  0795                     u2185:	
  4183  0795  1C03               	skipc
  4184  0796  2FA2               	goto	l2029
  4185  0797  307F               	movlw	127
  4186  0798  1283               	bcf	3,5	;RP0=0, select bank0
  4187  0799  1303               	bcf	3,6	;RP1=0, select bank0
  4188  079A  00B7               	movwf	___flmul@prod+3
  4189  079B  3080               	movlw	128
  4190  079C  00B6               	movwf	___flmul@prod+2
  4191  079D  3000               	movlw	0
  4192  079E  00B5               	movwf	___flmul@prod+1
  4193  079F  3000               	movlw	0
  4194  07A0  00B4               	movwf	___flmul@prod
  4195  07A1  2FD2               	goto	l726
  4196  07A2                     l2029:	
  4197  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  4198  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  4199  07A4  0839               	movf	___flmul@temp+1,w
  4200  07A5  3A80               	xorlw	128
  4201  07A6  00FF               	movwf	127
  4202  07A7  3080               	movlw	128
  4203  07A8  027F               	subwf	127,w
  4204  07A9  1D03               	skipz
  4205  07AA  2FAD               	goto	u2195
  4206  07AB  3001               	movlw	1
  4207  07AC  0238               	subwf	___flmul@temp,w
  4208  07AD                     u2195:	
  4209  07AD  1803               	skipnc
  4210  07AE  2FBB               	goto	l2035
  4211  07AF  3000               	movlw	0
  4212  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  4213  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  4214  07B2  00B7               	movwf	___flmul@prod+3
  4215  07B3  3000               	movlw	0
  4216  07B4  00B6               	movwf	___flmul@prod+2
  4217  07B5  3000               	movlw	0
  4218  07B6  00B5               	movwf	___flmul@prod+1
  4219  07B7  3000               	movlw	0
  4220  07B8  00B4               	movwf	___flmul@prod
  4221  07B9  01AD               	clrf	___flmul@sign
  4222  07BA  2FD2               	goto	l726
  4223  07BB                     l2035:	
  4224  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  4225  07BC  1303               	bcf	3,6	;RP1=0, select bank0
  4226  07BD  0838               	movf	___flmul@temp,w
  4227  07BE  00A8               	movwf	??___flmul
  4228  07BF  0828               	movf	??___flmul,w
  4229  07C0  00B3               	movwf	___flmul@bexp
  4230  07C1  30FF               	movlw	255
  4231  07C2  05B4               	andwf	___flmul@prod,f
  4232  07C3  30FF               	movlw	255
  4233  07C4  05B5               	andwf	___flmul@prod+1,f
  4234  07C5  307F               	movlw	127
  4235  07C6  05B6               	andwf	___flmul@prod+2,f
  4236  07C7  3000               	movlw	0
  4237  07C8  05B7               	andwf	___flmul@prod+3,f
  4238  07C9  1833               	btfsc	___flmul@bexp,0
  4239  07CA  17B6               	bsf	___flmul@prod+2,7
  4240  07CB  0833               	movf	___flmul@bexp,w
  4241  07CC  00A8               	movwf	??___flmul
  4242  07CD  1003               	clrc
  4243  07CE  0C28               	rrf	??___flmul,w
  4244  07CF  00A9               	movwf	??___flmul+1
  4245  07D0  0829               	movf	??___flmul+1,w
  4246  07D1  00B7               	movwf	___flmul@prod+3
  4247  07D2                     l726:	
  4248  07D2  082D               	movf	___flmul@sign,w
  4249  07D3  00A8               	movwf	??___flmul
  4250  07D4  0828               	movf	??___flmul,w
  4251  07D5  04B7               	iorwf	___flmul@prod+3,f
  4252  07D6  0837               	movf	___flmul@prod+3,w
  4253  07D7  00A3               	movwf	?___flmul+3
  4254  07D8  0836               	movf	___flmul@prod+2,w
  4255  07D9  00A2               	movwf	?___flmul+2
  4256  07DA  0835               	movf	___flmul@prod+1,w
  4257  07DB  00A1               	movwf	?___flmul+1
  4258  07DC  0834               	movf	___flmul@prod,w
  4259  07DD  00A0               	movwf	?___flmul
  4260  07DE  0008               	return
  4261  07DF                     __end_of___flmul:	
  4262                           
  4263                           	psect	text15
  4264  0A7B                     __ptext15:	
  4265 ;; *************** function __Umul8_16 *****************
  4266 ;; Defined at:
  4267 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8_16.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  multiplier      1    wreg     unsigned char 
  4270 ;;  multiplicand    1    0[COMMON] unsigned char 
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;  multiplier      1    8[COMMON] unsigned char 
  4273 ;;  word_mpld       2    6[COMMON] unsigned int 
  4274 ;;  product         2    4[COMMON] unsigned int 
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  2    0[COMMON] unsigned int 
  4277 ;; Registers used:
  4278 ;;		wreg, status,2, status,0
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4284 ;;      Params:         2       0       0       0       0
  4285 ;;      Locals:         5       0       0       0       0
  4286 ;;      Temps:          2       0       0       0       0
  4287 ;;      Totals:         9       0       0       0       0
  4288 ;;Total ram usage:        9 bytes
  4289 ;; Hardware stack levels used:    1
  4290 ;; This function calls:
  4291 ;;		Nothing
  4292 ;; This function is called by:
  4293 ;;		___flmul
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           
  4298                           ;psect for function __Umul8_16
  4299  0A7B                     __Umul8_16:	
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4303                           ;__Umul8_16@multiplier stored from wreg
  4304  0A7B  00F8               	movwf	__Umul8_16@multiplier
  4305  0A7C  01F4               	clrf	__Umul8_16@product
  4306  0A7D  01F5               	clrf	__Umul8_16@product+1
  4307  0A7E  0870               	movf	__Umul8_16@multiplicand,w
  4308  0A7F  00F2               	movwf	??__Umul8_16
  4309  0A80  01F3               	clrf	??__Umul8_16+1
  4310  0A81  0872               	movf	??__Umul8_16,w
  4311  0A82  00F6               	movwf	__Umul8_16@word_mpld
  4312  0A83  0873               	movf	??__Umul8_16+1,w
  4313  0A84  00F7               	movwf	__Umul8_16@word_mpld+1
  4314  0A85                     l1797:	
  4315  0A85  1C78               	btfss	__Umul8_16@multiplier,0
  4316  0A86  2A8D               	goto	l771
  4317  0A87  0876               	movf	__Umul8_16@word_mpld,w
  4318  0A88  07F4               	addwf	__Umul8_16@product,f
  4319  0A89  1803               	skipnc
  4320  0A8A  0AF5               	incf	__Umul8_16@product+1,f
  4321  0A8B  0877               	movf	__Umul8_16@word_mpld+1,w
  4322  0A8C  07F5               	addwf	__Umul8_16@product+1,f
  4323  0A8D                     l771:	
  4324  0A8D  3001               	movlw	1
  4325  0A8E                     u1655:	
  4326  0A8E  1003               	clrc
  4327  0A8F  0DF6               	rlf	__Umul8_16@word_mpld,f
  4328  0A90  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  4329  0A91  3EFF               	addlw	-1
  4330  0A92  1D03               	skipz
  4331  0A93  2A8E               	goto	u1655
  4332  0A94  1003               	clrc
  4333  0A95  0CF8               	rrf	__Umul8_16@multiplier,f
  4334  0A96  0878               	movf	__Umul8_16@multiplier,w
  4335  0A97  1D03               	btfss	3,2
  4336  0A98  2A85               	goto	l1797
  4337  0A99  0875               	movf	__Umul8_16@product+1,w
  4338  0A9A  00F1               	movwf	?__Umul8_16+1
  4339  0A9B  0874               	movf	__Umul8_16@product,w
  4340  0A9C  00F0               	movwf	?__Umul8_16
  4341  0A9D  0008               	return
  4342  0A9E                     __end_of__Umul8_16:	
  4343                           
  4344                           	psect	text16
  4345  0DF0                     __ptext16:	
  4346 ;; *************** function ___flge *****************
  4347 ;; Defined at:
  4348 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\flge.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  ff1             4   26[BANK0 ] unsigned int 
  4351 ;;  ff2             4   30[BANK0 ] unsigned int 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;		None               void
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4363 ;;      Params:         0       8       0       0       0
  4364 ;;      Locals:         0       0       0       0       0
  4365 ;;      Temps:          0       4       0       0       0
  4366 ;;      Totals:         0      12       0       0       0
  4367 ;;Total ram usage:       12 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; This function calls:
  4370 ;;		Nothing
  4371 ;; This function is called by:
  4372 ;;		_VerificarInversionGiro
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           
  4377                           ;psect for function ___flge
  4378  0DF0                     ___flge:	
  4379                           
  4380                           ;incstack = 0
  4381                           ; Regs used in ___flge: [wreg+status,2+status,0]
  4382  0DF0  3000               	movlw	0
  4383  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  4384  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  4385  0DF3  053A               	andwf	___flge@ff1,w
  4386  0DF4  00C2               	movwf	??___flge
  4387  0DF5  3000               	movlw	0
  4388  0DF6  053B               	andwf	___flge@ff1+1,w
  4389  0DF7  00C3               	movwf	??___flge+1
  4390  0DF8  3080               	movlw	128
  4391  0DF9  053C               	andwf	___flge@ff1+2,w
  4392  0DFA  00C4               	movwf	??___flge+2
  4393  0DFB  307F               	movlw	127
  4394  0DFC  053D               	andwf	___flge@ff1+3,w
  4395  0DFD  00C5               	movwf	??___flge+3
  4396  0DFE  0845               	movf	??___flge+3,w
  4397  0DFF  0444               	iorwf	??___flge+2,w
  4398  0E00  0443               	iorwf	??___flge+1,w
  4399  0E01  0442               	iorwf	??___flge,w
  4400  0E02  1D03               	skipz
  4401  0E03  2E0C               	goto	l499
  4402  0E04  3000               	movlw	0
  4403  0E05  00BD               	movwf	___flge@ff1+3
  4404  0E06  3000               	movlw	0
  4405  0E07  00BC               	movwf	___flge@ff1+2
  4406  0E08  3000               	movlw	0
  4407  0E09  00BB               	movwf	___flge@ff1+1
  4408  0E0A  3000               	movlw	0
  4409  0E0B  00BA               	movwf	___flge@ff1
  4410  0E0C                     l499:	
  4411  0E0C  3000               	movlw	0
  4412  0E0D  053E               	andwf	___flge@ff2,w
  4413  0E0E  00C2               	movwf	??___flge
  4414  0E0F  3000               	movlw	0
  4415  0E10  053F               	andwf	___flge@ff2+1,w
  4416  0E11  00C3               	movwf	??___flge+1
  4417  0E12  3080               	movlw	128
  4418  0E13  0540               	andwf	___flge@ff2+2,w
  4419  0E14  00C4               	movwf	??___flge+2
  4420  0E15  307F               	movlw	127
  4421  0E16  0541               	andwf	___flge@ff2+3,w
  4422  0E17  00C5               	movwf	??___flge+3
  4423  0E18  0845               	movf	??___flge+3,w
  4424  0E19  0444               	iorwf	??___flge+2,w
  4425  0E1A  0443               	iorwf	??___flge+1,w
  4426  0E1B  0442               	iorwf	??___flge,w
  4427  0E1C  1D03               	skipz
  4428  0E1D  2E26               	goto	l1893
  4429  0E1E  3000               	movlw	0
  4430  0E1F  00C1               	movwf	___flge@ff2+3
  4431  0E20  3000               	movlw	0
  4432  0E21  00C0               	movwf	___flge@ff2+2
  4433  0E22  3000               	movlw	0
  4434  0E23  00BF               	movwf	___flge@ff2+1
  4435  0E24  3000               	movlw	0
  4436  0E25  00BE               	movwf	___flge@ff2
  4437  0E26                     l1893:	
  4438  0E26  1FBD               	btfss	___flge@ff1+3,7
  4439  0E27  2E4C               	goto	l1897
  4440  0E28  3000               	movlw	0
  4441  0E29  00C2               	movwf	??___flge
  4442  0E2A  3000               	movlw	0
  4443  0E2B  00C3               	movwf	??___flge+1
  4444  0E2C  3000               	movlw	0
  4445  0E2D  00C4               	movwf	??___flge+2
  4446  0E2E  3080               	movlw	128
  4447  0E2F  00C5               	movwf	??___flge+3
  4448  0E30  083A               	movf	___flge@ff1,w
  4449  0E31  02C2               	subwf	??___flge,f
  4450  0E32  083B               	movf	___flge@ff1+1,w
  4451  0E33  1C03               	skipc
  4452  0E34  0F3B               	incfsz	___flge@ff1+1,w
  4453  0E35  2E37               	goto	u1801
  4454  0E36  2E38               	goto	u1802
  4455  0E37                     u1801:	
  4456  0E37  02C3               	subwf	??___flge+1,f
  4457  0E38                     u1802:	
  4458  0E38  083C               	movf	___flge@ff1+2,w
  4459  0E39  1C03               	skipc
  4460  0E3A  0F3C               	incfsz	___flge@ff1+2,w
  4461  0E3B  2E3D               	goto	u1803
  4462  0E3C  2E3E               	goto	u1804
  4463  0E3D                     u1803:	
  4464  0E3D  02C4               	subwf	??___flge+2,f
  4465  0E3E                     u1804:	
  4466  0E3E  083D               	movf	___flge@ff1+3,w
  4467  0E3F  1C03               	skipc
  4468  0E40  0F3D               	incfsz	___flge@ff1+3,w
  4469  0E41  2E43               	goto	u1805
  4470  0E42  2E44               	goto	u1806
  4471  0E43                     u1805:	
  4472  0E43  02C5               	subwf	??___flge+3,f
  4473  0E44                     u1806:	
  4474  0E44  0845               	movf	??___flge+3,w
  4475  0E45  00BD               	movwf	___flge@ff1+3
  4476  0E46  0844               	movf	??___flge+2,w
  4477  0E47  00BC               	movwf	___flge@ff1+2
  4478  0E48  0843               	movf	??___flge+1,w
  4479  0E49  00BB               	movwf	___flge@ff1+1
  4480  0E4A  0842               	movf	??___flge,w
  4481  0E4B  00BA               	movwf	___flge@ff1
  4482  0E4C                     l1897:	
  4483  0E4C  1FC1               	btfss	___flge@ff2+3,7
  4484  0E4D  2E72               	goto	l502
  4485  0E4E  3000               	movlw	0
  4486  0E4F  00C2               	movwf	??___flge
  4487  0E50  3000               	movlw	0
  4488  0E51  00C3               	movwf	??___flge+1
  4489  0E52  3000               	movlw	0
  4490  0E53  00C4               	movwf	??___flge+2
  4491  0E54  3080               	movlw	128
  4492  0E55  00C5               	movwf	??___flge+3
  4493  0E56  083E               	movf	___flge@ff2,w
  4494  0E57  02C2               	subwf	??___flge,f
  4495  0E58  083F               	movf	___flge@ff2+1,w
  4496  0E59  1C03               	skipc
  4497  0E5A  0F3F               	incfsz	___flge@ff2+1,w
  4498  0E5B  2E5D               	goto	u1821
  4499  0E5C  2E5E               	goto	u1822
  4500  0E5D                     u1821:	
  4501  0E5D  02C3               	subwf	??___flge+1,f
  4502  0E5E                     u1822:	
  4503  0E5E  0840               	movf	___flge@ff2+2,w
  4504  0E5F  1C03               	skipc
  4505  0E60  0F40               	incfsz	___flge@ff2+2,w
  4506  0E61  2E63               	goto	u1823
  4507  0E62  2E64               	goto	u1824
  4508  0E63                     u1823:	
  4509  0E63  02C4               	subwf	??___flge+2,f
  4510  0E64                     u1824:	
  4511  0E64  0841               	movf	___flge@ff2+3,w
  4512  0E65  1C03               	skipc
  4513  0E66  0F41               	incfsz	___flge@ff2+3,w
  4514  0E67  2E69               	goto	u1825
  4515  0E68  2E6A               	goto	u1826
  4516  0E69                     u1825:	
  4517  0E69  02C5               	subwf	??___flge+3,f
  4518  0E6A                     u1826:	
  4519  0E6A  0845               	movf	??___flge+3,w
  4520  0E6B  00C1               	movwf	___flge@ff2+3
  4521  0E6C  0844               	movf	??___flge+2,w
  4522  0E6D  00C0               	movwf	___flge@ff2+2
  4523  0E6E  0843               	movf	??___flge+1,w
  4524  0E6F  00BF               	movwf	___flge@ff2+1
  4525  0E70  0842               	movf	??___flge,w
  4526  0E71  00BE               	movwf	___flge@ff2
  4527  0E72                     l502:	
  4528  0E72  3080               	movlw	128
  4529  0E73  06BD               	xorwf	___flge@ff1+3,f
  4530  0E74  3080               	movlw	128
  4531  0E75  06C1               	xorwf	___flge@ff2+3,f
  4532  0E76  0841               	movf	___flge@ff2+3,w
  4533  0E77  023D               	subwf	___flge@ff1+3,w
  4534  0E78  1D03               	skipz
  4535  0E79  0008               	return
  4536  0E7A  0840               	movf	___flge@ff2+2,w
  4537  0E7B  023C               	subwf	___flge@ff1+2,w
  4538  0E7C  1D03               	skipz
  4539  0E7D  0008               	return
  4540  0E7E  083F               	movf	___flge@ff2+1,w
  4541  0E7F  023B               	subwf	___flge@ff1+1,w
  4542  0E80  1D03               	skipz
  4543  0E81  0008               	return
  4544  0E82  083E               	movf	___flge@ff2,w
  4545  0E83  023A               	subwf	___flge@ff1,w
  4546  0E84  0008               	return
  4547  0E85                     __end_of___flge:	
  4548                           
  4549                           	psect	text17
  4550  0A0E                     __ptext17:	
  4551 ;; *************** function _Lcd_Write_Integer *****************
  4552 ;; Defined at:
  4553 ;;		line 96 in file "./lcd.h"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  a               2   37[BANK0 ] int 
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  Data           10   40[BANK0 ] unsigned char [10]
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  1    wreg      void 
  4560 ;; Registers used:
  4561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4567 ;;      Params:         0       2       0       0       0
  4568 ;;      Locals:         0      10       0       0       0
  4569 ;;      Temps:          0       1       0       0       0
  4570 ;;      Totals:         0      13       0       0       0
  4571 ;;Total ram usage:       13 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    3
  4574 ;; This function calls:
  4575 ;;		_Lcd_Write_String
  4576 ;;		_sprintf
  4577 ;; This function is called by:
  4578 ;;		_configurarHorario
  4579 ;;		_configurarAntiHorario
  4580 ;;		_Encoder
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function _Lcd_Write_Integer
  4586  0A0E                     _Lcd_Write_Integer:	
  4587                           
  4588                           ;./lcd.h: 97:     char Data[10];;./lcd.h: 98:     sprintf(Data, "%d", a);
  4589                           
  4590                           ;incstack = 0
  4591                           ; Regs used in _Lcd_Write_Integer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4592  0A0E  3067               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  4593  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  4594  0A10  1303               	bcf	3,6	;RP1=0, select bank0
  4595  0A11  00C7               	movwf	??_Lcd_Write_Integer
  4596  0A12  0847               	movf	??_Lcd_Write_Integer,w
  4597  0A13  00A0               	movwf	sprintf@f
  4598  0A14  0846               	movf	Lcd_Write_Integer@a+1,w
  4599  0A15  00A2               	movwf	?_sprintf+2
  4600  0A16  0845               	movf	Lcd_Write_Integer@a,w
  4601  0A17  00A1               	movwf	?_sprintf+1
  4602  0A18  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  4603  0A19  120A  158A  2728  120A  158A  	fcall	_sprintf
  4604                           
  4605                           ;./lcd.h: 99:     Lcd_Write_String(Data);
  4606  0A1E  3048               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  4607  0A1F  00F5               	movwf	Lcd_Write_String@a
  4608  0A20  3000               	movlw	0
  4609  0A21  00F6               	movwf	Lcd_Write_String@a+1
  4610  0A22  120A  158A  2343   	fcall	_Lcd_Write_String
  4611  0A25  0008               	return
  4612  0A26                     __end_of_Lcd_Write_Integer:	
  4613                           
  4614                           	psect	text18
  4615  0F28                     __ptext18:	
  4616 ;; *************** function _sprintf *****************
  4617 ;; Defined at:
  4618 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;  sp              1    wreg     PTR unsigned char 
  4621 ;;		 -> Lcd_Write_Integer@Data(10), 
  4622 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  4623 ;;		 -> STR_1(3), 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  4626 ;;		 -> Lcd_Write_Integer@Data(10), 
  4627 ;;  tmpval          4    0        struct .
  4628 ;;  val             2    9[BANK0 ] unsigned int 
  4629 ;;  cp              2    0        PTR const unsigned char 
  4630 ;;  len             2    0        unsigned int 
  4631 ;;  c               1   12[BANK0 ] unsigned char 
  4632 ;;  prec            1    8[BANK0 ] char 
  4633 ;;  flag            1    7[BANK0 ] unsigned char 
  4634 ;;  ap              1    6[BANK0 ] PTR void [1]
  4635 ;;		 -> ?_sprintf(2), 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  2    0[BANK0 ] int 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4645 ;;      Params:         0       3       0       0       0
  4646 ;;      Locals:         0       7       0       0       0
  4647 ;;      Temps:          0       3       0       0       0
  4648 ;;      Totals:         0      13       0       0       0
  4649 ;;Total ram usage:       13 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    1
  4652 ;; This function calls:
  4653 ;;		___lwdiv
  4654 ;;		___lwmod
  4655 ;; This function is called by:
  4656 ;;		_Lcd_Write_Integer
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           
  4661                           ;psect for function _sprintf
  4662  0F28                     _sprintf:	
  4663                           
  4664                           ;incstack = 0
  4665                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4666                           ;sprintf@sp stored from wreg
  4667  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  4668  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  4669  0F2A  00AB               	movwf	sprintf@sp
  4670                           
  4671                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  4672  0F2B  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4673  0F2C  00A3               	movwf	??_sprintf
  4674  0F2D  0823               	movf	??_sprintf,w
  4675  0F2E  00A6               	movwf	sprintf@ap
  4676  0F2F                     l1877:	
  4677                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4678                           
  4679                           
  4680                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  4681  0F2F  3001               	movlw	1
  4682  0F30  07A0               	addwf	sprintf@f,f
  4683  0F31  30FF               	movlw	-1
  4684  0F32  0720               	addwf	sprintf@f,w
  4685  0F33  0084               	movwf	4
  4686  0F34  120A  158A  200A  120A  158A  	fcall	stringdir
  4687  0F39  00A3               	movwf	??_sprintf
  4688  0F3A  0823               	movf	??_sprintf,w
  4689  0F3B  00AC               	movwf	sprintf@c
  4690  0F3C  082C               	movf	sprintf@c,w
  4691  0F3D  1903               	btfsc	3,2
  4692  0F3E  2FFB               	goto	l1879
  4693                           
  4694                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  4695  0F3F  3025               	movlw	37
  4696  0F40  062C               	xorwf	sprintf@c,w
  4697  0F41  1903               	btfsc	3,2
  4698  0F42  2F4F               	goto	l1833
  4699                           
  4700                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  4701  0F43  082C               	movf	sprintf@c,w
  4702  0F44  00A3               	movwf	??_sprintf
  4703  0F45  082B               	movf	sprintf@sp,w
  4704  0F46  0084               	movwf	4
  4705  0F47  0823               	movf	??_sprintf,w
  4706  0F48  1383               	bcf	3,7	;select IRP bank0
  4707  0F49  0080               	movwf	0
  4708  0F4A  3001               	movlw	1
  4709  0F4B  00A3               	movwf	??_sprintf
  4710  0F4C  0823               	movf	??_sprintf,w
  4711  0F4D  07AB               	addwf	sprintf@sp,f
  4712                           
  4713                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  4714  0F4E  2F2F               	goto	l1877
  4715  0F4F                     l1833:	
  4716                           
  4717                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  4718  0F4F  01A7               	clrf	sprintf@flag
  4719                           
  4720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  4721  0F50  3001               	movlw	1
  4722  0F51  07A0               	addwf	sprintf@f,f
  4723  0F52  30FF               	movlw	-1
  4724  0F53  0720               	addwf	sprintf@f,w
  4725  0F54  0084               	movwf	4
  4726  0F55  120A  158A  200A  120A  158A  	fcall	stringdir
  4727  0F5A  00AC               	movwf	sprintf@c
  4728  0F5B  00A3               	movwf	??_sprintf
  4729  0F5C  01A4               	clrf	??_sprintf+1
  4730                           
  4731                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4732                           ; Switch size 1, requested type "simple"
  4733                           ; Number of cases is 1, Range of values is 0 to 0
  4734                           ; switch strategies available:
  4735                           ; Name         Instructions Cycles
  4736                           ; simple_byte            4     3 (average)
  4737                           ; direct_byte           11     8 (fixed)
  4738                           ; jumptable            260     6 (fixed)
  4739                           ;	Chosen strategy is simple_byte
  4740  0F5D  0824               	movf	??_sprintf+1,w
  4741  0F5E  3A00               	xorlw	0	; case 0
  4742  0F5F  1903               	skipnz
  4743  0F60  2F62               	goto	l2573
  4744  0F61  2F2F               	goto	l1877
  4745  0F62                     l2573:	
  4746                           
  4747                           ; Switch size 1, requested type "simple"
  4748                           ; Number of cases is 3, Range of values is 0 to 105
  4749                           ; switch strategies available:
  4750                           ; Name         Instructions Cycles
  4751                           ; simple_byte           10     6 (average)
  4752                           ; jumptable            260     6 (fixed)
  4753                           ;	Chosen strategy is simple_byte
  4754  0F62  0823               	movf	??_sprintf,w
  4755  0F63  3A00               	xorlw	0	; case 0
  4756  0F64  1903               	skipnz
  4757  0F65  2FFB               	goto	l1879
  4758  0F66  3A64               	xorlw	100	; case 100
  4759  0F67  1903               	skipnz
  4760  0F68  2F6D               	goto	l1839
  4761  0F69  3A0D               	xorlw	13	; case 105
  4762  0F6A  1903               	skipnz
  4763  0F6B  2F6D               	goto	l1839
  4764  0F6C  2F2F               	goto	l1877
  4765  0F6D                     l1839:	
  4766                           
  4767                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4768  0F6D  0826               	movf	sprintf@ap,w
  4769  0F6E  0084               	movwf	4
  4770  0F6F  1383               	bcf	3,7	;select IRP bank0
  4771  0F70  0800               	movf	0,w
  4772  0F71  00A9               	movwf	sprintf@val
  4773  0F72  0A84               	incf	4,f
  4774  0F73  0800               	movf	0,w
  4775  0F74  00AA               	movwf	sprintf@val+1
  4776  0F75  3002               	movlw	2
  4777  0F76  00A3               	movwf	??_sprintf
  4778  0F77  0823               	movf	??_sprintf,w
  4779  0F78  07A6               	addwf	sprintf@ap,f
  4780                           
  4781                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  4782  0F79  1FAA               	btfss	sprintf@val+1,7
  4783  0F7A  2F84               	goto	l1849
  4784                           
  4785                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  4786  0F7B  3003               	movlw	3
  4787  0F7C  00A3               	movwf	??_sprintf
  4788  0F7D  0823               	movf	??_sprintf,w
  4789  0F7E  04A7               	iorwf	sprintf@flag,f
  4790                           
  4791                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  4792  0F7F  09A9               	comf	sprintf@val,f
  4793  0F80  09AA               	comf	sprintf@val+1,f
  4794  0F81  0AA9               	incf	sprintf@val,f
  4795  0F82  1903               	skipnz
  4796  0F83  0AAA               	incf	sprintf@val+1,f
  4797  0F84                     l1849:	
  4798                           
  4799                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4800  0F84  01AC               	clrf	sprintf@c
  4801  0F85  0AAC               	incf	sprintf@c,f
  4802  0F86                     l1855:	
  4803                           
  4804                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  4805  0F86  082C               	movf	sprintf@c,w
  4806  0F87  00A3               	movwf	??_sprintf
  4807  0F88  0723               	addwf	??_sprintf,w
  4808  0F89  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4809  0F8A  0084               	movwf	4
  4810  0F8B  120A  158A  200A  120A  158A  	fcall	stringdir
  4811  0F90  00A4               	movwf	??_sprintf+1
  4812  0F91  120A  158A  200A  120A  158A  	fcall	stringdir
  4813  0F96  00A5               	movwf	??_sprintf+2
  4814  0F97  0825               	movf	??_sprintf+2,w
  4815  0F98  022A               	subwf	sprintf@val+1,w
  4816  0F99  1D03               	skipz
  4817  0F9A  2F9D               	goto	u1725
  4818  0F9B  0824               	movf	??_sprintf+1,w
  4819  0F9C  0229               	subwf	sprintf@val,w
  4820  0F9D                     u1725:	
  4821  0F9D  1C03               	btfss	3,0
  4822  0F9E  2FA7               	goto	l1861
  4823  0F9F  3001               	movlw	1
  4824  0FA0  00A3               	movwf	??_sprintf
  4825  0FA1  0823               	movf	??_sprintf,w
  4826  0FA2  07AC               	addwf	sprintf@c,f
  4827  0FA3  3005               	movlw	5
  4828  0FA4  062C               	xorwf	sprintf@c,w
  4829  0FA5  1D03               	btfss	3,2
  4830  0FA6  2F86               	goto	l1855
  4831  0FA7                     l1861:	
  4832                           
  4833                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  4834  0FA7  0827               	movf	sprintf@flag,w
  4835  0FA8  3903               	andlw	3
  4836  0FA9  1903               	btfsc	3,2
  4837  0FAA  2FB6               	goto	l1867
  4838                           
  4839                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  4840  0FAB  302D               	movlw	45
  4841  0FAC  00A3               	movwf	??_sprintf
  4842  0FAD  082B               	movf	sprintf@sp,w
  4843  0FAE  0084               	movwf	4
  4844  0FAF  0823               	movf	??_sprintf,w
  4845  0FB0  1383               	bcf	3,7	;select IRP bank0
  4846  0FB1  0080               	movwf	0
  4847  0FB2  3001               	movlw	1
  4848  0FB3  00A3               	movwf	??_sprintf
  4849  0FB4  0823               	movf	??_sprintf,w
  4850  0FB5  07AB               	addwf	sprintf@sp,f
  4851  0FB6                     l1867:	
  4852                           
  4853                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  4854  0FB6  082C               	movf	sprintf@c,w
  4855  0FB7  00A3               	movwf	??_sprintf
  4856  0FB8  0823               	movf	??_sprintf,w
  4857  0FB9  00A8               	movwf	sprintf@prec
  4858  0FBA                     l1875:	
  4859                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4860                           
  4861                           
  4862                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  4863  0FBA  30FF               	movlw	255
  4864  0FBB  00A3               	movwf	??_sprintf
  4865  0FBC  0823               	movf	??_sprintf,w
  4866  0FBD  07A8               	addwf	sprintf@prec,f
  4867  0FBE  0A28               	incf	sprintf@prec,w
  4868  0FBF  1903               	btfsc	3,2
  4869  0FC0  2F2F               	goto	l1877
  4870                           
  4871                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  4872  0FC1  300A               	movlw	10
  4873  0FC2  00F8               	movwf	___lwmod@divisor
  4874  0FC3  3000               	movlw	0
  4875  0FC4  00F9               	movwf	___lwmod@divisor+1
  4876  0FC5  0828               	movf	sprintf@prec,w
  4877  0FC6  00A3               	movwf	??_sprintf
  4878  0FC7  0723               	addwf	??_sprintf,w
  4879  0FC8  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4880  0FC9  0084               	movwf	4
  4881  0FCA  120A  158A  200A  120A  158A  	fcall	stringdir
  4882  0FCF  00F0               	movwf	___lwdiv@divisor
  4883  0FD0  120A  158A  200A  120A  158A  	fcall	stringdir
  4884  0FD5  00F1               	movwf	___lwdiv@divisor+1
  4885  0FD6  082A               	movf	sprintf@val+1,w
  4886  0FD7  00F3               	movwf	___lwdiv@dividend+1
  4887  0FD8  0829               	movf	sprintf@val,w
  4888  0FD9  00F2               	movwf	___lwdiv@dividend
  4889  0FDA  120A  158A  2307  120A  158A  	fcall	___lwdiv
  4890  0FDF  0871               	movf	?___lwdiv+1,w
  4891  0FE0  00FB               	movwf	___lwmod@dividend+1
  4892  0FE1  0870               	movf	?___lwdiv,w
  4893  0FE2  00FA               	movwf	___lwmod@dividend
  4894  0FE3  120A  158A  229E  120A  158A  	fcall	___lwmod
  4895  0FE8  0878               	movf	?___lwmod,w
  4896  0FE9  3E30               	addlw	48
  4897  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  4898  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  4899  0FEC  00A4               	movwf	??_sprintf+1
  4900  0FED  0824               	movf	??_sprintf+1,w
  4901  0FEE  00AC               	movwf	sprintf@c
  4902                           
  4903                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  4904  0FEF  082C               	movf	sprintf@c,w
  4905  0FF0  00A3               	movwf	??_sprintf
  4906  0FF1  082B               	movf	sprintf@sp,w
  4907  0FF2  0084               	movwf	4
  4908  0FF3  0823               	movf	??_sprintf,w
  4909  0FF4  1383               	bcf	3,7	;select IRP bank0
  4910  0FF5  0080               	movwf	0
  4911  0FF6  3001               	movlw	1
  4912  0FF7  00A3               	movwf	??_sprintf
  4913  0FF8  0823               	movf	??_sprintf,w
  4914  0FF9  07AB               	addwf	sprintf@sp,f
  4915  0FFA  2FBA               	goto	l1875
  4916  0FFB                     l1879:	
  4917                           
  4918                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  4919  0FFB  082B               	movf	sprintf@sp,w
  4920  0FFC  0084               	movwf	4
  4921  0FFD  1383               	bcf	3,7	;select IRP bank0
  4922  0FFE  0180               	clrf	0
  4923  0FFF  0008               	return
  4924  1000                     __end_of_sprintf:	
  4925                           
  4926                           	psect	text19
  4927  0A9E                     __ptext19:	
  4928 ;; *************** function ___lwmod *****************
  4929 ;; Defined at:
  4930 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  divisor         2    8[COMMON] unsigned int 
  4933 ;;  dividend        2   10[COMMON] unsigned int 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  counter         1   13[COMMON] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  2    8[COMMON] unsigned int 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4945 ;;      Params:         4       0       0       0       0
  4946 ;;      Locals:         1       0       0       0       0
  4947 ;;      Temps:          1       0       0       0       0
  4948 ;;      Totals:         6       0       0       0       0
  4949 ;;Total ram usage:        6 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; This function calls:
  4952 ;;		Nothing
  4953 ;; This function is called by:
  4954 ;;		_sprintf
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           
  4959                           ;psect for function ___lwmod
  4960  0A9E                     ___lwmod:	
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4964  0A9E  0878               	movf	___lwmod@divisor,w
  4965  0A9F  0479               	iorwf	___lwmod@divisor+1,w
  4966  0AA0  1903               	btfsc	3,2
  4967  0AA1  2ACB               	goto	l1789
  4968  0AA2  01FD               	clrf	___lwmod@counter
  4969  0AA3  0AFD               	incf	___lwmod@counter,f
  4970  0AA4                     l1779:	
  4971  0AA4  1BF9               	btfsc	___lwmod@divisor+1,7
  4972  0AA5  2AB2               	goto	l1781
  4973  0AA6  3001               	movlw	1
  4974  0AA7                     u1595:	
  4975  0AA7  1003               	clrc
  4976  0AA8  0DF8               	rlf	___lwmod@divisor,f
  4977  0AA9  0DF9               	rlf	___lwmod@divisor+1,f
  4978  0AAA  3EFF               	addlw	-1
  4979  0AAB  1D03               	skipz
  4980  0AAC  2AA7               	goto	u1595
  4981  0AAD  3001               	movlw	1
  4982  0AAE  00FC               	movwf	??___lwmod
  4983  0AAF  087C               	movf	??___lwmod,w
  4984  0AB0  07FD               	addwf	___lwmod@counter,f
  4985  0AB1  2AA4               	goto	l1779
  4986  0AB2                     l1781:	
  4987  0AB2  0879               	movf	___lwmod@divisor+1,w
  4988  0AB3  027B               	subwf	___lwmod@dividend+1,w
  4989  0AB4  1D03               	skipz
  4990  0AB5  2AB8               	goto	u1615
  4991  0AB6  0878               	movf	___lwmod@divisor,w
  4992  0AB7  027A               	subwf	___lwmod@dividend,w
  4993  0AB8                     u1615:	
  4994  0AB8  1C03               	skipc
  4995  0AB9  2AC0               	goto	l1785
  4996  0ABA  0878               	movf	___lwmod@divisor,w
  4997  0ABB  02FA               	subwf	___lwmod@dividend,f
  4998  0ABC  0879               	movf	___lwmod@divisor+1,w
  4999  0ABD  1C03               	skipc
  5000  0ABE  03FB               	decf	___lwmod@dividend+1,f
  5001  0ABF  02FB               	subwf	___lwmod@dividend+1,f
  5002  0AC0                     l1785:	
  5003  0AC0  3001               	movlw	1
  5004  0AC1                     u1625:	
  5005  0AC1  1003               	clrc
  5006  0AC2  0CF9               	rrf	___lwmod@divisor+1,f
  5007  0AC3  0CF8               	rrf	___lwmod@divisor,f
  5008  0AC4  3EFF               	addlw	-1
  5009  0AC5  1D03               	skipz
  5010  0AC6  2AC1               	goto	u1625
  5011  0AC7  3001               	movlw	1
  5012  0AC8  02FD               	subwf	___lwmod@counter,f
  5013  0AC9  1D03               	btfss	3,2
  5014  0ACA  2AB2               	goto	l1781
  5015  0ACB                     l1789:	
  5016  0ACB  087B               	movf	___lwmod@dividend+1,w
  5017  0ACC  00F9               	movwf	?___lwmod+1
  5018  0ACD  087A               	movf	___lwmod@dividend,w
  5019  0ACE  00F8               	movwf	?___lwmod
  5020  0ACF  0008               	return
  5021  0AD0                     __end_of___lwmod:	
  5022                           
  5023                           	psect	text20
  5024  0B07                     __ptext20:	
  5025 ;; *************** function ___lwdiv *****************
  5026 ;; Defined at:
  5027 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;  divisor         2    0[COMMON] unsigned int 
  5030 ;;  dividend        2    2[COMMON] unsigned int 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  quotient        2    5[COMMON] unsigned int 
  5033 ;;  counter         1    7[COMMON] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  2    0[COMMON] unsigned int 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5043 ;;      Params:         4       0       0       0       0
  5044 ;;      Locals:         3       0       0       0       0
  5045 ;;      Temps:          1       0       0       0       0
  5046 ;;      Totals:         8       0       0       0       0
  5047 ;;Total ram usage:        8 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_sprintf
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function ___lwdiv
  5058  0B07                     ___lwdiv:	
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5062  0B07  01F5               	clrf	___lwdiv@quotient
  5063  0B08  01F6               	clrf	___lwdiv@quotient+1
  5064  0B09  0870               	movf	___lwdiv@divisor,w
  5065  0B0A  0471               	iorwf	___lwdiv@divisor+1,w
  5066  0B0B  1903               	btfsc	3,2
  5067  0B0C  2B3E               	goto	l1767
  5068  0B0D  01F7               	clrf	___lwdiv@counter
  5069  0B0E  0AF7               	incf	___lwdiv@counter,f
  5070  0B0F                     l1755:	
  5071  0B0F  1BF1               	btfsc	___lwdiv@divisor+1,7
  5072  0B10  2B1D               	goto	l1757
  5073  0B11  3001               	movlw	1
  5074  0B12                     u1525:	
  5075  0B12  1003               	clrc
  5076  0B13  0DF0               	rlf	___lwdiv@divisor,f
  5077  0B14  0DF1               	rlf	___lwdiv@divisor+1,f
  5078  0B15  3EFF               	addlw	-1
  5079  0B16  1D03               	skipz
  5080  0B17  2B12               	goto	u1525
  5081  0B18  3001               	movlw	1
  5082  0B19  00F4               	movwf	??___lwdiv
  5083  0B1A  0874               	movf	??___lwdiv,w
  5084  0B1B  07F7               	addwf	___lwdiv@counter,f
  5085  0B1C  2B0F               	goto	l1755
  5086  0B1D                     l1757:	
  5087  0B1D  3001               	movlw	1
  5088  0B1E                     u1545:	
  5089  0B1E  1003               	clrc
  5090  0B1F  0DF5               	rlf	___lwdiv@quotient,f
  5091  0B20  0DF6               	rlf	___lwdiv@quotient+1,f
  5092  0B21  3EFF               	addlw	-1
  5093  0B22  1D03               	skipz
  5094  0B23  2B1E               	goto	u1545
  5095  0B24  0871               	movf	___lwdiv@divisor+1,w
  5096  0B25  0273               	subwf	___lwdiv@dividend+1,w
  5097  0B26  1D03               	skipz
  5098  0B27  2B2A               	goto	u1555
  5099  0B28  0870               	movf	___lwdiv@divisor,w
  5100  0B29  0272               	subwf	___lwdiv@dividend,w
  5101  0B2A                     u1555:	
  5102  0B2A  1C03               	skipc
  5103  0B2B  2B33               	goto	l1763
  5104  0B2C  0870               	movf	___lwdiv@divisor,w
  5105  0B2D  02F2               	subwf	___lwdiv@dividend,f
  5106  0B2E  0871               	movf	___lwdiv@divisor+1,w
  5107  0B2F  1C03               	skipc
  5108  0B30  03F3               	decf	___lwdiv@dividend+1,f
  5109  0B31  02F3               	subwf	___lwdiv@dividend+1,f
  5110  0B32  1475               	bsf	___lwdiv@quotient,0
  5111  0B33                     l1763:	
  5112  0B33  3001               	movlw	1
  5113  0B34                     u1565:	
  5114  0B34  1003               	clrc
  5115  0B35  0CF1               	rrf	___lwdiv@divisor+1,f
  5116  0B36  0CF0               	rrf	___lwdiv@divisor,f
  5117  0B37  3EFF               	addlw	-1
  5118  0B38  1D03               	skipz
  5119  0B39  2B34               	goto	u1565
  5120  0B3A  3001               	movlw	1
  5121  0B3B  02F7               	subwf	___lwdiv@counter,f
  5122  0B3C  1D03               	btfss	3,2
  5123  0B3D  2B1D               	goto	l1757
  5124  0B3E                     l1767:	
  5125  0B3E  0876               	movf	___lwdiv@quotient+1,w
  5126  0B3F  00F1               	movwf	?___lwdiv+1
  5127  0B40  0875               	movf	___lwdiv@quotient,w
  5128  0B41  00F0               	movwf	?___lwdiv
  5129  0B42  0008               	return
  5130  0B43                     __end_of___lwdiv:	
  5131                           
  5132                           	psect	text21
  5133  0B43                     __ptext21:	
  5134 ;; *************** function _Lcd_Write_String *****************
  5135 ;; Defined at:
  5136 ;;		line 90 in file "./lcd.h"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;  a               2    5[COMMON] PTR unsigned char 
  5139 ;;		 -> STR_15(9), STR_14(11), STR_13(9), STR_12(14), 
  5140 ;;		 -> STR_11(4), STR_10(5), STR_9(8), STR_8(5), 
  5141 ;;		 -> STR_7(8), STR_6(4), STR_5(5), STR_4(11), 
  5142 ;;		 -> STR_3(5), STR_2(11), Lcd_Write_Integer@Data(10), 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  i               2   10[COMMON] int 
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5154 ;;      Params:         2       0       0       0       0
  5155 ;;      Locals:         2       0       0       0       0
  5156 ;;      Temps:          3       0       0       0       0
  5157 ;;      Totals:         7       0       0       0       0
  5158 ;;Total ram usage:        7 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    2
  5161 ;; This function calls:
  5162 ;;		_Lcd_Write_Char
  5163 ;; This function is called by:
  5164 ;;		_Lcd_Write_Integer
  5165 ;;		_configurarHorario
  5166 ;;		_configurarAntiHorario
  5167 ;;		_Encoder
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           
  5172                           ;psect for function _Lcd_Write_String
  5173  0B43                     _Lcd_Write_String:	
  5174                           
  5175                           ;./lcd.h: 91:     int i;;./lcd.h: 92:     for (i = 0; a[i] != '\0'; i++)
  5176                           
  5177                           ;incstack = 0
  5178                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5179  0B43  01FA               	clrf	Lcd_Write_String@i
  5180  0B44  01FB               	clrf	Lcd_Write_String@i+1
  5181  0B45                     l1823:	
  5182  0B45  087A               	movf	Lcd_Write_String@i,w
  5183  0B46  0775               	addwf	Lcd_Write_String@a,w
  5184  0B47  00F8               	movwf	??_Lcd_Write_String+1
  5185  0B48  0876               	movf	Lcd_Write_String@a+1,w
  5186  0B49  00F7               	movwf	??_Lcd_Write_String
  5187  0B4A  1803               	skipnc
  5188  0B4B  0AF7               	incf	??_Lcd_Write_String,f
  5189  0B4C  1BFA               	btfsc	Lcd_Write_String@i,7
  5190  0B4D  03F7               	decf	??_Lcd_Write_String,f
  5191  0B4E  0877               	movf	??_Lcd_Write_String,w
  5192  0B4F  00F9               	movwf	??_Lcd_Write_String+2
  5193  0B50  0879               	movf	??_Lcd_Write_String+2,w
  5194  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  5195  0B52  1303               	bcf	3,6	;RP1=0, select bank0
  5196  0B53  00FF               	movwf	127
  5197  0B54  0878               	movf	??_Lcd_Write_String+1,w
  5198  0B55  0084               	movwf	4
  5199  0B56  120A  158A  2000  120A  158A  	fcall	stringtab
  5200  0B5B  3A00               	xorlw	0
  5201  0B5C  1903               	btfsc	3,2
  5202  0B5D  0008               	return
  5203                           
  5204                           ;./lcd.h: 93:         Lcd_Write_Char(a[i]);
  5205  0B5E  087A               	movf	Lcd_Write_String@i,w
  5206  0B5F  0775               	addwf	Lcd_Write_String@a,w
  5207  0B60  00F8               	movwf	??_Lcd_Write_String+1
  5208  0B61  0876               	movf	Lcd_Write_String@a+1,w
  5209  0B62  00F7               	movwf	??_Lcd_Write_String
  5210  0B63  1803               	skipnc
  5211  0B64  0AF7               	incf	??_Lcd_Write_String,f
  5212  0B65  1BFA               	btfsc	Lcd_Write_String@i,7
  5213  0B66  03F7               	decf	??_Lcd_Write_String,f
  5214  0B67  0877               	movf	??_Lcd_Write_String,w
  5215  0B68  00F9               	movwf	??_Lcd_Write_String+2
  5216  0B69  0879               	movf	??_Lcd_Write_String+2,w
  5217  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0B6C  00FF               	movwf	127
  5220  0B6D  0878               	movf	??_Lcd_Write_String+1,w
  5221  0B6E  0084               	movwf	4
  5222  0B6F  120A  158A  2000  120A  158A  	fcall	stringtab
  5223  0B74  120A  158A  22D0  120A  158A  	fcall	_Lcd_Write_Char
  5224  0B79  3001               	movlw	1
  5225  0B7A  07FA               	addwf	Lcd_Write_String@i,f
  5226  0B7B  1803               	skipnc
  5227  0B7C  0AFB               	incf	Lcd_Write_String@i+1,f
  5228  0B7D  3000               	movlw	0
  5229  0B7E  07FB               	addwf	Lcd_Write_String@i+1,f
  5230  0B7F  2B45               	goto	l1823
  5231  0B80                     __end_of_Lcd_Write_String:	
  5232                           
  5233                           	psect	text22
  5234  0AD0                     __ptext22:	
  5235 ;; *************** function _Lcd_Write_Char *****************
  5236 ;; Defined at:
  5237 ;;		line 75 in file "./lcd.h"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;  a               1    wreg     unsigned char 
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;  a               1    4[COMMON] unsigned char 
  5242 ;;  y               1    3[COMMON] unsigned char 
  5243 ;;  temp            1    2[COMMON] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  1    wreg      void 
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, status,0, pclath, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5253 ;;      Params:         0       0       0       0       0
  5254 ;;      Locals:         3       0       0       0       0
  5255 ;;      Temps:          1       0       0       0       0
  5256 ;;      Totals:         4       0       0       0       0
  5257 ;;Total ram usage:        4 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    1
  5260 ;; This function calls:
  5261 ;;		_Lcd_Port
  5262 ;; This function is called by:
  5263 ;;		_Lcd_Write_String
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           
  5268                           ;psect for function _Lcd_Write_Char
  5269  0AD0                     _Lcd_Write_Char:	
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5273                           ;Lcd_Write_Char@a stored from wreg
  5274  0AD0  00F4               	movwf	Lcd_Write_Char@a
  5275                           
  5276                           ;./lcd.h: 76:     char temp, y;;./lcd.h: 77:     temp = a & 0x0F;
  5277  0AD1  0874               	movf	Lcd_Write_Char@a,w
  5278  0AD2  390F               	andlw	15
  5279  0AD3  00F1               	movwf	??_Lcd_Write_Char
  5280  0AD4  0871               	movf	??_Lcd_Write_Char,w
  5281  0AD5  00F2               	movwf	Lcd_Write_Char@temp
  5282                           
  5283                           ;./lcd.h: 78:     y = a & 0xF0;
  5284  0AD6  0874               	movf	Lcd_Write_Char@a,w
  5285  0AD7  39F0               	andlw	240
  5286  0AD8  00F1               	movwf	??_Lcd_Write_Char
  5287  0AD9  0871               	movf	??_Lcd_Write_Char,w
  5288  0ADA  00F3               	movwf	Lcd_Write_Char@y
  5289                           
  5290                           ;./lcd.h: 79:     RB2 = 1;
  5291  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  5292  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  5293  0ADD  1506               	bsf	6,2	;volatile
  5294                           
  5295                           ;./lcd.h: 80:     Lcd_Port(y >> 4);
  5296  0ADE  0873               	movf	Lcd_Write_Char@y,w
  5297  0ADF  00F1               	movwf	??_Lcd_Write_Char
  5298  0AE0  3004               	movlw	4
  5299  0AE1                     u1505:	
  5300  0AE1  1003               	clrc
  5301  0AE2  0CF1               	rrf	??_Lcd_Write_Char,f
  5302  0AE3  3EFF               	addlw	-1
  5303  0AE4  1D03               	skipz
  5304  0AE5  2AE1               	goto	u1505
  5305  0AE6  0871               	movf	??_Lcd_Write_Char,w
  5306  0AE7  120A  158A  2226  120A  158A  	fcall	_Lcd_Port
  5307                           
  5308                           ;./lcd.h: 81:     RB3 = 1;
  5309  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  5310  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  5311  0AEE  1586               	bsf	6,3	;volatile
  5312                           
  5313                           ;./lcd.h: 82:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  5314  0AEF  300D               	movlw	13
  5315  0AF0  00F1               	movwf	??_Lcd_Write_Char
  5316  0AF1                     u2987:	
  5317  0AF1  0BF1               	decfsz	??_Lcd_Write_Char,f
  5318  0AF2  2AF1               	goto	u2987
  5319                           
  5320                           ;./lcd.h: 83:     RB3 = 0;
  5321  0AF3  1283               	bcf	3,5	;RP0=0, select bank0
  5322  0AF4  1303               	bcf	3,6	;RP1=0, select bank0
  5323  0AF5  1186               	bcf	6,3	;volatile
  5324                           
  5325                           ;./lcd.h: 84:     Lcd_Port(temp);
  5326  0AF6  0872               	movf	Lcd_Write_Char@temp,w
  5327  0AF7  120A  158A  2226  120A  158A  	fcall	_Lcd_Port
  5328                           
  5329                           ;./lcd.h: 85:     RB3 = 1;
  5330  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  5331  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  5332  0AFE  1586               	bsf	6,3	;volatile
  5333                           
  5334                           ;./lcd.h: 86:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  5335  0AFF  300D               	movlw	13
  5336  0B00  00F1               	movwf	??_Lcd_Write_Char
  5337  0B01                     u2997:	
  5338  0B01  0BF1               	decfsz	??_Lcd_Write_Char,f
  5339  0B02  2B01               	goto	u2997
  5340                           
  5341                           ;./lcd.h: 87:     RB3 = 0;
  5342  0B03  1283               	bcf	3,5	;RP0=0, select bank0
  5343  0B04  1303               	bcf	3,6	;RP1=0, select bank0
  5344  0B05  1186               	bcf	6,3	;volatile
  5345  0B06  0008               	return
  5346  0B07                     __end_of_Lcd_Write_Char:	
  5347                           
  5348                           	psect	text23
  5349  0B80                     __ptext23:	
  5350 ;; *************** function _Lcd_Set_Cursor *****************
  5351 ;; Defined at:
  5352 ;;		line 40 in file "./lcd.h"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  a               1    wreg     unsigned char 
  5355 ;;  b               1    4[COMMON] unsigned char 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  a               1    7[COMMON] unsigned char 
  5358 ;;  temp            1   10[COMMON] unsigned char 
  5359 ;;  y               1    9[COMMON] unsigned char 
  5360 ;;  z               1    8[COMMON] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0, pclath, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5370 ;;      Params:         1       0       0       0       0
  5371 ;;      Locals:         4       0       0       0       0
  5372 ;;      Temps:          2       0       0       0       0
  5373 ;;      Totals:         7       0       0       0       0
  5374 ;;Total ram usage:        7 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    2
  5377 ;; This function calls:
  5378 ;;		_Lcd_Cmd
  5379 ;; This function is called by:
  5380 ;;		_configurarHorario
  5381 ;;		_configurarAntiHorario
  5382 ;;		_Encoder
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function _Lcd_Set_Cursor
  5388  0B80                     _Lcd_Set_Cursor:	
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5392                           ;Lcd_Set_Cursor@a stored from wreg
  5393  0B80  00F7               	movwf	Lcd_Set_Cursor@a
  5394                           
  5395                           ;./lcd.h: 41:     char temp, z, y;;./lcd.h: 42:     if (a == 1) {
  5396  0B81  0377               	decf	Lcd_Set_Cursor@a,w
  5397  0B82  1D03               	btfss	3,2
  5398  0B83  2BA5               	goto	l2103
  5399                           
  5400                           ;./lcd.h: 43:         temp = 0x80 + b - 1;
  5401  0B84  0874               	movf	Lcd_Set_Cursor@b,w
  5402  0B85  3E7F               	addlw	127
  5403  0B86  00F5               	movwf	??_Lcd_Set_Cursor
  5404  0B87  0875               	movf	??_Lcd_Set_Cursor,w
  5405  0B88  00FA               	movwf	Lcd_Set_Cursor@temp
  5406                           
  5407                           ;./lcd.h: 44:         z = temp >> 4;
  5408  0B89  087A               	movf	Lcd_Set_Cursor@temp,w
  5409  0B8A  00F5               	movwf	??_Lcd_Set_Cursor
  5410  0B8B  3004               	movlw	4
  5411  0B8C                     u2365:	
  5412  0B8C  1003               	clrc
  5413  0B8D  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5414  0B8E  3EFF               	addlw	-1
  5415  0B8F  1D03               	skipz
  5416  0B90  2B8C               	goto	u2365
  5417  0B91  0875               	movf	??_Lcd_Set_Cursor,w
  5418  0B92  00F6               	movwf	??_Lcd_Set_Cursor+1
  5419  0B93  0876               	movf	??_Lcd_Set_Cursor+1,w
  5420  0B94  00F8               	movwf	Lcd_Set_Cursor@z
  5421                           
  5422                           ;./lcd.h: 45:         y = temp & 0x0F;
  5423  0B95  087A               	movf	Lcd_Set_Cursor@temp,w
  5424  0B96  390F               	andlw	15
  5425  0B97  00F5               	movwf	??_Lcd_Set_Cursor
  5426  0B98  0875               	movf	??_Lcd_Set_Cursor,w
  5427  0B99  00F9               	movwf	Lcd_Set_Cursor@y
  5428                           
  5429                           ;./lcd.h: 46:         Lcd_Cmd(z);
  5430  0B9A  0878               	movf	Lcd_Set_Cursor@z,w
  5431  0B9B  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  5432                           
  5433                           ;./lcd.h: 47:         Lcd_Cmd(y);
  5434  0BA0  0879               	movf	Lcd_Set_Cursor@y,w
  5435  0BA1  120A  158A  2240   	fcall	_Lcd_Cmd
  5436                           
  5437                           ;./lcd.h: 48:     } else if (a == 2) {
  5438  0BA4  0008               	return
  5439  0BA5                     l2103:	
  5440  0BA5  3002               	movlw	2
  5441  0BA6  0677               	xorwf	Lcd_Set_Cursor@a,w
  5442  0BA7  1D03               	btfss	3,2
  5443  0BA8  0008               	return
  5444                           
  5445                           ;./lcd.h: 49:         temp = 0xC0 + b - 1;
  5446  0BA9  0874               	movf	Lcd_Set_Cursor@b,w
  5447  0BAA  3EBF               	addlw	191
  5448  0BAB  00F5               	movwf	??_Lcd_Set_Cursor
  5449  0BAC  0875               	movf	??_Lcd_Set_Cursor,w
  5450  0BAD  00FA               	movwf	Lcd_Set_Cursor@temp
  5451                           
  5452                           ;./lcd.h: 50:         z = temp >> 4;
  5453  0BAE  087A               	movf	Lcd_Set_Cursor@temp,w
  5454  0BAF  00F5               	movwf	??_Lcd_Set_Cursor
  5455  0BB0  3004               	movlw	4
  5456  0BB1                     u2385:	
  5457  0BB1  1003               	clrc
  5458  0BB2  0CF5               	rrf	??_Lcd_Set_Cursor,f
  5459  0BB3  3EFF               	addlw	-1
  5460  0BB4  1D03               	skipz
  5461  0BB5  2BB1               	goto	u2385
  5462  0BB6  0875               	movf	??_Lcd_Set_Cursor,w
  5463  0BB7  00F6               	movwf	??_Lcd_Set_Cursor+1
  5464  0BB8  0876               	movf	??_Lcd_Set_Cursor+1,w
  5465  0BB9  00F8               	movwf	Lcd_Set_Cursor@z
  5466                           
  5467                           ;./lcd.h: 51:         y = temp & 0x0F;
  5468  0BBA  087A               	movf	Lcd_Set_Cursor@temp,w
  5469  0BBB  390F               	andlw	15
  5470  0BBC  00F5               	movwf	??_Lcd_Set_Cursor
  5471  0BBD  0875               	movf	??_Lcd_Set_Cursor,w
  5472  0BBE  00F9               	movwf	Lcd_Set_Cursor@y
  5473                           
  5474                           ;./lcd.h: 52:         Lcd_Cmd(z);
  5475  0BBF  0878               	movf	Lcd_Set_Cursor@z,w
  5476  0BC0  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  5477                           
  5478                           ;./lcd.h: 53:         Lcd_Cmd(y);
  5479  0BC5  0879               	movf	Lcd_Set_Cursor@y,w
  5480  0BC6  120A  158A  2240   	fcall	_Lcd_Cmd
  5481  0BC9  0008               	return
  5482  0BCA                     __end_of_Lcd_Set_Cursor:	
  5483                           
  5484                           	psect	text24
  5485  09F6                     __ptext24:	
  5486 ;; *************** function _Lcd_Clear *****************
  5487 ;; Defined at:
  5488 ;;		line 35 in file "./lcd.h"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0, pclath, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 0/0
  5499 ;;		On exit  : 0/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5502 ;;      Params:         0       0       0       0       0
  5503 ;;      Locals:         0       0       0       0       0
  5504 ;;      Temps:          0       0       0       0       0
  5505 ;;      Totals:         0       0       0       0       0
  5506 ;;Total ram usage:        0 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    2
  5509 ;; This function calls:
  5510 ;;		_Lcd_Cmd
  5511 ;; This function is called by:
  5512 ;;		_configurarHorario
  5513 ;;		_configurarAntiHorario
  5514 ;;		_Encoder
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           
  5519                           ;psect for function _Lcd_Clear
  5520  09F6                     _Lcd_Clear:	
  5521                           
  5522                           ;./lcd.h: 36:     Lcd_Cmd(0);
  5523                           
  5524                           ;incstack = 0
  5525                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  5526  09F6  3000               	movlw	0
  5527  09F7  120A  158A  2240  120A  158A  	fcall	_Lcd_Cmd
  5528                           
  5529                           ;./lcd.h: 37:     Lcd_Cmd(1);
  5530  09FC  3001               	movlw	1
  5531  09FD  120A  158A  2240   	fcall	_Lcd_Cmd
  5532  0A00  0008               	return
  5533  0A01                     __end_of_Lcd_Clear:	
  5534                           
  5535                           	psect	text25
  5536  0A40                     __ptext25:	
  5537 ;; *************** function _Lcd_Cmd *****************
  5538 ;; Defined at:
  5539 ;;		line 27 in file "./lcd.h"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  a               1    wreg     unsigned char 
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  a               1    3[COMMON] unsigned char 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      void 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2, status,0, pclath, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5553 ;;      Params:         0       0       0       0       0
  5554 ;;      Locals:         1       0       0       0       0
  5555 ;;      Temps:          2       0       0       0       0
  5556 ;;      Totals:         3       0       0       0       0
  5557 ;;Total ram usage:        3 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    1
  5560 ;; This function calls:
  5561 ;;		_Lcd_Port
  5562 ;; This function is called by:
  5563 ;;		_Lcd_Clear
  5564 ;;		_Lcd_Set_Cursor
  5565 ;;		_Lcd_Init
  5566 ;;		_Lcd_Shift_Right
  5567 ;;		_Lcd_Shift_Left
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           
  5572                           ;psect for function _Lcd_Cmd
  5573  0A40                     _Lcd_Cmd:	
  5574                           
  5575                           ;incstack = 0
  5576                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5577                           ;Lcd_Cmd@a stored from wreg
  5578  0A40  00F3               	movwf	Lcd_Cmd@a
  5579                           
  5580                           ;./lcd.h: 28:     RB2 = 0;
  5581  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  5582  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  5583  0A43  1106               	bcf	6,2	;volatile
  5584                           
  5585                           ;./lcd.h: 29:     Lcd_Port(a);
  5586  0A44  0873               	movf	Lcd_Cmd@a,w
  5587  0A45  120A  158A  2226  120A  158A  	fcall	_Lcd_Port
  5588                           
  5589                           ;./lcd.h: 30:     RB3 = 1;
  5590  0A4A  1283               	bcf	3,5	;RP0=0, select bank0
  5591  0A4B  1303               	bcf	3,6	;RP1=0, select bank0
  5592  0A4C  1586               	bsf	6,3	;volatile
  5593                           
  5594                           ;./lcd.h: 31:     _delay((unsigned long)((4)*(4000000/4000.0)));
  5595  0A4D  3006               	movlw	6
  5596  0A4E  00F2               	movwf	??_Lcd_Cmd+1
  5597  0A4F  3030               	movlw	48
  5598  0A50  00F1               	movwf	??_Lcd_Cmd
  5599  0A51                     u3007:	
  5600  0A51  0BF1               	decfsz	??_Lcd_Cmd,f
  5601  0A52  2A51               	goto	u3007
  5602  0A53  0BF2               	decfsz	??_Lcd_Cmd+1,f
  5603  0A54  2A51               	goto	u3007
  5604  0A55  0000               	nop
  5605                           
  5606                           ;./lcd.h: 32:     RB3 = 0;
  5607  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  5608  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  5609  0A58  1186               	bcf	6,3	;volatile
  5610  0A59  0008               	return
  5611  0A5A                     __end_of_Lcd_Cmd:	
  5612                           
  5613                           	psect	text26
  5614  0A26                     __ptext26:	
  5615 ;; *************** function _Lcd_Port *****************
  5616 ;; Defined at:
  5617 ;;		line 5 in file "./lcd.h"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  a               1    wreg     unsigned char 
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;  a               1    0[COMMON] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5631 ;;      Params:         0       0       0       0       0
  5632 ;;      Locals:         1       0       0       0       0
  5633 ;;      Temps:          0       0       0       0       0
  5634 ;;      Totals:         1       0       0       0       0
  5635 ;;Total ram usage:        1 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; This function calls:
  5638 ;;		Nothing
  5639 ;; This function is called by:
  5640 ;;		_Lcd_Cmd
  5641 ;;		_Lcd_Init
  5642 ;;		_Lcd_Write_Char
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           
  5647                           ;psect for function _Lcd_Port
  5648  0A26                     _Lcd_Port:	
  5649                           
  5650                           ;incstack = 0
  5651                           ; Regs used in _Lcd_Port: [wreg]
  5652                           ;Lcd_Port@a stored from wreg
  5653  0A26  00F0               	movwf	Lcd_Port@a
  5654                           
  5655                           ;./lcd.h: 6:     if (a & 1)
  5656  0A27  1C70               	btfss	Lcd_Port@a,0
  5657  0A28  2A2D               	goto	l66
  5658                           
  5659                           ;./lcd.h: 7:         RB4 = 1;
  5660  0A29  1283               	bcf	3,5	;RP0=0, select bank0
  5661  0A2A  1303               	bcf	3,6	;RP1=0, select bank0
  5662  0A2B  1606               	bsf	6,4	;volatile
  5663  0A2C  2A30               	goto	l67
  5664  0A2D                     l66:	
  5665                           ;./lcd.h: 8:     else
  5666                           
  5667                           
  5668                           ;./lcd.h: 9:         RB4 = 0;
  5669  0A2D  1283               	bcf	3,5	;RP0=0, select bank0
  5670  0A2E  1303               	bcf	3,6	;RP1=0, select bank0
  5671  0A2F  1206               	bcf	6,4	;volatile
  5672  0A30                     l67:	
  5673                           
  5674                           ;./lcd.h: 11:     if (a & 2)
  5675  0A30  1CF0               	btfss	Lcd_Port@a,1
  5676  0A31  2A34               	goto	l68
  5677                           
  5678                           ;./lcd.h: 12:         RB5 = 1;
  5679  0A32  1686               	bsf	6,5	;volatile
  5680  0A33  2A35               	goto	l69
  5681  0A34                     l68:	
  5682                           ;./lcd.h: 13:     else
  5683                           
  5684                           
  5685                           ;./lcd.h: 14:         RB5 = 0;
  5686  0A34  1286               	bcf	6,5	;volatile
  5687  0A35                     l69:	
  5688                           
  5689                           ;./lcd.h: 16:     if (a & 4)
  5690  0A35  1D70               	btfss	Lcd_Port@a,2
  5691  0A36  2A39               	goto	l70
  5692                           
  5693                           ;./lcd.h: 17:         RB6 = 1;
  5694  0A37  1706               	bsf	6,6	;volatile
  5695  0A38  2A3A               	goto	l71
  5696  0A39                     l70:	
  5697                           ;./lcd.h: 18:     else
  5698                           
  5699                           
  5700                           ;./lcd.h: 19:         RB6 = 0;
  5701  0A39  1306               	bcf	6,6	;volatile
  5702  0A3A                     l71:	
  5703                           
  5704                           ;./lcd.h: 21:     if (a & 8)
  5705  0A3A  1DF0               	btfss	Lcd_Port@a,3
  5706  0A3B  2A3E               	goto	l72
  5707                           
  5708                           ;./lcd.h: 22:         RB7 = 1;
  5709  0A3C  1786               	bsf	6,7	;volatile
  5710  0A3D  0008               	return
  5711  0A3E                     l72:	
  5712                           ;./lcd.h: 23:     else
  5713                           
  5714                           
  5715                           ;./lcd.h: 24:         RB7 = 0;
  5716  0A3E  1386               	bcf	6,7	;volatile
  5717  0A3F  0008               	return
  5718  0A40                     __end_of_Lcd_Port:	
  5719  007E                     btemp	set	126	;btemp
  5720  007E                     wtemp0	set	126


Data Sizes:
    Strings     61
    Constant    44
    Data        3
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Lcd_Write_Integer@Data(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 14
		 -> STR_15(CODE[9]), STR_14(CODE[11]), STR_13(CODE[9]), STR_12(CODE[14]), 
		 -> STR_11(CODE[4]), STR_10(CODE[5]), STR_9(CODE[8]), STR_8(CODE[5]), 
		 -> STR_7(CODE[8]), STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[11]), 
		 -> STR_3(CODE[5]), STR_2(CODE[11]), Lcd_Write_Integer@Data(BANK0[10]), 


Critical Paths under _main in COMMON

    _Lcd_Init->_Lcd_Cmd
    _Encoder->___xxtofl
    ___fltol->___xxtofl
    ___fleq->___xxtofl
    _VerificarInversionGiro->___xxtofl
    ___flmul->___xxtofl
    ___flge->___xxtofl
    _Lcd_Write_Integer->___xxtofl
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_configurarAntiHorario
    _main->_configurarHorario
    _configurarHorario->_Lcd_Write_Integer
    _configurarAntiHorario->_Lcd_Write_Integer
    _Encoder->_Lcd_Write_Integer
    ___fltol->___flmul
    ___fleq->___flmul
    _VerificarInversionGiro->___flge
    ___flge->___flmul
    _Lcd_Write_Integer->___fltol

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   30787
                                             54 BANK0      4     4      0
                            _Encoder
                       _KeyPadGetKey
                           _Lcd_Init
                           _PinsInit
                           _RunMotor
                          _StopMotor
              _configurarAntiHorario
                  _configurarHorario
 ---------------------------------------------------------------------------------
 (1) _configurarHorario                                    4     4      0    6714
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _configurarAntiHorario                                4     4      0    6714
                                             50 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _StopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunMotor                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _KeyPadGetKey                                         5     3      2     205
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _PinsInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Encoder                                              0     0      0   16956
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
             _VerificarInversionGiro
                             ___fleq
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             11     7      4     533
                                             26 BANK0     11     7      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fleq                                              12     4      8     394
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _VerificarInversionGiro                               0     0      0    5201
                             ___flge
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1234
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    3481
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     486
                                             26 BANK0     12     4      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   13    11      2    3151
                                             37 BANK0     13    11      2
                   _Lcd_Write_String
                            ___flmul (ARG)
                            ___fltol (ARG)
                           ___xxtofl (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2    1408
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1444
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Encoder
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _VerificarInversionGiro
       ___flge
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl
     ___fleq
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _KeyPadGetKey
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _PinsInit
   _RunMotor
   _StopMotor
   _configurarAntiHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul
   _configurarHorario
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      12        0.0%
ABS                  0      0      58       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 01 13:16:07 2019

                              pc 0002                      __CFG_CP$OFF 0000                               l70 0A39  
                             l71 0A3A                               l72 0A3E                               l66 0A2D  
                             l67 0A30                               l68 0A34                               l69 0A35  
                             _cm 005A                               fsr 0004              ___wmul@multiplicand 0072  
            __Umul8_16@word_mpld 0076                              l202 0072                              l116 0D64  
                            l117 0DC7                              l208 03C6                              l153 0D55  
                            l146 0D48                              l325 0A64                              l502 0E72  
                            l518 0CBE                              l726 07D2                              l494 0BE6  
                            l495 0C00                              l752 0EA2                              l499 0E0C  
                            l771 0A8D                              l765 0EF8                              l766 0F02  
                            l758 0EE2                              _RA0 0028                              _RA1 0029  
                            _RA2 002A                              _RB0 0030                              _RA3 002B  
                            _RB2 0032                              _RA4 002C                              _RC0 0038  
                            _RB3 0033                              _RA5 002D                              _RC1 0039  
                            _RB4 0034                              _RA6 002E                              _RB5 0035  
                            _RA7 002F                              _RB6 0036                              _RB7 0037  
                   __CFG_CPD$OFF 0000                              _key 0064                              fsr0 0004  
                            indf 0000                    _CmAntiHorario 005C                     __CFG_IESO$ON 0000  
                   ___flmul@aexp 0032                     ___flmul@bexp 0033                     ___flmul@sign 002D  
                   ___flmul@temp 0038                     ___flmul@prod 0034                     __CFG_LVP$OFF 0000  
                 ??_KeyPadGetKey 0072                     ___fltol@exp1 0044                             l2011 0758  
                           l2003 0724                             l2005 0741                             l2103 0BA5  
                           l2015 075A                             l2025 078C                             l2035 07BB  
                           l2123 0D6D                             l2029 07A2                             l2053 0E9A  
                           l2125 0DA0                             l2063 0EB5                             l2073 0EF6  
                           l2065 0EC7                             l2225 0C7A                             l2075 0EE7  
                           l2059 0EB1                             l2219 0C12                             l2331 02A6  
                           l2181 0069                             l2245 0CAA                             l2229 0C83  
                           l2165 0DE3                             l2309 0241                             l2087 0F1F  
                           l2255 0CCD                             l2247 0CBA                             l2351 00F7  
                           l2319 0253                             l2329 028D                             l2291 01EB  
                           l2357 0123                             l1823 0B45                             l2199 0A5C  
                           l2391 01B2                             l2463 0D1A                             l1833 0F4F  
                           l1921 04E7                             l2369 014D                             l2297 0217  
                           l2481 0D58                             l2465 0D20                             l2473 0D32  
                           l2457 0CF5                             l1763 0B33                             l1755 0B0F  
                           l1923 04E9                             l2571 019E                             l2379 015F  
                           l2467 0D26                             l1757 0B1D                             l1781 0AB2  
                           l1861 0FA7                             l2573 0F62                             l1941 050E  
                           l1925 04F1                             l2389 0199                             l2469 0D2C  
                           l1767 0B3E                             l1855 0F86                             l1839 0F6D  
                           l1951 0524                             l1943 0516                             l2567 0D3A  
                           l1785 0AC0                             l1849 0F84                             l2569 0292  
                           l1779 0AA4                             l1875 0FBA                             l1867 0FB6  
                           l1939 050C                             l1789 0ACB                             l1877 0F2F  
                           l1893 0E26                             l1797 0A85                             l1879 0FFB  
                           l1897 0E4C                             STR_1 0876                             STR_2 084A  
                           STR_3 0871                             STR_4 084A                             STR_5 0871  
                           STR_6 0872                             STR_7 0869                             STR_8 0871  
                           STR_9 0869                             u2105 0733                             u2035 06CD  
                           u3007 0A51                             u2055 06F2                             u1505 0AE1  
                           u2075 0710                             u2420 0D7B                             u1525 0B12  
                           u2085 0728                             u2325 0F0A                             u2245 0EBE  
                           u1615 0AB8                             u2175 0777                             u2415 0D70  
                           u1545 0B1E                             u1625 0AC1                             u1801 0E37  
                           u2185 0795                             u2265 0EDA                             u1802 0E38  
                           u2450 0D8C                             u2434 0D7E                             u1555 0B2A  
                           u1803 0E3D                             u2195 07AD                             u1804 0E3E  
                           u2365 0B8C                             u1565 0B34                             u1725 0F9D  
                           u1821 0E5D                             u1805 0E43                             u2285 0EEF  
                           u2445 0D81                             u1822 0E5E                             u1806 0E44  
                           u2390 0D6A                             u1823 0E63                             u1655 0A8E  
                           u1824 0E64                             u2480 0D9D                             u2464 0D8F  
                           u2385 0BB1                             u1825 0E69                             u2705 0C8C  
                           u1826 0E6A                             u1595 0AA7                             u2475 0D92  
                           u2635 0A65                             u2645 0A6C                             u2735 0CAB  
                           u2815 0119                             u1965 05D4                             u2685 0C0E  
                           u2765 0CC3                             u2917 0D5C                             u2927 02AA  
                           u2937 01B6                             u1995 0631                             u2947 0DA2  
                           u2795 020D                             u2875 0D17                             u2957 0C1E  
                           u2967 0C2D                             u2977 0C3B                             u2987 0AF1  
                           u2997 0B01                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
              ?_Lcd_Write_String 0075                             _key2 0067                             _main 0CDC  
                           btemp 007E                    __CFG_BOREN$ON 0000                             start 0000  
             ??_Lcd_Write_String 0077                  __end_of_Lcd_Cmd 0A5A                    __CFG_MCLRE$ON 0000  
                __end_of_Encoder 04CA                _Lcd_Write_Integer 0A0E                    ___fltol@sign1 0043  
                          ?_main 0070                            STR_10 0871                            STR_11 0872  
                          STR_12 083C                            STR_13 0860                            STR_14 0855  
                          STR_15 0860                    __CFG_WDTE$OFF 0000                  __end_of___flmul 07DF  
                __end_of___fltol 0CDC                            _ANSEL 0188               ?_Lcd_Write_Integer 0045  
                __end_of___lwdiv 0B43                  __end_of___lwmod 0AD0                            _PORTA 0005  
        __size_of_Lcd_Set_Cursor 004A                            _TRISA 0085                            _TRISB 0086  
                          _TRISC 0087                  __end_of_dpowers 083C              ??_Lcd_Write_Integer 0047  
                          pclath 000A                            status 0003                            wtemp0 007E  
                __end_of_sprintf 1000                 __end_of_Lcd_Init 0C6F                 __end_of_Lcd_Port 0A40  
                __initialization 07DF                     __end_of_main 0D61        __end_of_Lcd_Write_Integer 0A26  
                         ??_main 0056                 __end_of_PinsInit 0015               __size_of_Lcd_Clear 000B  
               __end_of_RunMotor 0A0E                           _ANSELH 0189                        ??_Lcd_Cmd 0071  
        __size_of_Lcd_Write_Char 0037                        ??_Encoder 007E                 __end_of___xxtofl 0F28  
                 __CFG_PWRTE$OFF 0000                           _Grados 0060                           ___flge 0DF0  
                         ___fleq 0BCA                           ___wmul 0A5A                        ??___flmul 0028  
                      ??___fltol 003E                        ??___lwdiv 0074                        ??___lwmod 007C  
                         _buffer 0065                _configurarHorario 01BB             __end_of_KeyPadGetKey 0DF0  
             ?_configurarHorario 0070                  KeyPadGetKey@key 0073                  KeyPadGetKey@row 0074  
             __size_of__Umul8_16 0023            _configurarAntiHorario 00C7              ??_configurarHorario 0052  
                      ??_sprintf 0023                  Lcd_Set_Cursor@a 0077                  Lcd_Set_Cursor@b 0074  
                Lcd_Set_Cursor@y 0079                  Lcd_Set_Cursor@z 0078               __size_of_StopMotor 0005  
                     ___flge@ff1 003A                       ___flge@ff2 003E                     ___xxtofl@arg 007A  
                   ___xxtofl@exp 0079                     ___xxtofl@val 0070                       ___fleq@ff1 003A  
                     ___fleq@ff2 003E          __end_of__initialization 07FC                __end_of_Lcd_Clear 0A01  
                     ___fltol@f1 003A                   __pcstackCOMMON 0070        __end_of_configurarHorario 02AF  
                   __pidataBANK0 0003       __size_of_Lcd_Write_Integer 0018                   _Lcd_Set_Cursor 0B80  
           __end_of_keyPadMatrix 0832                        ?_Lcd_Init 0070                        ?_Lcd_Port 0070  
                     __pbssBANK0 005A                        ?_PinsInit 0070                __end_of__Umul8_16 0A9E  
                     __pmaintext 0CDC                          ?___flge 003A                          ?___fleq 003A  
                        ?___wmul 0070                        ?_RunMotor 0070                __end_of_StopMotor 09F6  
      __size_of_Lcd_Write_String 003D           __end_of_Lcd_Set_Cursor 0BCA           ?_configurarAntiHorario 0070  
                      ?___xxtofl 0070                       ??_Lcd_Init 0074         ??_VerificarInversionGiro 007E  
                     ??_Lcd_Port 0070                       __stringtab 0800                   _Lcd_Write_Char 0AD0  
                        _Lcd_Cmd 0A40                          _Encoder 02AF                       ??_PinsInit 0070  
          __size_of_KeyPadGetKey 008F       __size_of_configurarHorario 00F4                  __size_of___flge 0095  
                __size_of___fleq 004A                       ??_RunMotor 0070                          ___flmul 04CA  
                        ___fltol 0C6F                  __size_of___wmul 0021                          ___lwdiv 0B07  
                        ___lwmod 0A9E                  ?_Lcd_Set_Cursor 0074                          __ptext1 01BB  
                        __ptext2 00C7                          __ptext3 0A5A                          __ptext4 09F1  
                        __ptext5 0A01                          __ptext6 0D61                          __ptext7 0006  
                        __ptext8 0C14                          __ptext9 02AF                          _dpowers 0832  
                     ??___xxtofl 0074                          _old_key 0063                          _sprintf 0F28  
         __end_of_Lcd_Write_Char 0B07             end_of_initialization 07FC                     _KeyPadGetKey 0D61  
                      Lcd_Port@a 0070                    ___xxtofl@sign 0078  __size_of_VerificarInversionGiro 00B2  
                ?_Lcd_Write_Char 0070                        _CmHorario 005E                Lcd_Write_String@a 0075  
              Lcd_Write_String@i 007A                      ___flmul@grs 002E                     _keyPadMatrix 0810  
                      _Lcd_Clear 09F6                   __end_of___flge 0E85                   __end_of___fleq 0C14  
                 __end_of___wmul 0A7B                 _Lcd_Write_String 0B43              start_initialization 07DF  
                      _LastState 0062                __size_of_Lcd_Init 005B                __size_of_Lcd_Port 001A  
       __CFG_FOSC$INTRC_NOCLKOUT 0000                       ?_Lcd_Clear 0070                         ??___flge 0042  
                       ??___fleq 0042           _VerificarInversionGiro 0015                __size_of_PinsInit 000F  
                       ??___wmul 0074                        __Umul8_16 0A7B                      __pdataBANK0 0067  
                Lcd_Write_Char@a 0074                  Lcd_Write_Char@y 0073          ??_configurarAntiHorario 0052  
              __size_of_RunMotor 000D                        _StopMotor 09F1                        ___flmul@a 0024  
                      ___flmul@b 0020                        ___latbits 0002                    __pcstackBANK0 0020  
              __size_of___xxtofl 00A3                         ?_Lcd_Cmd 0070                      sprintf@flag 0027  
                       ?_Encoder 0070                      sprintf@prec 0028                 ___lwdiv@dividend 0072  
               ??_Lcd_Set_Cursor 0075                         ?___flmul 0020                         ?___fltol 003A  
                     ?__Umul8_16 0070                         ?___lwdiv 0070                         ?___lwmod 0078  
                      __pstrings 0800                       ?_StopMotor 0070                 ___lwdiv@quotient 0075  
                       ?_sprintf 0020                   ___wmul@product 0074                         Lcd_Cmd@a 0073  
                    ??_Lcd_Clear 0074            Lcd_Write_Integer@Data 0048                      __stringbase 080F  
              ___wmul@multiplier 0070                 ??_Lcd_Write_Char 0071                         _Lcd_Init 0C14  
                       _Lcd_Port 0A26         __end_of_Lcd_Write_String 0B80                 __size_of_Lcd_Cmd 001A  
               __size_of_Encoder 021B                         _PinsInit 0006                         _RunMotor 0A01  
                    ??__Umul8_16 0072                 __size_of___flmul 0315                 __size_of___fltol 006D  
               __size_of___lwdiv 003C                 __size_of___lwmod 0032               __end_of__stringtab 0810  
                    ??_StopMotor 0070                       sprintf@val 0029                         ___xxtofl 0E85  
                ___lwdiv@divisor 0070                  ___lwdiv@counter 0077                         __ptext10 0C6F  
                       __ptext11 0BCA                         __ptext20 0B07                         __ptext12 0015  
                       __ptext21 0B43                         __ptext13 0E85                         __ptext22 0AD0  
                       __ptext14 04CA                         __ptext23 0B80                         __ptext15 0A7B  
                       __ptext24 09F6                         __ptext16 0DF0                         __ptext25 0A40  
                       __ptext17 0A0E                         __ptext26 0A26                         __ptext18 0F28  
                       __ptext19 0A9E                __CFG_BOR4V$BOR40V 0000                 __size_of_sprintf 00D8  
                  __size_of_main 0085                         _keypress 0069          ?_VerificarInversionGiro 0070  
 __size_of_configurarAntiHorario 00F4    __end_of_configurarAntiHorario 01BB               Lcd_Write_Char@temp 0072  
                      sprintf@ap 0026                        sprintf@sp 002B                 ___lwmod@dividend 007A  
 __end_of_VerificarInversionGiro 00C7                        stringcode 080A               Lcd_Set_Cursor@temp 007A  
         __Umul8_16@multiplicand 0070                         sprintf@c 002C                         sprintf@f 0020  
                ___lwmod@divisor 0078                  ___lwmod@counter 007D                         stringdir 080A  
                       stringtab 0800               Lcd_Write_Integer@a 0045                    ?_KeyPadGetKey 0070  
           __Umul8_16@multiplier 0078                __Umul8_16@product 0074  
