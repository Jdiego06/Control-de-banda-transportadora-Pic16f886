

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 29 16:38:12 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.05
    26                           ; Generated 20/12/2018 GMT
    27                           ; 
    28                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F886 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  0105                     	;# 
   121  0107                     	;# 
   122  0108                     	;# 
   123  0109                     	;# 
   124  010C                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  0185                     	;# 
   130  0187                     	;# 
   131  0188                     	;# 
   132  0189                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211                           
   212                           	psect	strings
   213  0003                     __pstrings:	
   214  0003                     stringtab:	
   215  0003                     __stringtab:	
   216  0003                     stringcode:	
   217                           ;	String table - string pointers are 1 byte each
   218                           
   219  0003                     stringdir:	
   220  0003  3000               	movlw	high stringdir
   221  0004  008A               	movwf	10
   222  0005  0804               	movf	4,w
   223  0006  0A84               	incf	4,f
   224  0007  0782               	addwf	2,f
   225  0008                     __stringbase:	
   226  0008  3400               	retlw	0
   227  0009                     __end_of__stringtab:	
   228  0009                     _keyPadMatrix:	
   229  0009  3437               	retlw	55
   230  000A  3400               	retlw	0
   231  000B  3438               	retlw	56
   232  000C  3400               	retlw	0
   233  000D  3439               	retlw	57
   234  000E  3400               	retlw	0
   235  000F  342F               	retlw	47
   236  0010  3400               	retlw	0
   237  0011  3434               	retlw	52
   238  0012  3400               	retlw	0
   239  0013  3435               	retlw	53
   240  0014  3400               	retlw	0
   241  0015  3436               	retlw	54
   242  0016  3400               	retlw	0
   243  0017  342A               	retlw	42
   244  0018  3400               	retlw	0
   245  0019  3431               	retlw	49
   246  001A  3400               	retlw	0
   247  001B  3432               	retlw	50
   248  001C  3400               	retlw	0
   249  001D  3433               	retlw	51
   250  001E  3400               	retlw	0
   251  001F  342D               	retlw	45
   252  0020  3400               	retlw	0
   253  0021  344E               	retlw	78
   254  0022  3400               	retlw	0
   255  0023  3430               	retlw	48
   256  0024  3400               	retlw	0
   257  0025  343D               	retlw	61
   258  0026  3400               	retlw	0
   259  0027  342B               	retlw	43
   260  0028  3400               	retlw	0
   261  0029  34FF               	retlw	255
   262  002A  3400               	retlw	0
   263  002B                     __end_of_keyPadMatrix:	
   264  0005                     _PORTA	set	5
   265  0019                     _TXREG	set	25
   266  001A                     _RCREG	set	26
   267  002F                     _RA7	set	47
   268  002E                     _RA6	set	46
   269  002D                     _RA5	set	45
   270  002C                     _RA4	set	44
   271  002B                     _RA3	set	43
   272  002A                     _RA2	set	42
   273  0029                     _RA1	set	41
   274  0028                     _RA0	set	40
   275  0065                     _RCIF	set	101
   276  00C4                     _CREN	set	196
   277  00C7                     _SPEN	set	199
   278  0033                     _RB3	set	51
   279  0032                     _RB2	set	50
   280  0037                     _RB7	set	55
   281  0036                     _RB6	set	54
   282  0035                     _RB5	set	53
   283  0034                     _RB4	set	52
   284  0086                     _TRISB	set	134
   285  0085                     _TRISA	set	133
   286  0099                     _SPBRG	set	153
   287  040F                     _nRBPU	set	1039
   288  04C1                     _TRMT	set	1217
   289  04C5                     _TXEN	set	1221
   290  043E                     _TRISC6	set	1086
   291  043F                     _TRISC7	set	1087
   292  04C4                     _SYNC	set	1220
   293  04C2                     _BRGH	set	1218
   294  0188                     _ANSEL	set	392
   295  0189                     _ANSELH	set	393
   296  002B                     STR_1:	
   297  002B  3448               	retlw	72	;'H'
   298  002C  346F               	retlw	111	;'o'
   299  002D  346C               	retlw	108	;'l'
   300  002E  3461               	retlw	97	;'a'
   301  002F  3400               	retlw	0
   302  002B                     
   303                           ; #config settings
   304  0000                     
   305                           	psect	cinit
   306  07FA                     start_initialization:	
   307  07FA                     __initialization:	
   308                           
   309                           ; Clear objects allocated to COMMON
   310  07FA  01FC               	clrf	__pbssCOMMON& (0+127)
   311  07FB  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   312  07FC                     end_of_initialization:	
   313                           ;End of C runtime variable initialization code
   314                           
   315  07FC                     __end_of__initialization:	
   316  07FC  0183               	clrf	3
   317  07FD  120A  118A  2D8B   	ljmp	_main	;jump to C main() function
   318                           
   319                           	psect	bssCOMMON
   320  007C                     __pbssCOMMON:	
   321  007C                     _old_key:	
   322  007C                     	ds	1
   323  007D                     _key:	
   324  007D                     	ds	1
   325                           
   326                           	psect	cstackCOMMON
   327  0070                     __pcstackCOMMON:	
   328  0070                     ?_Lcd_Port:	
   329  0070                     ??_Lcd_Port:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_Lcd_Cmd:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?_Lcd_Clear:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?_Lcd_Init:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ?_Lcd_Write_Char:	
   342                           ; 1 bytes @ 0x0
   343                           
   344  0070                     ?_Lcd_Write_String:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_UART_Write:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ??_UART_Write:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_UART_Write_Text:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_KeyPadInit:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ??_KeyPadInit:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_KeyPadGetKey:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_main:	
   366                           ; 2 bytes @ 0x0
   367                           
   368  0070                     ?___aldiv:	
   369                           ; 2 bytes @ 0x0
   370                           
   371  0070                     Lcd_Port@a:	
   372                           ; 4 bytes @ 0x0
   373                           
   374  0070                     UART_Write@data:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ___aldiv@divisor:	
   378                           ; 1 bytes @ 0x0
   379                           
   380                           
   381                           ; 4 bytes @ 0x0
   382  0070                     	ds	1
   383  0071                     ??_Lcd_Cmd:	
   384  0071                     ??_Lcd_Write_Char:	
   385                           ; 1 bytes @ 0x1
   386                           
   387  0071                     ??_UART_Write_Text:	
   388                           ; 1 bytes @ 0x1
   389                           
   390  0071                     UART_Write_Text@i:	
   391                           ; 1 bytes @ 0x1
   392                           
   393                           
   394                           ; 2 bytes @ 0x1
   395  0071                     	ds	1
   396  0072                     ??_KeyPadGetKey:	
   397  0072                     Lcd_Write_Char@temp:	
   398                           ; 1 bytes @ 0x2
   399                           
   400                           
   401                           ; 1 bytes @ 0x2
   402  0072                     	ds	1
   403  0073                     Lcd_Cmd@a:	
   404  0073                     Lcd_Write_Char@y:	
   405                           ; 1 bytes @ 0x3
   406                           
   407  0073                     UART_Write_Text@text:	
   408                           ; 1 bytes @ 0x3
   409                           
   410                           
   411                           ; 1 bytes @ 0x3
   412  0073                     	ds	1
   413  0074                     ??_Lcd_Clear:	
   414  0074                     ?_Lcd_Set_Cursor:	
   415                           ; 1 bytes @ 0x4
   416                           
   417  0074                     ??_Lcd_Init:	
   418                           ; 1 bytes @ 0x4
   419                           
   420  0074                     Lcd_Set_Cursor@b:	
   421                           ; 1 bytes @ 0x4
   422                           
   423  0074                     Lcd_Write_Char@a:	
   424                           ; 1 bytes @ 0x4
   425                           
   426  0074                     KeyPadGetKey@key:	
   427                           ; 1 bytes @ 0x4
   428                           
   429  0074                     ___aldiv@dividend:	
   430                           ; 1 bytes @ 0x4
   431                           
   432                           
   433                           ; 4 bytes @ 0x4
   434  0074                     	ds	1
   435  0075                     ??_Lcd_Set_Cursor:	
   436  0075                     ??_Lcd_Write_String:	
   437                           ; 1 bytes @ 0x5
   438                           
   439  0075                     KeyPadGetKey@row:	
   440                           ; 1 bytes @ 0x5
   441                           
   442  0075                     Lcd_Write_String@i:	
   443                           ; 1 bytes @ 0x5
   444                           
   445                           
   446                           ; 2 bytes @ 0x5
   447  0075                     	ds	2
   448  0077                     Lcd_Set_Cursor@a:	
   449  0077                     Lcd_Write_String@a:	
   450                           ; 1 bytes @ 0x7
   451                           
   452                           
   453                           ; 1 bytes @ 0x7
   454  0077                     	ds	1
   455  0078                     ??___aldiv:	
   456  0078                     Lcd_Set_Cursor@z:	
   457                           ; 1 bytes @ 0x8
   458                           
   459                           
   460                           ; 1 bytes @ 0x8
   461  0078                     	ds	1
   462  0079                     Lcd_Set_Cursor@y:	
   463  0079                     UART_Init@x:	
   464                           ; 1 bytes @ 0x9
   465                           
   466                           
   467                           ; 2 bytes @ 0x9
   468  0079                     	ds	1
   469  007A                     Lcd_Set_Cursor@temp:	
   470                           
   471                           ; 1 bytes @ 0xA
   472  007A                     	ds	1
   473  007B                     main@keypress:	
   474                           
   475                           ; 1 bytes @ 0xB
   476  007B                     	ds	1
   477                           
   478                           	psect	cstackBANK0
   479  0020                     __pcstackBANK0:	
   480  0020                     ___aldiv@counter:	
   481                           
   482                           ; 1 bytes @ 0x0
   483  0020                     	ds	1
   484  0021                     ___aldiv@sign:	
   485                           
   486                           ; 1 bytes @ 0x1
   487  0021                     	ds	1
   488  0022                     ___aldiv@quotient:	
   489                           
   490                           ; 4 bytes @ 0x2
   491  0022                     	ds	4
   492  0026                     ?_UART_Init:	
   493  0026                     UART_Init@baudrate:	
   494                           ; 1 bytes @ 0x6
   495                           
   496                           
   497                           ; 4 bytes @ 0x6
   498  0026                     	ds	4
   499  002A                     ??_UART_Init:	
   500                           
   501                           ; 1 bytes @ 0xA
   502  002A                     	ds	12
   503  0036                     ??_main:	
   504                           
   505                           ; 1 bytes @ 0x16
   506  0036                     	ds	4
   507                           
   508                           	psect	maintext
   509  058B                     __pmaintext:	
   510 ;;
   511 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   512 ;;
   513 ;; *************** function _main *****************
   514 ;; Defined at:
   515 ;;		line 26 in file "main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  a               2    0        unsigned int 
   520 ;;  keypress        1   11[COMMON] unsigned char 
   521 ;; Return value:  Size  Location     Type
   522 ;;                  2  172[None  ] int 
   523 ;; Registers used:
   524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : B00/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   530 ;;      Params:         0       0       0       0       0
   531 ;;      Locals:         1       0       0       0       0
   532 ;;      Temps:          0       4       0       0       0
   533 ;;      Totals:         1       4       0       0       0
   534 ;;Total ram usage:        5 bytes
   535 ;; Hardware stack levels required when called:    3
   536 ;; This function calls:
   537 ;;		_KeyPadGetKey
   538 ;;		_KeyPadInit
   539 ;;		_Lcd_Clear
   540 ;;		_Lcd_Init
   541 ;;		_Lcd_Set_Cursor
   542 ;;		_Lcd_Write_String
   543 ;;		_UART_Init
   544 ;;		_UART_Write
   545 ;;		_UART_Write_Text
   546 ;; This function is called by:
   547 ;;		Startup code after reset
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           
   552                           ;psect for function _main
   553  058B                     _main:	
   554                           
   555                           ;main.c: 27:     unsigned int a;;main.c: 28:     ANSELH = ANSEL = 0;
   556                           
   557                           ;incstack = 0
   558                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   559  058B  1683               	bsf	3,5	;RP0=1, select bank3
   560  058C  1703               	bsf	3,6	;RP1=1, select bank3
   561  058D  0188               	clrf	8	;volatile
   562  058E  0189               	clrf	9	;volatile
   563                           
   564                           ;main.c: 30:     TRISB = 0x00;
   565  058F  1683               	bsf	3,5	;RP0=1, select bank1
   566  0590  1303               	bcf	3,6	;RP1=0, select bank1
   567  0591  0186               	clrf	6	;volatile
   568                           
   569                           ;main.c: 34:     UART_Init(9600);
   570  0592  3000               	movlw	0
   571  0593  1283               	bcf	3,5	;RP0=0, select bank0
   572  0594  1303               	bcf	3,6	;RP1=0, select bank0
   573  0595  00A9               	movwf	UART_Init@baudrate+3
   574  0596  3000               	movlw	0
   575  0597  00A8               	movwf	UART_Init@baudrate+2
   576  0598  3025               	movlw	37
   577  0599  00A7               	movwf	UART_Init@baudrate+1
   578  059A  3080               	movlw	128
   579  059B  00A6               	movwf	UART_Init@baudrate
   580  059C  120A  118A  2724  120A  118A  	fcall	_UART_Init
   581                           
   582                           ;main.c: 35:     nRBPU = 0;
   583  05A1  1683               	bsf	3,5	;RP0=1, select bank1
   584  05A2  1303               	bcf	3,6	;RP1=0, select bank1
   585  05A3  1381               	bcf	1,7	;volatile
   586                           
   587                           ;main.c: 36:     Lcd_Init();
   588  05A4  120A  118A  2530  120A  118A  	fcall	_Lcd_Init
   589                           
   590                           ;main.c: 37:     KeyPadInit();
   591  05A9  120A  118A  2418  120A  118A  	fcall	_KeyPadInit
   592  05AE                     l1282:	
   593                           
   594                           ;main.c: 45:         keypress = KeyPadGetKey();
   595  05AE  120A  118A  2693  120A  118A  	fcall	_KeyPadGetKey
   596  05B3  0870               	movf	?_KeyPadGetKey,w
   597  05B4  1283               	bcf	3,5	;RP0=0, select bank0
   598  05B5  1303               	bcf	3,6	;RP1=0, select bank0
   599  05B6  00B6               	movwf	??_main
   600  05B7  0836               	movf	??_main,w
   601  05B8  00FB               	movwf	main@keypress
   602                           
   603                           ;main.c: 46:         if (keypress != keyPadMatrix[ 0x10 ]) {
   604  05B9  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
   605  05BA  0084               	movwf	4
   606  05BB  120A  118A  2003  120A  118A  	fcall	stringdir
   607  05C0  00B6               	movwf	??_main
   608  05C1  120A  118A  2003  120A  118A  	fcall	stringdir
   609  05C6  00B7               	movwf	??_main+1
   610  05C7  087B               	movf	main@keypress,w
   611  05C8  00B8               	movwf	??_main+2
   612  05C9  01B9               	clrf	??_main+3
   613  05CA  0837               	movf	??_main+1,w
   614  05CB  0639               	xorwf	??_main+3,w
   615  05CC  1D03               	skipz
   616  05CD  2DD0               	goto	u1005
   617  05CE  0836               	movf	??_main,w
   618  05CF  0638               	xorwf	??_main+2,w
   619  05D0                     u1005:	
   620  05D0  1903               	skipnz
   621  05D1  2DF2               	goto	l1292
   622                           
   623                           ;main.c: 47:             UART_Write(keypress);
   624  05D2  087B               	movf	main@keypress,w
   625  05D3  120A  118A  2420  120A  118A  	fcall	_UART_Write
   626                           
   627                           ;main.c: 48:             Lcd_Clear();
   628  05D8  120A  118A  242A  120A  118A  	fcall	_Lcd_Clear
   629                           
   630                           ;main.c: 49:             Lcd_Set_Cursor(1, 1);
   631  05DD  01F4               	clrf	Lcd_Set_Cursor@b
   632  05DE  0AF4               	incf	Lcd_Set_Cursor@b,f
   633  05DF  3001               	movlw	1
   634  05E0  120A  118A  24E6  120A  118A  	fcall	_Lcd_Set_Cursor
   635                           
   636                           ;main.c: 50:             Lcd_Write_String("Hola");
   637  05E5  3023               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   638  05E6  120A  118A  2469  120A  118A  	fcall	_Lcd_Write_String
   639                           
   640                           ;main.c: 51:             UART_Write_Text("Hola");
   641  05EB  3023               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   642  05EC  120A  118A  248B  120A  118A  	fcall	_UART_Write_Text
   643                           
   644                           ;main.c: 52:         } else {
   645  05F1  2DF8               	goto	l1294
   646  05F2                     l1292:	
   647                           
   648                           ;main.c: 53:             UART_Write('-');
   649  05F2  302D               	movlw	45
   650  05F3  120A  118A  2420  120A  118A  	fcall	_UART_Write
   651  05F8                     l1294:	
   652                           
   653                           ;main.c: 65:         _delay((unsigned long)((10)*(8000000/4000.0)));
   654  05F8  301A               	movlw	26
   655  05F9  1283               	bcf	3,5	;RP0=0, select bank0
   656  05FA  1303               	bcf	3,6	;RP1=0, select bank0
   657  05FB  00B7               	movwf	??_main+1
   658  05FC  30F7               	movlw	247
   659  05FD  00B6               	movwf	??_main
   660  05FE                     u1017:	
   661  05FE  0BB6               	decfsz	??_main,f
   662  05FF  2DFE               	goto	u1017
   663  0600  0BB7               	decfsz	??_main+1,f
   664  0601  2DFE               	goto	u1017
   665  0602  2E03               	nop2
   666  0603  2DAE               	goto	l1282
   667  0604                     __end_of_main:	
   668                           
   669                           	psect	text1
   670  048B                     __ptext1:	
   671 ;; *************** function _UART_Write_Text *****************
   672 ;; Defined at:
   673 ;;		line 46 in file "./uart.h"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  text            1    wreg     PTR unsigned char 
   676 ;;		 -> STR_2(5), 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  text            1    3[COMMON] PTR unsigned char 
   679 ;;		 -> STR_2(5), 
   680 ;;  i               2    1[COMMON] int 
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   690 ;;      Params:         0       0       0       0       0
   691 ;;      Locals:         3       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0
   693 ;;      Totals:         3       0       0       0       0
   694 ;;Total ram usage:        3 bytes
   695 ;; Hardware stack levels used:    1
   696 ;; Hardware stack levels required when called:    1
   697 ;; This function calls:
   698 ;;		_UART_Write
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           
   705                           ;psect for function _UART_Write_Text
   706  048B                     _UART_Write_Text:	
   707                           
   708                           ;incstack = 0
   709                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   710                           ;UART_Write_Text@text stored from wreg
   711  048B  00F3               	movwf	UART_Write_Text@text
   712                           
   713                           ;./uart.h: 48:     int i;;./uart.h: 49:     for (i = 0; text[i] != '\0'; i++)
   714  048C  01F1               	clrf	UART_Write_Text@i
   715  048D  01F2               	clrf	UART_Write_Text@i+1
   716  048E                     l1198:	
   717  048E  0871               	movf	UART_Write_Text@i,w
   718  048F  0773               	addwf	UART_Write_Text@text,w
   719  0490  0084               	movwf	4
   720  0491  120A  118A  2003  120A  118A  	fcall	stringdir
   721  0496  3A00               	xorlw	0
   722  0497  1903               	btfsc	3,2
   723  0498  0008               	return
   724                           
   725                           ;./uart.h: 50:         UART_Write(text[i]);
   726  0499  0871               	movf	UART_Write_Text@i,w
   727  049A  0773               	addwf	UART_Write_Text@text,w
   728  049B  0084               	movwf	4
   729  049C  120A  118A  2003  120A  118A  	fcall	stringdir
   730  04A1  120A  118A  2420  120A  118A  	fcall	_UART_Write
   731  04A6  3001               	movlw	1
   732  04A7  07F1               	addwf	UART_Write_Text@i,f
   733  04A8  1803               	skipnc
   734  04A9  0AF2               	incf	UART_Write_Text@i+1,f
   735  04AA  3000               	movlw	0
   736  04AB  07F2               	addwf	UART_Write_Text@i+1,f
   737  04AC  2C8E               	goto	l1198
   738  04AD                     __end_of_UART_Write_Text:	
   739                           
   740                           	psect	text2
   741  0420                     __ptext2:	
   742 ;; *************** function _UART_Write *****************
   743 ;; Defined at:
   744 ;;		line 41 in file "./uart.h"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  data            1    wreg     unsigned char 
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  data            1    0[COMMON] unsigned char 
   749 ;; Return value:  Size  Location     Type
   750 ;;                  1    wreg      void 
   751 ;; Registers used:
   752 ;;		wreg
   753 ;; Tracked objects:
   754 ;;		On entry : 0/0
   755 ;;		On exit  : 0/0
   756 ;;		Unchanged: 0/0
   757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   758 ;;      Params:         0       0       0       0       0
   759 ;;      Locals:         1       0       0       0       0
   760 ;;      Temps:          0       0       0       0       0
   761 ;;      Totals:         1       0       0       0       0
   762 ;;Total ram usage:        1 bytes
   763 ;; Hardware stack levels used:    1
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_UART_Write_Text
   768 ;;		_main
   769 ;;		_Uart2
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           
   774                           ;psect for function _UART_Write
   775  0420                     _UART_Write:	
   776                           
   777                           ;incstack = 0
   778                           ; Regs used in _UART_Write: [wreg]
   779                           ;UART_Write@data stored from wreg
   780  0420  00F0               	movwf	UART_Write@data
   781  0421                     l133:	
   782                           ;./uart.h: 42:     while (!TRMT);
   783                           
   784  0421  1683               	bsf	3,5	;RP0=1, select bank1
   785  0422  1303               	bcf	3,6	;RP1=0, select bank1
   786  0423  1C98               	btfss	24,1	;volatile
   787  0424  2C21               	goto	l133
   788                           
   789                           ;./uart.h: 43:     TXREG = data;
   790  0425  0870               	movf	UART_Write@data,w
   791  0426  1283               	bcf	3,5	;RP0=0, select bank0
   792  0427  1303               	bcf	3,6	;RP1=0, select bank0
   793  0428  0099               	movwf	25	;volatile
   794  0429  0008               	return
   795  042A                     __end_of_UART_Write:	
   796                           
   797                           	psect	text3
   798  0724                     __ptext3:	
   799 ;; *************** function _UART_Init *****************
   800 ;; Defined at:
   801 ;;		line 1 in file "./uart.h"
   802 ;; Parameters:    Size  Location     Type
   803 ;;  baudrate        4    6[BANK0 ] const long 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  x               2    9[COMMON] unsigned int 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      unsigned char 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0, pclath, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   815 ;;      Params:         0       4       0       0       0
   816 ;;      Locals:         2       0       0       0       0
   817 ;;      Temps:          0      12       0       0       0
   818 ;;      Totals:         2      16       0       0       0
   819 ;;Total ram usage:       18 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    1
   822 ;; This function calls:
   823 ;;		___aldiv
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           
   830                           ;psect for function _UART_Init
   831  0724                     _UART_Init:	
   832                           
   833                           ;./uart.h: 2:     unsigned int x;;./uart.h: 3:     x = (8000000 - baudrate * 64) / (baud
      +                          rate * 64);
   834                           
   835                           ;incstack = 0
   836                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   837  0724  1283               	bcf	3,5	;RP0=0, select bank0
   838  0725  1303               	bcf	3,6	;RP1=0, select bank0
   839  0726  0826               	movf	UART_Init@baudrate,w
   840  0727  00AA               	movwf	??_UART_Init
   841  0728  0827               	movf	UART_Init@baudrate+1,w
   842  0729  00AB               	movwf	??_UART_Init+1
   843  072A  0828               	movf	UART_Init@baudrate+2,w
   844  072B  00AC               	movwf	??_UART_Init+2
   845  072C  0829               	movf	UART_Init@baudrate+3,w
   846  072D  00AD               	movwf	??_UART_Init+3
   847  072E  3006               	movlw	6
   848  072F                     u735:	
   849  072F  1003               	clrc
   850  0730  0DAA               	rlf	??_UART_Init,f
   851  0731  0DAB               	rlf	??_UART_Init+1,f
   852  0732  0DAC               	rlf	??_UART_Init+2,f
   853  0733  0DAD               	rlf	??_UART_Init+3,f
   854  0734  3EFF               	addlw	-1
   855  0735  1D03               	skipz
   856  0736  2F2F               	goto	u735
   857  0737  082D               	movf	??_UART_Init+3,w
   858  0738  00F3               	movwf	___aldiv@divisor+3
   859  0739  082C               	movf	??_UART_Init+2,w
   860  073A  00F2               	movwf	___aldiv@divisor+2
   861  073B  082B               	movf	??_UART_Init+1,w
   862  073C  00F1               	movwf	___aldiv@divisor+1
   863  073D  082A               	movf	??_UART_Init,w
   864  073E  00F0               	movwf	___aldiv@divisor
   865  073F  0826               	movf	UART_Init@baudrate,w
   866  0740  00AE               	movwf	??_UART_Init+4
   867  0741  0827               	movf	UART_Init@baudrate+1,w
   868  0742  00AF               	movwf	??_UART_Init+5
   869  0743  0828               	movf	UART_Init@baudrate+2,w
   870  0744  00B0               	movwf	??_UART_Init+6
   871  0745  0829               	movf	UART_Init@baudrate+3,w
   872  0746  00B1               	movwf	??_UART_Init+7
   873  0747  3006               	movlw	6
   874  0748                     u745:	
   875  0748  1003               	clrc
   876  0749  0DAE               	rlf	??_UART_Init+4,f
   877  074A  0DAF               	rlf	??_UART_Init+5,f
   878  074B  0DB0               	rlf	??_UART_Init+6,f
   879  074C  0DB1               	rlf	??_UART_Init+7,f
   880  074D  3EFF               	addlw	-1
   881  074E  1D03               	skipz
   882  074F  2F48               	goto	u745
   883  0750  3000               	movlw	0
   884  0751  00B2               	movwf	??_UART_Init+8
   885  0752  3012               	movlw	18
   886  0753  00B3               	movwf	??_UART_Init+9
   887  0754  307A               	movlw	122
   888  0755  00B4               	movwf	??_UART_Init+10
   889  0756  3000               	movlw	0
   890  0757  00B5               	movwf	??_UART_Init+11
   891  0758  082E               	movf	??_UART_Init+4,w
   892  0759  02B2               	subwf	??_UART_Init+8,f
   893  075A  082F               	movf	??_UART_Init+5,w
   894  075B  1C03               	skipc
   895  075C  0F2F               	incfsz	??_UART_Init+5,w
   896  075D  2F5F               	goto	u751
   897  075E  2F60               	goto	u752
   898  075F                     u751:	
   899  075F  02B3               	subwf	??_UART_Init+9,f
   900  0760                     u752:	
   901  0760  0830               	movf	??_UART_Init+6,w
   902  0761  1C03               	skipc
   903  0762  0F30               	incfsz	??_UART_Init+6,w
   904  0763  2F65               	goto	u753
   905  0764  2F66               	goto	u754
   906  0765                     u753:	
   907  0765  02B4               	subwf	??_UART_Init+10,f
   908  0766                     u754:	
   909  0766  0831               	movf	??_UART_Init+7,w
   910  0767  1C03               	skipc
   911  0768  0F31               	incfsz	??_UART_Init+7,w
   912  0769  2F6B               	goto	u755
   913  076A  2F6C               	goto	u756
   914  076B                     u755:	
   915  076B  02B5               	subwf	??_UART_Init+11,f
   916  076C                     u756:	
   917  076C  0835               	movf	??_UART_Init+11,w
   918  076D  00F7               	movwf	___aldiv@dividend+3
   919  076E  0834               	movf	??_UART_Init+10,w
   920  076F  00F6               	movwf	___aldiv@dividend+2
   921  0770  0833               	movf	??_UART_Init+9,w
   922  0771  00F5               	movwf	___aldiv@dividend+1
   923  0772  0832               	movf	??_UART_Init+8,w
   924  0773  00F4               	movwf	___aldiv@dividend
   925  0774  120A  118A  2604  120A  118A  	fcall	___aldiv
   926  0779  0871               	movf	?___aldiv+1,w
   927  077A  00FA               	movwf	UART_Init@x+1
   928  077B  0870               	movf	?___aldiv,w
   929  077C  00F9               	movwf	UART_Init@x
   930                           
   931                           ;./uart.h: 4:     if (x > 255) {
   932  077D  3001               	movlw	1
   933  077E  027A               	subwf	UART_Init@x+1,w
   934  077F  3000               	movlw	0
   935  0780  1903               	skipnz
   936  0781  0279               	subwf	UART_Init@x,w
   937  0782  1C03               	skipc
   938  0783  2FE0               	goto	l1174
   939                           
   940                           ;./uart.h: 5:         x = (8000000 - baudrate * 16) / (baudrate * 16);
   941  0784  1283               	bcf	3,5	;RP0=0, select bank0
   942  0785  1303               	bcf	3,6	;RP1=0, select bank0
   943  0786  0826               	movf	UART_Init@baudrate,w
   944  0787  00AA               	movwf	??_UART_Init
   945  0788  0827               	movf	UART_Init@baudrate+1,w
   946  0789  00AB               	movwf	??_UART_Init+1
   947  078A  0828               	movf	UART_Init@baudrate+2,w
   948  078B  00AC               	movwf	??_UART_Init+2
   949  078C  0829               	movf	UART_Init@baudrate+3,w
   950  078D  00AD               	movwf	??_UART_Init+3
   951  078E  3004               	movlw	4
   952  078F                     u775:	
   953  078F  1003               	clrc
   954  0790  0DAA               	rlf	??_UART_Init,f
   955  0791  0DAB               	rlf	??_UART_Init+1,f
   956  0792  0DAC               	rlf	??_UART_Init+2,f
   957  0793  0DAD               	rlf	??_UART_Init+3,f
   958  0794  3EFF               	addlw	-1
   959  0795  1D03               	skipz
   960  0796  2F8F               	goto	u775
   961  0797  082D               	movf	??_UART_Init+3,w
   962  0798  00F3               	movwf	___aldiv@divisor+3
   963  0799  082C               	movf	??_UART_Init+2,w
   964  079A  00F2               	movwf	___aldiv@divisor+2
   965  079B  082B               	movf	??_UART_Init+1,w
   966  079C  00F1               	movwf	___aldiv@divisor+1
   967  079D  082A               	movf	??_UART_Init,w
   968  079E  00F0               	movwf	___aldiv@divisor
   969  079F  0826               	movf	UART_Init@baudrate,w
   970  07A0  00AE               	movwf	??_UART_Init+4
   971  07A1  0827               	movf	UART_Init@baudrate+1,w
   972  07A2  00AF               	movwf	??_UART_Init+5
   973  07A3  0828               	movf	UART_Init@baudrate+2,w
   974  07A4  00B0               	movwf	??_UART_Init+6
   975  07A5  0829               	movf	UART_Init@baudrate+3,w
   976  07A6  00B1               	movwf	??_UART_Init+7
   977  07A7  3004               	movlw	4
   978  07A8                     u785:	
   979  07A8  1003               	clrc
   980  07A9  0DAE               	rlf	??_UART_Init+4,f
   981  07AA  0DAF               	rlf	??_UART_Init+5,f
   982  07AB  0DB0               	rlf	??_UART_Init+6,f
   983  07AC  0DB1               	rlf	??_UART_Init+7,f
   984  07AD  3EFF               	addlw	-1
   985  07AE  1D03               	skipz
   986  07AF  2FA8               	goto	u785
   987  07B0  3000               	movlw	0
   988  07B1  00B2               	movwf	??_UART_Init+8
   989  07B2  3012               	movlw	18
   990  07B3  00B3               	movwf	??_UART_Init+9
   991  07B4  307A               	movlw	122
   992  07B5  00B4               	movwf	??_UART_Init+10
   993  07B6  3000               	movlw	0
   994  07B7  00B5               	movwf	??_UART_Init+11
   995  07B8  082E               	movf	??_UART_Init+4,w
   996  07B9  02B2               	subwf	??_UART_Init+8,f
   997  07BA  082F               	movf	??_UART_Init+5,w
   998  07BB  1C03               	skipc
   999  07BC  0F2F               	incfsz	??_UART_Init+5,w
  1000  07BD  2FBF               	goto	u791
  1001  07BE  2FC0               	goto	u792
  1002  07BF                     u791:	
  1003  07BF  02B3               	subwf	??_UART_Init+9,f
  1004  07C0                     u792:	
  1005  07C0  0830               	movf	??_UART_Init+6,w
  1006  07C1  1C03               	skipc
  1007  07C2  0F30               	incfsz	??_UART_Init+6,w
  1008  07C3  2FC5               	goto	u793
  1009  07C4  2FC6               	goto	u794
  1010  07C5                     u793:	
  1011  07C5  02B4               	subwf	??_UART_Init+10,f
  1012  07C6                     u794:	
  1013  07C6  0831               	movf	??_UART_Init+7,w
  1014  07C7  1C03               	skipc
  1015  07C8  0F31               	incfsz	??_UART_Init+7,w
  1016  07C9  2FCB               	goto	u795
  1017  07CA  2FCC               	goto	u796
  1018  07CB                     u795:	
  1019  07CB  02B5               	subwf	??_UART_Init+11,f
  1020  07CC                     u796:	
  1021  07CC  0835               	movf	??_UART_Init+11,w
  1022  07CD  00F7               	movwf	___aldiv@dividend+3
  1023  07CE  0834               	movf	??_UART_Init+10,w
  1024  07CF  00F6               	movwf	___aldiv@dividend+2
  1025  07D0  0833               	movf	??_UART_Init+9,w
  1026  07D1  00F5               	movwf	___aldiv@dividend+1
  1027  07D2  0832               	movf	??_UART_Init+8,w
  1028  07D3  00F4               	movwf	___aldiv@dividend
  1029  07D4  120A  118A  2604  120A  118A  	fcall	___aldiv
  1030  07D9  0871               	movf	?___aldiv+1,w
  1031  07DA  00FA               	movwf	UART_Init@x+1
  1032  07DB  0870               	movf	?___aldiv,w
  1033  07DC  00F9               	movwf	UART_Init@x
  1034                           
  1035                           ;./uart.h: 6:         BRGH = 1;
  1036  07DD  1683               	bsf	3,5	;RP0=1, select bank1
  1037  07DE  1303               	bcf	3,6	;RP1=0, select bank1
  1038  07DF  1518               	bsf	24,2	;volatile
  1039  07E0                     l1174:	
  1040                           
  1041                           ;./uart.h: 8:     if (x < 256) {
  1042  07E0  3001               	movlw	1
  1043  07E1  027A               	subwf	UART_Init@x+1,w
  1044  07E2  3000               	movlw	0
  1045  07E3  1903               	skipnz
  1046  07E4  0279               	subwf	UART_Init@x,w
  1047  07E5  1803               	skipnc
  1048  07E6  0008               	return
  1049                           
  1050                           ;./uart.h: 9:         SPBRG = x;
  1051  07E7  0879               	movf	UART_Init@x,w
  1052  07E8  1683               	bsf	3,5	;RP0=1, select bank1
  1053  07E9  1303               	bcf	3,6	;RP1=0, select bank1
  1054  07EA  0099               	movwf	25	;volatile
  1055                           
  1056                           ;./uart.h: 10:         SYNC = 0;
  1057  07EB  1218               	bcf	24,4	;volatile
  1058                           
  1059                           ;./uart.h: 11:         SPEN = 1;
  1060  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  1061  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  1062  07EE  1798               	bsf	24,7	;volatile
  1063                           
  1064                           ;./uart.h: 12:         TRISC7 = 1;
  1065  07EF  1683               	bsf	3,5	;RP0=1, select bank1
  1066  07F0  1303               	bcf	3,6	;RP1=0, select bank1
  1067  07F1  1787               	bsf	7,7	;volatile
  1068                           
  1069                           ;./uart.h: 13:         TRISC6 = 1;
  1070  07F2  1707               	bsf	7,6	;volatile
  1071                           
  1072                           ;./uart.h: 14:         CREN = 1;
  1073  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  1074  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  1075  07F5  1618               	bsf	24,4	;volatile
  1076                           
  1077                           ;./uart.h: 15:         TXEN = 1;
  1078  07F6  1683               	bsf	3,5	;RP0=1, select bank1
  1079  07F7  1303               	bcf	3,6	;RP1=0, select bank1
  1080  07F8  1698               	bsf	24,5	;volatile
  1081  07F9  0008               	return
  1082  07FA                     __end_of_UART_Init:	
  1083                           
  1084                           	psect	text4
  1085  0604                     __ptext4:	
  1086 ;; *************** function ___aldiv *****************
  1087 ;; Defined at:
  1088 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  divisor         4    0[COMMON] long 
  1091 ;;  dividend        4    4[COMMON] long 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  quotient        4    2[BANK0 ] long 
  1094 ;;  sign            1    1[BANK0 ] unsigned char 
  1095 ;;  counter         1    0[BANK0 ] unsigned char 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  4    0[COMMON] long 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1105 ;;      Params:         8       0       0       0       0
  1106 ;;      Locals:         0       6       0       0       0
  1107 ;;      Temps:          1       0       0       0       0
  1108 ;;      Totals:         9       6       0       0       0
  1109 ;;Total ram usage:       15 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; This function calls:
  1112 ;;		Nothing
  1113 ;; This function is called by:
  1114 ;;		_UART_Init
  1115 ;; This function uses a non-reentrant model
  1116 ;;
  1117                           
  1118                           
  1119                           ;psect for function ___aldiv
  1120  0604                     ___aldiv:	
  1121                           
  1122                           ;incstack = 0
  1123                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1124  0604  1283               	bcf	3,5	;RP0=0, select bank0
  1125  0605  1303               	bcf	3,6	;RP1=0, select bank0
  1126  0606  01A1               	clrf	___aldiv@sign
  1127  0607  1FF3               	btfss	___aldiv@divisor+3,7
  1128  0608  2E16               	goto	l329
  1129  0609  09F0               	comf	___aldiv@divisor,f
  1130  060A  09F1               	comf	___aldiv@divisor+1,f
  1131  060B  09F2               	comf	___aldiv@divisor+2,f
  1132  060C  09F3               	comf	___aldiv@divisor+3,f
  1133  060D  0AF0               	incf	___aldiv@divisor,f
  1134  060E  1903               	skipnz
  1135  060F  0AF1               	incf	___aldiv@divisor+1,f
  1136  0610  1903               	skipnz
  1137  0611  0AF2               	incf	___aldiv@divisor+2,f
  1138  0612  1903               	skipnz
  1139  0613  0AF3               	incf	___aldiv@divisor+3,f
  1140  0614  01A1               	clrf	___aldiv@sign
  1141  0615  0AA1               	incf	___aldiv@sign,f
  1142  0616                     l329:	
  1143  0616  1FF7               	btfss	___aldiv@dividend+3,7
  1144  0617  2E27               	goto	l1096
  1145  0618  09F4               	comf	___aldiv@dividend,f
  1146  0619  09F5               	comf	___aldiv@dividend+1,f
  1147  061A  09F6               	comf	___aldiv@dividend+2,f
  1148  061B  09F7               	comf	___aldiv@dividend+3,f
  1149  061C  0AF4               	incf	___aldiv@dividend,f
  1150  061D  1903               	skipnz
  1151  061E  0AF5               	incf	___aldiv@dividend+1,f
  1152  061F  1903               	skipnz
  1153  0620  0AF6               	incf	___aldiv@dividend+2,f
  1154  0621  1903               	skipnz
  1155  0622  0AF7               	incf	___aldiv@dividend+3,f
  1156  0623  3001               	movlw	1
  1157  0624  00F8               	movwf	??___aldiv
  1158  0625  0878               	movf	??___aldiv,w
  1159  0626  06A1               	xorwf	___aldiv@sign,f
  1160  0627                     l1096:	
  1161  0627  3000               	movlw	0
  1162  0628  00A5               	movwf	___aldiv@quotient+3
  1163  0629  3000               	movlw	0
  1164  062A  00A4               	movwf	___aldiv@quotient+2
  1165  062B  3000               	movlw	0
  1166  062C  00A3               	movwf	___aldiv@quotient+1
  1167  062D  3000               	movlw	0
  1168  062E  00A2               	movwf	___aldiv@quotient
  1169  062F  0873               	movf	___aldiv@divisor+3,w
  1170  0630  0472               	iorwf	___aldiv@divisor+2,w
  1171  0631  0471               	iorwf	___aldiv@divisor+1,w
  1172  0632  0470               	iorwf	___aldiv@divisor,w
  1173  0633  1903               	skipnz
  1174  0634  2E7C               	goto	l1118
  1175  0635  01A0               	clrf	___aldiv@counter
  1176  0636  0AA0               	incf	___aldiv@counter,f
  1177  0637                     l1104:	
  1178  0637  1BF3               	btfsc	___aldiv@divisor+3,7
  1179  0638  2E47               	goto	l1106
  1180  0639  3001               	movlw	1
  1181  063A  00F8               	movwf	??___aldiv
  1182  063B                     u615:	
  1183  063B  1003               	clrc
  1184  063C  0DF0               	rlf	___aldiv@divisor,f
  1185  063D  0DF1               	rlf	___aldiv@divisor+1,f
  1186  063E  0DF2               	rlf	___aldiv@divisor+2,f
  1187  063F  0DF3               	rlf	___aldiv@divisor+3,f
  1188  0640  0BF8               	decfsz	??___aldiv,f
  1189  0641  2E3B               	goto	u615
  1190  0642  3001               	movlw	1
  1191  0643  00F8               	movwf	??___aldiv
  1192  0644  0878               	movf	??___aldiv,w
  1193  0645  07A0               	addwf	___aldiv@counter,f
  1194  0646  2E37               	goto	l1104
  1195  0647                     l1106:	
  1196  0647  3001               	movlw	1
  1197  0648  00F8               	movwf	??___aldiv
  1198  0649                     u635:	
  1199  0649  1003               	clrc
  1200  064A  0DA2               	rlf	___aldiv@quotient,f
  1201  064B  0DA3               	rlf	___aldiv@quotient+1,f
  1202  064C  0DA4               	rlf	___aldiv@quotient+2,f
  1203  064D  0DA5               	rlf	___aldiv@quotient+3,f
  1204  064E  0BF8               	decfsz	??___aldiv,f
  1205  064F  2E49               	goto	u635
  1206  0650  0873               	movf	___aldiv@divisor+3,w
  1207  0651  0277               	subwf	___aldiv@dividend+3,w
  1208  0652  1D03               	skipz
  1209  0653  2E5E               	goto	u645
  1210  0654  0872               	movf	___aldiv@divisor+2,w
  1211  0655  0276               	subwf	___aldiv@dividend+2,w
  1212  0656  1D03               	skipz
  1213  0657  2E5E               	goto	u645
  1214  0658  0871               	movf	___aldiv@divisor+1,w
  1215  0659  0275               	subwf	___aldiv@dividend+1,w
  1216  065A  1D03               	skipz
  1217  065B  2E5E               	goto	u645
  1218  065C  0870               	movf	___aldiv@divisor,w
  1219  065D  0274               	subwf	___aldiv@dividend,w
  1220  065E                     u645:	
  1221  065E  1C03               	skipc
  1222  065F  2E6F               	goto	l1114
  1223  0660  0870               	movf	___aldiv@divisor,w
  1224  0661  02F4               	subwf	___aldiv@dividend,f
  1225  0662  0871               	movf	___aldiv@divisor+1,w
  1226  0663  1C03               	skipc
  1227  0664  0F71               	incfsz	___aldiv@divisor+1,w
  1228  0665  02F5               	subwf	___aldiv@dividend+1,f
  1229  0666  0872               	movf	___aldiv@divisor+2,w
  1230  0667  1C03               	skipc
  1231  0668  0F72               	incfsz	___aldiv@divisor+2,w
  1232  0669  02F6               	subwf	___aldiv@dividend+2,f
  1233  066A  0873               	movf	___aldiv@divisor+3,w
  1234  066B  1C03               	skipc
  1235  066C  0F73               	incfsz	___aldiv@divisor+3,w
  1236  066D  02F7               	subwf	___aldiv@dividend+3,f
  1237  066E  1422               	bsf	___aldiv@quotient,0
  1238  066F                     l1114:	
  1239  066F  3001               	movlw	1
  1240  0670                     u655:	
  1241  0670  1003               	clrc
  1242  0671  0CF3               	rrf	___aldiv@divisor+3,f
  1243  0672  0CF2               	rrf	___aldiv@divisor+2,f
  1244  0673  0CF1               	rrf	___aldiv@divisor+1,f
  1245  0674  0CF0               	rrf	___aldiv@divisor,f
  1246  0675  3EFF               	addlw	-1
  1247  0676  1D03               	skipz
  1248  0677  2E70               	goto	u655
  1249  0678  3001               	movlw	1
  1250  0679  02A0               	subwf	___aldiv@counter,f
  1251  067A  1D03               	btfss	3,2
  1252  067B  2E47               	goto	l1106
  1253  067C                     l1118:	
  1254  067C  0821               	movf	___aldiv@sign,w
  1255  067D  1903               	btfsc	3,2
  1256  067E  2E8A               	goto	l1122
  1257  067F  09A2               	comf	___aldiv@quotient,f
  1258  0680  09A3               	comf	___aldiv@quotient+1,f
  1259  0681  09A4               	comf	___aldiv@quotient+2,f
  1260  0682  09A5               	comf	___aldiv@quotient+3,f
  1261  0683  0AA2               	incf	___aldiv@quotient,f
  1262  0684  1903               	skipnz
  1263  0685  0AA3               	incf	___aldiv@quotient+1,f
  1264  0686  1903               	skipnz
  1265  0687  0AA4               	incf	___aldiv@quotient+2,f
  1266  0688  1903               	skipnz
  1267  0689  0AA5               	incf	___aldiv@quotient+3,f
  1268  068A                     l1122:	
  1269  068A  0825               	movf	___aldiv@quotient+3,w
  1270  068B  00F3               	movwf	?___aldiv+3
  1271  068C  0824               	movf	___aldiv@quotient+2,w
  1272  068D  00F2               	movwf	?___aldiv+2
  1273  068E  0823               	movf	___aldiv@quotient+1,w
  1274  068F  00F1               	movwf	?___aldiv+1
  1275  0690  0822               	movf	___aldiv@quotient,w
  1276  0691  00F0               	movwf	?___aldiv
  1277  0692  0008               	return
  1278  0693                     __end_of___aldiv:	
  1279                           
  1280                           	psect	text5
  1281  0469                     __ptext5:	
  1282 ;; *************** function _Lcd_Write_String *****************
  1283 ;; Defined at:
  1284 ;;		line 104 in file "./lcd.h"
  1285 ;; Parameters:    Size  Location     Type
  1286 ;;  a               1    wreg     PTR unsigned char 
  1287 ;;		 -> STR_1(5), 
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;  a               1    7[COMMON] PTR unsigned char 
  1290 ;;		 -> STR_1(5), 
  1291 ;;  i               2    5[COMMON] int 
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      void 
  1294 ;; Registers used:
  1295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1301 ;;      Params:         0       0       0       0       0
  1302 ;;      Locals:         3       0       0       0       0
  1303 ;;      Temps:          0       0       0       0       0
  1304 ;;      Totals:         3       0       0       0       0
  1305 ;;Total ram usage:        3 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; Hardware stack levels required when called:    2
  1308 ;; This function calls:
  1309 ;;		_Lcd_Write_Char
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           
  1316                           ;psect for function _Lcd_Write_String
  1317  0469                     _Lcd_Write_String:	
  1318                           
  1319                           ;incstack = 0
  1320                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1321                           ;Lcd_Write_String@a stored from wreg
  1322  0469  00F7               	movwf	Lcd_Write_String@a
  1323                           
  1324                           ;./lcd.h: 104: void Lcd_Write_String(char *a);./lcd.h: 105: {;./lcd.h: 106:  int i;;./lc
      +                          d.h: 107:  for(i=0;a[i]!='\0';i++)
  1325  046A  01F5               	clrf	Lcd_Write_String@i
  1326  046B  01F6               	clrf	Lcd_Write_String@i+1
  1327  046C                     l1164:	
  1328  046C  0875               	movf	Lcd_Write_String@i,w
  1329  046D  0777               	addwf	Lcd_Write_String@a,w
  1330  046E  0084               	movwf	4
  1331  046F  120A  118A  2003  120A  118A  	fcall	stringdir
  1332  0474  3A00               	xorlw	0
  1333  0475  1903               	btfsc	3,2
  1334  0476  0008               	return
  1335                           
  1336                           ;./lcd.h: 108:     Lcd_Write_Char(a[i]);
  1337  0477  0875               	movf	Lcd_Write_String@i,w
  1338  0478  0777               	addwf	Lcd_Write_String@a,w
  1339  0479  0084               	movwf	4
  1340  047A  120A  118A  2003  120A  118A  	fcall	stringdir
  1341  047F  120A  118A  24AD  120A  118A  	fcall	_Lcd_Write_Char
  1342  0484  3001               	movlw	1
  1343  0485  07F5               	addwf	Lcd_Write_String@i,f
  1344  0486  1803               	skipnc
  1345  0487  0AF6               	incf	Lcd_Write_String@i+1,f
  1346  0488  3000               	movlw	0
  1347  0489  07F6               	addwf	Lcd_Write_String@i+1,f
  1348  048A  2C6C               	goto	l1164
  1349  048B                     __end_of_Lcd_Write_String:	
  1350                           
  1351                           	psect	text6
  1352  04AD                     __ptext6:	
  1353 ;; *************** function _Lcd_Write_Char *****************
  1354 ;; Defined at:
  1355 ;;		line 88 in file "./lcd.h"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;  a               1    wreg     unsigned char 
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;  a               1    4[COMMON] unsigned char 
  1360 ;;  y               1    3[COMMON] unsigned char 
  1361 ;;  temp            1    2[COMMON] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg, status,2, status,0, pclath, cstack
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1371 ;;      Params:         0       0       0       0       0
  1372 ;;      Locals:         3       0       0       0       0
  1373 ;;      Temps:          1       0       0       0       0
  1374 ;;      Totals:         4       0       0       0       0
  1375 ;;Total ram usage:        4 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    1
  1378 ;; This function calls:
  1379 ;;		_Lcd_Port
  1380 ;; This function is called by:
  1381 ;;		_Lcd_Write_String
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           
  1386                           ;psect for function _Lcd_Write_Char
  1387  04AD                     _Lcd_Write_Char:	
  1388                           
  1389                           ;incstack = 0
  1390                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1391                           ;Lcd_Write_Char@a stored from wreg
  1392  04AD  00F4               	movwf	Lcd_Write_Char@a
  1393                           
  1394                           ;./lcd.h: 88: void Lcd_Write_Char(char a);./lcd.h: 89: {;./lcd.h: 90:    char temp,y;;./
      +                          lcd.h: 91:    temp = a&0x0F;
  1395  04AE  0874               	movf	Lcd_Write_Char@a,w
  1396  04AF  390F               	andlw	15
  1397  04B0  00F1               	movwf	??_Lcd_Write_Char
  1398  04B1  0871               	movf	??_Lcd_Write_Char,w
  1399  04B2  00F2               	movwf	Lcd_Write_Char@temp
  1400                           
  1401                           ;./lcd.h: 92:    y = a&0xF0;
  1402  04B3  0874               	movf	Lcd_Write_Char@a,w
  1403  04B4  39F0               	andlw	240
  1404  04B5  00F1               	movwf	??_Lcd_Write_Char
  1405  04B6  0871               	movf	??_Lcd_Write_Char,w
  1406  04B7  00F3               	movwf	Lcd_Write_Char@y
  1407                           
  1408                           ;./lcd.h: 93:    RB2 = 1;
  1409  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  1410  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  1411  04BA  1506               	bsf	6,2	;volatile
  1412                           
  1413                           ;./lcd.h: 94:    Lcd_Port(y>>4);
  1414  04BB  0873               	movf	Lcd_Write_Char@y,w
  1415  04BC  00F1               	movwf	??_Lcd_Write_Char
  1416  04BD  3004               	movlw	4
  1417  04BE                     u565:	
  1418  04BE  1003               	clrc
  1419  04BF  0CF1               	rrf	??_Lcd_Write_Char,f
  1420  04C0  3EFF               	addlw	-1
  1421  04C1  1D03               	skipz
  1422  04C2  2CBE               	goto	u565
  1423  04C3  0871               	movf	??_Lcd_Write_Char,w
  1424  04C4  120A  118A  2435  120A  118A  	fcall	_Lcd_Port
  1425                           
  1426                           ;./lcd.h: 95:    RB3 = 1;
  1427  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  1428  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  1429  04CB  1586               	bsf	6,3	;volatile
  1430                           
  1431                           ;./lcd.h: 96:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1432  04CC  301A               	movlw	26
  1433  04CD  00F1               	movwf	??_Lcd_Write_Char
  1434  04CE                     u1027:	
  1435  04CE  0BF1               	decfsz	??_Lcd_Write_Char,f
  1436  04CF  2CCE               	goto	u1027
  1437  04D0  0000               	nop
  1438                           
  1439                           ;./lcd.h: 97:    RB3 = 0;
  1440  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1441  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1442  04D3  1186               	bcf	6,3	;volatile
  1443                           
  1444                           ;./lcd.h: 98:    Lcd_Port(temp);
  1445  04D4  0872               	movf	Lcd_Write_Char@temp,w
  1446  04D5  120A  118A  2435  120A  118A  	fcall	_Lcd_Port
  1447                           
  1448                           ;./lcd.h: 99:    RB3 = 1;
  1449  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1450  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1451  04DC  1586               	bsf	6,3	;volatile
  1452                           
  1453                           ;./lcd.h: 100:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1454  04DD  301A               	movlw	26
  1455  04DE  00F1               	movwf	??_Lcd_Write_Char
  1456  04DF                     u1037:	
  1457  04DF  0BF1               	decfsz	??_Lcd_Write_Char,f
  1458  04E0  2CDF               	goto	u1037
  1459  04E1  0000               	nop
  1460                           
  1461                           ;./lcd.h: 101:    RB3 = 0;
  1462  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  1463  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  1464  04E4  1186               	bcf	6,3	;volatile
  1465  04E5  0008               	return
  1466  04E6                     __end_of_Lcd_Write_Char:	
  1467                           
  1468                           	psect	text7
  1469  04E6                     __ptext7:	
  1470 ;; *************** function _Lcd_Set_Cursor *****************
  1471 ;; Defined at:
  1472 ;;		line 48 in file "./lcd.h"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  a               1    wreg     unsigned char 
  1475 ;;  b               1    4[COMMON] unsigned char 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  a               1    7[COMMON] unsigned char 
  1478 ;;  temp            1   10[COMMON] unsigned char 
  1479 ;;  y               1    9[COMMON] unsigned char 
  1480 ;;  z               1    8[COMMON] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0, pclath, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1490 ;;      Params:         1       0       0       0       0
  1491 ;;      Locals:         4       0       0       0       0
  1492 ;;      Temps:          2       0       0       0       0
  1493 ;;      Totals:         7       0       0       0       0
  1494 ;;Total ram usage:        7 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    2
  1497 ;; This function calls:
  1498 ;;		_Lcd_Cmd
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _Lcd_Set_Cursor
  1506  04E6                     _Lcd_Set_Cursor:	
  1507                           
  1508                           ;incstack = 0
  1509                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1510                           ;Lcd_Set_Cursor@a stored from wreg
  1511  04E6  00F7               	movwf	Lcd_Set_Cursor@a
  1512                           
  1513                           ;./lcd.h: 48: void Lcd_Set_Cursor(char a, char b);./lcd.h: 49: {;./lcd.h: 50:  char temp
      +                          ,z,y;;./lcd.h: 51:  if(a == 1)
  1514  04E7  0377               	decf	Lcd_Set_Cursor@a,w
  1515  04E8  1D03               	btfss	3,2
  1516  04E9  2D0B               	goto	l1138
  1517                           
  1518                           ;./lcd.h: 52:  {;./lcd.h: 53:    temp = 0x80 + b - 1;
  1519  04EA  0874               	movf	Lcd_Set_Cursor@b,w
  1520  04EB  3E7F               	addlw	127
  1521  04EC  00F5               	movwf	??_Lcd_Set_Cursor
  1522  04ED  0875               	movf	??_Lcd_Set_Cursor,w
  1523  04EE  00FA               	movwf	Lcd_Set_Cursor@temp
  1524                           
  1525                           ;./lcd.h: 54:   z = temp>>4;
  1526  04EF  087A               	movf	Lcd_Set_Cursor@temp,w
  1527  04F0  00F5               	movwf	??_Lcd_Set_Cursor
  1528  04F1  3004               	movlw	4
  1529  04F2                     u695:	
  1530  04F2  1003               	clrc
  1531  04F3  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1532  04F4  3EFF               	addlw	-1
  1533  04F5  1D03               	skipz
  1534  04F6  2CF2               	goto	u695
  1535  04F7  0875               	movf	??_Lcd_Set_Cursor,w
  1536  04F8  00F6               	movwf	??_Lcd_Set_Cursor+1
  1537  04F9  0876               	movf	??_Lcd_Set_Cursor+1,w
  1538  04FA  00F8               	movwf	Lcd_Set_Cursor@z
  1539                           
  1540                           ;./lcd.h: 55:   y = temp & 0x0F;
  1541  04FB  087A               	movf	Lcd_Set_Cursor@temp,w
  1542  04FC  390F               	andlw	15
  1543  04FD  00F5               	movwf	??_Lcd_Set_Cursor
  1544  04FE  0875               	movf	??_Lcd_Set_Cursor,w
  1545  04FF  00F9               	movwf	Lcd_Set_Cursor@y
  1546                           
  1547                           ;./lcd.h: 56:   Lcd_Cmd(z);
  1548  0500  0878               	movf	Lcd_Set_Cursor@z,w
  1549  0501  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1550                           
  1551                           ;./lcd.h: 57:   Lcd_Cmd(y);
  1552  0506  0879               	movf	Lcd_Set_Cursor@y,w
  1553  0507  120A  118A  244F   	fcall	_Lcd_Cmd
  1554                           
  1555                           ;./lcd.h: 58:  }
  1556  050A  0008               	return
  1557  050B                     l1138:	
  1558  050B  3002               	movlw	2
  1559  050C  0677               	xorwf	Lcd_Set_Cursor@a,w
  1560  050D  1D03               	btfss	3,2
  1561  050E  0008               	return
  1562                           
  1563                           ;./lcd.h: 60:  {;./lcd.h: 61:   temp = 0xC0 + b - 1;
  1564  050F  0874               	movf	Lcd_Set_Cursor@b,w
  1565  0510  3EBF               	addlw	191
  1566  0511  00F5               	movwf	??_Lcd_Set_Cursor
  1567  0512  0875               	movf	??_Lcd_Set_Cursor,w
  1568  0513  00FA               	movwf	Lcd_Set_Cursor@temp
  1569                           
  1570                           ;./lcd.h: 62:   z = temp>>4;
  1571  0514  087A               	movf	Lcd_Set_Cursor@temp,w
  1572  0515  00F5               	movwf	??_Lcd_Set_Cursor
  1573  0516  3004               	movlw	4
  1574  0517                     u715:	
  1575  0517  1003               	clrc
  1576  0518  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1577  0519  3EFF               	addlw	-1
  1578  051A  1D03               	skipz
  1579  051B  2D17               	goto	u715
  1580  051C  0875               	movf	??_Lcd_Set_Cursor,w
  1581  051D  00F6               	movwf	??_Lcd_Set_Cursor+1
  1582  051E  0876               	movf	??_Lcd_Set_Cursor+1,w
  1583  051F  00F8               	movwf	Lcd_Set_Cursor@z
  1584                           
  1585                           ;./lcd.h: 63:   y = temp & 0x0F;
  1586  0520  087A               	movf	Lcd_Set_Cursor@temp,w
  1587  0521  390F               	andlw	15
  1588  0522  00F5               	movwf	??_Lcd_Set_Cursor
  1589  0523  0875               	movf	??_Lcd_Set_Cursor,w
  1590  0524  00F9               	movwf	Lcd_Set_Cursor@y
  1591                           
  1592                           ;./lcd.h: 64:   Lcd_Cmd(z);
  1593  0525  0878               	movf	Lcd_Set_Cursor@z,w
  1594  0526  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1595                           
  1596                           ;./lcd.h: 65:   Lcd_Cmd(y);
  1597  052B  0879               	movf	Lcd_Set_Cursor@y,w
  1598  052C  120A  118A  244F   	fcall	_Lcd_Cmd
  1599  052F  0008               	return
  1600  0530                     __end_of_Lcd_Set_Cursor:	
  1601                           
  1602                           	psect	text8
  1603  0530                     __ptext8:	
  1604 ;; *************** function _Lcd_Init *****************
  1605 ;; Defined at:
  1606 ;;		line 69 in file "./lcd.h"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;		None
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0, pclath, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1620 ;;      Params:         0       0       0       0       0
  1621 ;;      Locals:         0       0       0       0       0
  1622 ;;      Temps:          2       0       0       0       0
  1623 ;;      Totals:         2       0       0       0       0
  1624 ;;Total ram usage:        2 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    2
  1627 ;; This function calls:
  1628 ;;		_Lcd_Cmd
  1629 ;;		_Lcd_Port
  1630 ;; This function is called by:
  1631 ;;		_main
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           
  1636                           ;psect for function _Lcd_Init
  1637  0530                     _Lcd_Init:	
  1638                           
  1639                           ;./lcd.h: 71:   Lcd_Port(0x00);
  1640                           
  1641                           ;incstack = 0
  1642                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1643  0530  3000               	movlw	0
  1644  0531  120A  118A  2435  120A  118A  	fcall	_Lcd_Port
  1645                           
  1646                           ;./lcd.h: 72:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1647  0536  3034               	movlw	52
  1648  0537  00F5               	movwf	??_Lcd_Init+1
  1649  0538  30F1               	movlw	241
  1650  0539  00F4               	movwf	??_Lcd_Init
  1651  053A                     u1047:	
  1652  053A  0BF4               	decfsz	??_Lcd_Init,f
  1653  053B  2D3A               	goto	u1047
  1654  053C  0BF5               	decfsz	??_Lcd_Init+1,f
  1655  053D  2D3A               	goto	u1047
  1656  053E  2D3F               	nop2
  1657                           
  1658                           ;./lcd.h: 73:   Lcd_Cmd(0x03);
  1659  053F  3003               	movlw	3
  1660  0540  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1661                           
  1662                           ;./lcd.h: 74:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1663  0545  300D               	movlw	13
  1664  0546  00F5               	movwf	??_Lcd_Init+1
  1665  0547  30FB               	movlw	251
  1666  0548  00F4               	movwf	??_Lcd_Init
  1667  0549                     u1057:	
  1668  0549  0BF4               	decfsz	??_Lcd_Init,f
  1669  054A  2D49               	goto	u1057
  1670  054B  0BF5               	decfsz	??_Lcd_Init+1,f
  1671  054C  2D49               	goto	u1057
  1672  054D  2D4E               	nop2
  1673                           
  1674                           ;./lcd.h: 75:   Lcd_Cmd(0x03);
  1675  054E  3003               	movlw	3
  1676  054F  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1677                           
  1678                           ;./lcd.h: 76:  _delay((unsigned long)((11)*(8000000/4000.0)));
  1679  0554  301D               	movlw	29
  1680  0555  00F5               	movwf	??_Lcd_Init+1
  1681  0556  3091               	movlw	145
  1682  0557  00F4               	movwf	??_Lcd_Init
  1683  0558                     u1067:	
  1684  0558  0BF4               	decfsz	??_Lcd_Init,f
  1685  0559  2D58               	goto	u1067
  1686  055A  0BF5               	decfsz	??_Lcd_Init+1,f
  1687  055B  2D58               	goto	u1067
  1688                           
  1689                           ;./lcd.h: 77:   Lcd_Cmd(0x03);
  1690  055C  3003               	movlw	3
  1691  055D  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1692                           
  1693                           ;./lcd.h: 79:   Lcd_Cmd(0x02);
  1694  0562  3002               	movlw	2
  1695  0563  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1696                           
  1697                           ;./lcd.h: 80:   Lcd_Cmd(0x02);
  1698  0568  3002               	movlw	2
  1699  0569  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1700                           
  1701                           ;./lcd.h: 81:   Lcd_Cmd(0x08);
  1702  056E  3008               	movlw	8
  1703  056F  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1704                           
  1705                           ;./lcd.h: 82:   Lcd_Cmd(0x00);
  1706  0574  3000               	movlw	0
  1707  0575  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1708                           
  1709                           ;./lcd.h: 83:   Lcd_Cmd(0x0C);
  1710  057A  300C               	movlw	12
  1711  057B  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1712                           
  1713                           ;./lcd.h: 84:   Lcd_Cmd(0x00);
  1714  0580  3000               	movlw	0
  1715  0581  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1716                           
  1717                           ;./lcd.h: 85:   Lcd_Cmd(0x06);
  1718  0586  3006               	movlw	6
  1719  0587  120A  118A  244F   	fcall	_Lcd_Cmd
  1720  058A  0008               	return
  1721  058B                     __end_of_Lcd_Init:	
  1722                           
  1723                           	psect	text9
  1724  042A                     __ptext9:	
  1725 ;; *************** function _Lcd_Clear *****************
  1726 ;; Defined at:
  1727 ;;		line 42 in file "./lcd.h"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, status,2, status,0, pclath, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1741 ;;      Params:         0       0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0
  1744 ;;      Totals:         0       0       0       0       0
  1745 ;;Total ram usage:        0 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    2
  1748 ;; This function calls:
  1749 ;;		_Lcd_Cmd
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           
  1756                           ;psect for function _Lcd_Clear
  1757  042A                     _Lcd_Clear:	
  1758                           
  1759                           ;./lcd.h: 44:  Lcd_Cmd(0);
  1760                           
  1761                           ;incstack = 0
  1762                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1763  042A  3000               	movlw	0
  1764  042B  120A  118A  244F  120A  118A  	fcall	_Lcd_Cmd
  1765                           
  1766                           ;./lcd.h: 45:  Lcd_Cmd(1);
  1767  0430  3001               	movlw	1
  1768  0431  120A  118A  244F   	fcall	_Lcd_Cmd
  1769  0434  0008               	return
  1770  0435                     __end_of_Lcd_Clear:	
  1771                           
  1772                           	psect	text10
  1773  044F                     __ptext10:	
  1774 ;; *************** function _Lcd_Cmd *****************
  1775 ;; Defined at:
  1776 ;;		line 33 in file "./lcd.h"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  a               1    wreg     unsigned char 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  a               1    3[COMMON] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0, pclath, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1790 ;;      Params:         0       0       0       0       0
  1791 ;;      Locals:         1       0       0       0       0
  1792 ;;      Temps:          2       0       0       0       0
  1793 ;;      Totals:         3       0       0       0       0
  1794 ;;Total ram usage:        3 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    1
  1797 ;; This function calls:
  1798 ;;		_Lcd_Port
  1799 ;; This function is called by:
  1800 ;;		_Lcd_Clear
  1801 ;;		_Lcd_Set_Cursor
  1802 ;;		_Lcd_Init
  1803 ;;		_Lcd_Shift_Right
  1804 ;;		_Lcd_Shift_Left
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function _Lcd_Cmd
  1810  044F                     _Lcd_Cmd:	
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1814                           ;Lcd_Cmd@a stored from wreg
  1815  044F  00F3               	movwf	Lcd_Cmd@a
  1816                           
  1817                           ;./lcd.h: 33: void Lcd_Cmd(char a);./lcd.h: 34: {;./lcd.h: 35:  RB2 = 0;
  1818  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1819  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1820  0452  1106               	bcf	6,2	;volatile
  1821                           
  1822                           ;./lcd.h: 36:  Lcd_Port(a);
  1823  0453  0873               	movf	Lcd_Cmd@a,w
  1824  0454  120A  118A  2435  120A  118A  	fcall	_Lcd_Port
  1825                           
  1826                           ;./lcd.h: 37:  RB3 = 1;
  1827  0459  1283               	bcf	3,5	;RP0=0, select bank0
  1828  045A  1303               	bcf	3,6	;RP1=0, select bank0
  1829  045B  1586               	bsf	6,3	;volatile
  1830                           
  1831                           ;./lcd.h: 38:         _delay((unsigned long)((4)*(8000000/4000.0)));
  1832  045C  300B               	movlw	11
  1833  045D  00F2               	movwf	??_Lcd_Cmd+1
  1834  045E  3062               	movlw	98
  1835  045F  00F1               	movwf	??_Lcd_Cmd
  1836  0460                     u1077:	
  1837  0460  0BF1               	decfsz	??_Lcd_Cmd,f
  1838  0461  2C60               	goto	u1077
  1839  0462  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1840  0463  2C60               	goto	u1077
  1841  0464  0000               	nop
  1842                           
  1843                           ;./lcd.h: 39:         RB3 = 0;
  1844  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1845  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1846  0467  1186               	bcf	6,3	;volatile
  1847  0468  0008               	return
  1848  0469                     __end_of_Lcd_Cmd:	
  1849                           
  1850                           	psect	text11
  1851  0435                     __ptext11:	
  1852 ;; *************** function _Lcd_Port *****************
  1853 ;; Defined at:
  1854 ;;		line 11 in file "./lcd.h"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;  a               1    wreg     unsigned char 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  a               1    0[COMMON] unsigned char 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1868 ;;      Params:         0       0       0       0       0
  1869 ;;      Locals:         1       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0
  1871 ;;      Totals:         1       0       0       0       0
  1872 ;;Total ram usage:        1 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; This function calls:
  1875 ;;		Nothing
  1876 ;; This function is called by:
  1877 ;;		_Lcd_Cmd
  1878 ;;		_Lcd_Init
  1879 ;;		_Lcd_Write_Char
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _Lcd_Port
  1885  0435                     _Lcd_Port:	
  1886                           
  1887                           ;incstack = 0
  1888                           ; Regs used in _Lcd_Port: [wreg]
  1889                           ;Lcd_Port@a stored from wreg
  1890  0435  00F0               	movwf	Lcd_Port@a
  1891                           
  1892                           ;./lcd.h: 11: void Lcd_Port(char a);./lcd.h: 12: {;./lcd.h: 13:  if(a & 1)
  1893  0436  1C70               	btfss	Lcd_Port@a,0
  1894  0437  2C3C               	goto	l69
  1895                           
  1896                           ;./lcd.h: 14:   RB4 = 1;
  1897  0438  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0439  1303               	bcf	3,6	;RP1=0, select bank0
  1899  043A  1606               	bsf	6,4	;volatile
  1900  043B  2C3F               	goto	l70
  1901  043C                     l69:	
  1902                           ;./lcd.h: 15:  else
  1903                           
  1904                           
  1905                           ;./lcd.h: 16:   RB4 = 0;
  1906  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1907  043D  1303               	bcf	3,6	;RP1=0, select bank0
  1908  043E  1206               	bcf	6,4	;volatile
  1909  043F                     l70:	
  1910                           
  1911                           ;./lcd.h: 18:  if(a & 2)
  1912  043F  1CF0               	btfss	Lcd_Port@a,1
  1913  0440  2C43               	goto	l71
  1914                           
  1915                           ;./lcd.h: 19:   RB5 = 1;
  1916  0441  1686               	bsf	6,5	;volatile
  1917  0442  2C44               	goto	l72
  1918  0443                     l71:	
  1919                           ;./lcd.h: 20:  else
  1920                           
  1921                           
  1922                           ;./lcd.h: 21:   RB5 = 0;
  1923  0443  1286               	bcf	6,5	;volatile
  1924  0444                     l72:	
  1925                           
  1926                           ;./lcd.h: 23:  if(a & 4)
  1927  0444  1D70               	btfss	Lcd_Port@a,2
  1928  0445  2C48               	goto	l73
  1929                           
  1930                           ;./lcd.h: 24:   RB6 = 1;
  1931  0446  1706               	bsf	6,6	;volatile
  1932  0447  2C49               	goto	l74
  1933  0448                     l73:	
  1934                           ;./lcd.h: 25:  else
  1935                           
  1936                           
  1937                           ;./lcd.h: 26:   RB6 = 0;
  1938  0448  1306               	bcf	6,6	;volatile
  1939  0449                     l74:	
  1940                           
  1941                           ;./lcd.h: 28:  if(a & 8)
  1942  0449  1DF0               	btfss	Lcd_Port@a,3
  1943  044A  2C4D               	goto	l75
  1944                           
  1945                           ;./lcd.h: 29:   RB7 = 1;
  1946  044B  1786               	bsf	6,7	;volatile
  1947  044C  0008               	return
  1948  044D                     l75:	
  1949                           ;./lcd.h: 30:  else
  1950                           
  1951                           
  1952                           ;./lcd.h: 31:   RB7 = 0;
  1953  044D  1386               	bcf	6,7	;volatile
  1954  044E  0008               	return
  1955  044F                     __end_of_Lcd_Port:	
  1956                           
  1957                           	psect	text12
  1958  0418                     __ptext12:	
  1959 ;; *************** function _KeyPadInit *****************
  1960 ;; Defined at:
  1961 ;;		line 27 in file "./KeyPad.h"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1975 ;;      Params:         0       0       0       0       0
  1976 ;;      Locals:         0       0       0       0       0
  1977 ;;      Temps:          0       0       0       0       0
  1978 ;;      Totals:         0       0       0       0       0
  1979 ;;Total ram usage:        0 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; This function calls:
  1982 ;;		Nothing
  1983 ;; This function is called by:
  1984 ;;		_main
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           
  1989                           ;psect for function _KeyPadInit
  1990  0418                     _KeyPadInit:	
  1991                           
  1992                           ;./KeyPad.h: 28:     TRISA = 0xf0;
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _KeyPadInit: [wreg+status,2]
  1996  0418  30F0               	movlw	240
  1997  0419  1683               	bsf	3,5	;RP0=1, select bank1
  1998  041A  1303               	bcf	3,6	;RP1=0, select bank1
  1999  041B  0085               	movwf	5	;volatile
  2000                           
  2001                           ;./KeyPad.h: 29:     PORTA = 0x00;
  2002  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2003  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2004  041E  0185               	clrf	5	;volatile
  2005  041F  0008               	return
  2006  0420                     __end_of_KeyPadInit:	
  2007                           
  2008                           	psect	text13
  2009  0693                     __ptext13:	
  2010 ;; *************** function _KeyPadGetKey *****************
  2011 ;; Defined at:
  2012 ;;		line 32 in file "./KeyPad.h"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;  row             1    5[COMMON] unsigned char 
  2017 ;;  key             1    4[COMMON] unsigned char 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  2    0[COMMON] int 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2027 ;;      Params:         2       0       0       0       0
  2028 ;;      Locals:         2       0       0       0       0
  2029 ;;      Temps:          2       0       0       0       0
  2030 ;;      Totals:         6       0       0       0       0
  2031 ;;Total ram usage:        6 bytes
  2032 ;; Hardware stack levels used:    2
  2033 ;; This function calls:
  2034 ;;		Nothing
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _KeyPadGetKey
  2042  0693                     _KeyPadGetKey:	
  2043                           
  2044                           ;./KeyPad.h: 34:     char key = 0, row;
  2045                           
  2046                           ;incstack = 0
  2047                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  2048  0693  01F4               	clrf	KeyPadGetKey@key
  2049                           
  2050                           ;./KeyPad.h: 36:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  2051  0694  01F5               	clrf	KeyPadGetKey@row
  2052  0695  0AF5               	incf	KeyPadGetKey@row,f
  2053  0696                     l160:	
  2054                           
  2055                           ;./KeyPad.h: 37:         {;./KeyPad.h: 38:             RA0 = (row & 0x0001) >> 0;
  2056  0696  1C75               	btfss	KeyPadGetKey@row,0
  2057  0697  2E9C               	goto	u820
  2058  0698  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0699  1303               	bcf	3,6	;RP1=0, select bank0
  2060  069A  1405               	bsf	5,0	;volatile
  2061  069B  2E9F               	goto	l1212
  2062  069C                     u820:	
  2063  069C  1283               	bcf	3,5	;RP0=0, select bank0
  2064  069D  1303               	bcf	3,6	;RP1=0, select bank0
  2065  069E  1005               	bcf	5,0	;volatile
  2066  069F                     l1212:	
  2067                           
  2068                           ;./KeyPad.h: 39:             RA1 = (row & 0x0002) >> 1;
  2069  069F  0875               	movf	KeyPadGetKey@row,w
  2070  06A0  00F2               	movwf	??_KeyPadGetKey
  2071  06A1  3001               	movlw	1
  2072  06A2                     u845:	
  2073  06A2  1003               	clrc
  2074  06A3  0CF2               	rrf	??_KeyPadGetKey,f
  2075  06A4  3EFF               	addlw	-1
  2076  06A5  1D03               	skipz
  2077  06A6  2EA2               	goto	u845
  2078  06A7  1C72               	btfss	??_KeyPadGetKey,0
  2079  06A8  2EAD               	goto	u850
  2080  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  2081  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  2082  06AB  1485               	bsf	5,1	;volatile
  2083  06AC  2EB0               	goto	u864
  2084  06AD                     u850:	
  2085  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  2086  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  2087  06AF  1085               	bcf	5,1	;volatile
  2088  06B0                     u864:	
  2089                           
  2090                           ;./KeyPad.h: 40:             RA2 = (row & 0x0004) >> 2;
  2091  06B0  0875               	movf	KeyPadGetKey@row,w
  2092  06B1  00F2               	movwf	??_KeyPadGetKey
  2093  06B2  3002               	movlw	2
  2094  06B3                     u875:	
  2095  06B3  1003               	clrc
  2096  06B4  0CF2               	rrf	??_KeyPadGetKey,f
  2097  06B5  3EFF               	addlw	-1
  2098  06B6  1D03               	skipz
  2099  06B7  2EB3               	goto	u875
  2100  06B8  1C72               	btfss	??_KeyPadGetKey,0
  2101  06B9  2EBE               	goto	u880
  2102  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  2103  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  2104  06BC  1505               	bsf	5,2	;volatile
  2105  06BD  2EC1               	goto	u894
  2106  06BE                     u880:	
  2107  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  2108  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  2109  06C0  1105               	bcf	5,2	;volatile
  2110  06C1                     u894:	
  2111                           
  2112                           ;./KeyPad.h: 41:             RA3 = (row & 0x0008) >> 3;
  2113  06C1  0875               	movf	KeyPadGetKey@row,w
  2114  06C2  00F2               	movwf	??_KeyPadGetKey
  2115  06C3  3003               	movlw	3
  2116  06C4                     u905:	
  2117  06C4  1003               	clrc
  2118  06C5  0CF2               	rrf	??_KeyPadGetKey,f
  2119  06C6  3EFF               	addlw	-1
  2120  06C7  1D03               	skipz
  2121  06C8  2EC4               	goto	u905
  2122  06C9  1C72               	btfss	??_KeyPadGetKey,0
  2123  06CA  2ECF               	goto	u910
  2124  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  2125  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  2126  06CD  1585               	bsf	5,3	;volatile
  2127  06CE  2ED2               	goto	l1214
  2128  06CF                     u910:	
  2129  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  2130  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  2131  06D1  1185               	bcf	5,3	;volatile
  2132  06D2                     l1214:	
  2133                           
  2134                           ;./KeyPad.h: 42:             _delay((unsigned long)((1)*(8000000/4000.0)));
  2135  06D2  3003               	movlw	3
  2136  06D3  00F3               	movwf	??_KeyPadGetKey+1
  2137  06D4  3097               	movlw	151
  2138  06D5  00F2               	movwf	??_KeyPadGetKey
  2139  06D6                     u1087:	
  2140  06D6  0BF2               	decfsz	??_KeyPadGetKey,f
  2141  06D7  2ED6               	goto	u1087
  2142  06D8  0BF3               	decfsz	??_KeyPadGetKey+1,f
  2143  06D9  2ED6               	goto	u1087
  2144  06DA  2EDB               	nop2
  2145                           
  2146                           ;./KeyPad.h: 43:         };./KeyPad.h: 45:         if (RA4)break;
  2147  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  2148  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  2149  06DD  1A05               	btfsc	5,4	;volatile
  2150  06DE  2EFB               	goto	l161
  2151                           
  2152                           ;./KeyPad.h: 46:         key++;
  2153  06DF  3001               	movlw	1
  2154  06E0  00F2               	movwf	??_KeyPadGetKey
  2155  06E1  0872               	movf	??_KeyPadGetKey,w
  2156  06E2  07F4               	addwf	KeyPadGetKey@key,f
  2157                           
  2158                           ;./KeyPad.h: 47:         if (RA5)break;
  2159  06E3  1A85               	btfsc	5,5	;volatile
  2160  06E4  2EFB               	goto	l161
  2161                           
  2162                           ;./KeyPad.h: 48:         key++;
  2163  06E5  3001               	movlw	1
  2164  06E6  00F2               	movwf	??_KeyPadGetKey
  2165  06E7  0872               	movf	??_KeyPadGetKey,w
  2166  06E8  07F4               	addwf	KeyPadGetKey@key,f
  2167                           
  2168                           ;./KeyPad.h: 49:         if (RA6)break;
  2169  06E9  1B05               	btfsc	5,6	;volatile
  2170  06EA  2EFB               	goto	l161
  2171                           
  2172                           ;./KeyPad.h: 50:         key++;
  2173  06EB  3001               	movlw	1
  2174  06EC  00F2               	movwf	??_KeyPadGetKey
  2175  06ED  0872               	movf	??_KeyPadGetKey,w
  2176  06EE  07F4               	addwf	KeyPadGetKey@key,f
  2177                           
  2178                           ;./KeyPad.h: 51:         if (RA7)break;
  2179  06EF  1B85               	btfsc	5,7	;volatile
  2180  06F0  2EFB               	goto	l161
  2181                           
  2182                           ;./KeyPad.h: 52:         key++;
  2183  06F1  3001               	movlw	1
  2184  06F2  00F2               	movwf	??_KeyPadGetKey
  2185  06F3  0872               	movf	??_KeyPadGetKey,w
  2186  06F4  07F4               	addwf	KeyPadGetKey@key,f
  2187                           
  2188                           ;./KeyPad.h: 53:     }
  2189  06F5  1003               	clrc
  2190  06F6  0DF5               	rlf	KeyPadGetKey@row,f
  2191  06F7  3010               	movlw	16
  2192  06F8  0275               	subwf	KeyPadGetKey@row,w
  2193  06F9  1C03               	skipc
  2194  06FA  2E96               	goto	l160
  2195  06FB                     l161:	
  2196                           
  2197                           ;./KeyPad.h: 54:     RA0 = 0;
  2198  06FB  1005               	bcf	5,0	;volatile
  2199                           
  2200                           ;./KeyPad.h: 55:     RA1 = 0;
  2201  06FC  1085               	bcf	5,1	;volatile
  2202                           
  2203                           ;./KeyPad.h: 56:     RA2 = 0;
  2204  06FD  1105               	bcf	5,2	;volatile
  2205                           
  2206                           ;./KeyPad.h: 57:     RA3 = 0;
  2207  06FE  1185               	bcf	5,3	;volatile
  2208                           
  2209                           ;./KeyPad.h: 58:     if (key != old_key) {
  2210  06FF  0874               	movf	KeyPadGetKey@key,w
  2211  0700  067C               	xorwf	_old_key,w
  2212  0701  1903               	skipnz
  2213  0702  2F17               	goto	l1254
  2214                           
  2215                           ;./KeyPad.h: 59:         old_key = key;
  2216  0703  0874               	movf	KeyPadGetKey@key,w
  2217  0704  00F2               	movwf	??_KeyPadGetKey
  2218  0705  0872               	movf	??_KeyPadGetKey,w
  2219  0706  00FC               	movwf	_old_key
  2220                           
  2221                           ;./KeyPad.h: 60:         return keyPadMatrix[ key ];
  2222  0707  0874               	movf	KeyPadGetKey@key,w
  2223  0708  00F2               	movwf	??_KeyPadGetKey
  2224  0709  0772               	addwf	??_KeyPadGetKey,w
  2225  070A  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  2226  070B  0084               	movwf	4
  2227  070C  120A  118A  2003  120A  118A  	fcall	stringdir
  2228  0711  00F0               	movwf	?_KeyPadGetKey
  2229  0712  120A  118A  2003   	fcall	stringdir
  2230  0715  00F1               	movwf	?_KeyPadGetKey+1
  2231  0716  0008               	return
  2232  0717                     l1254:	
  2233                           
  2234                           ;./KeyPad.h: 62:         return keyPadMatrix[ 0x10 ];
  2235  0717  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  2236  0718  0084               	movwf	4
  2237  0719  120A  118A  2003  120A  118A  	fcall	stringdir
  2238  071E  00F0               	movwf	?_KeyPadGetKey
  2239  071F  120A  118A  2003   	fcall	stringdir
  2240  0722  00F1               	movwf	?_KeyPadGetKey+1
  2241  0723  0008               	return
  2242  0724                     __end_of_KeyPadGetKey:	
  2243  007E                     btemp	set	126	;btemp
  2244  007E                     wtemp0	set	126


Data Sizes:
    Strings     5
    Constant    34
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     26      26
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_UART_Init
    _UART_Write_Text->_UART_Write
    _UART_Init->___aldiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    2319
                                             11 COMMON     1     1      0
                                             22 BANK0      4     4      0
                       _KeyPadGetKey
                         _KeyPadInit
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _UART_Init
                         _UART_Write
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      3     3      0     145
                                              1 COMMON     3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     301
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     456
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KeyPadInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _KeyPadGetKey                                         6     4      2     205
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeyPadGetKey
   _KeyPadInit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_Init
     ___aldiv
   _UART_Write
   _UART_Write_Text
     _UART_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      28       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1A      1A       5       32.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      28      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 29 16:38:12 2019

                        pc 0002                __CFG_CP$OFF 0000                         l70 043F  
                       l71 0443                         l72 0444                         l73 0448  
                       l74 0449                         l75 044D                         l69 043C  
                       fsr 0004                        l133 0421                        l160 0696  
                      l161 06FB                        l329 0616                        _RA0 0028  
                      _RA1 0029                        _RA2 002A                        _RA3 002B  
                      _RB2 0032                        _RA4 002C                        _RB3 0033  
                      _RA5 002D                        _RB4 0034                        _RA6 002E  
                      _RB5 0035                        _RA7 002F                        _RB6 0036  
                      _RB7 0037               __CFG_CPD$OFF 0000                        u615 063B  
                      u715 0517                        u635 0649                        u820 069C  
                      u565 04BE                        u645 065E                        u910 06CF  
                      u655 0670                        u751 075F                        u735 072F  
                      u752 0760                        u905 06C4                        u753 0765  
                      u745 0748                        u850 06AD                        u754 0766  
                      u755 076B                        u756 076C                        u845 06A2  
                      u695 04F2                        u791 07BF                        u775 078F  
                      u880 06BE                        u864 06B0                        u792 07C0  
                      u793 07C5                        u785 07A8                        u794 07C6  
                      u875 06B3                        u795 07CB                        u796 07CC  
                      u894 06C1                        _key 007D                        fsr0 0004  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000             ??_KeyPadGetKey 0072  
                     l1104 0637                       l1122 068A                       l1114 066F  
                     l1106 0647                       l1212 069F                       l1214 06D2  
                     l1118 067C                       l1138 050B                       l1164 046C  
                     l1254 0717                       l1174 07E0                       l1096 0627  
                     l1282 05AE                       l1292 05F2                       l1198 048E  
                     l1294 05F8                       STR_1 002B                       STR_2 002B  
                     _BRGH 04C2                       _CREN 00C4                       u1005 05D0  
                     u1017 05FE                       u1027 04CE                       u1037 04DF  
                     u1047 053A                       u1057 0549                       u1067 0558  
                     u1077 0460                       u1087 06D6                       _RCIF 0065  
                     _SPEN 00C7                       _TRMT 04C1                       _TXEN 04C5  
                     _SYNC 04C4               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _main 058B                       btemp 007E              __CFG_BOREN$ON 0000  
                     start 0000         ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 0469  
  __end_of_UART_Write_Text 04AD            __end_of___aldiv 0693                      ?_main 0070  
            __CFG_WDTE$OFF 0000                      _ANSEL 0188                      _RCREG 001A  
                    _SPBRG 0099                      _PORTA 0005    __size_of_Lcd_Set_Cursor 004A  
                    _TRISA 0085                      _TRISB 0086                      _TXREG 0019  
             main@keypress 007B                      _nRBPU 040F                ?_UART_Write 0070  
       __size_of_UART_Init 00D6                 _KeyPadInit 0418                      pclath 000A  
                    status 0003                      wtemp0 007E           __end_of_Lcd_Init 058B  
         __end_of_Lcd_Port 044F            __initialization 07FA               __end_of_main 0604  
                   ??_main 0036         __size_of_Lcd_Clear 000B                     _ANSELH 0189  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039                     _TRISC6 043E  
                   _TRISC7 043F             __CFG_PWRTE$OFF 0000          __end_of_UART_Init 07FA  
      __size_of_UART_Write 000A                  ??___aldiv 0078           ?_UART_Write_Text 0070  
     __end_of_KeyPadGetKey 0724            KeyPadGetKey@key 0074            KeyPadGetKey@row 0075  
          Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074            Lcd_Set_Cursor@y 0079  
          Lcd_Set_Cursor@z 0078                ?_KeyPadInit 0070    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 0435             __pcstackCOMMON 0070             _Lcd_Set_Cursor 04E6  
     __end_of_keyPadMatrix 002B                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
               __pmaintext 058B  __size_of_Lcd_Write_String 0022     __end_of_Lcd_Set_Cursor 0530  
      __size_of_KeyPadInit 0008               ??_UART_Write 0070                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0003             _Lcd_Write_Char 04AD  
                  _Lcd_Cmd 044F      __size_of_KeyPadGetKey 0091                    ___aldiv 0604  
       __end_of_UART_Write 042A            ?_Lcd_Set_Cursor 0074                    __ptext1 048B  
                  __ptext2 0420                    __ptext3 0724                    __ptext4 0604  
                  __ptext5 0469                    __ptext6 04AD                    __ptext7 04E6  
                  __ptext8 0530                    __ptext9 042A                    _old_key 007C  
         ___aldiv@dividend 0074     __end_of_Lcd_Write_Char 04E6       end_of_initialization 07FC  
             _KeyPadGetKey 0693           ___aldiv@quotient 0022                  Lcd_Port@a 0070  
                _UART_Init 0724             UART_Write@data 0070            ?_Lcd_Write_Char 0070  
             ??_KeyPadInit 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
             _keyPadMatrix 0009                  _Lcd_Clear 042A           _Lcd_Write_String 0469  
               ?_UART_Init 0026         __end_of_KeyPadInit 0420   __size_of_UART_Write_Text 0022  
      start_initialization 07FA          __size_of_Lcd_Init 005B          __size_of_Lcd_Port 001A  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
              __pbssCOMMON 007C                  ___latbits 0002              __pcstackBANK0 0020  
                 ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075                   ?___aldiv 0070  
              ??_UART_Init 002A                  __pstrings 0003                 UART_Init@x 0079  
        ??_UART_Write_Text 0071            ___aldiv@divisor 0070            ___aldiv@counter 0020  
                 Lcd_Cmd@a 0073                ??_Lcd_Clear 0074          UART_Init@baudrate 0026  
              __stringbase 0008           ??_Lcd_Write_Char 0071                   _Lcd_Init 0530  
                 _Lcd_Port 0435   __end_of_Lcd_Write_String 048B           __size_of_Lcd_Cmd 001A  
         __size_of___aldiv 008F         __end_of__stringtab 0009                   __ptext10 044F  
                 __ptext11 0435                   __ptext12 0418                   __ptext13 0693  
      UART_Write_Text@text 0073              __size_of_main 0079         Lcd_Write_Char@temp 0072  
                stringcode 0003         Lcd_Set_Cursor@temp 007A            _UART_Write_Text 048B  
                 stringdir 0003                   stringtab 0003               ___aldiv@sign 0021  
               _UART_Write 0420              ?_KeyPadGetKey 0070           UART_Write_Text@i 0071  
