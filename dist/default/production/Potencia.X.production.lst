

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 30 12:19:17 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.05
    35                           ; Generated 20/12/2018 GMT
    36                           ; 
    37                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F886 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220                           
   221                           	psect	idataBANK0
   222  0169                     __pidataBANK0:	
   223                           
   224                           ;initializer for _key2
   225  0169  3430               	retlw	48
   226  016A  3400               	retlw	0
   227                           
   228                           ;initializer for _keypress
   229  016B  3430               	retlw	48
   230                           
   231                           	psect	strings
   232  0003                     __pstrings:	
   233  0003                     stringtab:	
   234  0003                     __stringtab:	
   235                           
   236                           ;	String table - string pointers are 1 byte each
   237  0003  1BFF               	btfsc	btemp+1,7
   238  0004  280D               	ljmp	stringcode
   239  0005  1383               	bcf	3,7
   240  0006  187F               	btfsc	btemp+1,0
   241  0007  1783               	bsf	3,7
   242  0008  0800               	movf	0,w
   243  0009  0A84               	incf	4,f
   244  000A  1903               	skipnz
   245  000B  0AFF               	incf	btemp+1,f
   246  000C  0008               	return
   247  000D                     stringcode:	
   248  000D                     stringdir:	
   249  000D  3000               	movlw	high stringdir
   250  000E  008A               	movwf	10
   251  000F  0804               	movf	4,w
   252  0010  0A84               	incf	4,f
   253  0011  0782               	addwf	2,f
   254  0012                     __stringbase:	
   255  0012  3400               	retlw	0
   256  0013                     __end_of__stringtab:	
   257  0013                     _keyPadMatrix:	
   258  0013  3441               	retlw	65
   259  0014  3400               	retlw	0
   260  0015  3431               	retlw	49
   261  0016  3400               	retlw	0
   262  0017  3432               	retlw	50
   263  0018  3400               	retlw	0
   264  0019  3433               	retlw	51
   265  001A  3400               	retlw	0
   266  001B  3442               	retlw	66
   267  001C  3400               	retlw	0
   268  001D  3434               	retlw	52
   269  001E  3400               	retlw	0
   270  001F  3435               	retlw	53
   271  0020  3400               	retlw	0
   272  0021  3436               	retlw	54
   273  0022  3400               	retlw	0
   274  0023  3443               	retlw	67
   275  0024  3400               	retlw	0
   276  0025  3437               	retlw	55
   277  0026  3400               	retlw	0
   278  0027  3438               	retlw	56
   279  0028  3400               	retlw	0
   280  0029  3439               	retlw	57
   281  002A  3400               	retlw	0
   282  002B  3444               	retlw	68
   283  002C  3400               	retlw	0
   284  002D  342A               	retlw	42
   285  002E  3400               	retlw	0
   286  002F  3430               	retlw	48
   287  0030  3400               	retlw	0
   288  0031  3423               	retlw	35
   289  0032  3400               	retlw	0
   290  0033  34FF               	retlw	255
   291  0034  3400               	retlw	0
   292  0035                     __end_of_keyPadMatrix:	
   293  0035                     _dpowers:	
   294  0035  3401               	retlw	1
   295  0036  3400               	retlw	0
   296  0037  340A               	retlw	10
   297  0038  3400               	retlw	0
   298  0039  3464               	retlw	100
   299  003A  3400               	retlw	0
   300  003B  34E8               	retlw	232
   301  003C  3403               	retlw	3
   302  003D  3410               	retlw	16
   303  003E  3427               	retlw	39
   304  003F                     __end_of_dpowers:	
   305  0005                     _PORTA	set	5
   306  0039                     _RC1	set	57
   307  0038                     _RC0	set	56
   308  0030                     _RB0	set	48
   309  002F                     _RA7	set	47
   310  002E                     _RA6	set	46
   311  002D                     _RA5	set	45
   312  002C                     _RA4	set	44
   313  002B                     _RA3	set	43
   314  002A                     _RA2	set	42
   315  0029                     _RA1	set	41
   316  0028                     _RA0	set	40
   317  0033                     _RB3	set	51
   318  0032                     _RB2	set	50
   319  0037                     _RB7	set	55
   320  0036                     _RB6	set	54
   321  0035                     _RB5	set	53
   322  0034                     _RB4	set	52
   323  0085                     _TRISA	set	133
   324  0087                     _TRISC	set	135
   325  0086                     _TRISB	set	134
   326  0188                     _ANSEL	set	392
   327  0189                     _ANSELH	set	393
   328  003F                     STR_4:	
   329  003F  3443               	retlw	67	;'C'
   330  0040  346F               	retlw	111	;'o'
   331  0041  346E               	retlw	110	;'n'
   332  0042  3466               	retlw	102	;'f'
   333  0043  3469               	retlw	105	;'i'
   334  0044  3467               	retlw	103	;'g'
   335  0045  342D               	retlw	45	;'-'
   336  0046  3469               	retlw	105	;'i'
   337  0047  347A               	retlw	122	;'z'
   338  0048  3471               	retlw	113	;'q'
   339  0049  3475               	retlw	117	;'u'
   340  004A  3469               	retlw	105	;'i'
   341  004B  3465               	retlw	101	;'e'
   342  004C  3472               	retlw	114	;'r'
   343  004D  3464               	retlw	100	;'d'
   344  004E  3461               	retlw	97	;'a'
   345  004F  343A               	retlw	58	;':'
   346  0050  3420               	retlw	32	;' '
   347  0051  3400               	retlw	0
   348  0052                     STR_2:	
   349  0052  3443               	retlw	67	;'C'
   350  0053  346F               	retlw	111	;'o'
   351  0054  346E               	retlw	110	;'n'
   352  0055  3466               	retlw	102	;'f'
   353  0056  3469               	retlw	105	;'i'
   354  0057  3467               	retlw	103	;'g'
   355  0058  342D               	retlw	45	;'-'
   356  0059  3464               	retlw	100	;'d'
   357  005A  3465               	retlw	101	;'e'
   358  005B  3472               	retlw	114	;'r'
   359  005C  3465               	retlw	101	;'e'
   360  005D  3463               	retlw	99	;'c'
   361  005E  3468               	retlw	104	;'h'
   362  005F  3461               	retlw	97	;'a'
   363  0060  343A               	retlw	58	;':'
   364  0061  3420               	retlw	32	;' '
   365  0062  3400               	retlw	0
   366  0063                     STR_8:	
   367  0063  3444               	retlw	68	;'D'
   368  0064  3469               	retlw	105	;'i'
   369  0065  3472               	retlw	114	;'r'
   370  0066  343A               	retlw	58	;':'
   371  0067  3420               	retlw	32	;' '
   372  0068  3441               	retlw	65	;'A'
   373  0069  346E               	retlw	110	;'n'
   374  006A  3474               	retlw	116	;'t'
   375  006B  3469               	retlw	105	;'i'
   376  006C  3448               	retlw	72	;'H'
   377  006D  346F               	retlw	111	;'o'
   378  006E  3472               	retlw	114	;'r'
   379  006F  3461               	retlw	97	;'a'
   380  0070  3472               	retlw	114	;'r'
   381  0071  3469               	retlw	105	;'i'
   382  0072  346F               	retlw	111	;'o'
   383  0073  3400               	retlw	0
   384  0074                     STR_6:	
   385  0074  3444               	retlw	68	;'D'
   386  0075  3469               	retlw	105	;'i'
   387  0076  3472               	retlw	114	;'r'
   388  0077  343A               	retlw	58	;':'
   389  0078  3420               	retlw	32	;' '
   390  0079  3448               	retlw	72	;'H'
   391  007A  346F               	retlw	111	;'o'
   392  007B  3472               	retlw	114	;'r'
   393  007C  3461               	retlw	97	;'a'
   394  007D  3472               	retlw	114	;'r'
   395  007E  3469               	retlw	105	;'i'
   396  007F  346F               	retlw	111	;'o'
   397  0080  3400               	retlw	0
   398  0081                     STR_7:	
   399  0081  3420               	retlw	32	;' '
   400  0082  3443               	retlw	67	;'C'
   401  0083  346D               	retlw	109	;'m'
   402  0084  3420               	retlw	32	;' '
   403  0085  3464               	retlw	100	;'d'
   404  0086  3465               	retlw	101	;'e'
   405  0087  343A               	retlw	58	;':'
   406  0088  3420               	retlw	32	;' '
   407  0089  3400               	retlw	0
   408  008A                     STR_3:	
   409  008A  3420               	retlw	32	;' '
   410  008B  3443               	retlw	67	;'C'
   411  008C  346D               	retlw	109	;'m'
   412  008D  3400               	retlw	0
   413  008E                     STR_1:	
   414  008E  3425               	retlw	37	;'%'
   415  008F  3464               	retlw	100	;'d'
   416  0090  3400               	retlw	0
   417  0081                     
   418                           ; #config settings
   419  0000                     
   420                           	psect	cinit
   421  07E1                     start_initialization:	
   422  07E1                     __initialization:	
   423                           
   424                           ; Initialize objects allocated to BANK0
   425  07E1  120A  118A  2169  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   426  07E6  00CD               	movwf	__pdataBANK0& (0+127)
   427  07E7  120A  118A  216A  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   428  07EC  00CE               	movwf	(__pdataBANK0+1)& (0+127)
   429  07ED  120A  118A  216B   	fcall	__pidataBANK0+2	;fetch initializer
   430  07F0  00CF               	movwf	(__pdataBANK0+2)& (0+127)
   431                           
   432                           ; Clear objects allocated to BANK0
   433  07F1  01C2               	clrf	__pbssBANK0& (0+127)
   434  07F2  01C3               	clrf	(__pbssBANK0+1)& (0+127)
   435  07F3  01C4               	clrf	(__pbssBANK0+2)& (0+127)
   436  07F4  01C5               	clrf	(__pbssBANK0+3)& (0+127)
   437  07F5  01C6               	clrf	(__pbssBANK0+4)& (0+127)
   438  07F6  01C7               	clrf	(__pbssBANK0+5)& (0+127)
   439  07F7  01C8               	clrf	(__pbssBANK0+6)& (0+127)
   440  07F8  01C9               	clrf	(__pbssBANK0+7)& (0+127)
   441  07F9  01CA               	clrf	(__pbssBANK0+8)& (0+127)
   442  07FA  01CB               	clrf	(__pbssBANK0+9)& (0+127)
   443  07FB  01CC               	clrf	(__pbssBANK0+10)& (0+127)
   444  07FC                     end_of_initialization:	
   445                           ;End of C runtime variable initialization code
   446                           
   447  07FC                     __end_of__initialization:	
   448  07FC  0183               	clrf	3
   449  07FD  120A  118A  2BD4   	ljmp	_main	;jump to C main() function
   450                           
   451                           	psect	bssBANK0
   452  0042                     __pbssBANK0:	
   453  0042                     _CmAntiHorario:	
   454  0042                     	ds	2
   455  0044                     _CmHorario:	
   456  0044                     	ds	2
   457  0046                     _LastState:	
   458  0046                     	ds	1
   459  0047                     _old_key:	
   460  0047                     	ds	1
   461  0048                     _key:	
   462  0048                     	ds	1
   463  0049                     _buffer:	
   464  0049                     	ds	2
   465  004B                     _Grados:	
   466  004B                     	ds	2
   467                           
   468                           	psect	dataBANK0
   469  004D                     __pdataBANK0:	
   470  004D                     _key2:	
   471  004D                     	ds	2
   472  004F                     _keypress:	
   473  004F                     	ds	1
   474                           
   475                           	psect	cstackCOMMON
   476  0070                     __pcstackCOMMON:	
   477  0070                     ??_StopMotor:	
   478  0070                     ??_RunMotor:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ?_PinsInit:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ??_PinsInit:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0070                     ?_Lcd_Port:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ??_Lcd_Port:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     ?_Lcd_Cmd:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0070                     ?_Lcd_Clear:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ?_Lcd_Init:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ?_Lcd_Write_Char:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ?_StopMotor:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0070                     ?_configurarDerecha:	
   509                           ; 2 bytes @ 0x0
   510                           
   511  0070                     ?_configurarIzquierda:	
   512                           ; 2 bytes @ 0x0
   513                           
   514  0070                     ?_RunMotor:	
   515                           ; 2 bytes @ 0x0
   516                           
   517  0070                     ?_Encoder:	
   518                           ; 2 bytes @ 0x0
   519                           
   520  0070                     ?_KeyPadGetKey:	
   521                           ; 2 bytes @ 0x0
   522                           
   523  0070                     ?_main:	
   524                           ; 2 bytes @ 0x0
   525                           
   526  0070                     ?_VerificarInversionGiro:	
   527                           ; 2 bytes @ 0x0
   528                           
   529  0070                     ?___wmul:	
   530                           ; 2 bytes @ 0x0
   531                           
   532  0070                     ?___lwdiv:	
   533                           ; 2 bytes @ 0x0
   534                           
   535  0070                     Lcd_Port@a:	
   536                           ; 2 bytes @ 0x0
   537                           
   538  0070                     ___wmul@multiplier:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ___lwdiv@divisor:	
   542                           ; 2 bytes @ 0x0
   543                           
   544                           
   545                           ; 2 bytes @ 0x0
   546  0070                     	ds	1
   547  0071                     ??_Lcd_Cmd:	
   548  0071                     ??_Lcd_Write_Char:	
   549                           ; 1 bytes @ 0x1
   550                           
   551                           
   552                           ; 1 bytes @ 0x1
   553  0071                     	ds	1
   554  0072                     ??_KeyPadGetKey:	
   555  0072                     Lcd_Write_Char@temp:	
   556                           ; 1 bytes @ 0x2
   557                           
   558  0072                     ___wmul@multiplicand:	
   559                           ; 1 bytes @ 0x2
   560                           
   561  0072                     ___lwdiv@dividend:	
   562                           ; 2 bytes @ 0x2
   563                           
   564                           
   565                           ; 2 bytes @ 0x2
   566  0072                     	ds	1
   567  0073                     Lcd_Cmd@a:	
   568  0073                     Lcd_Write_Char@y:	
   569                           ; 1 bytes @ 0x3
   570                           
   571                           
   572                           ; 1 bytes @ 0x3
   573  0073                     	ds	1
   574  0074                     ??_Lcd_Clear:	
   575  0074                     ?_Lcd_Set_Cursor:	
   576                           ; 1 bytes @ 0x4
   577                           
   578  0074                     ??_Lcd_Init:	
   579                           ; 1 bytes @ 0x4
   580                           
   581  0074                     ??___wmul:	
   582                           ; 1 bytes @ 0x4
   583                           
   584  0074                     ??___lwdiv:	
   585                           ; 1 bytes @ 0x4
   586                           
   587  0074                     Lcd_Set_Cursor@b:	
   588                           ; 1 bytes @ 0x4
   589                           
   590  0074                     Lcd_Write_Char@a:	
   591                           ; 1 bytes @ 0x4
   592                           
   593  0074                     KeyPadGetKey@key:	
   594                           ; 1 bytes @ 0x4
   595                           
   596  0074                     ___wmul@product:	
   597                           ; 1 bytes @ 0x4
   598                           
   599                           
   600                           ; 2 bytes @ 0x4
   601  0074                     	ds	1
   602  0075                     ??_Lcd_Set_Cursor:	
   603  0075                     ?_Lcd_Write_String:	
   604                           ; 1 bytes @ 0x5
   605                           
   606  0075                     KeyPadGetKey@row:	
   607                           ; 1 bytes @ 0x5
   608                           
   609  0075                     Lcd_Write_String@a:	
   610                           ; 1 bytes @ 0x5
   611                           
   612  0075                     ___lwdiv@quotient:	
   613                           ; 2 bytes @ 0x5
   614                           
   615                           
   616                           ; 2 bytes @ 0x5
   617  0075                     	ds	1
   618  0076                     ??_VerificarInversionGiro:	
   619                           
   620                           ; 1 bytes @ 0x6
   621  0076                     	ds	1
   622  0077                     ??_Lcd_Write_String:	
   623  0077                     Lcd_Set_Cursor@a:	
   624                           ; 1 bytes @ 0x7
   625                           
   626  0077                     ___lwdiv@counter:	
   627                           ; 1 bytes @ 0x7
   628                           
   629                           
   630                           ; 1 bytes @ 0x7
   631  0077                     	ds	1
   632  0078                     ?___lwmod:	
   633  0078                     Lcd_Set_Cursor@z:	
   634                           ; 2 bytes @ 0x8
   635                           
   636  0078                     ___lwmod@divisor:	
   637                           ; 1 bytes @ 0x8
   638                           
   639                           
   640                           ; 2 bytes @ 0x8
   641  0078                     	ds	1
   642  0079                     Lcd_Set_Cursor@y:	
   643                           
   644                           ; 1 bytes @ 0x9
   645  0079                     	ds	1
   646  007A                     Lcd_Set_Cursor@temp:	
   647  007A                     Lcd_Write_String@i:	
   648                           ; 1 bytes @ 0xA
   649                           
   650  007A                     ___lwmod@dividend:	
   651                           ; 2 bytes @ 0xA
   652                           
   653                           
   654                           ; 2 bytes @ 0xA
   655  007A                     	ds	2
   656  007C                     ??___lwmod:	
   657                           
   658                           ; 1 bytes @ 0xC
   659  007C                     	ds	1
   660  007D                     ___lwmod@counter:	
   661                           
   662                           ; 1 bytes @ 0xD
   663  007D                     	ds	1
   664  007E                     ??_Encoder:	
   665                           
   666                           	psect	cstackBANK0
   667  0020                     __pcstackBANK0:	
   668                           ; 1 bytes @ 0xE
   669                           
   670  0020                     ?_sprintf:	
   671  0020                     sprintf@f:	
   672                           ; 2 bytes @ 0x0
   673                           
   674                           
   675                           ; 1 bytes @ 0x0
   676  0020                     	ds	3
   677  0023                     ??_sprintf:	
   678                           
   679                           ; 1 bytes @ 0x3
   680  0023                     	ds	3
   681  0026                     sprintf@ap:	
   682                           
   683                           ; 1 bytes @ 0x6
   684  0026                     	ds	1
   685  0027                     sprintf@flag:	
   686                           
   687                           ; 1 bytes @ 0x7
   688  0027                     	ds	1
   689  0028                     sprintf@prec:	
   690                           
   691                           ; 1 bytes @ 0x8
   692  0028                     	ds	1
   693  0029                     sprintf@val:	
   694                           
   695                           ; 2 bytes @ 0x9
   696  0029                     	ds	2
   697  002B                     sprintf@sp:	
   698                           
   699                           ; 1 bytes @ 0xB
   700  002B                     	ds	1
   701  002C                     sprintf@c:	
   702                           
   703                           ; 1 bytes @ 0xC
   704  002C                     	ds	1
   705  002D                     ?_Lcd_Write_Integer:	
   706  002D                     Lcd_Write_Integer@a:	
   707                           ; 1 bytes @ 0xD
   708                           
   709                           
   710                           ; 2 bytes @ 0xD
   711  002D                     	ds	2
   712  002F                     ??_Lcd_Write_Integer:	
   713                           
   714                           ; 1 bytes @ 0xF
   715  002F                     	ds	1
   716  0030                     Lcd_Write_Integer@Data:	
   717                           
   718                           ; 10 bytes @ 0x10
   719  0030                     	ds	10
   720  003A                     ??_configurarDerecha:	
   721  003A                     ??_configurarIzquierda:	
   722                           ; 1 bytes @ 0x1A
   723                           
   724                           
   725                           ; 1 bytes @ 0x1A
   726  003A                     	ds	4
   727  003E                     ??_main:	
   728                           
   729                           ; 1 bytes @ 0x1E
   730  003E                     	ds	4
   731                           
   732                           	psect	maintext
   733  03D4                     __pmaintext:	
   734 ;;
   735 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   736 ;;
   737 ;; *************** function _main *****************
   738 ;; Defined at:
   739 ;;		line 22 in file "main.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  2  142[None  ] int 
   746 ;; Registers used:
   747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : B00/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   753 ;;      Params:         0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0
   755 ;;      Temps:          0       4       0       0       0
   756 ;;      Totals:         0       4       0       0       0
   757 ;;Total ram usage:        4 bytes
   758 ;; Hardware stack levels required when called:    5
   759 ;; This function calls:
   760 ;;		_Encoder
   761 ;;		_KeyPadGetKey
   762 ;;		_Lcd_Init
   763 ;;		_PinsInit
   764 ;;		_RunMotor
   765 ;;		_StopMotor
   766 ;;		_configurarDerecha
   767 ;;		_configurarIzquierda
   768 ;; This function is called by:
   769 ;;		Startup code after reset
   770 ;; This function uses a non-reentrant model
   771 ;;
   772                           
   773                           
   774                           ;psect for function _main
   775  03D4                     _main:	
   776                           
   777                           ;main.c: 25:     PinsInit();
   778                           
   779                           ;incstack = 0
   780                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   781  03D4  120A  118A  2189  120A  118A  	fcall	_PinsInit
   782                           
   783                           ;main.c: 26:     Lcd_Init();
   784  03D9  120A  118A  2379  120A  118A  	fcall	_Lcd_Init
   785                           
   786                           ;main.c: 28:     StopMotor();
   787  03DE  120A  118A  216C  120A  118A  	fcall	_StopMotor
   788                           
   789                           ;main.c: 29:     configurarDerecha();
   790  03E3  120A  118A  2593  120A  118A  	fcall	_configurarDerecha
   791                           
   792                           ;main.c: 30:     configurarIzquierda();
   793  03E8  120A  118A  264E  120A  118A  	fcall	_configurarIzquierda
   794  03ED                     l1774:	
   795                           
   796                           ;main.c: 34:         keypress = KeyPadGetKey();
   797  03ED  120A  118A  245B  120A  118A  	fcall	_KeyPadGetKey
   798  03F2  0870               	movf	?_KeyPadGetKey,w
   799  03F3  1283               	bcf	3,5	;RP0=0, select bank0
   800  03F4  1303               	bcf	3,6	;RP1=0, select bank0
   801  03F5  00BE               	movwf	??_main
   802  03F6  083E               	movf	??_main,w
   803  03F7  00CF               	movwf	_keypress
   804                           
   805                           ;main.c: 37:         if (keypress != keyPadMatrix[ 0x10 ]) {
   806  03F8  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
   807  03F9  0084               	movwf	4
   808  03FA  120A  118A  200D  120A  118A  	fcall	stringdir
   809  03FF  00BE               	movwf	??_main
   810  0400  120A  118A  200D  120A  118A  	fcall	stringdir
   811  0405  00BF               	movwf	??_main+1
   812  0406  084F               	movf	_keypress,w
   813  0407  00C0               	movwf	??_main+2
   814  0408  01C1               	clrf	??_main+3
   815  0409  083F               	movf	??_main+1,w
   816  040A  0641               	xorwf	??_main+3,w
   817  040B  1D03               	skipz
   818  040C  2C0F               	goto	u1335
   819  040D  083E               	movf	??_main,w
   820  040E  0640               	xorwf	??_main+2,w
   821  040F                     u1335:	
   822  040F  1D03               	btfss	3,2
   823  0410  2C2A               	goto	l1790
   824  0411  2C40               	goto	l144
   825  0412                     l1780:	
   826                           
   827                           ;main.c: 41:                     configurarDerecha();
   828  0412  120A  118A  2593  120A  118A  	fcall	_configurarDerecha
   829                           
   830                           ;main.c: 42:                     break;
   831  0417  2C40               	goto	l144
   832  0418                     l1782:	
   833                           
   834                           ;main.c: 44:                     configurarIzquierda();
   835  0418  120A  118A  264E  120A  118A  	fcall	_configurarIzquierda
   836                           
   837                           ;main.c: 45:                     break;
   838  041D  2C40               	goto	l144
   839  041E                     l1784:	
   840                           
   841                           ;main.c: 47:                     StopMotor();
   842  041E  120A  118A  216C  120A  118A  	fcall	_StopMotor
   843                           
   844                           ;main.c: 48:                     break;
   845  0423  2C40               	goto	l144
   846  0424                     l1786:	
   847                           
   848                           ;main.c: 50:                     RunMotor();
   849  0424  120A  118A  217C  120A  118A  	fcall	_RunMotor
   850                           
   851                           ;main.c: 51:                     break;
   852  0429  2C40               	goto	l144
   853  042A                     l1790:	
   854  042A  084F               	movf	_keypress,w
   855  042B  00BE               	movwf	??_main
   856  042C  01BF               	clrf	??_main+1
   857                           
   858                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   859                           ; Switch size 1, requested type "simple"
   860                           ; Number of cases is 1, Range of values is 0 to 0
   861                           ; switch strategies available:
   862                           ; Name         Instructions Cycles
   863                           ; simple_byte            4     3 (average)
   864                           ; direct_byte           11     8 (fixed)
   865                           ; jumptable            260     6 (fixed)
   866                           ;	Chosen strategy is simple_byte
   867  042D  083F               	movf	??_main+1,w
   868  042E  3A00               	xorlw	0	; case 0
   869  042F  1903               	skipnz
   870  0430  2C32               	goto	l1884
   871  0431  2C40               	goto	l144
   872  0432                     l1884:	
   873                           
   874                           ; Switch size 1, requested type "simple"
   875                           ; Number of cases is 4, Range of values is 65 to 68
   876                           ; switch strategies available:
   877                           ; Name         Instructions Cycles
   878                           ; simple_byte           13     7 (average)
   879                           ; direct_byte           23    11 (fixed)
   880                           ; jumptable            263     9 (fixed)
   881                           ;	Chosen strategy is simple_byte
   882  0432  083E               	movf	??_main,w
   883  0433  3A41               	xorlw	65	; case 65
   884  0434  1903               	skipnz
   885  0435  2C12               	goto	l1780
   886  0436  3A03               	xorlw	3	; case 66
   887  0437  1903               	skipnz
   888  0438  2C18               	goto	l1782
   889  0439  3A01               	xorlw	1	; case 67
   890  043A  1903               	skipnz
   891  043B  2C1E               	goto	l1784
   892  043C  3A07               	xorlw	7	; case 68
   893  043D  1903               	skipnz
   894  043E  2C24               	goto	l1786
   895  043F  2C40               	goto	l144
   896  0440                     l144:	
   897                           ;main.c: 53:         }
   898                           
   899                           
   900                           ;main.c: 56:         if (RB0 == 1 && LastState == 0) {
   901  0440  1283               	bcf	3,5	;RP0=0, select bank0
   902  0441  1303               	bcf	3,6	;RP1=0, select bank0
   903  0442  1C06               	btfss	6,0	;volatile
   904  0443  2C4D               	goto	l151
   905  0444  0846               	movf	_LastState,w
   906  0445  1D03               	btfss	3,2
   907  0446  2C4D               	goto	l151
   908                           
   909                           ;main.c: 57:             Encoder();
   910  0447  120A  118A  24EC  120A  118A  	fcall	_Encoder
   911                           
   912                           ;main.c: 58:         } else if (RB0 == 0) {
   913  044C  2C50               	goto	l1798
   914  044D                     l151:	
   915  044D  1806               	btfsc	6,0	;volatile
   916  044E  2C50               	goto	l1798
   917                           
   918                           ;main.c: 59:             LastState = 0;
   919  044F  01C6               	clrf	_LastState
   920  0450                     l1798:	
   921                           
   922                           ;main.c: 61:         _delay((unsigned long)((1)*(8000000/4000.0)));
   923  0450  3003               	movlw	3
   924  0451  1283               	bcf	3,5	;RP0=0, select bank0
   925  0452  1303               	bcf	3,6	;RP1=0, select bank0
   926  0453  00BF               	movwf	??_main+1
   927  0454  3097               	movlw	151
   928  0455  00BE               	movwf	??_main
   929  0456                     u1377:	
   930  0456  0BBE               	decfsz	??_main,f
   931  0457  2C56               	goto	u1377
   932  0458  0BBF               	decfsz	??_main+1,f
   933  0459  2C56               	goto	u1377
   934  045A  2BED               	goto	l1774
   935  045B                     __end_of_main:	
   936                           
   937                           	psect	text1
   938  064E                     __ptext1:	
   939 ;; *************** function _configurarIzquierda *****************
   940 ;; Defined at:
   941 ;;		line 130 in file "main.c"
   942 ;; Parameters:    Size  Location     Type
   943 ;;		None
   944 ;; Auto vars:     Size  Location     Type
   945 ;;		None
   946 ;; Return value:  Size  Location     Type
   947 ;;                  2   50[None  ] int 
   948 ;; Registers used:
   949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   955 ;;      Params:         0       0       0       0       0
   956 ;;      Locals:         0       0       0       0       0
   957 ;;      Temps:          0       4       0       0       0
   958 ;;      Totals:         0       4       0       0       0
   959 ;;Total ram usage:        4 bytes
   960 ;; Hardware stack levels used:    1
   961 ;; Hardware stack levels required when called:    4
   962 ;; This function calls:
   963 ;;		_KeyPadGetKey
   964 ;;		_Lcd_Clear
   965 ;;		_Lcd_Set_Cursor
   966 ;;		_Lcd_Write_Integer
   967 ;;		_Lcd_Write_String
   968 ;;		_RunMotor
   969 ;;		_StopMotor
   970 ;;		___wmul
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           
   977                           ;psect for function _configurarIzquierda
   978  064E                     _configurarIzquierda:	
   979                           
   980                           ;main.c: 132:     buffer = 0;
   981                           
   982                           ;incstack = 0
   983                           ; Regs used in _configurarIzquierda: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
   984  064E  1283               	bcf	3,5	;RP0=0, select bank0
   985  064F  1303               	bcf	3,6	;RP1=0, select bank0
   986  0650  01C9               	clrf	_buffer
   987  0651  01CA               	clrf	_buffer+1
   988                           
   989                           ;main.c: 133:     StopMotor();
   990  0652  120A  118A  216C  120A  118A  	fcall	_StopMotor
   991                           
   992                           ;main.c: 135:     Lcd_Clear();
   993  0657  120A  118A  2171  120A  118A  	fcall	_Lcd_Clear
   994                           
   995                           ;main.c: 136:     Lcd_Set_Cursor(1, 1);
   996  065C  01F4               	clrf	Lcd_Set_Cursor@b
   997  065D  0AF4               	incf	Lcd_Set_Cursor@b,f
   998  065E  3001               	movlw	1
   999  065F  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  1000                           
  1001                           ;main.c: 137:     Lcd_Write_String("Config-izquierda: ");
  1002  0664  302D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1003  0665  00F5               	movwf	Lcd_Write_String@a
  1004  0666  3080               	movlw	128
  1005  0667  00F6               	movwf	Lcd_Write_String@a+1
  1006  0668  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  1007  066D                     l1706:	
  1008                           
  1009                           ;main.c: 141:         keypress = KeyPadGetKey();
  1010  066D  120A  118A  245B  120A  118A  	fcall	_KeyPadGetKey
  1011  0672  0870               	movf	?_KeyPadGetKey,w
  1012  0673  1283               	bcf	3,5	;RP0=0, select bank0
  1013  0674  1303               	bcf	3,6	;RP1=0, select bank0
  1014  0675  00BA               	movwf	??_configurarIzquierda
  1015  0676  083A               	movf	??_configurarIzquierda,w
  1016  0677  00CF               	movwf	_keypress
  1017                           
  1018                           ;main.c: 142:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1019  0678  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1020  0679  0084               	movwf	4
  1021  067A  120A  118A  200D  120A  118A  	fcall	stringdir
  1022  067F  00BA               	movwf	??_configurarIzquierda
  1023  0680  120A  118A  200D  120A  118A  	fcall	stringdir
  1024  0685  00BB               	movwf	??_configurarIzquierda+1
  1025  0686  084F               	movf	_keypress,w
  1026  0687  00BC               	movwf	??_configurarIzquierda+2
  1027  0688  01BD               	clrf	??_configurarIzquierda+3
  1028  0689  083B               	movf	??_configurarIzquierda+1,w
  1029  068A  063D               	xorwf	??_configurarIzquierda+3,w
  1030  068B  1D03               	skipz
  1031  068C  2E8F               	goto	u1305
  1032  068D  083A               	movf	??_configurarIzquierda,w
  1033  068E  063C               	xorwf	??_configurarIzquierda+2,w
  1034  068F                     u1305:	
  1035  068F  1903               	skipnz
  1036  0690  2EFE               	goto	l1734
  1037                           
  1038                           ;main.c: 143:             key2 = keypress;
  1039  0691  084F               	movf	_keypress,w
  1040  0692  00BA               	movwf	??_configurarIzquierda
  1041  0693  01BB               	clrf	??_configurarIzquierda+1
  1042  0694  083A               	movf	??_configurarIzquierda,w
  1043  0695  00CD               	movwf	_key2
  1044  0696  083B               	movf	??_configurarIzquierda+1,w
  1045  0697  00CE               	movwf	_key2+1
  1046                           
  1047                           ;main.c: 144:             switch (key2) {
  1048  0698  2EE5               	goto	l1732
  1049  0699                     l1712:	
  1050                           
  1051                           ;main.c: 152:                     Grados = 0;
  1052  0699  01CB               	clrf	_Grados
  1053  069A  01CC               	clrf	_Grados+1
  1054                           
  1055                           ;main.c: 153:                     CmAntiHorario = buffer;
  1056  069B  084A               	movf	_buffer+1,w
  1057  069C  00C3               	movwf	_CmAntiHorario+1
  1058  069D  0849               	movf	_buffer,w
  1059  069E  00C2               	movwf	_CmAntiHorario
  1060                           
  1061                           ;main.c: 154:                     RunMotor();
  1062  069F  120A  118A  217C  120A  118A  	fcall	_RunMotor
  1063                           
  1064                           ;main.c: 155:                     if (CmAntiHorario != 0) {
  1065  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  1066  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  1067  06A6  0842               	movf	_CmAntiHorario,w
  1068  06A7  0443               	iorwf	_CmAntiHorario+1,w
  1069  06A8  1D03               	btfss	3,2
  1070  06A9  0008               	return
  1071  06AA  2EFE               	goto	l1734
  1072  06AB                     l1722:	
  1073                           
  1074                           ;main.c: 164:                     buffer = (10 * buffer + key2);
  1075  06AB  084A               	movf	_buffer+1,w
  1076  06AC  00F1               	movwf	___wmul@multiplier+1
  1077  06AD  0849               	movf	_buffer,w
  1078  06AE  00F0               	movwf	___wmul@multiplier
  1079  06AF  300A               	movlw	10
  1080  06B0  00F2               	movwf	___wmul@multiplicand
  1081  06B1  3000               	movlw	0
  1082  06B2  00F3               	movwf	___wmul@multiplicand+1
  1083  06B3  120A  118A  21E4  120A  118A  	fcall	___wmul
  1084  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  1085  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  1086  06BA  084D               	movf	_key2,w
  1087  06BB  0770               	addwf	?___wmul,w
  1088  06BC  00C9               	movwf	_buffer
  1089  06BD  084E               	movf	_key2+1,w
  1090  06BE  1803               	skipnc
  1091  06BF  0A4E               	incf	_key2+1,w
  1092  06C0  0771               	addwf	?___wmul+1,w
  1093  06C1  00CA               	movwf	_buffer+1
  1094                           
  1095                           ;main.c: 165:                     buffer -= 48;
  1096  06C2  30D0               	movlw	208
  1097  06C3  07C9               	addwf	_buffer,f
  1098  06C4  1803               	skipnc
  1099  06C5  0ACA               	incf	_buffer+1,f
  1100  06C6  30FF               	movlw	255
  1101  06C7  07CA               	addwf	_buffer+1,f
  1102                           
  1103                           ;main.c: 166:                     Lcd_Set_Cursor(2, 1);
  1104  06C8  01F4               	clrf	Lcd_Set_Cursor@b
  1105  06C9  0AF4               	incf	Lcd_Set_Cursor@b,f
  1106  06CA  3002               	movlw	2
  1107  06CB  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  1108                           
  1109                           ;main.c: 167:                     Lcd_Write_Integer(buffer);
  1110  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  1111  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  1112  06D2  084A               	movf	_buffer+1,w
  1113  06D3  00AE               	movwf	Lcd_Write_Integer@a+1
  1114  06D4  0849               	movf	_buffer,w
  1115  06D5  00AD               	movwf	Lcd_Write_Integer@a
  1116  06D6  120A  118A  2198  120A  118A  	fcall	_Lcd_Write_Integer
  1117                           
  1118                           ;main.c: 168:                     Lcd_Write_String(" Cm");
  1119  06DB  3078               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1120  06DC  00F5               	movwf	Lcd_Write_String@a
  1121  06DD  3080               	movlw	128
  1122  06DE  00F6               	movwf	Lcd_Write_String@a+1
  1123  06DF  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  1124                           
  1125                           ;main.c: 169:             }
  1126  06E4  2EFE               	goto	l1734
  1127  06E5                     l1732:	
  1128                           
  1129                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1130                           ; Switch size 1, requested type "simple"
  1131                           ; Number of cases is 1, Range of values is 0 to 0
  1132                           ; switch strategies available:
  1133                           ; Name         Instructions Cycles
  1134                           ; simple_byte            4     3 (average)
  1135                           ; direct_byte           11     8 (fixed)
  1136                           ; jumptable            260     6 (fixed)
  1137                           ;	Chosen strategy is simple_byte
  1138  06E5  084E               	movf	_key2+1,w
  1139  06E6  3A00               	xorlw	0	; case 0
  1140  06E7  1903               	skipnz
  1141  06E8  2EEA               	goto	l1886
  1142  06E9  2EAB               	goto	l1722
  1143  06EA                     l1886:	
  1144                           
  1145                           ; Switch size 1, requested type "simple"
  1146                           ; Number of cases is 6, Range of values is 35 to 68
  1147                           ; switch strategies available:
  1148                           ; Name         Instructions Cycles
  1149                           ; simple_byte           19    10 (average)
  1150                           ; direct_byte          113    11 (fixed)
  1151                           ; jumptable            263     9 (fixed)
  1152                           ;	Chosen strategy is simple_byte
  1153  06EA  084D               	movf	_key2,w
  1154  06EB  3A23               	xorlw	35	; case 35
  1155  06EC  1903               	skipnz
  1156  06ED  2EFE               	goto	l1734
  1157  06EE  3A09               	xorlw	9	; case 42
  1158  06EF  1903               	skipnz
  1159  06F0  2EFE               	goto	l1734
  1160  06F1  3A6B               	xorlw	107	; case 65
  1161  06F2  1903               	skipnz
  1162  06F3  2EFE               	goto	l1734
  1163  06F4  3A03               	xorlw	3	; case 66
  1164  06F5  1903               	skipnz
  1165  06F6  2EFE               	goto	l1734
  1166  06F7  3A01               	xorlw	1	; case 67
  1167  06F8  1903               	skipnz
  1168  06F9  2EFE               	goto	l1734
  1169  06FA  3A07               	xorlw	7	; case 68
  1170  06FB  1903               	skipnz
  1171  06FC  2E99               	goto	l1712
  1172  06FD  2EAB               	goto	l1722
  1173  06FE                     l1734:	
  1174                           
  1175                           ;main.c: 171:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1176  06FE  3003               	movlw	3
  1177  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0700  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0701  00BB               	movwf	??_configurarIzquierda+1
  1180  0702  3097               	movlw	151
  1181  0703  00BA               	movwf	??_configurarIzquierda
  1182  0704                     u1387:	
  1183  0704  0BBA               	decfsz	??_configurarIzquierda,f
  1184  0705  2F04               	goto	u1387
  1185  0706  0BBB               	decfsz	??_configurarIzquierda+1,f
  1186  0707  2F04               	goto	u1387
  1187  0708  2E6D               	goto	l1706
  1188  0709                     __end_of_configurarIzquierda:	
  1189                           
  1190                           	psect	text2
  1191  0593                     __ptext2:	
  1192 ;; *************** function _configurarDerecha *****************
  1193 ;; Defined at:
  1194 ;;		line 84 in file "main.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  2   48[None  ] int 
  1201 ;; Registers used:
  1202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0
  1210 ;;      Temps:          0       4       0       0       0
  1211 ;;      Totals:         0       4       0       0       0
  1212 ;;Total ram usage:        4 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    4
  1215 ;; This function calls:
  1216 ;;		_KeyPadGetKey
  1217 ;;		_Lcd_Clear
  1218 ;;		_Lcd_Set_Cursor
  1219 ;;		_Lcd_Write_Integer
  1220 ;;		_Lcd_Write_String
  1221 ;;		_RunMotor
  1222 ;;		_StopMotor
  1223 ;;		___wmul
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           
  1230                           ;psect for function _configurarDerecha
  1231  0593                     _configurarDerecha:	
  1232                           
  1233                           ;main.c: 86:     buffer = 0;
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in _configurarDerecha: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1237  0593  1283               	bcf	3,5	;RP0=0, select bank0
  1238  0594  1303               	bcf	3,6	;RP1=0, select bank0
  1239  0595  01C9               	clrf	_buffer
  1240  0596  01CA               	clrf	_buffer+1
  1241                           
  1242                           ;main.c: 87:     StopMotor();
  1243  0597  120A  118A  216C  120A  118A  	fcall	_StopMotor
  1244                           
  1245                           ;main.c: 89:     Lcd_Clear();
  1246  059C  120A  118A  2171  120A  118A  	fcall	_Lcd_Clear
  1247                           
  1248                           ;main.c: 90:     Lcd_Set_Cursor(1, 1);
  1249  05A1  01F4               	clrf	Lcd_Set_Cursor@b
  1250  05A2  0AF4               	incf	Lcd_Set_Cursor@b,f
  1251  05A3  3001               	movlw	1
  1252  05A4  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  1253                           
  1254                           ;main.c: 91:     Lcd_Write_String("Config-derecha: ");
  1255  05A9  3040               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1256  05AA  00F5               	movwf	Lcd_Write_String@a
  1257  05AB  3080               	movlw	128
  1258  05AC  00F6               	movwf	Lcd_Write_String@a+1
  1259  05AD  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  1260  05B2                     l1662:	
  1261                           
  1262                           ;main.c: 95:         keypress = KeyPadGetKey();
  1263  05B2  120A  118A  245B  120A  118A  	fcall	_KeyPadGetKey
  1264  05B7  0870               	movf	?_KeyPadGetKey,w
  1265  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  1266  05B9  1303               	bcf	3,6	;RP1=0, select bank0
  1267  05BA  00BA               	movwf	??_configurarDerecha
  1268  05BB  083A               	movf	??_configurarDerecha,w
  1269  05BC  00CF               	movwf	_keypress
  1270                           
  1271                           ;main.c: 96:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1272  05BD  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1273  05BE  0084               	movwf	4
  1274  05BF  120A  118A  200D  120A  118A  	fcall	stringdir
  1275  05C4  00BA               	movwf	??_configurarDerecha
  1276  05C5  120A  118A  200D  120A  118A  	fcall	stringdir
  1277  05CA  00BB               	movwf	??_configurarDerecha+1
  1278  05CB  084F               	movf	_keypress,w
  1279  05CC  00BC               	movwf	??_configurarDerecha+2
  1280  05CD  01BD               	clrf	??_configurarDerecha+3
  1281  05CE  083B               	movf	??_configurarDerecha+1,w
  1282  05CF  063D               	xorwf	??_configurarDerecha+3,w
  1283  05D0  1D03               	skipz
  1284  05D1  2DD4               	goto	u1285
  1285  05D2  083A               	movf	??_configurarDerecha,w
  1286  05D3  063C               	xorwf	??_configurarDerecha+2,w
  1287  05D4                     u1285:	
  1288  05D4  1903               	skipnz
  1289  05D5  2E43               	goto	l1690
  1290                           
  1291                           ;main.c: 97:             key2 = keypress;
  1292  05D6  084F               	movf	_keypress,w
  1293  05D7  00BA               	movwf	??_configurarDerecha
  1294  05D8  01BB               	clrf	??_configurarDerecha+1
  1295  05D9  083A               	movf	??_configurarDerecha,w
  1296  05DA  00CD               	movwf	_key2
  1297  05DB  083B               	movf	??_configurarDerecha+1,w
  1298  05DC  00CE               	movwf	_key2+1
  1299                           
  1300                           ;main.c: 98:             switch (key2) {
  1301  05DD  2E2A               	goto	l1688
  1302  05DE                     l1668:	
  1303                           
  1304                           ;main.c: 107:                     Grados = 0;
  1305  05DE  01CB               	clrf	_Grados
  1306  05DF  01CC               	clrf	_Grados+1
  1307                           
  1308                           ;main.c: 108:                     CmHorario = buffer;
  1309  05E0  084A               	movf	_buffer+1,w
  1310  05E1  00C5               	movwf	_CmHorario+1
  1311  05E2  0849               	movf	_buffer,w
  1312  05E3  00C4               	movwf	_CmHorario
  1313                           
  1314                           ;main.c: 109:                     RunMotor();
  1315  05E4  120A  118A  217C  120A  118A  	fcall	_RunMotor
  1316                           
  1317                           ;main.c: 110:                     if (CmHorario != 0) {
  1318  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1319  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1320  05EB  0844               	movf	_CmHorario,w
  1321  05EC  0445               	iorwf	_CmHorario+1,w
  1322  05ED  1D03               	btfss	3,2
  1323  05EE  0008               	return
  1324  05EF  2E43               	goto	l1690
  1325  05F0                     l1678:	
  1326                           
  1327                           ;main.c: 119:                     buffer = (10 * buffer + key2);
  1328  05F0  084A               	movf	_buffer+1,w
  1329  05F1  00F1               	movwf	___wmul@multiplier+1
  1330  05F2  0849               	movf	_buffer,w
  1331  05F3  00F0               	movwf	___wmul@multiplier
  1332  05F4  300A               	movlw	10
  1333  05F5  00F2               	movwf	___wmul@multiplicand
  1334  05F6  3000               	movlw	0
  1335  05F7  00F3               	movwf	___wmul@multiplicand+1
  1336  05F8  120A  118A  21E4  120A  118A  	fcall	___wmul
  1337  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  1338  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  1339  05FF  084D               	movf	_key2,w
  1340  0600  0770               	addwf	?___wmul,w
  1341  0601  00C9               	movwf	_buffer
  1342  0602  084E               	movf	_key2+1,w
  1343  0603  1803               	skipnc
  1344  0604  0A4E               	incf	_key2+1,w
  1345  0605  0771               	addwf	?___wmul+1,w
  1346  0606  00CA               	movwf	_buffer+1
  1347                           
  1348                           ;main.c: 120:                     buffer -= 48;
  1349  0607  30D0               	movlw	208
  1350  0608  07C9               	addwf	_buffer,f
  1351  0609  1803               	skipnc
  1352  060A  0ACA               	incf	_buffer+1,f
  1353  060B  30FF               	movlw	255
  1354  060C  07CA               	addwf	_buffer+1,f
  1355                           
  1356                           ;main.c: 121:                     Lcd_Set_Cursor(2, 1);
  1357  060D  01F4               	clrf	Lcd_Set_Cursor@b
  1358  060E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1359  060F  3002               	movlw	2
  1360  0610  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  1361                           
  1362                           ;main.c: 122:                     Lcd_Write_Integer(buffer);
  1363  0615  1283               	bcf	3,5	;RP0=0, select bank0
  1364  0616  1303               	bcf	3,6	;RP1=0, select bank0
  1365  0617  084A               	movf	_buffer+1,w
  1366  0618  00AE               	movwf	Lcd_Write_Integer@a+1
  1367  0619  0849               	movf	_buffer,w
  1368  061A  00AD               	movwf	Lcd_Write_Integer@a
  1369  061B  120A  118A  2198  120A  118A  	fcall	_Lcd_Write_Integer
  1370                           
  1371                           ;main.c: 123:                     Lcd_Write_String(" Cm");
  1372  0620  3078               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1373  0621  00F5               	movwf	Lcd_Write_String@a
  1374  0622  3080               	movlw	128
  1375  0623  00F6               	movwf	Lcd_Write_String@a+1
  1376  0624  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  1377                           
  1378                           ;main.c: 124:             }
  1379  0629  2E43               	goto	l1690
  1380  062A                     l1688:	
  1381                           
  1382                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1383                           ; Switch size 1, requested type "simple"
  1384                           ; Number of cases is 1, Range of values is 0 to 0
  1385                           ; switch strategies available:
  1386                           ; Name         Instructions Cycles
  1387                           ; simple_byte            4     3 (average)
  1388                           ; direct_byte           11     8 (fixed)
  1389                           ; jumptable            260     6 (fixed)
  1390                           ;	Chosen strategy is simple_byte
  1391  062A  084E               	movf	_key2+1,w
  1392  062B  3A00               	xorlw	0	; case 0
  1393  062C  1903               	skipnz
  1394  062D  2E2F               	goto	l1888
  1395  062E  2DF0               	goto	l1678
  1396  062F                     l1888:	
  1397                           
  1398                           ; Switch size 1, requested type "simple"
  1399                           ; Number of cases is 6, Range of values is 35 to 68
  1400                           ; switch strategies available:
  1401                           ; Name         Instructions Cycles
  1402                           ; simple_byte           19    10 (average)
  1403                           ; direct_byte          113    11 (fixed)
  1404                           ; jumptable            263     9 (fixed)
  1405                           ;	Chosen strategy is simple_byte
  1406  062F  084D               	movf	_key2,w
  1407  0630  3A23               	xorlw	35	; case 35
  1408  0631  1903               	skipnz
  1409  0632  2E43               	goto	l1690
  1410  0633  3A09               	xorlw	9	; case 42
  1411  0634  1903               	skipnz
  1412  0635  2E43               	goto	l1690
  1413  0636  3A6B               	xorlw	107	; case 65
  1414  0637  1903               	skipnz
  1415  0638  2E43               	goto	l1690
  1416  0639  3A03               	xorlw	3	; case 66
  1417  063A  1903               	skipnz
  1418  063B  2E43               	goto	l1690
  1419  063C  3A01               	xorlw	1	; case 67
  1420  063D  1903               	skipnz
  1421  063E  2E43               	goto	l1690
  1422  063F  3A07               	xorlw	7	; case 68
  1423  0640  1903               	skipnz
  1424  0641  2DDE               	goto	l1668
  1425  0642  2DF0               	goto	l1678
  1426  0643                     l1690:	
  1427                           
  1428                           ;main.c: 126:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1429  0643  3003               	movlw	3
  1430  0644  1283               	bcf	3,5	;RP0=0, select bank0
  1431  0645  1303               	bcf	3,6	;RP1=0, select bank0
  1432  0646  00BB               	movwf	??_configurarDerecha+1
  1433  0647  3097               	movlw	151
  1434  0648  00BA               	movwf	??_configurarDerecha
  1435  0649                     u1397:	
  1436  0649  0BBA               	decfsz	??_configurarDerecha,f
  1437  064A  2E49               	goto	u1397
  1438  064B  0BBB               	decfsz	??_configurarDerecha+1,f
  1439  064C  2E49               	goto	u1397
  1440  064D  2DB2               	goto	l1662
  1441  064E                     __end_of_configurarDerecha:	
  1442                           
  1443                           	psect	text3
  1444  016C                     __ptext3:	
  1445 ;; *************** function _StopMotor *****************
  1446 ;; Defined at:
  1447 ;;		line 78 in file "main.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;		None
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;		None
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  2   46[None  ] int 
  1454 ;; Registers used:
  1455 ;;		None
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         0       0       0       0       0
  1462 ;;      Locals:         0       0       0       0       0
  1463 ;;      Temps:          0       0       0       0       0
  1464 ;;      Totals:         0       0       0       0       0
  1465 ;;Total ram usage:        0 bytes
  1466 ;; Hardware stack levels used:    1
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_main
  1471 ;;		_configurarDerecha
  1472 ;;		_configurarIzquierda
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           
  1477                           ;psect for function _StopMotor
  1478  016C                     _StopMotor:	
  1479                           
  1480                           ;main.c: 79:     RC1 = 0;
  1481                           
  1482                           ;incstack = 0
  1483                           ; Regs used in _StopMotor: []
  1484  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1485  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1486  016E  1087               	bcf	7,1	;volatile
  1487                           
  1488                           ;main.c: 80:     RC0 = 0;
  1489  016F  1007               	bcf	7,0	;volatile
  1490                           
  1491                           ;main.c: 81:     return 0;;	Return value of _StopMotor is never used
  1492  0170  0008               	return
  1493  0171                     __end_of_StopMotor:	
  1494                           
  1495                           	psect	text4
  1496  017C                     __ptext4:	
  1497 ;; *************** function _RunMotor *****************
  1498 ;; Defined at:
  1499 ;;		line 70 in file "main.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;		None
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  2   52[None  ] int 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2, status,0
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1513 ;;      Params:         0       0       0       0       0
  1514 ;;      Locals:         0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0
  1516 ;;      Totals:         0       0       0       0       0
  1517 ;;Total ram usage:        0 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; This function calls:
  1520 ;;		Nothing
  1521 ;; This function is called by:
  1522 ;;		_main
  1523 ;;		_configurarDerecha
  1524 ;;		_configurarIzquierda
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           
  1529                           ;psect for function _RunMotor
  1530  017C                     _RunMotor:	
  1531                           
  1532                           ;main.c: 71:     if (CmAntiHorario != 0 && CmHorario != 0) {
  1533                           
  1534                           ;incstack = 0
  1535                           ; Regs used in _RunMotor: [wreg+status,2+status,0]
  1536  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1537  017D  1303               	bcf	3,6	;RP1=0, select bank0
  1538  017E  0842               	movf	_CmAntiHorario,w
  1539  017F  0443               	iorwf	_CmAntiHorario+1,w
  1540  0180  1903               	btfsc	3,2
  1541  0181  0008               	return
  1542  0182  0844               	movf	_CmHorario,w
  1543  0183  0445               	iorwf	_CmHorario+1,w
  1544  0184  1903               	btfsc	3,2
  1545  0185  0008               	return
  1546                           
  1547                           ;main.c: 72:         RC0 = 1;
  1548  0186  1407               	bsf	7,0	;volatile
  1549                           
  1550                           ;main.c: 73:         RC1 = 0;
  1551  0187  1087               	bcf	7,1	;volatile
  1552  0188  0008               	return
  1553  0189                     __end_of_RunMotor:	
  1554                           
  1555                           	psect	text5
  1556  045B                     __ptext5:	
  1557 ;; *************** function _KeyPadGetKey *****************
  1558 ;; Defined at:
  1559 ;;		line 16 in file "./KeyPad.h"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;		None
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  row             1    5[COMMON] unsigned char 
  1564 ;;  key             1    4[COMMON] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  2    0[COMMON] int 
  1567 ;; Registers used:
  1568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1574 ;;      Params:         2       0       0       0       0
  1575 ;;      Locals:         2       0       0       0       0
  1576 ;;      Temps:          2       0       0       0       0
  1577 ;;      Totals:         6       0       0       0       0
  1578 ;;Total ram usage:        6 bytes
  1579 ;; Hardware stack levels used:    2
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;;		_configurarDerecha
  1585 ;;		_configurarIzquierda
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           
  1590                           ;psect for function _KeyPadGetKey
  1591  045B                     _KeyPadGetKey:	
  1592                           
  1593                           ;./KeyPad.h: 18:     char key = 0, row;
  1594                           
  1595                           ;incstack = 0
  1596                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  1597  045B  01F4               	clrf	KeyPadGetKey@key
  1598                           
  1599                           ;./KeyPad.h: 20:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  1600  045C  01F5               	clrf	KeyPadGetKey@row
  1601  045D  0AF5               	incf	KeyPadGetKey@row,f
  1602  045E                     l116:	
  1603                           
  1604                           ;./KeyPad.h: 21:         {;./KeyPad.h: 22:             RA0 = (row & 0x0001) >> 0;
  1605  045E  1C75               	btfss	KeyPadGetKey@row,0
  1606  045F  2C64               	goto	u1050
  1607  0460  1283               	bcf	3,5	;RP0=0, select bank0
  1608  0461  1303               	bcf	3,6	;RP1=0, select bank0
  1609  0462  1405               	bsf	5,0	;volatile
  1610  0463  2C67               	goto	l1560
  1611  0464                     u1050:	
  1612  0464  1283               	bcf	3,5	;RP0=0, select bank0
  1613  0465  1303               	bcf	3,6	;RP1=0, select bank0
  1614  0466  1005               	bcf	5,0	;volatile
  1615  0467                     l1560:	
  1616                           
  1617                           ;./KeyPad.h: 23:             RA1 = (row & 0x0002) >> 1;
  1618  0467  0875               	movf	KeyPadGetKey@row,w
  1619  0468  00F2               	movwf	??_KeyPadGetKey
  1620  0469  3001               	movlw	1
  1621  046A                     u1075:	
  1622  046A  1003               	clrc
  1623  046B  0CF2               	rrf	??_KeyPadGetKey,f
  1624  046C  3EFF               	addlw	-1
  1625  046D  1D03               	skipz
  1626  046E  2C6A               	goto	u1075
  1627  046F  1C72               	btfss	??_KeyPadGetKey,0
  1628  0470  2C75               	goto	u1080
  1629  0471  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0472  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0473  1485               	bsf	5,1	;volatile
  1632  0474  2C78               	goto	u1094
  1633  0475                     u1080:	
  1634  0475  1283               	bcf	3,5	;RP0=0, select bank0
  1635  0476  1303               	bcf	3,6	;RP1=0, select bank0
  1636  0477  1085               	bcf	5,1	;volatile
  1637  0478                     u1094:	
  1638                           
  1639                           ;./KeyPad.h: 24:             RA2 = (row & 0x0004) >> 2;
  1640  0478  0875               	movf	KeyPadGetKey@row,w
  1641  0479  00F2               	movwf	??_KeyPadGetKey
  1642  047A  3002               	movlw	2
  1643  047B                     u1105:	
  1644  047B  1003               	clrc
  1645  047C  0CF2               	rrf	??_KeyPadGetKey,f
  1646  047D  3EFF               	addlw	-1
  1647  047E  1D03               	skipz
  1648  047F  2C7B               	goto	u1105
  1649  0480  1C72               	btfss	??_KeyPadGetKey,0
  1650  0481  2C86               	goto	u1110
  1651  0482  1283               	bcf	3,5	;RP0=0, select bank0
  1652  0483  1303               	bcf	3,6	;RP1=0, select bank0
  1653  0484  1505               	bsf	5,2	;volatile
  1654  0485  2C89               	goto	u1124
  1655  0486                     u1110:	
  1656  0486  1283               	bcf	3,5	;RP0=0, select bank0
  1657  0487  1303               	bcf	3,6	;RP1=0, select bank0
  1658  0488  1105               	bcf	5,2	;volatile
  1659  0489                     u1124:	
  1660                           
  1661                           ;./KeyPad.h: 25:             RA3 = (row & 0x0008) >> 3;
  1662  0489  0875               	movf	KeyPadGetKey@row,w
  1663  048A  00F2               	movwf	??_KeyPadGetKey
  1664  048B  3003               	movlw	3
  1665  048C                     u1135:	
  1666  048C  1003               	clrc
  1667  048D  0CF2               	rrf	??_KeyPadGetKey,f
  1668  048E  3EFF               	addlw	-1
  1669  048F  1D03               	skipz
  1670  0490  2C8C               	goto	u1135
  1671  0491  1C72               	btfss	??_KeyPadGetKey,0
  1672  0492  2C97               	goto	u1140
  1673  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0494  1303               	bcf	3,6	;RP1=0, select bank0
  1675  0495  1585               	bsf	5,3	;volatile
  1676  0496  2C9A               	goto	l1562
  1677  0497                     u1140:	
  1678  0497  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0498  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0499  1185               	bcf	5,3	;volatile
  1681  049A                     l1562:	
  1682                           
  1683                           ;./KeyPad.h: 26:             _delay((unsigned long)((1)*(8000000/4000.0)));
  1684  049A  3003               	movlw	3
  1685  049B  00F3               	movwf	??_KeyPadGetKey+1
  1686  049C  3097               	movlw	151
  1687  049D  00F2               	movwf	??_KeyPadGetKey
  1688  049E                     u1407:	
  1689  049E  0BF2               	decfsz	??_KeyPadGetKey,f
  1690  049F  2C9E               	goto	u1407
  1691  04A0  0BF3               	decfsz	??_KeyPadGetKey+1,f
  1692  04A1  2C9E               	goto	u1407
  1693  04A2  2CA3               	nop2
  1694                           
  1695                           ;./KeyPad.h: 27:         };./KeyPad.h: 29:         if (RA4)break;
  1696  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1697  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1698  04A5  1A05               	btfsc	5,4	;volatile
  1699  04A6  2CC3               	goto	l117
  1700                           
  1701                           ;./KeyPad.h: 30:         key++;
  1702  04A7  3001               	movlw	1
  1703  04A8  00F2               	movwf	??_KeyPadGetKey
  1704  04A9  0872               	movf	??_KeyPadGetKey,w
  1705  04AA  07F4               	addwf	KeyPadGetKey@key,f
  1706                           
  1707                           ;./KeyPad.h: 31:         if (RA5)break;
  1708  04AB  1A85               	btfsc	5,5	;volatile
  1709  04AC  2CC3               	goto	l117
  1710                           
  1711                           ;./KeyPad.h: 32:         key++;
  1712  04AD  3001               	movlw	1
  1713  04AE  00F2               	movwf	??_KeyPadGetKey
  1714  04AF  0872               	movf	??_KeyPadGetKey,w
  1715  04B0  07F4               	addwf	KeyPadGetKey@key,f
  1716                           
  1717                           ;./KeyPad.h: 33:         if (RA6)break;
  1718  04B1  1B05               	btfsc	5,6	;volatile
  1719  04B2  2CC3               	goto	l117
  1720                           
  1721                           ;./KeyPad.h: 34:         key++;
  1722  04B3  3001               	movlw	1
  1723  04B4  00F2               	movwf	??_KeyPadGetKey
  1724  04B5  0872               	movf	??_KeyPadGetKey,w
  1725  04B6  07F4               	addwf	KeyPadGetKey@key,f
  1726                           
  1727                           ;./KeyPad.h: 35:         if (RA7)break;
  1728  04B7  1B85               	btfsc	5,7	;volatile
  1729  04B8  2CC3               	goto	l117
  1730                           
  1731                           ;./KeyPad.h: 36:         key++;
  1732  04B9  3001               	movlw	1
  1733  04BA  00F2               	movwf	??_KeyPadGetKey
  1734  04BB  0872               	movf	??_KeyPadGetKey,w
  1735  04BC  07F4               	addwf	KeyPadGetKey@key,f
  1736                           
  1737                           ;./KeyPad.h: 37:     }
  1738  04BD  1003               	clrc
  1739  04BE  0DF5               	rlf	KeyPadGetKey@row,f
  1740  04BF  3010               	movlw	16
  1741  04C0  0275               	subwf	KeyPadGetKey@row,w
  1742  04C1  1C03               	skipc
  1743  04C2  2C5E               	goto	l116
  1744  04C3                     l117:	
  1745                           
  1746                           ;./KeyPad.h: 38:     RA0 = 0;
  1747  04C3  1005               	bcf	5,0	;volatile
  1748                           
  1749                           ;./KeyPad.h: 39:     RA1 = 0;
  1750  04C4  1085               	bcf	5,1	;volatile
  1751                           
  1752                           ;./KeyPad.h: 40:     RA2 = 0;
  1753  04C5  1105               	bcf	5,2	;volatile
  1754                           
  1755                           ;./KeyPad.h: 41:     RA3 = 0;
  1756  04C6  1185               	bcf	5,3	;volatile
  1757                           
  1758                           ;./KeyPad.h: 42:     if (key != old_key) {
  1759  04C7  0874               	movf	KeyPadGetKey@key,w
  1760  04C8  0647               	xorwf	_old_key,w
  1761  04C9  1903               	skipnz
  1762  04CA  2CDF               	goto	l1602
  1763                           
  1764                           ;./KeyPad.h: 43:         old_key = key;
  1765  04CB  0874               	movf	KeyPadGetKey@key,w
  1766  04CC  00F2               	movwf	??_KeyPadGetKey
  1767  04CD  0872               	movf	??_KeyPadGetKey,w
  1768  04CE  00C7               	movwf	_old_key
  1769                           
  1770                           ;./KeyPad.h: 44:         return keyPadMatrix[ key ];
  1771  04CF  0874               	movf	KeyPadGetKey@key,w
  1772  04D0  00F2               	movwf	??_KeyPadGetKey
  1773  04D1  0772               	addwf	??_KeyPadGetKey,w
  1774  04D2  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  1775  04D3  0084               	movwf	4
  1776  04D4  120A  118A  200D  120A  118A  	fcall	stringdir
  1777  04D9  00F0               	movwf	?_KeyPadGetKey
  1778  04DA  120A  118A  200D   	fcall	stringdir
  1779  04DD  00F1               	movwf	?_KeyPadGetKey+1
  1780  04DE  0008               	return
  1781  04DF                     l1602:	
  1782                           
  1783                           ;./KeyPad.h: 46:         return keyPadMatrix[ 0x10 ];
  1784  04DF  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1785  04E0  0084               	movwf	4
  1786  04E1  120A  118A  200D  120A  118A  	fcall	stringdir
  1787  04E6  00F0               	movwf	?_KeyPadGetKey
  1788  04E7  120A  118A  200D   	fcall	stringdir
  1789  04EA  00F1               	movwf	?_KeyPadGetKey+1
  1790  04EB  0008               	return
  1791  04EC                     __end_of_KeyPadGetKey:	
  1792                           
  1793                           	psect	text6
  1794  0189                     __ptext6:	
  1795 ;; *************** function _PinsInit *****************
  1796 ;; Defined at:
  1797 ;;		line 50 in file "./Config.h"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1811 ;;      Params:         0       0       0       0       0
  1812 ;;      Locals:         0       0       0       0       0
  1813 ;;      Temps:          0       0       0       0       0
  1814 ;;      Totals:         0       0       0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; This function calls:
  1818 ;;		Nothing
  1819 ;; This function is called by:
  1820 ;;		_main
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           
  1825                           ;psect for function _PinsInit
  1826  0189                     _PinsInit:	
  1827                           
  1828                           ;incstack = 0
  1829                           ; Regs used in _PinsInit: [wreg+status,2]
  1830  0189  1683               	bsf	3,5	;RP0=1, select bank3
  1831  018A  1703               	bsf	3,6	;RP1=1, select bank3
  1832  018B  0188               	clrf	8	;volatile
  1833  018C  0189               	clrf	9	;volatile
  1834  018D  3001               	movlw	1
  1835  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1836  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1837  0190  0086               	movwf	6	;volatile
  1838  0191  0187               	clrf	7	;volatile
  1839  0192  30F0               	movlw	240
  1840  0193  0085               	movwf	5	;volatile
  1841  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1842  0195  1303               	bcf	3,6	;RP1=0, select bank0
  1843  0196  0185               	clrf	5	;volatile
  1844  0197  0008               	return
  1845  0198                     __end_of_PinsInit:	
  1846                           
  1847                           	psect	text7
  1848  0379                     __ptext7:	
  1849 ;; *************** function _Lcd_Init *****************
  1850 ;; Defined at:
  1851 ;;		line 57 in file "./lcd.h"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1865 ;;      Params:         0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0
  1867 ;;      Temps:          2       0       0       0       0
  1868 ;;      Totals:         2       0       0       0       0
  1869 ;;Total ram usage:        2 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    2
  1872 ;; This function calls:
  1873 ;;		_Lcd_Cmd
  1874 ;;		_Lcd_Port
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _Lcd_Init
  1882  0379                     _Lcd_Init:	
  1883                           
  1884                           ;./lcd.h: 58:     Lcd_Port(0x00);
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1888  0379  3000               	movlw	0
  1889  037A  120A  118A  21B0  120A  118A  	fcall	_Lcd_Port
  1890                           
  1891                           ;./lcd.h: 59:     _delay((unsigned long)((20)*(8000000/4000.0)));
  1892  037F  3034               	movlw	52
  1893  0380  00F5               	movwf	??_Lcd_Init+1
  1894  0381  30F1               	movlw	241
  1895  0382  00F4               	movwf	??_Lcd_Init
  1896  0383                     u1417:	
  1897  0383  0BF4               	decfsz	??_Lcd_Init,f
  1898  0384  2B83               	goto	u1417
  1899  0385  0BF5               	decfsz	??_Lcd_Init+1,f
  1900  0386  2B83               	goto	u1417
  1901  0387  2B88               	nop2
  1902                           
  1903                           ;./lcd.h: 60:     Lcd_Cmd(0x03);
  1904  0388  3003               	movlw	3
  1905  0389  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1906                           
  1907                           ;./lcd.h: 61:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1908  038E  300D               	movlw	13
  1909  038F  00F5               	movwf	??_Lcd_Init+1
  1910  0390  30FB               	movlw	251
  1911  0391  00F4               	movwf	??_Lcd_Init
  1912  0392                     u1427:	
  1913  0392  0BF4               	decfsz	??_Lcd_Init,f
  1914  0393  2B92               	goto	u1427
  1915  0394  0BF5               	decfsz	??_Lcd_Init+1,f
  1916  0395  2B92               	goto	u1427
  1917  0396  2B97               	nop2
  1918                           
  1919                           ;./lcd.h: 62:     Lcd_Cmd(0x03);
  1920  0397  3003               	movlw	3
  1921  0398  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1922                           
  1923                           ;./lcd.h: 63:     _delay((unsigned long)((11)*(8000000/4000.0)));
  1924  039D  301D               	movlw	29
  1925  039E  00F5               	movwf	??_Lcd_Init+1
  1926  039F  3091               	movlw	145
  1927  03A0  00F4               	movwf	??_Lcd_Init
  1928  03A1                     u1437:	
  1929  03A1  0BF4               	decfsz	??_Lcd_Init,f
  1930  03A2  2BA1               	goto	u1437
  1931  03A3  0BF5               	decfsz	??_Lcd_Init+1,f
  1932  03A4  2BA1               	goto	u1437
  1933                           
  1934                           ;./lcd.h: 64:     Lcd_Cmd(0x03);
  1935  03A5  3003               	movlw	3
  1936  03A6  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1937                           
  1938                           ;./lcd.h: 66:     Lcd_Cmd(0x02);
  1939  03AB  3002               	movlw	2
  1940  03AC  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1941                           
  1942                           ;./lcd.h: 67:     Lcd_Cmd(0x02);
  1943  03B1  3002               	movlw	2
  1944  03B2  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1945                           
  1946                           ;./lcd.h: 68:     Lcd_Cmd(0x08);
  1947  03B7  3008               	movlw	8
  1948  03B8  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1949                           
  1950                           ;./lcd.h: 69:     Lcd_Cmd(0x00);
  1951  03BD  3000               	movlw	0
  1952  03BE  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1953                           
  1954                           ;./lcd.h: 70:     Lcd_Cmd(0x0C);
  1955  03C3  300C               	movlw	12
  1956  03C4  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1957                           
  1958                           ;./lcd.h: 71:     Lcd_Cmd(0x00);
  1959  03C9  3000               	movlw	0
  1960  03CA  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  1961                           
  1962                           ;./lcd.h: 72:     Lcd_Cmd(0x06);
  1963  03CF  3006               	movlw	6
  1964  03D0  120A  118A  21CA   	fcall	_Lcd_Cmd
  1965  03D3  0008               	return
  1966  03D4                     __end_of_Lcd_Init:	
  1967                           
  1968                           	psect	text8
  1969  04EC                     __ptext8:	
  1970 ;; *************** function _Encoder *****************
  1971 ;; Defined at:
  1972 ;;		line 188 in file "main.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  2   56[None  ] int 
  1979 ;; Registers used:
  1980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1986 ;;      Params:         0       0       0       0       0
  1987 ;;      Locals:         0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0
  1989 ;;      Totals:         0       0       0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    4
  1993 ;; This function calls:
  1994 ;;		_Lcd_Clear
  1995 ;;		_Lcd_Set_Cursor
  1996 ;;		_Lcd_Write_Integer
  1997 ;;		_Lcd_Write_String
  1998 ;;		_VerificarInversionGiro
  1999 ;;		___wmul
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           
  2006                           ;psect for function _Encoder
  2007  04EC                     _Encoder:	
  2008                           
  2009                           ;main.c: 189:     LastState = 1;
  2010                           
  2011                           ;incstack = 0
  2012                           ; Regs used in _Encoder: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2013  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2014  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2015  04EE  01C6               	clrf	_LastState
  2016  04EF  0AC6               	incf	_LastState,f
  2017                           
  2018                           ;main.c: 190:     Grados++;
  2019  04F0  3001               	movlw	1
  2020  04F1  07CB               	addwf	_Grados,f
  2021  04F2  1803               	skipnc
  2022  04F3  0ACC               	incf	_Grados+1,f
  2023  04F4  3000               	movlw	0
  2024  04F5  07CC               	addwf	_Grados+1,f
  2025                           
  2026                           ;main.c: 191:     VerificarInversionGiro();
  2027  04F6  120A  118A  22E9  120A  118A  	fcall	_VerificarInversionGiro
  2028                           
  2029                           ;main.c: 193:     if (RC0) {
  2030  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2031  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2032  04FD  1C07               	btfss	7,0	;volatile
  2033  04FE  2D49               	goto	l1754
  2034                           
  2035                           ;main.c: 194:         Lcd_Clear();
  2036  04FF  120A  118A  2171  120A  118A  	fcall	_Lcd_Clear
  2037                           
  2038                           ;main.c: 195:         Lcd_Set_Cursor(1, 1);
  2039  0504  01F4               	clrf	Lcd_Set_Cursor@b
  2040  0505  0AF4               	incf	Lcd_Set_Cursor@b,f
  2041  0506  3001               	movlw	1
  2042  0507  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  2043                           
  2044                           ;main.c: 196:         Lcd_Write_String("Dir: Horario");
  2045  050C  3062               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2046  050D  00F5               	movwf	Lcd_Write_String@a
  2047  050E  3080               	movlw	128
  2048  050F  00F6               	movwf	Lcd_Write_String@a+1
  2049  0510  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  2050                           
  2051                           ;main.c: 197:         Lcd_Set_Cursor(2, 1);
  2052  0515  01F4               	clrf	Lcd_Set_Cursor@b
  2053  0516  0AF4               	incf	Lcd_Set_Cursor@b,f
  2054  0517  3002               	movlw	2
  2055  0518  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  2056                           
  2057                           ;main.c: 198:         Lcd_Write_Integer(Grados * (35/360));
  2058  051D  1283               	bcf	3,5	;RP0=0, select bank0
  2059  051E  1303               	bcf	3,6	;RP1=0, select bank0
  2060  051F  084C               	movf	_Grados+1,w
  2061  0520  00F1               	movwf	___wmul@multiplier+1
  2062  0521  084B               	movf	_Grados,w
  2063  0522  00F0               	movwf	___wmul@multiplier
  2064  0523  3000               	movlw	0
  2065  0524  00F2               	movwf	___wmul@multiplicand
  2066  0525  00F3               	movwf	___wmul@multiplicand+1
  2067  0526  120A  118A  21E4  120A  118A  	fcall	___wmul
  2068  052B  0871               	movf	?___wmul+1,w
  2069  052C  1283               	bcf	3,5	;RP0=0, select bank0
  2070  052D  1303               	bcf	3,6	;RP1=0, select bank0
  2071  052E  00AE               	movwf	Lcd_Write_Integer@a+1
  2072  052F  0870               	movf	?___wmul,w
  2073  0530  00AD               	movwf	Lcd_Write_Integer@a
  2074  0531  120A  118A  2198  120A  118A  	fcall	_Lcd_Write_Integer
  2075                           
  2076                           ;main.c: 199:         Lcd_Write_String(" Cm de: ");
  2077  0536  306F               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2078  0537  00F5               	movwf	Lcd_Write_String@a
  2079  0538  3080               	movlw	128
  2080  0539  00F6               	movwf	Lcd_Write_String@a+1
  2081  053A  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  2082                           
  2083                           ;main.c: 200:         Lcd_Write_Integer(CmHorario);
  2084  053F  1283               	bcf	3,5	;RP0=0, select bank0
  2085  0540  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0541  0845               	movf	_CmHorario+1,w
  2087  0542  00AE               	movwf	Lcd_Write_Integer@a+1
  2088  0543  0844               	movf	_CmHorario,w
  2089  0544  00AD               	movwf	Lcd_Write_Integer@a
  2090  0545  120A  118A  2198   	fcall	_Lcd_Write_Integer
  2091                           
  2092                           ;main.c: 201:     } else {
  2093  0548  0008               	return
  2094  0549                     l1754:	
  2095                           
  2096                           ;main.c: 202:         Lcd_Clear();
  2097  0549  120A  118A  2171  120A  118A  	fcall	_Lcd_Clear
  2098                           
  2099                           ;main.c: 203:         Lcd_Set_Cursor(1, 1);
  2100  054E  01F4               	clrf	Lcd_Set_Cursor@b
  2101  054F  0AF4               	incf	Lcd_Set_Cursor@b,f
  2102  0550  3001               	movlw	1
  2103  0551  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  2104                           
  2105                           ;main.c: 204:         Lcd_Write_String("Dir: AntiHorario");
  2106  0556  3051               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2107  0557  00F5               	movwf	Lcd_Write_String@a
  2108  0558  3080               	movlw	128
  2109  0559  00F6               	movwf	Lcd_Write_String@a+1
  2110  055A  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  2111                           
  2112                           ;main.c: 205:         Lcd_Set_Cursor(2, 1);
  2113  055F  01F4               	clrf	Lcd_Set_Cursor@b
  2114  0560  0AF4               	incf	Lcd_Set_Cursor@b,f
  2115  0561  3002               	movlw	2
  2116  0562  120A  118A  232F  120A  118A  	fcall	_Lcd_Set_Cursor
  2117                           
  2118                           ;main.c: 206:         Lcd_Write_Integer(Grados * (35/360));
  2119  0567  1283               	bcf	3,5	;RP0=0, select bank0
  2120  0568  1303               	bcf	3,6	;RP1=0, select bank0
  2121  0569  084C               	movf	_Grados+1,w
  2122  056A  00F1               	movwf	___wmul@multiplier+1
  2123  056B  084B               	movf	_Grados,w
  2124  056C  00F0               	movwf	___wmul@multiplier
  2125  056D  3000               	movlw	0
  2126  056E  00F2               	movwf	___wmul@multiplicand
  2127  056F  00F3               	movwf	___wmul@multiplicand+1
  2128  0570  120A  118A  21E4  120A  118A  	fcall	___wmul
  2129  0575  0871               	movf	?___wmul+1,w
  2130  0576  1283               	bcf	3,5	;RP0=0, select bank0
  2131  0577  1303               	bcf	3,6	;RP1=0, select bank0
  2132  0578  00AE               	movwf	Lcd_Write_Integer@a+1
  2133  0579  0870               	movf	?___wmul,w
  2134  057A  00AD               	movwf	Lcd_Write_Integer@a
  2135  057B  120A  118A  2198  120A  118A  	fcall	_Lcd_Write_Integer
  2136                           
  2137                           ;main.c: 207:         Lcd_Write_String(" Cm de: ");
  2138  0580  306F               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2139  0581  00F5               	movwf	Lcd_Write_String@a
  2140  0582  3080               	movlw	128
  2141  0583  00F6               	movwf	Lcd_Write_String@a+1
  2142  0584  120A  118A  22AC  120A  118A  	fcall	_Lcd_Write_String
  2143                           
  2144                           ;main.c: 208:         Lcd_Write_Integer(CmAntiHorario);
  2145  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2146  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2147  058B  0843               	movf	_CmAntiHorario+1,w
  2148  058C  00AE               	movwf	Lcd_Write_Integer@a+1
  2149  058D  0842               	movf	_CmAntiHorario,w
  2150  058E  00AD               	movwf	Lcd_Write_Integer@a
  2151  058F  120A  118A  2198   	fcall	_Lcd_Write_Integer
  2152  0592  0008               	return
  2153  0593                     __end_of_Encoder:	
  2154                           
  2155                           	psect	text9
  2156  02E9                     __ptext9:	
  2157 ;; *************** function _VerificarInversionGiro *****************
  2158 ;; Defined at:
  2159 ;;		line 175 in file "main.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;		None
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;		None
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  2  199[None  ] int 
  2166 ;; Registers used:
  2167 ;;		wreg, status,2, status,0, pclath, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2173 ;;      Params:         0       0       0       0       0
  2174 ;;      Locals:         0       0       0       0       0
  2175 ;;      Temps:          1       0       0       0       0
  2176 ;;      Totals:         1       0       0       0       0
  2177 ;;Total ram usage:        1 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    1
  2180 ;; This function calls:
  2181 ;;		___wmul
  2182 ;; This function is called by:
  2183 ;;		_Encoder
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           
  2188                           ;psect for function _VerificarInversionGiro
  2189  02E9                     _VerificarInversionGiro:	
  2190                           
  2191                           ;main.c: 176:     if (RC0 && (Grados * (35/360) >= CmHorario)) {
  2192                           
  2193                           ;incstack = 0
  2194                           ; Regs used in _VerificarInversionGiro: [wreg+status,2+status,0+pclath+cstack]
  2195  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  2196  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  2197  02EB  1C07               	btfss	7,0	;volatile
  2198  02EC  2B10               	goto	l200
  2199  02ED  084C               	movf	_Grados+1,w
  2200  02EE  00F1               	movwf	___wmul@multiplier+1
  2201  02EF  084B               	movf	_Grados,w
  2202  02F0  00F0               	movwf	___wmul@multiplier
  2203  02F1  3000               	movlw	0
  2204  02F2  00F2               	movwf	___wmul@multiplicand
  2205  02F3  00F3               	movwf	___wmul@multiplicand+1
  2206  02F4  120A  118A  21E4  120A  118A  	fcall	___wmul
  2207  02F9  0871               	movf	?___wmul+1,w
  2208  02FA  3A80               	xorlw	128
  2209  02FB  00F6               	movwf	??_VerificarInversionGiro
  2210  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2211  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  2212  02FE  0845               	movf	_CmHorario+1,w
  2213  02FF  3A80               	xorlw	128
  2214  0300  0276               	subwf	??_VerificarInversionGiro,w
  2215  0301  1D03               	skipz
  2216  0302  2B05               	goto	u1255
  2217  0303  0844               	movf	_CmHorario,w
  2218  0304  0270               	subwf	?___wmul,w
  2219  0305                     u1255:	
  2220  0305  1C03               	skipc
  2221  0306  2B10               	goto	l200
  2222  0307                     l1618:	
  2223                           
  2224                           ;main.c: 177:         Grados = 0;
  2225  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2226  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2227  0309  01CB               	clrf	_Grados
  2228  030A  01CC               	clrf	_Grados+1
  2229                           
  2230                           ;main.c: 178:         RC0 = !RC0;
  2231  030B  3001               	movlw	1
  2232  030C  0687               	xorwf	7,f
  2233                           
  2234                           ;main.c: 179:         RC1 = !RC1;
  2235  030D  3002               	movlw	2
  2236  030E  0687               	xorwf	7,f
  2237                           
  2238                           ;main.c: 180:     } else if (RC1 && Grados * (35/360) >= CmAntiHorario) {
  2239  030F  0008               	return
  2240  0310                     l200:	
  2241  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2242  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2243  0312  1C87               	btfss	7,1	;volatile
  2244  0313  0008               	return
  2245  0314  084C               	movf	_Grados+1,w
  2246  0315  00F1               	movwf	___wmul@multiplier+1
  2247  0316  084B               	movf	_Grados,w
  2248  0317  00F0               	movwf	___wmul@multiplier
  2249  0318  3000               	movlw	0
  2250  0319  00F2               	movwf	___wmul@multiplicand
  2251  031A  00F3               	movwf	___wmul@multiplicand+1
  2252  031B  120A  118A  21E4  120A  118A  	fcall	___wmul
  2253  0320  0871               	movf	?___wmul+1,w
  2254  0321  3A80               	xorlw	128
  2255  0322  00F6               	movwf	??_VerificarInversionGiro
  2256  0323  1283               	bcf	3,5	;RP0=0, select bank0
  2257  0324  1303               	bcf	3,6	;RP1=0, select bank0
  2258  0325  0843               	movf	_CmAntiHorario+1,w
  2259  0326  3A80               	xorlw	128
  2260  0327  0276               	subwf	??_VerificarInversionGiro,w
  2261  0328  1D03               	skipz
  2262  0329  2B2C               	goto	u1275
  2263  032A  0842               	movf	_CmAntiHorario,w
  2264  032B  0270               	subwf	?___wmul,w
  2265  032C                     u1275:	
  2266  032C  1C03               	skipc
  2267  032D  0008               	return
  2268  032E  2B07               	goto	l1618
  2269  032F                     __end_of_VerificarInversionGiro:	
  2270                           
  2271                           	psect	text10
  2272  01E4                     __ptext10:	
  2273 ;; *************** function ___wmul *****************
  2274 ;; Defined at:
  2275 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  multiplier      2    0[COMMON] unsigned int 
  2278 ;;  multiplicand    2    2[COMMON] unsigned int 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  product         2    4[COMMON] unsigned int 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  2    0[COMMON] unsigned int 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2290 ;;      Params:         4       0       0       0       0
  2291 ;;      Locals:         2       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0
  2293 ;;      Totals:         6       0       0       0       0
  2294 ;;Total ram usage:        6 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		_configurarDerecha
  2300 ;;		_configurarIzquierda
  2301 ;;		_VerificarInversionGiro
  2302 ;;		_Encoder
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           
  2307                           ;psect for function ___wmul
  2308  01E4                     ___wmul:	
  2309                           
  2310                           ;incstack = 0
  2311                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2312  01E4  01F4               	clrf	___wmul@product
  2313  01E5  01F5               	clrf	___wmul@product+1
  2314  01E6                     l1516:	
  2315  01E6  1C70               	btfss	___wmul@multiplier,0
  2316  01E7  29EE               	goto	l322
  2317  01E8  0872               	movf	___wmul@multiplicand,w
  2318  01E9  07F4               	addwf	___wmul@product,f
  2319  01EA  1803               	skipnc
  2320  01EB  0AF5               	incf	___wmul@product+1,f
  2321  01EC  0873               	movf	___wmul@multiplicand+1,w
  2322  01ED  07F5               	addwf	___wmul@product+1,f
  2323  01EE                     l322:	
  2324  01EE  3001               	movlw	1
  2325  01EF                     u985:	
  2326  01EF  1003               	clrc
  2327  01F0  0DF2               	rlf	___wmul@multiplicand,f
  2328  01F1  0DF3               	rlf	___wmul@multiplicand+1,f
  2329  01F2  3EFF               	addlw	-1
  2330  01F3  1D03               	skipz
  2331  01F4  29EF               	goto	u985
  2332  01F5  3001               	movlw	1
  2333  01F6                     u995:	
  2334  01F6  1003               	clrc
  2335  01F7  0CF1               	rrf	___wmul@multiplier+1,f
  2336  01F8  0CF0               	rrf	___wmul@multiplier,f
  2337  01F9  3EFF               	addlw	-1
  2338  01FA  1D03               	skipz
  2339  01FB  29F6               	goto	u995
  2340  01FC  0870               	movf	___wmul@multiplier,w
  2341  01FD  0471               	iorwf	___wmul@multiplier+1,w
  2342  01FE  1D03               	btfss	3,2
  2343  01FF  29E6               	goto	l1516
  2344  0200  0875               	movf	___wmul@product+1,w
  2345  0201  00F1               	movwf	?___wmul+1
  2346  0202  0874               	movf	___wmul@product,w
  2347  0203  00F0               	movwf	?___wmul
  2348  0204  0008               	return
  2349  0205                     __end_of___wmul:	
  2350                           
  2351                           	psect	text11
  2352  0198                     __ptext11:	
  2353 ;; *************** function _Lcd_Write_Integer *****************
  2354 ;; Defined at:
  2355 ;;		line 96 in file "./lcd.h"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  a               2   13[BANK0 ] int 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  Data           10   16[BANK0 ] unsigned char [10]
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2369 ;;      Params:         0       2       0       0       0
  2370 ;;      Locals:         0      10       0       0       0
  2371 ;;      Temps:          0       1       0       0       0
  2372 ;;      Totals:         0      13       0       0       0
  2373 ;;Total ram usage:       13 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    3
  2376 ;; This function calls:
  2377 ;;		_Lcd_Write_String
  2378 ;;		_sprintf
  2379 ;; This function is called by:
  2380 ;;		_configurarDerecha
  2381 ;;		_configurarIzquierda
  2382 ;;		_Encoder
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           
  2387                           ;psect for function _Lcd_Write_Integer
  2388  0198                     _Lcd_Write_Integer:	
  2389                           
  2390                           ;./lcd.h: 97:     char Data[10];;./lcd.h: 98:     sprintf(Data, "%d", a);
  2391                           
  2392                           ;incstack = 0
  2393                           ; Regs used in _Lcd_Write_Integer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2394  0198  307C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2395  0199  1283               	bcf	3,5	;RP0=0, select bank0
  2396  019A  1303               	bcf	3,6	;RP1=0, select bank0
  2397  019B  00AF               	movwf	??_Lcd_Write_Integer
  2398  019C  082F               	movf	??_Lcd_Write_Integer,w
  2399  019D  00A0               	movwf	sprintf@f
  2400  019E  082E               	movf	Lcd_Write_Integer@a+1,w
  2401  019F  00A2               	movwf	?_sprintf+2
  2402  01A0  082D               	movf	Lcd_Write_Integer@a,w
  2403  01A1  00A1               	movwf	?_sprintf+1
  2404  01A2  3030               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  2405  01A3  120A  118A  2709  120A  118A  	fcall	_sprintf
  2406                           
  2407                           ;./lcd.h: 99:     Lcd_Write_String(Data);
  2408  01A8  3030               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  2409  01A9  00F5               	movwf	Lcd_Write_String@a
  2410  01AA  3000               	movlw	0
  2411  01AB  00F6               	movwf	Lcd_Write_String@a+1
  2412  01AC  120A  118A  22AC   	fcall	_Lcd_Write_String
  2413  01AF  0008               	return
  2414  01B0                     __end_of_Lcd_Write_Integer:	
  2415                           
  2416                           	psect	text12
  2417  0709                     __ptext12:	
  2418 ;; *************** function _sprintf *****************
  2419 ;; Defined at:
  2420 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  sp              1    wreg     PTR unsigned char 
  2423 ;;		 -> Lcd_Write_Integer@Data(10), 
  2424 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2425 ;;		 -> STR_1(3), 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  2428 ;;		 -> Lcd_Write_Integer@Data(10), 
  2429 ;;  tmpval          4    0        struct .
  2430 ;;  val             2    9[BANK0 ] unsigned int 
  2431 ;;  cp              2    0        PTR const unsigned char 
  2432 ;;  len             2    0        unsigned int 
  2433 ;;  c               1   12[BANK0 ] unsigned char 
  2434 ;;  prec            1    8[BANK0 ] char 
  2435 ;;  flag            1    7[BANK0 ] unsigned char 
  2436 ;;  ap              1    6[BANK0 ] PTR void [1]
  2437 ;;		 -> ?_sprintf(2), 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  2    0[BANK0 ] int 
  2440 ;; Registers used:
  2441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2447 ;;      Params:         0       3       0       0       0
  2448 ;;      Locals:         0       7       0       0       0
  2449 ;;      Temps:          0       3       0       0       0
  2450 ;;      Totals:         0      13       0       0       0
  2451 ;;Total ram usage:       13 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    1
  2454 ;; This function calls:
  2455 ;;		___lwdiv
  2456 ;;		___lwmod
  2457 ;; This function is called by:
  2458 ;;		_Lcd_Write_Integer
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           
  2463                           ;psect for function _sprintf
  2464  0709                     _sprintf:	
  2465                           
  2466                           ;incstack = 0
  2467                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2468                           ;sprintf@sp stored from wreg
  2469  0709  1283               	bcf	3,5	;RP0=0, select bank0
  2470  070A  1303               	bcf	3,6	;RP1=0, select bank0
  2471  070B  00AB               	movwf	sprintf@sp
  2472                           
  2473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  2474  070C  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2475  070D  00A3               	movwf	??_sprintf
  2476  070E  0823               	movf	??_sprintf,w
  2477  070F  00A6               	movwf	sprintf@ap
  2478  0710                     l1504:	
  2479                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2480                           
  2481                           
  2482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2483  0710  3001               	movlw	1
  2484  0711  07A0               	addwf	sprintf@f,f
  2485  0712  30FF               	movlw	-1
  2486  0713  0720               	addwf	sprintf@f,w
  2487  0714  0084               	movwf	4
  2488  0715  120A  118A  200D  120A  118A  	fcall	stringdir
  2489  071A  00A3               	movwf	??_sprintf
  2490  071B  0823               	movf	??_sprintf,w
  2491  071C  00AC               	movwf	sprintf@c
  2492  071D  082C               	movf	sprintf@c,w
  2493  071E  1903               	btfsc	3,2
  2494  071F  2FDC               	goto	l1506
  2495                           
  2496                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  2497  0720  3025               	movlw	37
  2498  0721  062C               	xorwf	sprintf@c,w
  2499  0722  1903               	btfsc	3,2
  2500  0723  2F30               	goto	l1460
  2501                           
  2502                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  2503  0724  082C               	movf	sprintf@c,w
  2504  0725  00A3               	movwf	??_sprintf
  2505  0726  082B               	movf	sprintf@sp,w
  2506  0727  0084               	movwf	4
  2507  0728  0823               	movf	??_sprintf,w
  2508  0729  1383               	bcf	3,7	;select IRP bank0
  2509  072A  0080               	movwf	0
  2510  072B  3001               	movlw	1
  2511  072C  00A3               	movwf	??_sprintf
  2512  072D  0823               	movf	??_sprintf,w
  2513  072E  07AB               	addwf	sprintf@sp,f
  2514                           
  2515                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  2516  072F  2F10               	goto	l1504
  2517  0730                     l1460:	
  2518                           
  2519                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  2520  0730  01A7               	clrf	sprintf@flag
  2521                           
  2522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  2523  0731  3001               	movlw	1
  2524  0732  07A0               	addwf	sprintf@f,f
  2525  0733  30FF               	movlw	-1
  2526  0734  0720               	addwf	sprintf@f,w
  2527  0735  0084               	movwf	4
  2528  0736  120A  118A  200D  120A  118A  	fcall	stringdir
  2529  073B  00AC               	movwf	sprintf@c
  2530  073C  00A3               	movwf	??_sprintf
  2531  073D  01A4               	clrf	??_sprintf+1
  2532                           
  2533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2534                           ; Switch size 1, requested type "simple"
  2535                           ; Number of cases is 1, Range of values is 0 to 0
  2536                           ; switch strategies available:
  2537                           ; Name         Instructions Cycles
  2538                           ; simple_byte            4     3 (average)
  2539                           ; direct_byte           11     8 (fixed)
  2540                           ; jumptable            260     6 (fixed)
  2541                           ;	Chosen strategy is simple_byte
  2542  073E  0824               	movf	??_sprintf+1,w
  2543  073F  3A00               	xorlw	0	; case 0
  2544  0740  1903               	skipnz
  2545  0741  2F43               	goto	l1890
  2546  0742  2F10               	goto	l1504
  2547  0743                     l1890:	
  2548                           
  2549                           ; Switch size 1, requested type "simple"
  2550                           ; Number of cases is 3, Range of values is 0 to 105
  2551                           ; switch strategies available:
  2552                           ; Name         Instructions Cycles
  2553                           ; simple_byte           10     6 (average)
  2554                           ; jumptable            260     6 (fixed)
  2555                           ;	Chosen strategy is simple_byte
  2556  0743  0823               	movf	??_sprintf,w
  2557  0744  3A00               	xorlw	0	; case 0
  2558  0745  1903               	skipnz
  2559  0746  2FDC               	goto	l1506
  2560  0747  3A64               	xorlw	100	; case 100
  2561  0748  1903               	skipnz
  2562  0749  2F4E               	goto	l1466
  2563  074A  3A0D               	xorlw	13	; case 105
  2564  074B  1903               	skipnz
  2565  074C  2F4E               	goto	l1466
  2566  074D  2F10               	goto	l1504
  2567  074E                     l1466:	
  2568                           
  2569                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2570  074E  0826               	movf	sprintf@ap,w
  2571  074F  0084               	movwf	4
  2572  0750  1383               	bcf	3,7	;select IRP bank0
  2573  0751  0800               	movf	0,w
  2574  0752  00A9               	movwf	sprintf@val
  2575  0753  0A84               	incf	4,f
  2576  0754  0800               	movf	0,w
  2577  0755  00AA               	movwf	sprintf@val+1
  2578  0756  3002               	movlw	2
  2579  0757  00A3               	movwf	??_sprintf
  2580  0758  0823               	movf	??_sprintf,w
  2581  0759  07A6               	addwf	sprintf@ap,f
  2582                           
  2583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  2584  075A  1FAA               	btfss	sprintf@val+1,7
  2585  075B  2F65               	goto	l1476
  2586                           
  2587                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  2588  075C  3003               	movlw	3
  2589  075D  00A3               	movwf	??_sprintf
  2590  075E  0823               	movf	??_sprintf,w
  2591  075F  04A7               	iorwf	sprintf@flag,f
  2592                           
  2593                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  2594  0760  09A9               	comf	sprintf@val,f
  2595  0761  09AA               	comf	sprintf@val+1,f
  2596  0762  0AA9               	incf	sprintf@val,f
  2597  0763  1903               	skipnz
  2598  0764  0AAA               	incf	sprintf@val+1,f
  2599  0765                     l1476:	
  2600                           
  2601                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2602  0765  01AC               	clrf	sprintf@c
  2603  0766  0AAC               	incf	sprintf@c,f
  2604  0767                     l1482:	
  2605                           
  2606                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  2607  0767  082C               	movf	sprintf@c,w
  2608  0768  00A3               	movwf	??_sprintf
  2609  0769  0723               	addwf	??_sprintf,w
  2610  076A  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2611  076B  0084               	movwf	4
  2612  076C  120A  118A  200D  120A  118A  	fcall	stringdir
  2613  0771  00A4               	movwf	??_sprintf+1
  2614  0772  120A  118A  200D  120A  118A  	fcall	stringdir
  2615  0777  00A5               	movwf	??_sprintf+2
  2616  0778  0825               	movf	??_sprintf+2,w
  2617  0779  022A               	subwf	sprintf@val+1,w
  2618  077A  1D03               	skipz
  2619  077B  2F7E               	goto	u925
  2620  077C  0824               	movf	??_sprintf+1,w
  2621  077D  0229               	subwf	sprintf@val,w
  2622  077E                     u925:	
  2623  077E  1C03               	btfss	3,0
  2624  077F  2F88               	goto	l1488
  2625  0780  3001               	movlw	1
  2626  0781  00A3               	movwf	??_sprintf
  2627  0782  0823               	movf	??_sprintf,w
  2628  0783  07AC               	addwf	sprintf@c,f
  2629  0784  3005               	movlw	5
  2630  0785  062C               	xorwf	sprintf@c,w
  2631  0786  1D03               	btfss	3,2
  2632  0787  2F67               	goto	l1482
  2633  0788                     l1488:	
  2634                           
  2635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  2636  0788  0827               	movf	sprintf@flag,w
  2637  0789  3903               	andlw	3
  2638  078A  1903               	btfsc	3,2
  2639  078B  2F97               	goto	l1494
  2640                           
  2641                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  2642  078C  302D               	movlw	45
  2643  078D  00A3               	movwf	??_sprintf
  2644  078E  082B               	movf	sprintf@sp,w
  2645  078F  0084               	movwf	4
  2646  0790  0823               	movf	??_sprintf,w
  2647  0791  1383               	bcf	3,7	;select IRP bank0
  2648  0792  0080               	movwf	0
  2649  0793  3001               	movlw	1
  2650  0794  00A3               	movwf	??_sprintf
  2651  0795  0823               	movf	??_sprintf,w
  2652  0796  07AB               	addwf	sprintf@sp,f
  2653  0797                     l1494:	
  2654                           
  2655                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  2656  0797  082C               	movf	sprintf@c,w
  2657  0798  00A3               	movwf	??_sprintf
  2658  0799  0823               	movf	??_sprintf,w
  2659  079A  00A8               	movwf	sprintf@prec
  2660  079B                     l1502:	
  2661                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2662                           
  2663                           
  2664                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2665  079B  30FF               	movlw	255
  2666  079C  00A3               	movwf	??_sprintf
  2667  079D  0823               	movf	??_sprintf,w
  2668  079E  07A8               	addwf	sprintf@prec,f
  2669  079F  0A28               	incf	sprintf@prec,w
  2670  07A0  1903               	btfsc	3,2
  2671  07A1  2F10               	goto	l1504
  2672                           
  2673                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  2674  07A2  300A               	movlw	10
  2675  07A3  00F8               	movwf	___lwmod@divisor
  2676  07A4  3000               	movlw	0
  2677  07A5  00F9               	movwf	___lwmod@divisor+1
  2678  07A6  0828               	movf	sprintf@prec,w
  2679  07A7  00A3               	movwf	??_sprintf
  2680  07A8  0723               	addwf	??_sprintf,w
  2681  07A9  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2682  07AA  0084               	movwf	4
  2683  07AB  120A  118A  200D  120A  118A  	fcall	stringdir
  2684  07B0  00F0               	movwf	___lwdiv@divisor
  2685  07B1  120A  118A  200D  120A  118A  	fcall	stringdir
  2686  07B6  00F1               	movwf	___lwdiv@divisor+1
  2687  07B7  082A               	movf	sprintf@val+1,w
  2688  07B8  00F3               	movwf	___lwdiv@dividend+1
  2689  07B9  0829               	movf	sprintf@val,w
  2690  07BA  00F2               	movwf	___lwdiv@dividend
  2691  07BB  120A  118A  2270  120A  118A  	fcall	___lwdiv
  2692  07C0  0871               	movf	?___lwdiv+1,w
  2693  07C1  00FB               	movwf	___lwmod@dividend+1
  2694  07C2  0870               	movf	?___lwdiv,w
  2695  07C3  00FA               	movwf	___lwmod@dividend
  2696  07C4  120A  118A  2205  120A  118A  	fcall	___lwmod
  2697  07C9  0878               	movf	?___lwmod,w
  2698  07CA  3E30               	addlw	48
  2699  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  2700  07CC  1303               	bcf	3,6	;RP1=0, select bank0
  2701  07CD  00A4               	movwf	??_sprintf+1
  2702  07CE  0824               	movf	??_sprintf+1,w
  2703  07CF  00AC               	movwf	sprintf@c
  2704                           
  2705                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  2706  07D0  082C               	movf	sprintf@c,w
  2707  07D1  00A3               	movwf	??_sprintf
  2708  07D2  082B               	movf	sprintf@sp,w
  2709  07D3  0084               	movwf	4
  2710  07D4  0823               	movf	??_sprintf,w
  2711  07D5  1383               	bcf	3,7	;select IRP bank0
  2712  07D6  0080               	movwf	0
  2713  07D7  3001               	movlw	1
  2714  07D8  00A3               	movwf	??_sprintf
  2715  07D9  0823               	movf	??_sprintf,w
  2716  07DA  07AB               	addwf	sprintf@sp,f
  2717  07DB  2F9B               	goto	l1502
  2718  07DC                     l1506:	
  2719                           
  2720                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  2721  07DC  082B               	movf	sprintf@sp,w
  2722  07DD  0084               	movwf	4
  2723  07DE  1383               	bcf	3,7	;select IRP bank0
  2724  07DF  0180               	clrf	0
  2725  07E0  0008               	return
  2726  07E1                     __end_of_sprintf:	
  2727                           
  2728                           	psect	text13
  2729  0205                     __ptext13:	
  2730 ;; *************** function ___lwmod *****************
  2731 ;; Defined at:
  2732 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;  divisor         2    8[COMMON] unsigned int 
  2735 ;;  dividend        2   10[COMMON] unsigned int 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  counter         1   13[COMMON] unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  2    8[COMMON] unsigned int 
  2740 ;; Registers used:
  2741 ;;		wreg, status,2, status,0
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2747 ;;      Params:         4       0       0       0       0
  2748 ;;      Locals:         1       0       0       0       0
  2749 ;;      Temps:          1       0       0       0       0
  2750 ;;      Totals:         6       0       0       0       0
  2751 ;;Total ram usage:        6 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; This function calls:
  2754 ;;		Nothing
  2755 ;; This function is called by:
  2756 ;;		_sprintf
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           
  2761                           ;psect for function ___lwmod
  2762  0205                     ___lwmod:	
  2763                           
  2764                           ;incstack = 0
  2765                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2766  0205  0878               	movf	___lwmod@divisor,w
  2767  0206  0479               	iorwf	___lwmod@divisor+1,w
  2768  0207  1903               	btfsc	3,2
  2769  0208  2A32               	goto	l1430
  2770  0209  01FD               	clrf	___lwmod@counter
  2771  020A  0AFD               	incf	___lwmod@counter,f
  2772  020B                     l1420:	
  2773  020B  1BF9               	btfsc	___lwmod@divisor+1,7
  2774  020C  2A19               	goto	l1422
  2775  020D  3001               	movlw	1
  2776  020E                     u825:	
  2777  020E  1003               	clrc
  2778  020F  0DF8               	rlf	___lwmod@divisor,f
  2779  0210  0DF9               	rlf	___lwmod@divisor+1,f
  2780  0211  3EFF               	addlw	-1
  2781  0212  1D03               	skipz
  2782  0213  2A0E               	goto	u825
  2783  0214  3001               	movlw	1
  2784  0215  00FC               	movwf	??___lwmod
  2785  0216  087C               	movf	??___lwmod,w
  2786  0217  07FD               	addwf	___lwmod@counter,f
  2787  0218  2A0B               	goto	l1420
  2788  0219                     l1422:	
  2789  0219  0879               	movf	___lwmod@divisor+1,w
  2790  021A  027B               	subwf	___lwmod@dividend+1,w
  2791  021B  1D03               	skipz
  2792  021C  2A1F               	goto	u845
  2793  021D  0878               	movf	___lwmod@divisor,w
  2794  021E  027A               	subwf	___lwmod@dividend,w
  2795  021F                     u845:	
  2796  021F  1C03               	skipc
  2797  0220  2A27               	goto	l1426
  2798  0221  0878               	movf	___lwmod@divisor,w
  2799  0222  02FA               	subwf	___lwmod@dividend,f
  2800  0223  0879               	movf	___lwmod@divisor+1,w
  2801  0224  1C03               	skipc
  2802  0225  03FB               	decf	___lwmod@dividend+1,f
  2803  0226  02FB               	subwf	___lwmod@dividend+1,f
  2804  0227                     l1426:	
  2805  0227  3001               	movlw	1
  2806  0228                     u855:	
  2807  0228  1003               	clrc
  2808  0229  0CF9               	rrf	___lwmod@divisor+1,f
  2809  022A  0CF8               	rrf	___lwmod@divisor,f
  2810  022B  3EFF               	addlw	-1
  2811  022C  1D03               	skipz
  2812  022D  2A28               	goto	u855
  2813  022E  3001               	movlw	1
  2814  022F  02FD               	subwf	___lwmod@counter,f
  2815  0230  1D03               	btfss	3,2
  2816  0231  2A19               	goto	l1422
  2817  0232                     l1430:	
  2818  0232  087B               	movf	___lwmod@dividend+1,w
  2819  0233  00F9               	movwf	?___lwmod+1
  2820  0234  087A               	movf	___lwmod@dividend,w
  2821  0235  00F8               	movwf	?___lwmod
  2822  0236  0008               	return
  2823  0237                     __end_of___lwmod:	
  2824                           
  2825                           	psect	text14
  2826  0270                     __ptext14:	
  2827 ;; *************** function ___lwdiv *****************
  2828 ;; Defined at:
  2829 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;  divisor         2    0[COMMON] unsigned int 
  2832 ;;  dividend        2    2[COMMON] unsigned int 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  quotient        2    5[COMMON] unsigned int 
  2835 ;;  counter         1    7[COMMON] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  2    0[COMMON] unsigned int 
  2838 ;; Registers used:
  2839 ;;		wreg, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2845 ;;      Params:         4       0       0       0       0
  2846 ;;      Locals:         3       0       0       0       0
  2847 ;;      Temps:          1       0       0       0       0
  2848 ;;      Totals:         8       0       0       0       0
  2849 ;;Total ram usage:        8 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_sprintf
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           
  2859                           ;psect for function ___lwdiv
  2860  0270                     ___lwdiv:	
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2864  0270  01F5               	clrf	___lwdiv@quotient
  2865  0271  01F6               	clrf	___lwdiv@quotient+1
  2866  0272  0870               	movf	___lwdiv@divisor,w
  2867  0273  0471               	iorwf	___lwdiv@divisor+1,w
  2868  0274  1903               	btfsc	3,2
  2869  0275  2AA7               	goto	l1408
  2870  0276  01F7               	clrf	___lwdiv@counter
  2871  0277  0AF7               	incf	___lwdiv@counter,f
  2872  0278                     l1396:	
  2873  0278  1BF1               	btfsc	___lwdiv@divisor+1,7
  2874  0279  2A86               	goto	l1398
  2875  027A  3001               	movlw	1
  2876  027B                     u755:	
  2877  027B  1003               	clrc
  2878  027C  0DF0               	rlf	___lwdiv@divisor,f
  2879  027D  0DF1               	rlf	___lwdiv@divisor+1,f
  2880  027E  3EFF               	addlw	-1
  2881  027F  1D03               	skipz
  2882  0280  2A7B               	goto	u755
  2883  0281  3001               	movlw	1
  2884  0282  00F4               	movwf	??___lwdiv
  2885  0283  0874               	movf	??___lwdiv,w
  2886  0284  07F7               	addwf	___lwdiv@counter,f
  2887  0285  2A78               	goto	l1396
  2888  0286                     l1398:	
  2889  0286  3001               	movlw	1
  2890  0287                     u775:	
  2891  0287  1003               	clrc
  2892  0288  0DF5               	rlf	___lwdiv@quotient,f
  2893  0289  0DF6               	rlf	___lwdiv@quotient+1,f
  2894  028A  3EFF               	addlw	-1
  2895  028B  1D03               	skipz
  2896  028C  2A87               	goto	u775
  2897  028D  0871               	movf	___lwdiv@divisor+1,w
  2898  028E  0273               	subwf	___lwdiv@dividend+1,w
  2899  028F  1D03               	skipz
  2900  0290  2A93               	goto	u785
  2901  0291  0870               	movf	___lwdiv@divisor,w
  2902  0292  0272               	subwf	___lwdiv@dividend,w
  2903  0293                     u785:	
  2904  0293  1C03               	skipc
  2905  0294  2A9C               	goto	l1404
  2906  0295  0870               	movf	___lwdiv@divisor,w
  2907  0296  02F2               	subwf	___lwdiv@dividend,f
  2908  0297  0871               	movf	___lwdiv@divisor+1,w
  2909  0298  1C03               	skipc
  2910  0299  03F3               	decf	___lwdiv@dividend+1,f
  2911  029A  02F3               	subwf	___lwdiv@dividend+1,f
  2912  029B  1475               	bsf	___lwdiv@quotient,0
  2913  029C                     l1404:	
  2914  029C  3001               	movlw	1
  2915  029D                     u795:	
  2916  029D  1003               	clrc
  2917  029E  0CF1               	rrf	___lwdiv@divisor+1,f
  2918  029F  0CF0               	rrf	___lwdiv@divisor,f
  2919  02A0  3EFF               	addlw	-1
  2920  02A1  1D03               	skipz
  2921  02A2  2A9D               	goto	u795
  2922  02A3  3001               	movlw	1
  2923  02A4  02F7               	subwf	___lwdiv@counter,f
  2924  02A5  1D03               	btfss	3,2
  2925  02A6  2A86               	goto	l1398
  2926  02A7                     l1408:	
  2927  02A7  0876               	movf	___lwdiv@quotient+1,w
  2928  02A8  00F1               	movwf	?___lwdiv+1
  2929  02A9  0875               	movf	___lwdiv@quotient,w
  2930  02AA  00F0               	movwf	?___lwdiv
  2931  02AB  0008               	return
  2932  02AC                     __end_of___lwdiv:	
  2933                           
  2934                           	psect	text15
  2935  02AC                     __ptext15:	
  2936 ;; *************** function _Lcd_Write_String *****************
  2937 ;; Defined at:
  2938 ;;		line 90 in file "./lcd.h"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  a               2    5[COMMON] PTR unsigned char 
  2941 ;;		 -> STR_9(9), STR_8(17), STR_7(9), STR_6(13), 
  2942 ;;		 -> STR_5(4), STR_4(19), STR_3(4), STR_2(17), 
  2943 ;;		 -> Lcd_Write_Integer@Data(10), 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  i               2   10[COMMON] int 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2955 ;;      Params:         2       0       0       0       0
  2956 ;;      Locals:         2       0       0       0       0
  2957 ;;      Temps:          3       0       0       0       0
  2958 ;;      Totals:         7       0       0       0       0
  2959 ;;Total ram usage:        7 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    2
  2962 ;; This function calls:
  2963 ;;		_Lcd_Write_Char
  2964 ;; This function is called by:
  2965 ;;		_Lcd_Write_Integer
  2966 ;;		_configurarDerecha
  2967 ;;		_configurarIzquierda
  2968 ;;		_Encoder
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           
  2973                           ;psect for function _Lcd_Write_String
  2974  02AC                     _Lcd_Write_String:	
  2975                           
  2976                           ;./lcd.h: 91:     int i;;./lcd.h: 92:     for (i = 0; a[i] != '\0'; i++)
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2980  02AC  01FA               	clrf	Lcd_Write_String@i
  2981  02AD  01FB               	clrf	Lcd_Write_String@i+1
  2982  02AE                     l1450:	
  2983  02AE  087A               	movf	Lcd_Write_String@i,w
  2984  02AF  0775               	addwf	Lcd_Write_String@a,w
  2985  02B0  00F8               	movwf	??_Lcd_Write_String+1
  2986  02B1  0876               	movf	Lcd_Write_String@a+1,w
  2987  02B2  00F7               	movwf	??_Lcd_Write_String
  2988  02B3  1803               	skipnc
  2989  02B4  0AF7               	incf	??_Lcd_Write_String,f
  2990  02B5  1BFA               	btfsc	Lcd_Write_String@i,7
  2991  02B6  03F7               	decf	??_Lcd_Write_String,f
  2992  02B7  0877               	movf	??_Lcd_Write_String,w
  2993  02B8  00F9               	movwf	??_Lcd_Write_String+2
  2994  02B9  0879               	movf	??_Lcd_Write_String+2,w
  2995  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2996  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2997  02BC  00FF               	movwf	127
  2998  02BD  0878               	movf	??_Lcd_Write_String+1,w
  2999  02BE  0084               	movwf	4
  3000  02BF  120A  118A  2003  120A  118A  	fcall	stringtab
  3001  02C4  3A00               	xorlw	0
  3002  02C5  1903               	btfsc	3,2
  3003  02C6  0008               	return
  3004                           
  3005                           ;./lcd.h: 93:         Lcd_Write_Char(a[i]);
  3006  02C7  087A               	movf	Lcd_Write_String@i,w
  3007  02C8  0775               	addwf	Lcd_Write_String@a,w
  3008  02C9  00F8               	movwf	??_Lcd_Write_String+1
  3009  02CA  0876               	movf	Lcd_Write_String@a+1,w
  3010  02CB  00F7               	movwf	??_Lcd_Write_String
  3011  02CC  1803               	skipnc
  3012  02CD  0AF7               	incf	??_Lcd_Write_String,f
  3013  02CE  1BFA               	btfsc	Lcd_Write_String@i,7
  3014  02CF  03F7               	decf	??_Lcd_Write_String,f
  3015  02D0  0877               	movf	??_Lcd_Write_String,w
  3016  02D1  00F9               	movwf	??_Lcd_Write_String+2
  3017  02D2  0879               	movf	??_Lcd_Write_String+2,w
  3018  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  3019  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  3020  02D5  00FF               	movwf	127
  3021  02D6  0878               	movf	??_Lcd_Write_String+1,w
  3022  02D7  0084               	movwf	4
  3023  02D8  120A  118A  2003  120A  118A  	fcall	stringtab
  3024  02DD  120A  118A  2237  120A  118A  	fcall	_Lcd_Write_Char
  3025  02E2  3001               	movlw	1
  3026  02E3  07FA               	addwf	Lcd_Write_String@i,f
  3027  02E4  1803               	skipnc
  3028  02E5  0AFB               	incf	Lcd_Write_String@i+1,f
  3029  02E6  3000               	movlw	0
  3030  02E7  07FB               	addwf	Lcd_Write_String@i+1,f
  3031  02E8  2AAE               	goto	l1450
  3032  02E9                     __end_of_Lcd_Write_String:	
  3033                           
  3034                           	psect	text16
  3035  0237                     __ptext16:	
  3036 ;; *************** function _Lcd_Write_Char *****************
  3037 ;; Defined at:
  3038 ;;		line 75 in file "./lcd.h"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  a               1    wreg     unsigned char 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  a               1    4[COMMON] unsigned char 
  3043 ;;  y               1    3[COMMON] unsigned char 
  3044 ;;  temp            1    2[COMMON] unsigned char 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2, status,0, pclath, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3054 ;;      Params:         0       0       0       0       0
  3055 ;;      Locals:         3       0       0       0       0
  3056 ;;      Temps:          1       0       0       0       0
  3057 ;;      Totals:         4       0       0       0       0
  3058 ;;Total ram usage:        4 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    1
  3061 ;; This function calls:
  3062 ;;		_Lcd_Port
  3063 ;; This function is called by:
  3064 ;;		_Lcd_Write_String
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           
  3069                           ;psect for function _Lcd_Write_Char
  3070  0237                     _Lcd_Write_Char:	
  3071                           
  3072                           ;incstack = 0
  3073                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3074                           ;Lcd_Write_Char@a stored from wreg
  3075  0237  00F4               	movwf	Lcd_Write_Char@a
  3076                           
  3077                           ;./lcd.h: 76:     char temp, y;;./lcd.h: 77:     temp = a & 0x0F;
  3078  0238  0874               	movf	Lcd_Write_Char@a,w
  3079  0239  390F               	andlw	15
  3080  023A  00F1               	movwf	??_Lcd_Write_Char
  3081  023B  0871               	movf	??_Lcd_Write_Char,w
  3082  023C  00F2               	movwf	Lcd_Write_Char@temp
  3083                           
  3084                           ;./lcd.h: 78:     y = a & 0xF0;
  3085  023D  0874               	movf	Lcd_Write_Char@a,w
  3086  023E  39F0               	andlw	240
  3087  023F  00F1               	movwf	??_Lcd_Write_Char
  3088  0240  0871               	movf	??_Lcd_Write_Char,w
  3089  0241  00F3               	movwf	Lcd_Write_Char@y
  3090                           
  3091                           ;./lcd.h: 79:     RB2 = 1;
  3092  0242  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0243  1303               	bcf	3,6	;RP1=0, select bank0
  3094  0244  1506               	bsf	6,2	;volatile
  3095                           
  3096                           ;./lcd.h: 80:     Lcd_Port(y >> 4);
  3097  0245  0873               	movf	Lcd_Write_Char@y,w
  3098  0246  00F1               	movwf	??_Lcd_Write_Char
  3099  0247  3004               	movlw	4
  3100  0248                     u735:	
  3101  0248  1003               	clrc
  3102  0249  0CF1               	rrf	??_Lcd_Write_Char,f
  3103  024A  3EFF               	addlw	-1
  3104  024B  1D03               	skipz
  3105  024C  2A48               	goto	u735
  3106  024D  0871               	movf	??_Lcd_Write_Char,w
  3107  024E  120A  118A  21B0  120A  118A  	fcall	_Lcd_Port
  3108                           
  3109                           ;./lcd.h: 81:     RB3 = 1;
  3110  0253  1283               	bcf	3,5	;RP0=0, select bank0
  3111  0254  1303               	bcf	3,6	;RP1=0, select bank0
  3112  0255  1586               	bsf	6,3	;volatile
  3113                           
  3114                           ;./lcd.h: 82:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3115  0256  301A               	movlw	26
  3116  0257  00F1               	movwf	??_Lcd_Write_Char
  3117  0258                     u1447:	
  3118  0258  0BF1               	decfsz	??_Lcd_Write_Char,f
  3119  0259  2A58               	goto	u1447
  3120  025A  0000               	nop
  3121                           
  3122                           ;./lcd.h: 83:     RB3 = 0;
  3123  025B  1283               	bcf	3,5	;RP0=0, select bank0
  3124  025C  1303               	bcf	3,6	;RP1=0, select bank0
  3125  025D  1186               	bcf	6,3	;volatile
  3126                           
  3127                           ;./lcd.h: 84:     Lcd_Port(temp);
  3128  025E  0872               	movf	Lcd_Write_Char@temp,w
  3129  025F  120A  118A  21B0  120A  118A  	fcall	_Lcd_Port
  3130                           
  3131                           ;./lcd.h: 85:     RB3 = 1;
  3132  0264  1283               	bcf	3,5	;RP0=0, select bank0
  3133  0265  1303               	bcf	3,6	;RP1=0, select bank0
  3134  0266  1586               	bsf	6,3	;volatile
  3135                           
  3136                           ;./lcd.h: 86:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3137  0267  301A               	movlw	26
  3138  0268  00F1               	movwf	??_Lcd_Write_Char
  3139  0269                     u1457:	
  3140  0269  0BF1               	decfsz	??_Lcd_Write_Char,f
  3141  026A  2A69               	goto	u1457
  3142  026B  0000               	nop
  3143                           
  3144                           ;./lcd.h: 87:     RB3 = 0;
  3145  026C  1283               	bcf	3,5	;RP0=0, select bank0
  3146  026D  1303               	bcf	3,6	;RP1=0, select bank0
  3147  026E  1186               	bcf	6,3	;volatile
  3148  026F  0008               	return
  3149  0270                     __end_of_Lcd_Write_Char:	
  3150                           
  3151                           	psect	text17
  3152  032F                     __ptext17:	
  3153 ;; *************** function _Lcd_Set_Cursor *****************
  3154 ;; Defined at:
  3155 ;;		line 40 in file "./lcd.h"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  a               1    wreg     unsigned char 
  3158 ;;  b               1    4[COMMON] unsigned char 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  a               1    7[COMMON] unsigned char 
  3161 ;;  temp            1   10[COMMON] unsigned char 
  3162 ;;  y               1    9[COMMON] unsigned char 
  3163 ;;  z               1    8[COMMON] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg, status,2, status,0, pclath, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3173 ;;      Params:         1       0       0       0       0
  3174 ;;      Locals:         4       0       0       0       0
  3175 ;;      Temps:          2       0       0       0       0
  3176 ;;      Totals:         7       0       0       0       0
  3177 ;;Total ram usage:        7 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    2
  3180 ;; This function calls:
  3181 ;;		_Lcd_Cmd
  3182 ;; This function is called by:
  3183 ;;		_configurarDerecha
  3184 ;;		_configurarIzquierda
  3185 ;;		_Encoder
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function _Lcd_Set_Cursor
  3191  032F                     _Lcd_Set_Cursor:	
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3195                           ;Lcd_Set_Cursor@a stored from wreg
  3196  032F  00F7               	movwf	Lcd_Set_Cursor@a
  3197                           
  3198                           ;./lcd.h: 41:     char temp, z, y;;./lcd.h: 42:     if (a == 1) {
  3199  0330  0377               	decf	Lcd_Set_Cursor@a,w
  3200  0331  1D03               	btfss	3,2
  3201  0332  2B54               	goto	l1540
  3202                           
  3203                           ;./lcd.h: 43:         temp = 0x80 + b - 1;
  3204  0333  0874               	movf	Lcd_Set_Cursor@b,w
  3205  0334  3E7F               	addlw	127
  3206  0335  00F5               	movwf	??_Lcd_Set_Cursor
  3207  0336  0875               	movf	??_Lcd_Set_Cursor,w
  3208  0337  00FA               	movwf	Lcd_Set_Cursor@temp
  3209                           
  3210                           ;./lcd.h: 44:         z = temp >> 4;
  3211  0338  087A               	movf	Lcd_Set_Cursor@temp,w
  3212  0339  00F5               	movwf	??_Lcd_Set_Cursor
  3213  033A  3004               	movlw	4
  3214  033B                     u1025:	
  3215  033B  1003               	clrc
  3216  033C  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3217  033D  3EFF               	addlw	-1
  3218  033E  1D03               	skipz
  3219  033F  2B3B               	goto	u1025
  3220  0340  0875               	movf	??_Lcd_Set_Cursor,w
  3221  0341  00F6               	movwf	??_Lcd_Set_Cursor+1
  3222  0342  0876               	movf	??_Lcd_Set_Cursor+1,w
  3223  0343  00F8               	movwf	Lcd_Set_Cursor@z
  3224                           
  3225                           ;./lcd.h: 45:         y = temp & 0x0F;
  3226  0344  087A               	movf	Lcd_Set_Cursor@temp,w
  3227  0345  390F               	andlw	15
  3228  0346  00F5               	movwf	??_Lcd_Set_Cursor
  3229  0347  0875               	movf	??_Lcd_Set_Cursor,w
  3230  0348  00F9               	movwf	Lcd_Set_Cursor@y
  3231                           
  3232                           ;./lcd.h: 46:         Lcd_Cmd(z);
  3233  0349  0878               	movf	Lcd_Set_Cursor@z,w
  3234  034A  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  3235                           
  3236                           ;./lcd.h: 47:         Lcd_Cmd(y);
  3237  034F  0879               	movf	Lcd_Set_Cursor@y,w
  3238  0350  120A  118A  21CA   	fcall	_Lcd_Cmd
  3239                           
  3240                           ;./lcd.h: 48:     } else if (a == 2) {
  3241  0353  0008               	return
  3242  0354                     l1540:	
  3243  0354  3002               	movlw	2
  3244  0355  0677               	xorwf	Lcd_Set_Cursor@a,w
  3245  0356  1D03               	btfss	3,2
  3246  0357  0008               	return
  3247                           
  3248                           ;./lcd.h: 49:         temp = 0xC0 + b - 1;
  3249  0358  0874               	movf	Lcd_Set_Cursor@b,w
  3250  0359  3EBF               	addlw	191
  3251  035A  00F5               	movwf	??_Lcd_Set_Cursor
  3252  035B  0875               	movf	??_Lcd_Set_Cursor,w
  3253  035C  00FA               	movwf	Lcd_Set_Cursor@temp
  3254                           
  3255                           ;./lcd.h: 50:         z = temp >> 4;
  3256  035D  087A               	movf	Lcd_Set_Cursor@temp,w
  3257  035E  00F5               	movwf	??_Lcd_Set_Cursor
  3258  035F  3004               	movlw	4
  3259  0360                     u1045:	
  3260  0360  1003               	clrc
  3261  0361  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3262  0362  3EFF               	addlw	-1
  3263  0363  1D03               	skipz
  3264  0364  2B60               	goto	u1045
  3265  0365  0875               	movf	??_Lcd_Set_Cursor,w
  3266  0366  00F6               	movwf	??_Lcd_Set_Cursor+1
  3267  0367  0876               	movf	??_Lcd_Set_Cursor+1,w
  3268  0368  00F8               	movwf	Lcd_Set_Cursor@z
  3269                           
  3270                           ;./lcd.h: 51:         y = temp & 0x0F;
  3271  0369  087A               	movf	Lcd_Set_Cursor@temp,w
  3272  036A  390F               	andlw	15
  3273  036B  00F5               	movwf	??_Lcd_Set_Cursor
  3274  036C  0875               	movf	??_Lcd_Set_Cursor,w
  3275  036D  00F9               	movwf	Lcd_Set_Cursor@y
  3276                           
  3277                           ;./lcd.h: 52:         Lcd_Cmd(z);
  3278  036E  0878               	movf	Lcd_Set_Cursor@z,w
  3279  036F  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  3280                           
  3281                           ;./lcd.h: 53:         Lcd_Cmd(y);
  3282  0374  0879               	movf	Lcd_Set_Cursor@y,w
  3283  0375  120A  118A  21CA   	fcall	_Lcd_Cmd
  3284  0378  0008               	return
  3285  0379                     __end_of_Lcd_Set_Cursor:	
  3286                           
  3287                           	psect	text18
  3288  0171                     __ptext18:	
  3289 ;; *************** function _Lcd_Clear *****************
  3290 ;; Defined at:
  3291 ;;		line 35 in file "./lcd.h"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;		None
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      void 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0, pclath, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3305 ;;      Params:         0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0
  3308 ;;      Totals:         0       0       0       0       0
  3309 ;;Total ram usage:        0 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    2
  3312 ;; This function calls:
  3313 ;;		_Lcd_Cmd
  3314 ;; This function is called by:
  3315 ;;		_configurarDerecha
  3316 ;;		_configurarIzquierda
  3317 ;;		_Encoder
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _Lcd_Clear
  3323  0171                     _Lcd_Clear:	
  3324                           
  3325                           ;./lcd.h: 36:     Lcd_Cmd(0);
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3329  0171  3000               	movlw	0
  3330  0172  120A  118A  21CA  120A  118A  	fcall	_Lcd_Cmd
  3331                           
  3332                           ;./lcd.h: 37:     Lcd_Cmd(1);
  3333  0177  3001               	movlw	1
  3334  0178  120A  118A  21CA   	fcall	_Lcd_Cmd
  3335  017B  0008               	return
  3336  017C                     __end_of_Lcd_Clear:	
  3337                           
  3338                           	psect	text19
  3339  01CA                     __ptext19:	
  3340 ;; *************** function _Lcd_Cmd *****************
  3341 ;; Defined at:
  3342 ;;		line 27 in file "./lcd.h"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  a               1    wreg     unsigned char 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  a               1    3[COMMON] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0, pclath, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3356 ;;      Params:         0       0       0       0       0
  3357 ;;      Locals:         1       0       0       0       0
  3358 ;;      Temps:          2       0       0       0       0
  3359 ;;      Totals:         3       0       0       0       0
  3360 ;;Total ram usage:        3 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    1
  3363 ;; This function calls:
  3364 ;;		_Lcd_Port
  3365 ;; This function is called by:
  3366 ;;		_Lcd_Clear
  3367 ;;		_Lcd_Set_Cursor
  3368 ;;		_Lcd_Init
  3369 ;;		_Lcd_Shift_Right
  3370 ;;		_Lcd_Shift_Left
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           
  3375                           ;psect for function _Lcd_Cmd
  3376  01CA                     _Lcd_Cmd:	
  3377                           
  3378                           ;incstack = 0
  3379                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3380                           ;Lcd_Cmd@a stored from wreg
  3381  01CA  00F3               	movwf	Lcd_Cmd@a
  3382                           
  3383                           ;./lcd.h: 28:     RB2 = 0;
  3384  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  3385  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  3386  01CD  1106               	bcf	6,2	;volatile
  3387                           
  3388                           ;./lcd.h: 29:     Lcd_Port(a);
  3389  01CE  0873               	movf	Lcd_Cmd@a,w
  3390  01CF  120A  118A  21B0  120A  118A  	fcall	_Lcd_Port
  3391                           
  3392                           ;./lcd.h: 30:     RB3 = 1;
  3393  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  3394  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  3395  01D6  1586               	bsf	6,3	;volatile
  3396                           
  3397                           ;./lcd.h: 31:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3398  01D7  300B               	movlw	11
  3399  01D8  00F2               	movwf	??_Lcd_Cmd+1
  3400  01D9  3062               	movlw	98
  3401  01DA  00F1               	movwf	??_Lcd_Cmd
  3402  01DB                     u1467:	
  3403  01DB  0BF1               	decfsz	??_Lcd_Cmd,f
  3404  01DC  29DB               	goto	u1467
  3405  01DD  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3406  01DE  29DB               	goto	u1467
  3407  01DF  0000               	nop
  3408                           
  3409                           ;./lcd.h: 32:     RB3 = 0;
  3410  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  3411  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  3412  01E2  1186               	bcf	6,3	;volatile
  3413  01E3  0008               	return
  3414  01E4                     __end_of_Lcd_Cmd:	
  3415                           
  3416                           	psect	text20
  3417  01B0                     __ptext20:	
  3418 ;; *************** function _Lcd_Port *****************
  3419 ;; Defined at:
  3420 ;;		line 5 in file "./lcd.h"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;  a               1    wreg     unsigned char 
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;  a               1    0[COMMON] unsigned char 
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  1    wreg      void 
  3427 ;; Registers used:
  3428 ;;		wreg
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3434 ;;      Params:         0       0       0       0       0
  3435 ;;      Locals:         1       0       0       0       0
  3436 ;;      Temps:          0       0       0       0       0
  3437 ;;      Totals:         1       0       0       0       0
  3438 ;;Total ram usage:        1 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_Lcd_Cmd
  3444 ;;		_Lcd_Init
  3445 ;;		_Lcd_Write_Char
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           
  3450                           ;psect for function _Lcd_Port
  3451  01B0                     _Lcd_Port:	
  3452                           
  3453                           ;incstack = 0
  3454                           ; Regs used in _Lcd_Port: [wreg]
  3455                           ;Lcd_Port@a stored from wreg
  3456  01B0  00F0               	movwf	Lcd_Port@a
  3457                           
  3458                           ;./lcd.h: 6:     if (a & 1)
  3459  01B1  1C70               	btfss	Lcd_Port@a,0
  3460  01B2  29B7               	goto	l66
  3461                           
  3462                           ;./lcd.h: 7:         RB4 = 1;
  3463  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  3464  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  3465  01B5  1606               	bsf	6,4	;volatile
  3466  01B6  29BA               	goto	l67
  3467  01B7                     l66:	
  3468                           ;./lcd.h: 8:     else
  3469                           
  3470                           
  3471                           ;./lcd.h: 9:         RB4 = 0;
  3472  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3473  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  3474  01B9  1206               	bcf	6,4	;volatile
  3475  01BA                     l67:	
  3476                           
  3477                           ;./lcd.h: 11:     if (a & 2)
  3478  01BA  1CF0               	btfss	Lcd_Port@a,1
  3479  01BB  29BE               	goto	l68
  3480                           
  3481                           ;./lcd.h: 12:         RB5 = 1;
  3482  01BC  1686               	bsf	6,5	;volatile
  3483  01BD  29BF               	goto	l69
  3484  01BE                     l68:	
  3485                           ;./lcd.h: 13:     else
  3486                           
  3487                           
  3488                           ;./lcd.h: 14:         RB5 = 0;
  3489  01BE  1286               	bcf	6,5	;volatile
  3490  01BF                     l69:	
  3491                           
  3492                           ;./lcd.h: 16:     if (a & 4)
  3493  01BF  1D70               	btfss	Lcd_Port@a,2
  3494  01C0  29C3               	goto	l70
  3495                           
  3496                           ;./lcd.h: 17:         RB6 = 1;
  3497  01C1  1706               	bsf	6,6	;volatile
  3498  01C2  29C4               	goto	l71
  3499  01C3                     l70:	
  3500                           ;./lcd.h: 18:     else
  3501                           
  3502                           
  3503                           ;./lcd.h: 19:         RB6 = 0;
  3504  01C3  1306               	bcf	6,6	;volatile
  3505  01C4                     l71:	
  3506                           
  3507                           ;./lcd.h: 21:     if (a & 8)
  3508  01C4  1DF0               	btfss	Lcd_Port@a,3
  3509  01C5  29C8               	goto	l72
  3510                           
  3511                           ;./lcd.h: 22:         RB7 = 1;
  3512  01C6  1786               	bsf	6,7	;volatile
  3513  01C7  0008               	return
  3514  01C8                     l72:	
  3515                           ;./lcd.h: 23:     else
  3516                           
  3517                           
  3518                           ;./lcd.h: 24:         RB7 = 0;
  3519  01C8  1386               	bcf	6,7	;volatile
  3520  01C9  0008               	return
  3521  01CA                     __end_of_Lcd_Port:	
  3522  007E                     btemp	set	126	;btemp
  3523  007E                     wtemp0	set	126


Data Sizes:
    Strings     82
    Constant    44
    Data        3
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     34      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Lcd_Write_Integer@Data(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 19
		 -> STR_9(CODE[9]), STR_8(CODE[17]), STR_7(CODE[9]), STR_6(CODE[13]), 
		 -> STR_5(CODE[4]), STR_4(CODE[19]), STR_3(CODE[4]), STR_2(CODE[17]), 
		 -> Lcd_Write_Integer@Data(BANK0[10]), 


Critical Paths under _main in COMMON

    _Lcd_Init->_Lcd_Cmd
    _VerificarInversionGiro->___wmul
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_configurarDerecha
    _main->_configurarIzquierda
    _configurarIzquierda->_Lcd_Write_Integer
    _configurarDerecha->_Lcd_Write_Integer
    _Encoder->_Lcd_Write_Integer
    _Lcd_Write_Integer->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   19064
                                             30 BANK0      4     4      0
                            _Encoder
                       _KeyPadGetKey
                           _Lcd_Init
                           _PinsInit
                           _RunMotor
                          _StopMotor
                  _configurarDerecha
                _configurarIzquierda
 ---------------------------------------------------------------------------------
 (1) _configurarIzquierda                                  4     4      0    5954
                                             26 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _configurarDerecha                                    4     4      0    5954
                                             26 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _StopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RunMotor                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _KeyPadGetKey                                         6     4      2     205
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PinsInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Encoder                                              0     0      0    6753
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
             _VerificarInversionGiro
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _VerificarInversionGiro                               1     1      0    1004
                                              6 COMMON     1     1      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1004
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   13    11      2    2695
                                             13 BANK0     13    11      2
                   _Lcd_Write_String
                             ___wmul (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     952
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1     988
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Encoder
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___wmul (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _VerificarInversionGiro
       ___wmul
     ___wmul
   _KeyPadGetKey
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _PinsInit
   _RunMotor
   _StopMotor
   _configurarDerecha
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___wmul (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul
   _configurarIzquierda
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       ___wmul (ARG)
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
     _StopMotor
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     22      30       5       60.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E      12        0.0%
ABS                  0      0      3E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 30 12:19:17 2019

                              pc 0002                      __CFG_CP$OFF 0000                               l70 01C3  
                             l71 01C4                               l72 01C8                               l66 01B7  
                             l67 01BA                               l68 01BE                               l69 01BF  
                             fsr 0004              ___wmul@multiplicand 0072                              l200 0310  
                            l116 045E                              l117 04C3                              l151 044D  
                            l144 0440                              l322 01EE                              _RA0 0028  
                            _RA1 0029                              _RA2 002A                              _RB0 0030  
                            _RA3 002B                              _RB2 0032                              _RA4 002C  
                            _RC0 0038                              _RB3 0033                              _RA5 002D  
                            _RC1 0039                              _RB4 0034                              _RA6 002E  
                            _RB5 0035                              _RA7 002F                              _RB6 0036  
                            _RB7 0037                     __CFG_CPD$OFF 0000                              u735 0248  
                            u825 020E                              u755 027B                              u845 021F  
                            u925 077E                              u775 0287                              u855 0228  
                            u785 0293                              u795 029D                              u985 01EF  
                            u995 01F6                              _key 0048                              fsr0 0004  
                            indf 0000                    _CmAntiHorario 0042                     __CFG_FOSC$HS 0000  
                   __CFG_LVP$OFF 0000                   ??_KeyPadGetKey 0072                             l1404 029C  
                           l1420 020B                             l1422 0219                             l1430 0232  
                           l1502 079B                             l1408 02A7                             l1504 0710  
                           l1450 02AE                             l1426 0227                             l1506 07DC  
                           l1602 04DF                             l1540 0354                             l1460 0730  
                           l1516 01E6                             l1560 0467                             l1712 0699  
                           l1482 0767                             l1466 074E                             l1618 0307  
                           l1562 049A                             l1722 06AB                             l1706 066D  
                           l1396 0278                             l1476 0765                             l1732 06E5  
                           l1398 0286                             l1494 0797                             l1662 05B2  
                           l1734 06FE                             l1488 0788                             l1754 0549  
                           l1690 0643                             l1668 05DE                             l1780 0412  
                           l1678 05F0                             l1782 0418                             l1790 042A  
                           l1774 03ED                             l1688 062A                             l1784 041E  
                           l1890 0743                             l1786 0424                             l1884 0432  
                           l1886 06EA                             l1798 0450                             l1888 062F  
                           STR_1 008E                             STR_2 0052                             STR_3 008A  
                           STR_4 003F                             STR_5 008A                             STR_6 0074  
                           STR_7 0081                             STR_8 0063                             STR_9 0081  
                           u1110 0486                             u1025 033B                             u1105 047B  
                           u1050 0464                             u1140 0497                             u1124 0489  
                           u1045 0360                             u1135 048C                             u1080 0475  
                           u1305 068F                             u1075 046A                             u1094 0478  
                           u1255 0305                             u1407 049E                             u1335 040F  
                           u1417 0383                             u1275 032C                             u1427 0392  
                           u1437 03A1                             u1285 05D4                             u1447 0258  
                           u1457 0269                             u1377 0456                             u1467 01DB  
                           u1387 0704                             u1397 0649                     __CFG_WRT$OFF 0000  
              ?_Lcd_Write_String 0075                             _key2 004D                             _main 03D4  
                           btemp 007E                    __CFG_BOREN$ON 0000                             start 0000  
             ??_Lcd_Write_String 0077                  __end_of_Lcd_Cmd 01E4                  __end_of_Encoder 0593  
              _Lcd_Write_Integer 0198                            ?_main 0070                    __CFG_WDTE$OFF 0000  
                          _ANSEL 0188               ?_Lcd_Write_Integer 002D                  __end_of___lwdiv 02AC  
                __end_of___lwmod 0237                            _PORTA 0005          __size_of_Lcd_Set_Cursor 004A  
                          _TRISA 0085                            _TRISB 0086                            _TRISC 0087  
                __end_of_dpowers 003F              ??_Lcd_Write_Integer 002F                            pclath 000A  
                          status 0003                            wtemp0 007E                  __end_of_sprintf 07E1  
               __end_of_Lcd_Init 03D4                 __end_of_Lcd_Port 01CA                  __initialization 07E1  
                   __end_of_main 045B        __end_of_Lcd_Write_Integer 01B0                           ??_main 003E  
               __end_of_PinsInit 0198               __size_of_Lcd_Clear 000B                 __end_of_RunMotor 0189  
                         _ANSELH 0189                        ??_Lcd_Cmd 0071          __size_of_Lcd_Write_Char 0039  
                      ??_Encoder 007E                   __CFG_PWRTE$OFF 0000                           _Grados 004B  
              _configurarDerecha 0593                           ___wmul 01E4               ?_configurarDerecha 0070  
                      ??___lwdiv 0074                        ??___lwmod 007C                           _buffer 0049  
           __end_of_KeyPadGetKey 04EC                  KeyPadGetKey@key 0074                  KeyPadGetKey@row 0075  
            ??_configurarDerecha 003A                        ??_sprintf 0023                  Lcd_Set_Cursor@a 0077  
                Lcd_Set_Cursor@b 0074                  Lcd_Set_Cursor@y 0079                  Lcd_Set_Cursor@z 0078  
             __size_of_StopMotor 0005          __end_of__initialization 07FC                __end_of_Lcd_Clear 017C  
      __end_of_configurarDerecha 064E                   __pcstackCOMMON 0070                     __pidataBANK0 0169  
     __size_of_Lcd_Write_Integer 0018                   _Lcd_Set_Cursor 032F      __end_of_configurarIzquierda 0709  
           __end_of_keyPadMatrix 0035                        ?_Lcd_Init 0070                        ?_Lcd_Port 0070  
                     __pbssBANK0 0042                        ?_PinsInit 0070                       __pmaintext 03D4  
                        ?___wmul 0070                        ?_RunMotor 0070                __end_of_StopMotor 0171  
      __size_of_Lcd_Write_String 003D           __end_of_Lcd_Set_Cursor 0379                       ??_Lcd_Init 0074  
       ??_VerificarInversionGiro 0076                       ??_Lcd_Port 0070                       __stringtab 0003  
                 _Lcd_Write_Char 0237                          _Lcd_Cmd 01CA                          _Encoder 04EC  
     __size_of_configurarDerecha 00BB                       ??_PinsInit 0070            __size_of_KeyPadGetKey 0091  
                     ??_RunMotor 0070                  __size_of___wmul 0021                          ___lwdiv 0270  
                        ___lwmod 0205                  ?_Lcd_Set_Cursor 0074                          __ptext1 064E  
                        __ptext2 0593                          __ptext3 016C                          __ptext4 017C  
                        __ptext5 045B                          __ptext6 0189                          __ptext7 0379  
                        __ptext8 04EC                          __ptext9 02E9                          _dpowers 0035  
                        _old_key 0047                          _sprintf 0709           __end_of_Lcd_Write_Char 0270  
           end_of_initialization 07FC                     _KeyPadGetKey 045B                        Lcd_Port@a 0070  
__size_of_VerificarInversionGiro 0046                  ?_Lcd_Write_Char 0070                        _CmHorario 0044  
              Lcd_Write_String@a 0075                Lcd_Write_String@i 007A                     _keyPadMatrix 0013  
                      _Lcd_Clear 0171                   __end_of___wmul 0205                 _Lcd_Write_String 02AC  
            start_initialization 07E1                        _LastState 0046                __size_of_Lcd_Init 005B  
              __size_of_Lcd_Port 001A                       ?_Lcd_Clear 0070           _VerificarInversionGiro 02E9  
              __size_of_PinsInit 000F                         ??___wmul 0074                      __pdataBANK0 004D  
                Lcd_Write_Char@a 0074                  Lcd_Write_Char@y 0073                __size_of_RunMotor 000D  
                      _StopMotor 016C                        ___latbits 0002                    __pcstackBANK0 0020  
   __size_of_configurarIzquierda 00BB                         ?_Lcd_Cmd 0070                      sprintf@flag 0027  
                       ?_Encoder 0070                      sprintf@prec 0028                 ___lwdiv@dividend 0072  
               ??_Lcd_Set_Cursor 0075                         ?___lwdiv 0070                         ?___lwmod 0078  
                      __pstrings 0003                       ?_StopMotor 0070                 ___lwdiv@quotient 0075  
                       ?_sprintf 0020                   ___wmul@product 0074                         Lcd_Cmd@a 0073  
                    ??_Lcd_Clear 0074            Lcd_Write_Integer@Data 0030                      __stringbase 0012  
              ___wmul@multiplier 0070                 ??_Lcd_Write_Char 0071                         _Lcd_Init 0379  
                       _Lcd_Port 01B0         __end_of_Lcd_Write_String 02E9                 __size_of_Lcd_Cmd 001A  
               __size_of_Encoder 00A7                         _PinsInit 0189                         _RunMotor 017C  
               __size_of___lwdiv 003C                 __size_of___lwmod 0032               __end_of__stringtab 0013  
                    ??_StopMotor 0070                       sprintf@val 0029                  ___lwdiv@divisor 0070  
                ___lwdiv@counter 0077                         __ptext10 01E4                         __ptext11 0198  
                       __ptext20 01B0                         __ptext12 0709                         __ptext13 0205  
                       __ptext14 0270                         __ptext15 02AC                         __ptext16 0237  
                       __ptext17 032F                         __ptext18 0171                         __ptext19 01CA  
               __size_of_sprintf 00D8                    __size_of_main 0087                         _keypress 004F  
        ?_VerificarInversionGiro 0070              _configurarIzquierda 064E             ?_configurarIzquierda 0070  
             Lcd_Write_Char@temp 0072                        sprintf@ap 0026                        sprintf@sp 002B  
               ___lwmod@dividend 007A   __end_of_VerificarInversionGiro 032F                        stringcode 000D  
             Lcd_Set_Cursor@temp 007A                         sprintf@c 002C                         sprintf@f 0020  
                ___lwmod@divisor 0078                  ___lwmod@counter 007D                         stringdir 000D  
                       stringtab 0003               Lcd_Write_Integer@a 002D            ??_configurarIzquierda 003A  
                  ?_KeyPadGetKey 0070  
