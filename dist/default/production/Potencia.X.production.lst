

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 29 19:44:08 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 2.05
    37                           ; Generated 20/12/2018 GMT
    38                           ; 
    39                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F886 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  000E                     	;# 
   161  000F                     	;# 
   162  0010                     	;# 
   163  0011                     	;# 
   164  0012                     	;# 
   165  0013                     	;# 
   166  0014                     	;# 
   167  0015                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0017                     	;# 
   171  0018                     	;# 
   172  0019                     	;# 
   173  001A                     	;# 
   174  001B                     	;# 
   175  001B                     	;# 
   176  001C                     	;# 
   177  001D                     	;# 
   178  001E                     	;# 
   179  001F                     	;# 
   180  0081                     	;# 
   181  0085                     	;# 
   182  0086                     	;# 
   183  0087                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  0105                     	;# 
   208  0107                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0187                     	;# 
   218  0188                     	;# 
   219  0189                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222                           
   223                           	psect	idataBANK0
   224  0FD3                     __pidataBANK0:	
   225                           
   226                           ;initializer for _key2
   227  0FD3  3430               	retlw	48
   228  0FD4  3400               	retlw	0
   229                           
   230                           ;initializer for _keypress
   231  0FD5  3430               	retlw	48
   232                           
   233                           	psect	strings
   234  0003                     __pstrings:	
   235  0003                     stringtab:	
   236  0003                     __stringtab:	
   237                           
   238                           ;	String table - string pointers are 1 byte each
   239  0003  1BFF               	btfsc	btemp+1,7
   240  0004  280D               	ljmp	stringcode
   241  0005  1383               	bcf	3,7
   242  0006  187F               	btfsc	btemp+1,0
   243  0007  1783               	bsf	3,7
   244  0008  0800               	movf	0,w
   245  0009  0A84               	incf	4,f
   246  000A  1903               	skipnz
   247  000B  0AFF               	incf	btemp+1,f
   248  000C  0008               	return
   249  000D                     stringcode:	
   250  000D                     stringdir:	
   251  000D  3000               	movlw	high stringdir
   252  000E  008A               	movwf	10
   253  000F  0804               	movf	4,w
   254  0010  0A84               	incf	4,f
   255  0011  0782               	addwf	2,f
   256  0012                     __stringbase:	
   257  0012  3400               	retlw	0
   258  0013                     __end_of__stringtab:	
   259  0013                     _keyPadMatrix:	
   260  0013  3441               	retlw	65
   261  0014  3400               	retlw	0
   262  0015  3431               	retlw	49
   263  0016  3400               	retlw	0
   264  0017  3432               	retlw	50
   265  0018  3400               	retlw	0
   266  0019  3433               	retlw	51
   267  001A  3400               	retlw	0
   268  001B  3442               	retlw	66
   269  001C  3400               	retlw	0
   270  001D  3434               	retlw	52
   271  001E  3400               	retlw	0
   272  001F  3435               	retlw	53
   273  0020  3400               	retlw	0
   274  0021  3436               	retlw	54
   275  0022  3400               	retlw	0
   276  0023  3443               	retlw	67
   277  0024  3400               	retlw	0
   278  0025  3437               	retlw	55
   279  0026  3400               	retlw	0
   280  0027  3438               	retlw	56
   281  0028  3400               	retlw	0
   282  0029  3439               	retlw	57
   283  002A  3400               	retlw	0
   284  002B  3444               	retlw	68
   285  002C  3400               	retlw	0
   286  002D  342A               	retlw	42
   287  002E  3400               	retlw	0
   288  002F  3430               	retlw	48
   289  0030  3400               	retlw	0
   290  0031  3423               	retlw	35
   291  0032  3400               	retlw	0
   292  0033  34FF               	retlw	255
   293  0034  3400               	retlw	0
   294  0035                     __end_of_keyPadMatrix:	
   295  0035                     _dpowers:	
   296  0035  3401               	retlw	1
   297  0036  3400               	retlw	0
   298  0037  340A               	retlw	10
   299  0038  3400               	retlw	0
   300  0039  3464               	retlw	100
   301  003A  3400               	retlw	0
   302  003B  34E8               	retlw	232
   303  003C  3403               	retlw	3
   304  003D  3410               	retlw	16
   305  003E  3427               	retlw	39
   306  003F                     __end_of_dpowers:	
   307  0005                     _PORTA	set	5
   308  0019                     _TXREG	set	25
   309  001A                     _RCREG	set	26
   310  002F                     _RA7	set	47
   311  002E                     _RA6	set	46
   312  002D                     _RA5	set	45
   313  002C                     _RA4	set	44
   314  002B                     _RA3	set	43
   315  002A                     _RA2	set	42
   316  0029                     _RA1	set	41
   317  0028                     _RA0	set	40
   318  0065                     _RCIF	set	101
   319  00C4                     _CREN	set	196
   320  00C7                     _SPEN	set	199
   321  0033                     _RB3	set	51
   322  0032                     _RB2	set	50
   323  0037                     _RB7	set	55
   324  0036                     _RB6	set	54
   325  0035                     _RB5	set	53
   326  0034                     _RB4	set	52
   327  0086                     _TRISB	set	134
   328  0085                     _TRISA	set	133
   329  0099                     _SPBRG	set	153
   330  040F                     _nRBPU	set	1039
   331  04C1                     _TRMT	set	1217
   332  04C5                     _TXEN	set	1221
   333  043E                     _TRISC6	set	1086
   334  043F                     _TRISC7	set	1087
   335  04C4                     _SYNC	set	1220
   336  04C2                     _BRGH	set	1218
   337  0188                     _ANSEL	set	392
   338  0189                     _ANSELH	set	393
   339  003F                     STR_2:	
   340  003F  3456               	retlw	86	;'V'
   341  0040  3461               	retlw	97	;'a'
   342  0041  3420               	retlw	32	;' '
   343  0042  3461               	retlw	97	;'a'
   344  0043  3420               	retlw	32	;' '
   345  0044  3463               	retlw	99	;'c'
   346  0045  346F               	retlw	111	;'o'
   347  0046  346E               	retlw	110	;'n'
   348  0047  3466               	retlw	102	;'f'
   349  0048  3469               	retlw	105	;'i'
   350  0049  3467               	retlw	103	;'g'
   351  004A  3475               	retlw	117	;'u'
   352  004B  3472               	retlw	114	;'r'
   353  004C  3461               	retlw	97	;'a'
   354  004D  3472               	retlw	114	;'r'
   355  004E  3420               	retlw	32	;' '
   356  004F  3464               	retlw	100	;'d'
   357  0050  3465               	retlw	101	;'e'
   358  0051  3472               	retlw	114	;'r'
   359  0052  3465               	retlw	101	;'e'
   360  0053  3463               	retlw	99	;'c'
   361  0054  3468               	retlw	104	;'h'
   362  0055  3461               	retlw	97	;'a'
   363  0056  3420               	retlw	32	;' '
   364  0057  3400               	retlw	0
   365  0058                     STR_6:	
   366  0058  3443               	retlw	67	;'C'
   367  0059  346F               	retlw	111	;'o'
   368  005A  346E               	retlw	110	;'n'
   369  005B  3466               	retlw	102	;'f'
   370  005C  3469               	retlw	105	;'i'
   371  005D  3467               	retlw	103	;'g'
   372  005E  342D               	retlw	45	;'-'
   373  005F  3469               	retlw	105	;'i'
   374  0060  347A               	retlw	122	;'z'
   375  0061  3471               	retlw	113	;'q'
   376  0062  3475               	retlw	117	;'u'
   377  0063  3469               	retlw	105	;'i'
   378  0064  3465               	retlw	101	;'e'
   379  0065  3472               	retlw	114	;'r'
   380  0066  3464               	retlw	100	;'d'
   381  0067  3461               	retlw	97	;'a'
   382  0068  343A               	retlw	58	;':'
   383  0069  3420               	retlw	32	;' '
   384  006A  3400               	retlw	0
   385  006B                     STR_3:	
   386  006B  3456               	retlw	86	;'V'
   387  006C  3461               	retlw	97	;'a'
   388  006D  3420               	retlw	32	;' '
   389  006E  3461               	retlw	97	;'a'
   390  006F  3420               	retlw	32	;' '
   391  0070  3463               	retlw	99	;'c'
   392  0071  346F               	retlw	111	;'o'
   393  0072  346E               	retlw	110	;'n'
   394  0073  3466               	retlw	102	;'f'
   395  0074  3469               	retlw	105	;'i'
   396  0075  3467               	retlw	103	;'g'
   397  0076  3475               	retlw	117	;'u'
   398  0077  3472               	retlw	114	;'r'
   399  0078  3461               	retlw	97	;'a'
   400  0079  3472               	retlw	114	;'r'
   401  007A  3420               	retlw	32	;' '
   402  007B  3449               	retlw	73	;'I'
   403  007C  3420               	retlw	32	;' '
   404  007D  3400               	retlw	0
   405  007E                     STR_4:	
   406  007E  3443               	retlw	67	;'C'
   407  007F  346F               	retlw	111	;'o'
   408  0080  346E               	retlw	110	;'n'
   409  0081  3466               	retlw	102	;'f'
   410  0082  3469               	retlw	105	;'i'
   411  0083  3467               	retlw	103	;'g'
   412  0084  342D               	retlw	45	;'-'
   413  0085  3464               	retlw	100	;'d'
   414  0086  3465               	retlw	101	;'e'
   415  0087  3472               	retlw	114	;'r'
   416  0088  3465               	retlw	101	;'e'
   417  0089  3463               	retlw	99	;'c'
   418  008A  3468               	retlw	104	;'h'
   419  008B  3461               	retlw	97	;'a'
   420  008C  343A               	retlw	58	;':'
   421  008D  3420               	retlw	32	;' '
   422  008E  3400               	retlw	0
   423  008F                     STR_8:	
   424  008F  3453               	retlw	83	;'S'
   425  0090  3474               	retlw	116	;'t'
   426  0091  346F               	retlw	111	;'o'
   427  0092  3470               	retlw	112	;'p'
   428  0093  3420               	retlw	32	;' '
   429  0094  344D               	retlw	77	;'M'
   430  0095  346F               	retlw	111	;'o'
   431  0096  3474               	retlw	116	;'t'
   432  0097  346F               	retlw	111	;'o'
   433  0098  3472               	retlw	114	;'r'
   434  0099  3400               	retlw	0
   435  009A                     STR_7:	
   436  009A  3452               	retlw	82	;'R'
   437  009B  3475               	retlw	117	;'u'
   438  009C  346E               	retlw	110	;'n'
   439  009D  3420               	retlw	32	;' '
   440  009E  344D               	retlw	77	;'M'
   441  009F  346F               	retlw	111	;'o'
   442  00A0  3474               	retlw	116	;'t'
   443  00A1  346F               	retlw	111	;'o'
   444  00A2  3472               	retlw	114	;'r'
   445  00A3  3400               	retlw	0
   446  00A4                     STR_1:	
   447  00A4  3425               	retlw	37	;'%'
   448  00A5  3464               	retlw	100	;'d'
   449  00A6  3400               	retlw	0
   450  007E                     
   451                           ; #config settings
   452  0000                     
   453                           	psect	cinit
   454  07E4                     start_initialization:	
   455  07E4                     __initialization:	
   456                           
   457                           ; Initialize objects allocated to BANK0
   458  07E4  120A  158A  27D3  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   459  07E9  00CF               	movwf	__pdataBANK0& (0+127)
   460  07EA  120A  158A  27D4  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   461  07EF  00D0               	movwf	(__pdataBANK0+1)& (0+127)
   462  07F0  120A  158A  27D5   	fcall	__pidataBANK0+2	;fetch initializer
   463  07F3  00D1               	movwf	(__pdataBANK0+2)& (0+127)
   464                           
   465                           ; Clear objects allocated to BANK0
   466  07F4  01C7               	clrf	__pbssBANK0& (0+127)
   467  07F5  01C8               	clrf	(__pbssBANK0+1)& (0+127)
   468  07F6  01C9               	clrf	(__pbssBANK0+2)& (0+127)
   469  07F7  01CA               	clrf	(__pbssBANK0+3)& (0+127)
   470  07F8  01CB               	clrf	(__pbssBANK0+4)& (0+127)
   471  07F9  01CC               	clrf	(__pbssBANK0+5)& (0+127)
   472  07FA  01CD               	clrf	(__pbssBANK0+6)& (0+127)
   473  07FB  01CE               	clrf	(__pbssBANK0+7)& (0+127)
   474  07FC                     end_of_initialization:	
   475                           ;End of C runtime variable initialization code
   476                           
   477  07FC                     __end_of__initialization:	
   478  07FC  0183               	clrf	3
   479  07FD  120A  118A  2D85   	ljmp	_main	;jump to C main() function
   480                           
   481                           	psect	bssBANK0
   482  0047                     __pbssBANK0:	
   483  0047                     _CmIzquierda:	
   484  0047                     	ds	2
   485  0049                     _CmDerecha:	
   486  0049                     	ds	2
   487  004B                     _old_key:	
   488  004B                     	ds	1
   489  004C                     _key:	
   490  004C                     	ds	1
   491  004D                     _buffer:	
   492  004D                     	ds	2
   493                           
   494                           	psect	dataBANK0
   495  004F                     __pdataBANK0:	
   496  004F                     _key2:	
   497  004F                     	ds	2
   498  0051                     _keypress:	
   499  0051                     	ds	1
   500                           
   501                           	psect	cstackCOMMON
   502  0070                     __pcstackCOMMON:	
   503  0070                     ?_Lcd_Port:	
   504  0070                     ??_Lcd_Port:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_Lcd_Cmd:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_Lcd_Clear:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_Lcd_Init:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ?_Lcd_Write_Char:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     ?_UART_Write:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ??_UART_Write:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     ?_UART_Write_Text:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0070                     ?_KeyPadInit:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0070                     ??_KeyPadInit:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0070                     ?_configurarDerecha:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0070                     ?_configurarIzquierda:	
   538                           ; 2 bytes @ 0x0
   539                           
   540  0070                     ?_StopMotor:	
   541                           ; 2 bytes @ 0x0
   542                           
   543  0070                     ?_RunMotor:	
   544                           ; 2 bytes @ 0x0
   545                           
   546  0070                     ?_KeyPadGetKey:	
   547                           ; 2 bytes @ 0x0
   548                           
   549  0070                     ?_main:	
   550                           ; 2 bytes @ 0x0
   551                           
   552  0070                     ?___wmul:	
   553                           ; 2 bytes @ 0x0
   554                           
   555  0070                     ?___lwdiv:	
   556                           ; 2 bytes @ 0x0
   557                           
   558  0070                     ?___aldiv:	
   559                           ; 2 bytes @ 0x0
   560                           
   561  0070                     Lcd_Port@a:	
   562                           ; 4 bytes @ 0x0
   563                           
   564  0070                     UART_Write@data:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ___wmul@multiplier:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ___lwdiv@divisor:	
   571                           ; 2 bytes @ 0x0
   572                           
   573  0070                     ___aldiv@divisor:	
   574                           ; 2 bytes @ 0x0
   575                           
   576                           
   577                           ; 4 bytes @ 0x0
   578  0070                     	ds	1
   579  0071                     ??_Lcd_Cmd:	
   580  0071                     ??_Lcd_Write_Char:	
   581                           ; 1 bytes @ 0x1
   582                           
   583  0071                     ??_UART_Write_Text:	
   584                           ; 1 bytes @ 0x1
   585                           
   586  0071                     UART_Write_Text@i:	
   587                           ; 1 bytes @ 0x1
   588                           
   589                           
   590                           ; 2 bytes @ 0x1
   591  0071                     	ds	1
   592  0072                     ??_KeyPadGetKey:	
   593  0072                     Lcd_Write_Char@temp:	
   594                           ; 1 bytes @ 0x2
   595                           
   596  0072                     ___wmul@multiplicand:	
   597                           ; 1 bytes @ 0x2
   598                           
   599  0072                     ___lwdiv@dividend:	
   600                           ; 2 bytes @ 0x2
   601                           
   602                           
   603                           ; 2 bytes @ 0x2
   604  0072                     	ds	1
   605  0073                     Lcd_Cmd@a:	
   606  0073                     Lcd_Write_Char@y:	
   607                           ; 1 bytes @ 0x3
   608                           
   609  0073                     UART_Write_Text@text:	
   610                           ; 1 bytes @ 0x3
   611                           
   612                           
   613                           ; 1 bytes @ 0x3
   614  0073                     	ds	1
   615  0074                     ??_StopMotor:	
   616  0074                     ??_Lcd_Clear:	
   617                           ; 1 bytes @ 0x4
   618                           
   619  0074                     ?_Lcd_Set_Cursor:	
   620                           ; 1 bytes @ 0x4
   621                           
   622  0074                     ??_Lcd_Init:	
   623                           ; 1 bytes @ 0x4
   624                           
   625  0074                     ??___wmul:	
   626                           ; 1 bytes @ 0x4
   627                           
   628  0074                     ??___lwdiv:	
   629                           ; 1 bytes @ 0x4
   630                           
   631  0074                     Lcd_Set_Cursor@b:	
   632                           ; 1 bytes @ 0x4
   633                           
   634  0074                     Lcd_Write_Char@a:	
   635                           ; 1 bytes @ 0x4
   636                           
   637  0074                     KeyPadGetKey@key:	
   638                           ; 1 bytes @ 0x4
   639                           
   640  0074                     ___wmul@product:	
   641                           ; 1 bytes @ 0x4
   642                           
   643  0074                     ___aldiv@dividend:	
   644                           ; 2 bytes @ 0x4
   645                           
   646                           
   647                           ; 4 bytes @ 0x4
   648  0074                     	ds	1
   649  0075                     ??_Lcd_Set_Cursor:	
   650  0075                     ?_Lcd_Write_String:	
   651                           ; 1 bytes @ 0x5
   652                           
   653  0075                     KeyPadGetKey@row:	
   654                           ; 1 bytes @ 0x5
   655                           
   656  0075                     Lcd_Write_String@a:	
   657                           ; 1 bytes @ 0x5
   658                           
   659  0075                     ___lwdiv@quotient:	
   660                           ; 2 bytes @ 0x5
   661                           
   662                           
   663                           ; 2 bytes @ 0x5
   664  0075                     	ds	2
   665  0077                     ??_Lcd_Write_String:	
   666  0077                     Lcd_Set_Cursor@a:	
   667                           ; 1 bytes @ 0x7
   668                           
   669  0077                     ___lwdiv@counter:	
   670                           ; 1 bytes @ 0x7
   671                           
   672                           
   673                           ; 1 bytes @ 0x7
   674  0077                     	ds	1
   675  0078                     ??___aldiv:	
   676  0078                     ?___lwmod:	
   677                           ; 1 bytes @ 0x8
   678                           
   679  0078                     Lcd_Set_Cursor@z:	
   680                           ; 2 bytes @ 0x8
   681                           
   682  0078                     ___lwmod@divisor:	
   683                           ; 1 bytes @ 0x8
   684                           
   685                           
   686                           ; 2 bytes @ 0x8
   687  0078                     	ds	1
   688  0079                     Lcd_Set_Cursor@y:	
   689  0079                     UART_Init@x:	
   690                           ; 1 bytes @ 0x9
   691                           
   692                           
   693                           ; 2 bytes @ 0x9
   694  0079                     	ds	1
   695  007A                     Lcd_Set_Cursor@temp:	
   696  007A                     Lcd_Write_String@i:	
   697                           ; 1 bytes @ 0xA
   698                           
   699  007A                     ___lwmod@dividend:	
   700                           ; 2 bytes @ 0xA
   701                           
   702                           
   703                           ; 2 bytes @ 0xA
   704  007A                     	ds	2
   705  007C                     ??___lwmod:	
   706                           
   707                           ; 1 bytes @ 0xC
   708  007C                     	ds	1
   709  007D                     ___lwmod@counter:	
   710                           
   711                           ; 1 bytes @ 0xD
   712  007D                     	ds	1
   713                           
   714                           	psect	cstackBANK0
   715  0020                     __pcstackBANK0:	
   716  0020                     ?_sprintf:	
   717  0020                     sprintf@f:	
   718                           ; 2 bytes @ 0x0
   719                           
   720  0020                     ___aldiv@counter:	
   721                           ; 1 bytes @ 0x0
   722                           
   723                           
   724                           ; 1 bytes @ 0x0
   725  0020                     	ds	1
   726  0021                     ___aldiv@sign:	
   727                           
   728                           ; 1 bytes @ 0x1
   729  0021                     	ds	1
   730  0022                     ___aldiv@quotient:	
   731                           
   732                           ; 4 bytes @ 0x2
   733  0022                     	ds	1
   734  0023                     ??_sprintf:	
   735                           
   736                           ; 1 bytes @ 0x3
   737  0023                     	ds	3
   738  0026                     ?_UART_Init:	
   739  0026                     sprintf@ap:	
   740                           ; 1 bytes @ 0x6
   741                           
   742  0026                     UART_Init@baudrate:	
   743                           ; 1 bytes @ 0x6
   744                           
   745                           
   746                           ; 4 bytes @ 0x6
   747  0026                     	ds	1
   748  0027                     sprintf@flag:	
   749                           
   750                           ; 1 bytes @ 0x7
   751  0027                     	ds	1
   752  0028                     sprintf@prec:	
   753                           
   754                           ; 1 bytes @ 0x8
   755  0028                     	ds	1
   756  0029                     sprintf@val:	
   757                           
   758                           ; 2 bytes @ 0x9
   759  0029                     	ds	1
   760  002A                     ??_UART_Init:	
   761                           
   762                           ; 1 bytes @ 0xA
   763  002A                     	ds	1
   764  002B                     sprintf@sp:	
   765                           
   766                           ; 1 bytes @ 0xB
   767  002B                     	ds	1
   768  002C                     sprintf@c:	
   769                           
   770                           ; 1 bytes @ 0xC
   771  002C                     	ds	1
   772  002D                     ?_Lcd_Write_Integer:	
   773  002D                     Lcd_Write_Integer@a:	
   774                           ; 1 bytes @ 0xD
   775                           
   776                           
   777                           ; 2 bytes @ 0xD
   778  002D                     	ds	2
   779  002F                     ??_Lcd_Write_Integer:	
   780                           
   781                           ; 1 bytes @ 0xF
   782  002F                     	ds	1
   783  0030                     Lcd_Write_Integer@Data:	
   784                           
   785                           ; 10 bytes @ 0x10
   786  0030                     	ds	10
   787  003A                     ??_RunMotor:	
   788                           
   789                           ; 1 bytes @ 0x1A
   790  003A                     	ds	3
   791  003D                     RunMotor@y:	
   792                           
   793                           ; 2 bytes @ 0x1D
   794  003D                     	ds	2
   795  003F                     ??_configurarDerecha:	
   796  003F                     ??_configurarIzquierda:	
   797                           ; 1 bytes @ 0x1F
   798                           
   799                           
   800                           ; 1 bytes @ 0x1F
   801  003F                     	ds	4
   802  0043                     ??_main:	
   803                           
   804                           ; 1 bytes @ 0x23
   805  0043                     	ds	4
   806                           
   807                           	psect	maintext
   808  0585                     __pmaintext:	
   809 ;;
   810 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   811 ;;
   812 ;; *************** function _main *****************
   813 ;; Defined at:
   814 ;;		line 39 in file "main.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  a               2    0        unsigned int 
   819 ;; Return value:  Size  Location     Type
   820 ;;                  2  189[None  ] int 
   821 ;; Registers used:
   822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : B00/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   828 ;;      Params:         0       0       0       0       0
   829 ;;      Locals:         0       0       0       0       0
   830 ;;      Temps:          0       4       0       0       0
   831 ;;      Totals:         0       4       0       0       0
   832 ;;Total ram usage:        4 bytes
   833 ;; Hardware stack levels required when called:    6
   834 ;; This function calls:
   835 ;;		_KeyPadGetKey
   836 ;;		_KeyPadInit
   837 ;;		_Lcd_Clear
   838 ;;		_Lcd_Init
   839 ;;		_Lcd_Set_Cursor
   840 ;;		_Lcd_Write_String
   841 ;;		_RunMotor
   842 ;;		_StopMotor
   843 ;;		_UART_Init
   844 ;;		_UART_Write_Text
   845 ;;		_configurarDerecha
   846 ;;		_configurarIzquierda
   847 ;; This function is called by:
   848 ;;		Startup code after reset
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           
   853                           ;psect for function _main
   854  0585                     _main:	
   855                           
   856                           ;main.c: 40:     unsigned int a;;main.c: 41:     ANSELH = ANSEL = 0;
   857                           
   858                           ;incstack = 0
   859                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   860  0585  1683               	bsf	3,5	;RP0=1, select bank3
   861  0586  1703               	bsf	3,6	;RP1=1, select bank3
   862  0587  0188               	clrf	8	;volatile
   863  0588  0189               	clrf	9	;volatile
   864                           
   865                           ;main.c: 43:     TRISB = 0x00;
   866  0589  1683               	bsf	3,5	;RP0=1, select bank1
   867  058A  1303               	bcf	3,6	;RP1=0, select bank1
   868  058B  0186               	clrf	6	;volatile
   869                           
   870                           ;main.c: 46:     UART_Init(9600);
   871  058C  3000               	movlw	0
   872  058D  1283               	bcf	3,5	;RP0=0, select bank0
   873  058E  1303               	bcf	3,6	;RP1=0, select bank0
   874  058F  00A9               	movwf	UART_Init@baudrate+3
   875  0590  3000               	movlw	0
   876  0591  00A8               	movwf	UART_Init@baudrate+2
   877  0592  3025               	movlw	37
   878  0593  00A7               	movwf	UART_Init@baudrate+1
   879  0594  3080               	movlw	128
   880  0595  00A6               	movwf	UART_Init@baudrate
   881  0596  120A  118A  2636  120A  118A  	fcall	_UART_Init
   882                           
   883                           ;main.c: 47:     nRBPU = 0;
   884  059B  1683               	bsf	3,5	;RP0=1, select bank1
   885  059C  1303               	bcf	3,6	;RP1=0, select bank1
   886  059D  1381               	bcf	1,7	;volatile
   887                           
   888                           ;main.c: 48:     Lcd_Init();
   889  059E  120A  118A  22A8  120A  118A  	fcall	_Lcd_Init
   890                           
   891                           ;main.c: 49:     KeyPadInit();
   892  05A3  120A  158A  27D6  120A  118A  	fcall	_KeyPadInit
   893  05A8                     l1928:	
   894                           
   895                           ;main.c: 56:         Lcd_Clear();
   896  05A8  120A  118A  20AE  120A  118A  	fcall	_Lcd_Clear
   897                           
   898                           ;main.c: 57:         Lcd_Set_Cursor(1, 1);
   899  05AD  01F4               	clrf	Lcd_Set_Cursor@b
   900  05AE  0AF4               	incf	Lcd_Set_Cursor@b,f
   901  05AF  3001               	movlw	1
   902  05B0  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
   903                           
   904                           ;main.c: 66:         keypress = KeyPadGetKey();
   905  05B5  120A  118A  2392  120A  118A  	fcall	_KeyPadGetKey
   906  05BA  0870               	movf	?_KeyPadGetKey,w
   907  05BB  1283               	bcf	3,5	;RP0=0, select bank0
   908  05BC  1303               	bcf	3,6	;RP1=0, select bank0
   909  05BD  00C3               	movwf	??_main
   910  05BE  0843               	movf	??_main,w
   911  05BF  00D1               	movwf	_keypress
   912                           
   913                           ;main.c: 67:         if (keypress != keyPadMatrix[ 0x10 ]) {
   914  05C0  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
   915  05C1  0084               	movwf	4
   916  05C2  120A  118A  200D  120A  118A  	fcall	stringdir
   917  05C7  00C3               	movwf	??_main
   918  05C8  120A  118A  200D  120A  118A  	fcall	stringdir
   919  05CD  00C4               	movwf	??_main+1
   920  05CE  0851               	movf	_keypress,w
   921  05CF  00C5               	movwf	??_main+2
   922  05D0  01C6               	clrf	??_main+3
   923  05D1  0844               	movf	??_main+1,w
   924  05D2  0646               	xorwf	??_main+3,w
   925  05D3  1D03               	skipz
   926  05D4  2DD7               	goto	u1565
   927  05D5  0843               	movf	??_main,w
   928  05D6  0645               	xorwf	??_main+2,w
   929  05D7                     u1565:	
   930  05D7  1D03               	btfss	3,2
   931  05D8  2E14               	goto	l1958
   932  05D9  2DA8               	goto	l1928
   933  05DA                     l1938:	
   934                           
   935                           ;main.c: 72:                     UART_Write_Text("Va a configurar derecha ");
   936  05DA  302D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   937  05DB  120A  118A  210E  120A  118A  	fcall	_UART_Write_Text
   938                           
   939                           ;main.c: 74:                     configurarDerecha();
   940  05E0  120A  118A  2423  120A  118A  	fcall	_configurarDerecha
   941                           
   942                           ;main.c: 75:                     break;
   943  05E5  2E2A               	goto	l1960
   944  05E6                     l1942:	
   945                           
   946                           ;main.c: 77:                     UART_Write_Text("Va a configurar I ");
   947  05E6  3059               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   948  05E7  120A  118A  210E  120A  118A  	fcall	_UART_Write_Text
   949                           
   950                           ;main.c: 78:                     Lcd_Clear();
   951  05EC  120A  118A  20AE  120A  118A  	fcall	_Lcd_Clear
   952                           
   953                           ;main.c: 79:                     Lcd_Set_Cursor(1, 1);
   954  05F1  01F4               	clrf	Lcd_Set_Cursor@b
   955  05F2  0AF4               	incf	Lcd_Set_Cursor@b,f
   956  05F3  3001               	movlw	1
   957  05F4  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
   958                           
   959                           ;main.c: 80:                     Lcd_Write_String("Config-derecha: ");
   960  05F9  306C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   961  05FA  00F5               	movwf	Lcd_Write_String@a
   962  05FB  3080               	movlw	128
   963  05FC  00F6               	movwf	Lcd_Write_String@a+1
   964  05FD  120A  118A  21D7  120A  118A  	fcall	_Lcd_Write_String
   965                           
   966                           ;main.c: 81:                     configurarIzquierda();
   967  0602  120A  118A  24D4  120A  118A  	fcall	_configurarIzquierda
   968                           
   969                           ;main.c: 82:                     break;
   970  0607  2E2A               	goto	l1960
   971  0608                     l1952:	
   972                           
   973                           ;main.c: 84:                     StopMotor();
   974  0608  120A  118A  20A9  120A  118A  	fcall	_StopMotor
   975                           
   976                           ;main.c: 85:                     break;
   977  060D  2E2A               	goto	l1960
   978  060E                     l1954:	
   979                           
   980                           ;main.c: 87:                     RunMotor();
   981  060E  120A  118A  225E  120A  118A  	fcall	_RunMotor
   982                           
   983                           ;main.c: 89:                     break;
   984  0613  2E2A               	goto	l1960
   985  0614                     l1958:	
   986  0614  0851               	movf	_keypress,w
   987  0615  00C3               	movwf	??_main
   988  0616  01C4               	clrf	??_main+1
   989                           
   990                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   991                           ; Switch size 1, requested type "simple"
   992                           ; Number of cases is 1, Range of values is 0 to 0
   993                           ; switch strategies available:
   994                           ; Name         Instructions Cycles
   995                           ; simple_byte            4     3 (average)
   996                           ; direct_byte           11     8 (fixed)
   997                           ; jumptable            260     6 (fixed)
   998                           ;	Chosen strategy is simple_byte
   999  0617  0844               	movf	??_main+1,w
  1000  0618  3A00               	xorlw	0	; case 0
  1001  0619  1903               	skipnz
  1002  061A  2E1C               	goto	l2058
  1003  061B  2E2A               	goto	l1960
  1004  061C                     l2058:	
  1005                           
  1006                           ; Switch size 1, requested type "simple"
  1007                           ; Number of cases is 4, Range of values is 65 to 68
  1008                           ; switch strategies available:
  1009                           ; Name         Instructions Cycles
  1010                           ; simple_byte           13     7 (average)
  1011                           ; direct_byte           23    11 (fixed)
  1012                           ; jumptable            263     9 (fixed)
  1013                           ;	Chosen strategy is simple_byte
  1014  061C  0843               	movf	??_main,w
  1015  061D  3A41               	xorlw	65	; case 65
  1016  061E  1903               	skipnz
  1017  061F  2DDA               	goto	l1938
  1018  0620  3A03               	xorlw	3	; case 66
  1019  0621  1903               	skipnz
  1020  0622  2DE6               	goto	l1942
  1021  0623  3A01               	xorlw	1	; case 67
  1022  0624  1903               	skipnz
  1023  0625  2E08               	goto	l1952
  1024  0626  3A07               	xorlw	7	; case 68
  1025  0627  1903               	skipnz
  1026  0628  2E0E               	goto	l1954
  1027  0629  2E2A               	goto	l1960
  1028  062A                     l1960:	
  1029                           
  1030                           ;main.c: 91:             _delay((unsigned long)((10)*(8000000/4000.0)));
  1031  062A  301A               	movlw	26
  1032  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1033  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1034  062D  00C4               	movwf	??_main+1
  1035  062E  30F7               	movlw	247
  1036  062F  00C3               	movwf	??_main
  1037  0630                     u1577:	
  1038  0630  0BC3               	decfsz	??_main,f
  1039  0631  2E30               	goto	u1577
  1040  0632  0BC4               	decfsz	??_main+1,f
  1041  0633  2E30               	goto	u1577
  1042  0634  2E35               	nop2
  1043  0635  2DA8               	goto	l1928
  1044  0636                     __end_of_main:	
  1045                           
  1046                           	psect	text1
  1047  04D4                     __ptext1:	
  1048 ;; *************** function _configurarIzquierda *****************
  1049 ;; Defined at:
  1050 ;;		line 140 in file "main.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  2   72[None  ] int 
  1057 ;; Registers used:
  1058 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1064 ;;      Params:         0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0
  1066 ;;      Temps:          0       4       0       0       0
  1067 ;;      Totals:         0       4       0       0       0
  1068 ;;Total ram usage:        4 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    5
  1071 ;; This function calls:
  1072 ;;		_KeyPadGetKey
  1073 ;;		_Lcd_Clear
  1074 ;;		_Lcd_Set_Cursor
  1075 ;;		_Lcd_Write_Integer
  1076 ;;		_Lcd_Write_String
  1077 ;;		_RunMotor
  1078 ;;		_StopMotor
  1079 ;;		___wmul
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           
  1086                           ;psect for function _configurarIzquierda
  1087  04D4                     _configurarIzquierda:	
  1088                           
  1089                           ;main.c: 142:     Lcd_Clear();
  1090                           
  1091                           ;incstack = 0
  1092                           ; Regs used in _configurarIzquierda: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1093  04D4  120A  118A  20AE  120A  118A  	fcall	_Lcd_Clear
  1094                           
  1095                           ;main.c: 143:     Lcd_Set_Cursor(1, 1);
  1096  04D9  01F4               	clrf	Lcd_Set_Cursor@b
  1097  04DA  0AF4               	incf	Lcd_Set_Cursor@b,f
  1098  04DB  3001               	movlw	1
  1099  04DC  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1100                           
  1101                           ;main.c: 144:     Lcd_Write_String("Config-izquierda: ");
  1102  04E1  3046               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1103  04E2  00F5               	movwf	Lcd_Write_String@a
  1104  04E3  3080               	movlw	128
  1105  04E4  00F6               	movwf	Lcd_Write_String@a+1
  1106  04E5  120A  118A  21D7  120A  118A  	fcall	_Lcd_Write_String
  1107                           
  1108                           ;main.c: 146:     buffer = 0;
  1109  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1110  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1111  04EC  01CD               	clrf	_buffer
  1112  04ED  01CE               	clrf	_buffer+1
  1113                           
  1114                           ;main.c: 147:     StopMotor();
  1115  04EE  120A  118A  20A9  120A  118A  	fcall	_StopMotor
  1116                           
  1117                           ;main.c: 149:     Lcd_Set_Cursor(2, 1);
  1118  04F3  01F4               	clrf	Lcd_Set_Cursor@b
  1119  04F4  0AF4               	incf	Lcd_Set_Cursor@b,f
  1120  04F5  3002               	movlw	2
  1121  04F6  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1122  04FB                     l1884:	
  1123                           
  1124                           ;main.c: 152:         keypress = KeyPadGetKey();
  1125  04FB  120A  118A  2392  120A  118A  	fcall	_KeyPadGetKey
  1126  0500  0870               	movf	?_KeyPadGetKey,w
  1127  0501  1283               	bcf	3,5	;RP0=0, select bank0
  1128  0502  1303               	bcf	3,6	;RP1=0, select bank0
  1129  0503  00BF               	movwf	??_configurarIzquierda
  1130  0504  083F               	movf	??_configurarIzquierda,w
  1131  0505  00D1               	movwf	_keypress
  1132                           
  1133                           ;main.c: 153:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1134  0506  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1135  0507  0084               	movwf	4
  1136  0508  120A  118A  200D  120A  118A  	fcall	stringdir
  1137  050D  00BF               	movwf	??_configurarIzquierda
  1138  050E  120A  118A  200D  120A  118A  	fcall	stringdir
  1139  0513  00C0               	movwf	??_configurarIzquierda+1
  1140  0514  0851               	movf	_keypress,w
  1141  0515  00C1               	movwf	??_configurarIzquierda+2
  1142  0516  01C2               	clrf	??_configurarIzquierda+3
  1143  0517  0840               	movf	??_configurarIzquierda+1,w
  1144  0518  0642               	xorwf	??_configurarIzquierda+3,w
  1145  0519  1D03               	skipz
  1146  051A  2D1D               	goto	u1555
  1147  051B  083F               	movf	??_configurarIzquierda,w
  1148  051C  0641               	xorwf	??_configurarIzquierda+2,w
  1149  051D                     u1555:	
  1150  051D  1903               	skipnz
  1151  051E  2D79               	goto	l1908
  1152                           
  1153                           ;main.c: 154:             key2 = keypress;
  1154  051F  0851               	movf	_keypress,w
  1155  0520  00BF               	movwf	??_configurarIzquierda
  1156  0521  01C0               	clrf	??_configurarIzquierda+1
  1157  0522  083F               	movf	??_configurarIzquierda,w
  1158  0523  00CF               	movwf	_key2
  1159  0524  0840               	movf	??_configurarIzquierda+1,w
  1160  0525  00D0               	movwf	_key2+1
  1161                           
  1162                           ;main.c: 155:             switch (key2) {
  1163  0526  2D60               	goto	l1906
  1164  0527                     l1890:	
  1165                           
  1166                           ;main.c: 164:                     CmIzquierda = buffer;
  1167  0527  084E               	movf	_buffer+1,w
  1168  0528  00C8               	movwf	_CmIzquierda+1
  1169  0529  084D               	movf	_buffer,w
  1170  052A  00C7               	movwf	_CmIzquierda
  1171                           
  1172                           ;main.c: 165:                     RunMotor();
  1173  052B  120A  118A  225E   	fcall	_RunMotor
  1174  052E  0008               	return
  1175  052F                     l1898:	
  1176                           
  1177                           ;main.c: 173:                     buffer = (10 * buffer + key2);
  1178  052F  084E               	movf	_buffer+1,w
  1179  0530  00F1               	movwf	___wmul@multiplier+1
  1180  0531  084D               	movf	_buffer,w
  1181  0532  00F0               	movwf	___wmul@multiplier
  1182  0533  300A               	movlw	10
  1183  0534  00F2               	movwf	___wmul@multiplicand
  1184  0535  3000               	movlw	0
  1185  0536  00F3               	movwf	___wmul@multiplicand+1
  1186  0537  120A  118A  20ED  120A  118A  	fcall	___wmul
  1187  053C  1283               	bcf	3,5	;RP0=0, select bank0
  1188  053D  1303               	bcf	3,6	;RP1=0, select bank0
  1189  053E  084F               	movf	_key2,w
  1190  053F  0770               	addwf	?___wmul,w
  1191  0540  00CD               	movwf	_buffer
  1192  0541  0850               	movf	_key2+1,w
  1193  0542  1803               	skipnc
  1194  0543  0A50               	incf	_key2+1,w
  1195  0544  0771               	addwf	?___wmul+1,w
  1196  0545  00CE               	movwf	_buffer+1
  1197                           
  1198                           ;main.c: 174:                     buffer -= 48;
  1199  0546  30D0               	movlw	208
  1200  0547  07CD               	addwf	_buffer,f
  1201  0548  1803               	skipnc
  1202  0549  0ACE               	incf	_buffer+1,f
  1203  054A  30FF               	movlw	255
  1204  054B  07CE               	addwf	_buffer+1,f
  1205                           
  1206                           ;main.c: 175:                     Lcd_Set_Cursor(2, 1);
  1207  054C  01F4               	clrf	Lcd_Set_Cursor@b
  1208  054D  0AF4               	incf	Lcd_Set_Cursor@b,f
  1209  054E  3002               	movlw	2
  1210  054F  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1211                           
  1212                           ;main.c: 176:                     Lcd_Write_Integer(buffer);
  1213  0554  1283               	bcf	3,5	;RP0=0, select bank0
  1214  0555  1303               	bcf	3,6	;RP1=0, select bank0
  1215  0556  084E               	movf	_buffer+1,w
  1216  0557  00AE               	movwf	Lcd_Write_Integer@a+1
  1217  0558  084D               	movf	_buffer,w
  1218  0559  00AD               	movwf	Lcd_Write_Integer@a
  1219  055A  120A  158A  27E8  120A  118A  	fcall	_Lcd_Write_Integer
  1220                           
  1221                           ;main.c: 178:             }
  1222  055F  2D79               	goto	l1908
  1223  0560                     l1906:	
  1224                           
  1225                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1226                           ; Switch size 1, requested type "simple"
  1227                           ; Number of cases is 1, Range of values is 0 to 0
  1228                           ; switch strategies available:
  1229                           ; Name         Instructions Cycles
  1230                           ; simple_byte            4     3 (average)
  1231                           ; direct_byte           11     8 (fixed)
  1232                           ; jumptable            260     6 (fixed)
  1233                           ;	Chosen strategy is simple_byte
  1234  0560  0850               	movf	_key2+1,w
  1235  0561  3A00               	xorlw	0	; case 0
  1236  0562  1903               	skipnz
  1237  0563  2D65               	goto	l2060
  1238  0564  2D2F               	goto	l1898
  1239  0565                     l2060:	
  1240                           
  1241                           ; Switch size 1, requested type "simple"
  1242                           ; Number of cases is 6, Range of values is 35 to 68
  1243                           ; switch strategies available:
  1244                           ; Name         Instructions Cycles
  1245                           ; simple_byte           19    10 (average)
  1246                           ; direct_byte          113    11 (fixed)
  1247                           ; jumptable            263     9 (fixed)
  1248                           ;	Chosen strategy is simple_byte
  1249  0565  084F               	movf	_key2,w
  1250  0566  3A23               	xorlw	35	; case 35
  1251  0567  1903               	skipnz
  1252  0568  2D79               	goto	l1908
  1253  0569  3A09               	xorlw	9	; case 42
  1254  056A  1903               	skipnz
  1255  056B  2D79               	goto	l1908
  1256  056C  3A6B               	xorlw	107	; case 65
  1257  056D  1903               	skipnz
  1258  056E  2D79               	goto	l1908
  1259  056F  3A03               	xorlw	3	; case 66
  1260  0570  1903               	skipnz
  1261  0571  2D79               	goto	l1908
  1262  0572  3A01               	xorlw	1	; case 67
  1263  0573  1903               	skipnz
  1264  0574  2D79               	goto	l1908
  1265  0575  3A07               	xorlw	7	; case 68
  1266  0576  1903               	skipnz
  1267  0577  2D27               	goto	l1890
  1268  0578  2D2F               	goto	l1898
  1269  0579                     l1908:	
  1270                           
  1271                           ;main.c: 180:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1272  0579  301A               	movlw	26
  1273  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1274  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1275  057C  00C0               	movwf	??_configurarIzquierda+1
  1276  057D  30F7               	movlw	247
  1277  057E  00BF               	movwf	??_configurarIzquierda
  1278  057F                     u1587:	
  1279  057F  0BBF               	decfsz	??_configurarIzquierda,f
  1280  0580  2D7F               	goto	u1587
  1281  0581  0BC0               	decfsz	??_configurarIzquierda+1,f
  1282  0582  2D7F               	goto	u1587
  1283  0583  2D84               	nop2
  1284  0584  2CFB               	goto	l1884
  1285  0585                     __end_of_configurarIzquierda:	
  1286                           
  1287                           	psect	text2
  1288  0423                     __ptext2:	
  1289 ;; *************** function _configurarDerecha *****************
  1290 ;; Defined at:
  1291 ;;		line 97 in file "main.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  2   70[None  ] int 
  1298 ;; Registers used:
  1299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1305 ;;      Params:         0       0       0       0       0
  1306 ;;      Locals:         0       0       0       0       0
  1307 ;;      Temps:          0       4       0       0       0
  1308 ;;      Totals:         0       4       0       0       0
  1309 ;;Total ram usage:        4 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    5
  1312 ;; This function calls:
  1313 ;;		_KeyPadGetKey
  1314 ;;		_Lcd_Clear
  1315 ;;		_Lcd_Set_Cursor
  1316 ;;		_Lcd_Write_Integer
  1317 ;;		_Lcd_Write_String
  1318 ;;		_RunMotor
  1319 ;;		_StopMotor
  1320 ;;		___wmul
  1321 ;; This function is called by:
  1322 ;;		_main
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function _configurarDerecha
  1328  0423                     _configurarDerecha:	
  1329                           
  1330                           ;main.c: 99:     Lcd_Clear();
  1331                           
  1332                           ;incstack = 0
  1333                           ; Regs used in _configurarDerecha: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1334  0423  120A  118A  20AE  120A  118A  	fcall	_Lcd_Clear
  1335                           
  1336                           ;main.c: 100:     Lcd_Set_Cursor(1, 1);
  1337  0428  01F4               	clrf	Lcd_Set_Cursor@b
  1338  0429  0AF4               	incf	Lcd_Set_Cursor@b,f
  1339  042A  3001               	movlw	1
  1340  042B  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1341                           
  1342                           ;main.c: 101:     Lcd_Write_String("Config-derecha: ");
  1343  0430  306C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1344  0431  00F5               	movwf	Lcd_Write_String@a
  1345  0432  3080               	movlw	128
  1346  0433  00F6               	movwf	Lcd_Write_String@a+1
  1347  0434  120A  118A  21D7  120A  118A  	fcall	_Lcd_Write_String
  1348                           
  1349                           ;main.c: 103:     buffer = 0;
  1350  0439  1283               	bcf	3,5	;RP0=0, select bank0
  1351  043A  1303               	bcf	3,6	;RP1=0, select bank0
  1352  043B  01CD               	clrf	_buffer
  1353  043C  01CE               	clrf	_buffer+1
  1354                           
  1355                           ;main.c: 104:     StopMotor();
  1356  043D  120A  118A  20A9  120A  118A  	fcall	_StopMotor
  1357                           
  1358                           ;main.c: 106:     Lcd_Set_Cursor(2, 1);
  1359  0442  01F4               	clrf	Lcd_Set_Cursor@b
  1360  0443  0AF4               	incf	Lcd_Set_Cursor@b,f
  1361  0444  3002               	movlw	2
  1362  0445  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1363  044A                     l1844:	
  1364                           
  1365                           ;main.c: 109:         keypress = KeyPadGetKey();
  1366  044A  120A  118A  2392  120A  118A  	fcall	_KeyPadGetKey
  1367  044F  0870               	movf	?_KeyPadGetKey,w
  1368  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0452  00BF               	movwf	??_configurarDerecha
  1371  0453  083F               	movf	??_configurarDerecha,w
  1372  0454  00D1               	movwf	_keypress
  1373                           
  1374                           ;main.c: 110:         if (keypress != keyPadMatrix[ 0x10 ]) {
  1375  0455  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  1376  0456  0084               	movwf	4
  1377  0457  120A  118A  200D  120A  118A  	fcall	stringdir
  1378  045C  00BF               	movwf	??_configurarDerecha
  1379  045D  120A  118A  200D  120A  118A  	fcall	stringdir
  1380  0462  00C0               	movwf	??_configurarDerecha+1
  1381  0463  0851               	movf	_keypress,w
  1382  0464  00C1               	movwf	??_configurarDerecha+2
  1383  0465  01C2               	clrf	??_configurarDerecha+3
  1384  0466  0840               	movf	??_configurarDerecha+1,w
  1385  0467  0642               	xorwf	??_configurarDerecha+3,w
  1386  0468  1D03               	skipz
  1387  0469  2C6C               	goto	u1545
  1388  046A  083F               	movf	??_configurarDerecha,w
  1389  046B  0641               	xorwf	??_configurarDerecha+2,w
  1390  046C                     u1545:	
  1391  046C  1903               	skipnz
  1392  046D  2CC8               	goto	l1868
  1393                           
  1394                           ;main.c: 111:             key2 = keypress;
  1395  046E  0851               	movf	_keypress,w
  1396  046F  00BF               	movwf	??_configurarDerecha
  1397  0470  01C0               	clrf	??_configurarDerecha+1
  1398  0471  083F               	movf	??_configurarDerecha,w
  1399  0472  00CF               	movwf	_key2
  1400  0473  0840               	movf	??_configurarDerecha+1,w
  1401  0474  00D0               	movwf	_key2+1
  1402                           
  1403                           ;main.c: 112:             switch (key2) {
  1404  0475  2CAF               	goto	l1866
  1405  0476                     l1850:	
  1406                           
  1407                           ;main.c: 121:                     CmDerecha = buffer;
  1408  0476  084E               	movf	_buffer+1,w
  1409  0477  00CA               	movwf	_CmDerecha+1
  1410  0478  084D               	movf	_buffer,w
  1411  0479  00C9               	movwf	_CmDerecha
  1412                           
  1413                           ;main.c: 122:                     RunMotor();
  1414  047A  120A  118A  225E   	fcall	_RunMotor
  1415  047D  0008               	return
  1416  047E                     l1858:	
  1417                           
  1418                           ;main.c: 130:                     buffer = (10 * buffer + key2);
  1419  047E  084E               	movf	_buffer+1,w
  1420  047F  00F1               	movwf	___wmul@multiplier+1
  1421  0480  084D               	movf	_buffer,w
  1422  0481  00F0               	movwf	___wmul@multiplier
  1423  0482  300A               	movlw	10
  1424  0483  00F2               	movwf	___wmul@multiplicand
  1425  0484  3000               	movlw	0
  1426  0485  00F3               	movwf	___wmul@multiplicand+1
  1427  0486  120A  118A  20ED  120A  118A  	fcall	___wmul
  1428  048B  1283               	bcf	3,5	;RP0=0, select bank0
  1429  048C  1303               	bcf	3,6	;RP1=0, select bank0
  1430  048D  084F               	movf	_key2,w
  1431  048E  0770               	addwf	?___wmul,w
  1432  048F  00CD               	movwf	_buffer
  1433  0490  0850               	movf	_key2+1,w
  1434  0491  1803               	skipnc
  1435  0492  0A50               	incf	_key2+1,w
  1436  0493  0771               	addwf	?___wmul+1,w
  1437  0494  00CE               	movwf	_buffer+1
  1438                           
  1439                           ;main.c: 131:                     buffer -= 48;
  1440  0495  30D0               	movlw	208
  1441  0496  07CD               	addwf	_buffer,f
  1442  0497  1803               	skipnc
  1443  0498  0ACE               	incf	_buffer+1,f
  1444  0499  30FF               	movlw	255
  1445  049A  07CE               	addwf	_buffer+1,f
  1446                           
  1447                           ;main.c: 132:                     Lcd_Set_Cursor(2, 1);
  1448  049B  01F4               	clrf	Lcd_Set_Cursor@b
  1449  049C  0AF4               	incf	Lcd_Set_Cursor@b,f
  1450  049D  3002               	movlw	2
  1451  049E  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1452                           
  1453                           ;main.c: 133:                     Lcd_Write_Integer(buffer);
  1454  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1455  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1456  04A5  084E               	movf	_buffer+1,w
  1457  04A6  00AE               	movwf	Lcd_Write_Integer@a+1
  1458  04A7  084D               	movf	_buffer,w
  1459  04A8  00AD               	movwf	Lcd_Write_Integer@a
  1460  04A9  120A  158A  27E8  120A  118A  	fcall	_Lcd_Write_Integer
  1461                           
  1462                           ;main.c: 134:             }
  1463  04AE  2CC8               	goto	l1868
  1464  04AF                     l1866:	
  1465                           
  1466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1467                           ; Switch size 1, requested type "simple"
  1468                           ; Number of cases is 1, Range of values is 0 to 0
  1469                           ; switch strategies available:
  1470                           ; Name         Instructions Cycles
  1471                           ; simple_byte            4     3 (average)
  1472                           ; direct_byte           11     8 (fixed)
  1473                           ; jumptable            260     6 (fixed)
  1474                           ;	Chosen strategy is simple_byte
  1475  04AF  0850               	movf	_key2+1,w
  1476  04B0  3A00               	xorlw	0	; case 0
  1477  04B1  1903               	skipnz
  1478  04B2  2CB4               	goto	l2062
  1479  04B3  2C7E               	goto	l1858
  1480  04B4                     l2062:	
  1481                           
  1482                           ; Switch size 1, requested type "simple"
  1483                           ; Number of cases is 6, Range of values is 35 to 68
  1484                           ; switch strategies available:
  1485                           ; Name         Instructions Cycles
  1486                           ; simple_byte           19    10 (average)
  1487                           ; direct_byte          113    11 (fixed)
  1488                           ; jumptable            263     9 (fixed)
  1489                           ;	Chosen strategy is simple_byte
  1490  04B4  084F               	movf	_key2,w
  1491  04B5  3A23               	xorlw	35	; case 35
  1492  04B6  1903               	skipnz
  1493  04B7  2CC8               	goto	l1868
  1494  04B8  3A09               	xorlw	9	; case 42
  1495  04B9  1903               	skipnz
  1496  04BA  2CC8               	goto	l1868
  1497  04BB  3A6B               	xorlw	107	; case 65
  1498  04BC  1903               	skipnz
  1499  04BD  2CC8               	goto	l1868
  1500  04BE  3A03               	xorlw	3	; case 66
  1501  04BF  1903               	skipnz
  1502  04C0  2CC8               	goto	l1868
  1503  04C1  3A01               	xorlw	1	; case 67
  1504  04C2  1903               	skipnz
  1505  04C3  2CC8               	goto	l1868
  1506  04C4  3A07               	xorlw	7	; case 68
  1507  04C5  1903               	skipnz
  1508  04C6  2C76               	goto	l1850
  1509  04C7  2C7E               	goto	l1858
  1510  04C8                     l1868:	
  1511                           
  1512                           ;main.c: 136:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1513  04C8  301A               	movlw	26
  1514  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  1515  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  1516  04CB  00C0               	movwf	??_configurarDerecha+1
  1517  04CC  30F7               	movlw	247
  1518  04CD  00BF               	movwf	??_configurarDerecha
  1519  04CE                     u1597:	
  1520  04CE  0BBF               	decfsz	??_configurarDerecha,f
  1521  04CF  2CCE               	goto	u1597
  1522  04D0  0BC0               	decfsz	??_configurarDerecha+1,f
  1523  04D1  2CCE               	goto	u1597
  1524  04D2  2CD3               	nop2
  1525  04D3  2C4A               	goto	l1844
  1526  04D4                     __end_of_configurarDerecha:	
  1527                           
  1528                           	psect	text3
  1529  00ED                     __ptext3:	
  1530 ;; *************** function ___wmul *****************
  1531 ;; Defined at:
  1532 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  multiplier      2    0[COMMON] unsigned int 
  1535 ;;  multiplicand    2    2[COMMON] unsigned int 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  product         2    4[COMMON] unsigned int 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  2    0[COMMON] unsigned int 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1547 ;;      Params:         4       0       0       0       0
  1548 ;;      Locals:         2       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0
  1550 ;;      Totals:         6       0       0       0       0
  1551 ;;Total ram usage:        6 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_configurarDerecha
  1557 ;;		_configurarIzquierda
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           
  1562                           ;psect for function ___wmul
  1563  00ED                     ___wmul:	
  1564                           
  1565                           ;incstack = 0
  1566                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1567  00ED  01F4               	clrf	___wmul@product
  1568  00EE  01F5               	clrf	___wmul@product+1
  1569  00EF                     l1742:	
  1570  00EF  1C70               	btfss	___wmul@multiplier,0
  1571  00F0  28F7               	goto	l354
  1572  00F1  0872               	movf	___wmul@multiplicand,w
  1573  00F2  07F4               	addwf	___wmul@product,f
  1574  00F3  1803               	skipnc
  1575  00F4  0AF5               	incf	___wmul@product+1,f
  1576  00F5  0873               	movf	___wmul@multiplicand+1,w
  1577  00F6  07F5               	addwf	___wmul@product+1,f
  1578  00F7                     l354:	
  1579  00F7  3001               	movlw	1
  1580  00F8                     u1335:	
  1581  00F8  1003               	clrc
  1582  00F9  0DF2               	rlf	___wmul@multiplicand,f
  1583  00FA  0DF3               	rlf	___wmul@multiplicand+1,f
  1584  00FB  3EFF               	addlw	-1
  1585  00FC  1D03               	skipz
  1586  00FD  28F8               	goto	u1335
  1587  00FE  3001               	movlw	1
  1588  00FF                     u1345:	
  1589  00FF  1003               	clrc
  1590  0100  0CF1               	rrf	___wmul@multiplier+1,f
  1591  0101  0CF0               	rrf	___wmul@multiplier,f
  1592  0102  3EFF               	addlw	-1
  1593  0103  1D03               	skipz
  1594  0104  28FF               	goto	u1345
  1595  0105  0870               	movf	___wmul@multiplier,w
  1596  0106  0471               	iorwf	___wmul@multiplier+1,w
  1597  0107  1D03               	btfss	3,2
  1598  0108  28EF               	goto	l1742
  1599  0109  0875               	movf	___wmul@product+1,w
  1600  010A  00F1               	movwf	?___wmul+1
  1601  010B  0874               	movf	___wmul@product,w
  1602  010C  00F0               	movwf	?___wmul
  1603  010D  0008               	return
  1604  010E                     __end_of___wmul:	
  1605                           
  1606                           	psect	text4
  1607  00A9                     __ptext4:	
  1608 ;; *************** function _StopMotor *****************
  1609 ;; Defined at:
  1610 ;;		line 198 in file "main.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  2   74[None  ] int 
  1617 ;; Registers used:
  1618 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    2
  1631 ;; This function calls:
  1632 ;;		_UART_Write_Text
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;;		_configurarDerecha
  1636 ;;		_configurarIzquierda
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           
  1641                           ;psect for function _StopMotor
  1642  00A9                     _StopMotor:	
  1643                           
  1644                           ;main.c: 199:     UART_Write_Text("Stop Motor");
  1645                           
  1646                           ;incstack = 0
  1647                           ; Regs used in _StopMotor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1648  00A9  307D               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1649  00AA  120A  118A  210E   	fcall	_UART_Write_Text
  1650  00AD  0008               	return
  1651  00AE                     __end_of_StopMotor:	
  1652                           
  1653                           	psect	text5
  1654  025E                     __ptext5:	
  1655 ;; *************** function _RunMotor *****************
  1656 ;; Defined at:
  1657 ;;		line 184 in file "main.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;		None
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  y               2   29[BANK0 ] int 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  2   76[None  ] int 
  1664 ;; Registers used:
  1665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1671 ;;      Params:         0       0       0       0       0
  1672 ;;      Locals:         0       2       0       0       0
  1673 ;;      Temps:          0       3       0       0       0
  1674 ;;      Totals:         0       5       0       0       0
  1675 ;;Total ram usage:        5 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    4
  1678 ;; This function calls:
  1679 ;;		_Lcd_Clear
  1680 ;;		_Lcd_Set_Cursor
  1681 ;;		_Lcd_Write_Integer
  1682 ;;		_UART_Write
  1683 ;;		_UART_Write_Text
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;;		_configurarDerecha
  1687 ;;		_configurarIzquierda
  1688 ;; This function uses a non-reentrant model
  1689 ;;
  1690                           
  1691                           
  1692                           ;psect for function _RunMotor
  1693  025E                     _RunMotor:	
  1694                           
  1695                           ;main.c: 185:     UART_Write_Text("Run Motor");
  1696                           
  1697                           ;incstack = 0
  1698                           ; Regs used in _RunMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1699  025E  3088               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1700  025F  120A  118A  210E  120A  118A  	fcall	_UART_Write_Text
  1701                           
  1702                           ;main.c: 187:     for (y = 0; y < 300; y++) {
  1703  0264  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0265  1303               	bcf	3,6	;RP1=0, select bank0
  1705  0266  01BD               	clrf	RunMotor@y
  1706  0267  01BE               	clrf	RunMotor@y+1
  1707  0268                     l1728:	
  1708                           
  1709                           ;main.c: 188:         Lcd_Clear();
  1710  0268  120A  118A  20AE  120A  118A  	fcall	_Lcd_Clear
  1711                           
  1712                           ;main.c: 189:         Lcd_Set_Cursor(1,1);
  1713  026D  01F4               	clrf	Lcd_Set_Cursor@b
  1714  026E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1715  026F  3001               	movlw	1
  1716  0270  120A  118A  2214  120A  118A  	fcall	_Lcd_Set_Cursor
  1717                           
  1718                           ;main.c: 190:         Lcd_Write_Integer(y);
  1719  0275  1283               	bcf	3,5	;RP0=0, select bank0
  1720  0276  1303               	bcf	3,6	;RP1=0, select bank0
  1721  0277  083E               	movf	RunMotor@y+1,w
  1722  0278  00AE               	movwf	Lcd_Write_Integer@a+1
  1723  0279  083D               	movf	RunMotor@y,w
  1724  027A  00AD               	movwf	Lcd_Write_Integer@a
  1725  027B  120A  158A  27E8  120A  118A  	fcall	_Lcd_Write_Integer
  1726                           
  1727                           ;main.c: 191:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  1728  0280  300B               	movlw	11
  1729  0281  1283               	bcf	3,5	;RP0=0, select bank0
  1730  0282  1303               	bcf	3,6	;RP1=0, select bank0
  1731  0283  00BC               	movwf	??_RunMotor+2
  1732  0284  3026               	movlw	38
  1733  0285  00BB               	movwf	??_RunMotor+1
  1734  0286  305D               	movlw	93
  1735  0287  00BA               	movwf	??_RunMotor
  1736  0288                     u1607:	
  1737  0288  0BBA               	decfsz	??_RunMotor,f
  1738  0289  2A88               	goto	u1607
  1739  028A  0BBB               	decfsz	??_RunMotor+1,f
  1740  028B  2A88               	goto	u1607
  1741  028C  0BBC               	decfsz	??_RunMotor+2,f
  1742  028D  2A88               	goto	u1607
  1743                           
  1744                           ;main.c: 192:         UART_Write('W');
  1745  028E  3057               	movlw	87
  1746  028F  120A  158A  27DE  120A  118A  	fcall	_UART_Write
  1747                           
  1748                           ;main.c: 193:     }
  1749  0294  3001               	movlw	1
  1750  0295  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0296  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0297  07BD               	addwf	RunMotor@y,f
  1753  0298  1803               	skipnc
  1754  0299  0ABE               	incf	RunMotor@y+1,f
  1755  029A  3000               	movlw	0
  1756  029B  07BE               	addwf	RunMotor@y+1,f
  1757  029C  083E               	movf	RunMotor@y+1,w
  1758  029D  3A80               	xorlw	128
  1759  029E  00FF               	movwf	127
  1760  029F  3081               	movlw	129
  1761  02A0  027F               	subwf	127,w
  1762  02A1  1D03               	skipz
  1763  02A2  2AA5               	goto	u1315
  1764  02A3  302C               	movlw	44
  1765  02A4  023D               	subwf	RunMotor@y,w
  1766  02A5                     u1315:	
  1767  02A5  1803               	btfsc	3,0
  1768  02A6  0008               	return
  1769  02A7  2A68               	goto	l1728
  1770  02A8                     __end_of_RunMotor:	
  1771                           
  1772                           	psect	text6
  1773  010E                     __ptext6:	
  1774 ;; *************** function _UART_Write_Text *****************
  1775 ;; Defined at:
  1776 ;;		line 46 in file "./uart.h"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  text            1    wreg     PTR unsigned char 
  1779 ;;		 -> STR_8(11), STR_7(10), STR_3(19), STR_2(25), 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  text            1    3[COMMON] PTR unsigned char 
  1782 ;;		 -> STR_8(11), STR_7(10), STR_3(19), STR_2(25), 
  1783 ;;  i               2    1[COMMON] int 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1793 ;;      Params:         0       0       0       0       0
  1794 ;;      Locals:         3       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0
  1796 ;;      Totals:         3       0       0       0       0
  1797 ;;Total ram usage:        3 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    1
  1800 ;; This function calls:
  1801 ;;		_UART_Write
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;;		_RunMotor
  1805 ;;		_StopMotor
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           
  1810                           ;psect for function _UART_Write_Text
  1811  010E                     _UART_Write_Text:	
  1812                           
  1813                           ;incstack = 0
  1814                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1815                           ;UART_Write_Text@text stored from wreg
  1816  010E  00F3               	movwf	UART_Write_Text@text
  1817                           
  1818                           ;./uart.h: 48:     int i;;./uart.h: 49:     for (i = 0; text[i] != '\0'; i++)
  1819  010F  01F1               	clrf	UART_Write_Text@i
  1820  0110  01F2               	clrf	UART_Write_Text@i+1
  1821  0111                     l1660:	
  1822  0111  0871               	movf	UART_Write_Text@i,w
  1823  0112  0773               	addwf	UART_Write_Text@text,w
  1824  0113  0084               	movwf	4
  1825  0114  120A  118A  200D  120A  118A  	fcall	stringdir
  1826  0119  3A00               	xorlw	0
  1827  011A  1903               	btfsc	3,2
  1828  011B  0008               	return
  1829                           
  1830                           ;./uart.h: 50:         UART_Write(text[i]);
  1831  011C  0871               	movf	UART_Write_Text@i,w
  1832  011D  0773               	addwf	UART_Write_Text@text,w
  1833  011E  0084               	movwf	4
  1834  011F  120A  118A  200D  120A  118A  	fcall	stringdir
  1835  0124  120A  158A  27DE  120A  118A  	fcall	_UART_Write
  1836  0129  3001               	movlw	1
  1837  012A  07F1               	addwf	UART_Write_Text@i,f
  1838  012B  1803               	skipnc
  1839  012C  0AF2               	incf	UART_Write_Text@i+1,f
  1840  012D  3000               	movlw	0
  1841  012E  07F2               	addwf	UART_Write_Text@i+1,f
  1842  012F  2911               	goto	l1660
  1843  0130                     __end_of_UART_Write_Text:	
  1844                           
  1845                           	psect	text7
  1846  0FDE                     __ptext7:	
  1847 ;; *************** function _UART_Write *****************
  1848 ;; Defined at:
  1849 ;;		line 41 in file "./uart.h"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  data            1    wreg     unsigned char 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  data            1    0[COMMON] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      void 
  1856 ;; Registers used:
  1857 ;;		wreg
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1863 ;;      Params:         0       0       0       0       0
  1864 ;;      Locals:         1       0       0       0       0
  1865 ;;      Temps:          0       0       0       0       0
  1866 ;;      Totals:         1       0       0       0       0
  1867 ;;Total ram usage:        1 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; This function calls:
  1870 ;;		Nothing
  1871 ;; This function is called by:
  1872 ;;		_UART_Write_Text
  1873 ;;		_RunMotor
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           
  1878                           ;psect for function _UART_Write
  1879  0FDE                     _UART_Write:	
  1880                           
  1881                           ;incstack = 0
  1882                           ; Regs used in _UART_Write: [wreg]
  1883                           ;UART_Write@data stored from wreg
  1884  0FDE  00F0               	movwf	UART_Write@data
  1885  0FDF                     l146:	
  1886                           ;./uart.h: 42:     while (!TRMT);
  1887                           
  1888  0FDF  1683               	bsf	3,5	;RP0=1, select bank1
  1889  0FE0  1303               	bcf	3,6	;RP1=0, select bank1
  1890  0FE1  1C98               	btfss	24,1	;volatile
  1891  0FE2  2FDF               	goto	l146
  1892                           
  1893                           ;./uart.h: 43:     TXREG = data;
  1894  0FE3  0870               	movf	UART_Write@data,w
  1895  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  1896  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  1897  0FE6  0099               	movwf	25	;volatile
  1898  0FE7  0008               	return
  1899  0FE8                     __end_of_UART_Write:	
  1900                           
  1901                           	psect	text8
  1902  0FE8                     __ptext8:	
  1903 ;; *************** function _Lcd_Write_Integer *****************
  1904 ;; Defined at:
  1905 ;;		line 104 in file "./lcd.h"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  a               2   13[BANK0 ] int 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  Data           10   16[BANK0 ] unsigned char [10]
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  1    wreg      void 
  1912 ;; Registers used:
  1913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1919 ;;      Params:         0       2       0       0       0
  1920 ;;      Locals:         0      10       0       0       0
  1921 ;;      Temps:          0       1       0       0       0
  1922 ;;      Totals:         0      13       0       0       0
  1923 ;;Total ram usage:       13 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    3
  1926 ;; This function calls:
  1927 ;;		_Lcd_Write_String
  1928 ;;		_sprintf
  1929 ;; This function is called by:
  1930 ;;		_configurarDerecha
  1931 ;;		_configurarIzquierda
  1932 ;;		_RunMotor
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           
  1937                           ;psect for function _Lcd_Write_Integer
  1938  0FE8                     _Lcd_Write_Integer:	
  1939                           
  1940                           ;./lcd.h: 105:     char Data[10];;./lcd.h: 106:     sprintf(Data, "%d", a);
  1941                           
  1942                           ;incstack = 0
  1943                           ; Regs used in _Lcd_Write_Integer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1944  0FE8  3092               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1945  0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0FEB  00AF               	movwf	??_Lcd_Write_Integer
  1948  0FEC  082F               	movf	??_Lcd_Write_Integer,w
  1949  0FED  00A0               	movwf	sprintf@f
  1950  0FEE  082E               	movf	Lcd_Write_Integer@a+1,w
  1951  0FEF  00A2               	movwf	?_sprintf+2
  1952  0FF0  082D               	movf	Lcd_Write_Integer@a,w
  1953  0FF1  00A1               	movwf	?_sprintf+1
  1954  0FF2  3030               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  1955  0FF3  120A  118A  270C  120A  158A  	fcall	_sprintf
  1956                           
  1957                           ;./lcd.h: 107:     Lcd_Write_String(Data);
  1958  0FF8  3030               	movlw	(low (Lcd_Write_Integer@Data| 0))& (0+255)
  1959  0FF9  00F5               	movwf	Lcd_Write_String@a
  1960  0FFA  3000               	movlw	0
  1961  0FFB  00F6               	movwf	Lcd_Write_String@a+1
  1962  0FFC  120A  118A  21D7   	fcall	_Lcd_Write_String
  1963  0FFF  0008               	return
  1964  1000                     __end_of_Lcd_Write_Integer:	
  1965                           
  1966                           	psect	text9
  1967  070C                     __ptext9:	
  1968 ;; *************** function _sprintf *****************
  1969 ;; Defined at:
  1970 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;  sp              1    wreg     PTR unsigned char 
  1973 ;;		 -> Lcd_Write_Integer@Data(10), 
  1974 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1975 ;;		 -> STR_1(3), 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1978 ;;		 -> Lcd_Write_Integer@Data(10), 
  1979 ;;  tmpval          4    0        struct .
  1980 ;;  val             2    9[BANK0 ] unsigned int 
  1981 ;;  cp              2    0        PTR const unsigned char 
  1982 ;;  len             2    0        unsigned int 
  1983 ;;  c               1   12[BANK0 ] unsigned char 
  1984 ;;  prec            1    8[BANK0 ] char 
  1985 ;;  flag            1    7[BANK0 ] unsigned char 
  1986 ;;  ap              1    6[BANK0 ] PTR void [1]
  1987 ;;		 -> ?_sprintf(2), 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  2    0[BANK0 ] int 
  1990 ;; Registers used:
  1991 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1997 ;;      Params:         0       3       0       0       0
  1998 ;;      Locals:         0       7       0       0       0
  1999 ;;      Temps:          0       3       0       0       0
  2000 ;;      Totals:         0      13       0       0       0
  2001 ;;Total ram usage:       13 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    1
  2004 ;; This function calls:
  2005 ;;		___lwdiv
  2006 ;;		___lwmod
  2007 ;; This function is called by:
  2008 ;;		_Lcd_Write_Integer
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           
  2013                           ;psect for function _sprintf
  2014  070C                     _sprintf:	
  2015                           
  2016                           ;incstack = 0
  2017                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2018                           ;sprintf@sp stored from wreg
  2019  070C  1283               	bcf	3,5	;RP0=0, select bank0
  2020  070D  1303               	bcf	3,6	;RP1=0, select bank0
  2021  070E  00AB               	movwf	sprintf@sp
  2022                           
  2023                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  2024  070F  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2025  0710  00A3               	movwf	??_sprintf
  2026  0711  0823               	movf	??_sprintf,w
  2027  0712  00A6               	movwf	sprintf@ap
  2028  0713                     l1616:	
  2029                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2030                           
  2031                           
  2032                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  2033  0713  3001               	movlw	1
  2034  0714  07A0               	addwf	sprintf@f,f
  2035  0715  30FF               	movlw	-1
  2036  0716  0720               	addwf	sprintf@f,w
  2037  0717  0084               	movwf	4
  2038  0718  120A  118A  200D  120A  118A  	fcall	stringdir
  2039  071D  00A3               	movwf	??_sprintf
  2040  071E  0823               	movf	??_sprintf,w
  2041  071F  00AC               	movwf	sprintf@c
  2042  0720  082C               	movf	sprintf@c,w
  2043  0721  1903               	btfsc	3,2
  2044  0722  2FDF               	goto	l1618
  2045                           
  2046                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  2047  0723  3025               	movlw	37
  2048  0724  062C               	xorwf	sprintf@c,w
  2049  0725  1903               	btfsc	3,2
  2050  0726  2F33               	goto	l1572
  2051                           
  2052                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  2053  0727  082C               	movf	sprintf@c,w
  2054  0728  00A3               	movwf	??_sprintf
  2055  0729  082B               	movf	sprintf@sp,w
  2056  072A  0084               	movwf	4
  2057  072B  0823               	movf	??_sprintf,w
  2058  072C  1383               	bcf	3,7	;select IRP bank0
  2059  072D  0080               	movwf	0
  2060  072E  3001               	movlw	1
  2061  072F  00A3               	movwf	??_sprintf
  2062  0730  0823               	movf	??_sprintf,w
  2063  0731  07AB               	addwf	sprintf@sp,f
  2064                           
  2065                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  2066  0732  2F13               	goto	l1616
  2067  0733                     l1572:	
  2068                           
  2069                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  2070  0733  01A7               	clrf	sprintf@flag
  2071                           
  2072                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  2073  0734  3001               	movlw	1
  2074  0735  07A0               	addwf	sprintf@f,f
  2075  0736  30FF               	movlw	-1
  2076  0737  0720               	addwf	sprintf@f,w
  2077  0738  0084               	movwf	4
  2078  0739  120A  118A  200D  120A  118A  	fcall	stringdir
  2079  073E  00AC               	movwf	sprintf@c
  2080  073F  00A3               	movwf	??_sprintf
  2081  0740  01A4               	clrf	??_sprintf+1
  2082                           
  2083                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2084                           ; Switch size 1, requested type "simple"
  2085                           ; Number of cases is 1, Range of values is 0 to 0
  2086                           ; switch strategies available:
  2087                           ; Name         Instructions Cycles
  2088                           ; simple_byte            4     3 (average)
  2089                           ; direct_byte           11     8 (fixed)
  2090                           ; jumptable            260     6 (fixed)
  2091                           ;	Chosen strategy is simple_byte
  2092  0741  0824               	movf	??_sprintf+1,w
  2093  0742  3A00               	xorlw	0	; case 0
  2094  0743  1903               	skipnz
  2095  0744  2F46               	goto	l2064
  2096  0745  2F13               	goto	l1616
  2097  0746                     l2064:	
  2098                           
  2099                           ; Switch size 1, requested type "simple"
  2100                           ; Number of cases is 3, Range of values is 0 to 105
  2101                           ; switch strategies available:
  2102                           ; Name         Instructions Cycles
  2103                           ; simple_byte           10     6 (average)
  2104                           ; jumptable            260     6 (fixed)
  2105                           ;	Chosen strategy is simple_byte
  2106  0746  0823               	movf	??_sprintf,w
  2107  0747  3A00               	xorlw	0	; case 0
  2108  0748  1903               	skipnz
  2109  0749  2FDF               	goto	l1618
  2110  074A  3A64               	xorlw	100	; case 100
  2111  074B  1903               	skipnz
  2112  074C  2F51               	goto	l1578
  2113  074D  3A0D               	xorlw	13	; case 105
  2114  074E  1903               	skipnz
  2115  074F  2F51               	goto	l1578
  2116  0750  2F13               	goto	l1616
  2117  0751                     l1578:	
  2118                           
  2119                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2120  0751  0826               	movf	sprintf@ap,w
  2121  0752  0084               	movwf	4
  2122  0753  1383               	bcf	3,7	;select IRP bank0
  2123  0754  0800               	movf	0,w
  2124  0755  00A9               	movwf	sprintf@val
  2125  0756  0A84               	incf	4,f
  2126  0757  0800               	movf	0,w
  2127  0758  00AA               	movwf	sprintf@val+1
  2128  0759  3002               	movlw	2
  2129  075A  00A3               	movwf	??_sprintf
  2130  075B  0823               	movf	??_sprintf,w
  2131  075C  07A6               	addwf	sprintf@ap,f
  2132                           
  2133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  2134  075D  1FAA               	btfss	sprintf@val+1,7
  2135  075E  2F68               	goto	l1588
  2136                           
  2137                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  2138  075F  3003               	movlw	3
  2139  0760  00A3               	movwf	??_sprintf
  2140  0761  0823               	movf	??_sprintf,w
  2141  0762  04A7               	iorwf	sprintf@flag,f
  2142                           
  2143                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  2144  0763  09A9               	comf	sprintf@val,f
  2145  0764  09AA               	comf	sprintf@val+1,f
  2146  0765  0AA9               	incf	sprintf@val,f
  2147  0766  1903               	skipnz
  2148  0767  0AAA               	incf	sprintf@val+1,f
  2149  0768                     l1588:	
  2150                           
  2151                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2152  0768  01AC               	clrf	sprintf@c
  2153  0769  0AAC               	incf	sprintf@c,f
  2154  076A                     l1594:	
  2155                           
  2156                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  2157  076A  082C               	movf	sprintf@c,w
  2158  076B  00A3               	movwf	??_sprintf
  2159  076C  0723               	addwf	??_sprintf,w
  2160  076D  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2161  076E  0084               	movwf	4
  2162  076F  120A  118A  200D  120A  118A  	fcall	stringdir
  2163  0774  00A4               	movwf	??_sprintf+1
  2164  0775  120A  118A  200D  120A  118A  	fcall	stringdir
  2165  077A  00A5               	movwf	??_sprintf+2
  2166  077B  0825               	movf	??_sprintf+2,w
  2167  077C  022A               	subwf	sprintf@val+1,w
  2168  077D  1D03               	skipz
  2169  077E  2F81               	goto	u1035
  2170  077F  0824               	movf	??_sprintf+1,w
  2171  0780  0229               	subwf	sprintf@val,w
  2172  0781                     u1035:	
  2173  0781  1C03               	btfss	3,0
  2174  0782  2F8B               	goto	l1600
  2175  0783  3001               	movlw	1
  2176  0784  00A3               	movwf	??_sprintf
  2177  0785  0823               	movf	??_sprintf,w
  2178  0786  07AC               	addwf	sprintf@c,f
  2179  0787  3005               	movlw	5
  2180  0788  062C               	xorwf	sprintf@c,w
  2181  0789  1D03               	btfss	3,2
  2182  078A  2F6A               	goto	l1594
  2183  078B                     l1600:	
  2184                           
  2185                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  2186  078B  0827               	movf	sprintf@flag,w
  2187  078C  3903               	andlw	3
  2188  078D  1903               	btfsc	3,2
  2189  078E  2F9A               	goto	l1606
  2190                           
  2191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  2192  078F  302D               	movlw	45
  2193  0790  00A3               	movwf	??_sprintf
  2194  0791  082B               	movf	sprintf@sp,w
  2195  0792  0084               	movwf	4
  2196  0793  0823               	movf	??_sprintf,w
  2197  0794  1383               	bcf	3,7	;select IRP bank0
  2198  0795  0080               	movwf	0
  2199  0796  3001               	movlw	1
  2200  0797  00A3               	movwf	??_sprintf
  2201  0798  0823               	movf	??_sprintf,w
  2202  0799  07AB               	addwf	sprintf@sp,f
  2203  079A                     l1606:	
  2204                           
  2205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  2206  079A  082C               	movf	sprintf@c,w
  2207  079B  00A3               	movwf	??_sprintf
  2208  079C  0823               	movf	??_sprintf,w
  2209  079D  00A8               	movwf	sprintf@prec
  2210  079E                     l1614:	
  2211                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2212                           
  2213                           
  2214                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  2215  079E  30FF               	movlw	255
  2216  079F  00A3               	movwf	??_sprintf
  2217  07A0  0823               	movf	??_sprintf,w
  2218  07A1  07A8               	addwf	sprintf@prec,f
  2219  07A2  0A28               	incf	sprintf@prec,w
  2220  07A3  1903               	btfsc	3,2
  2221  07A4  2F13               	goto	l1616
  2222                           
  2223                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  2224  07A5  300A               	movlw	10
  2225  07A6  00F8               	movwf	___lwmod@divisor
  2226  07A7  3000               	movlw	0
  2227  07A8  00F9               	movwf	___lwmod@divisor+1
  2228  07A9  0828               	movf	sprintf@prec,w
  2229  07AA  00A3               	movwf	??_sprintf
  2230  07AB  0723               	addwf	??_sprintf,w
  2231  07AC  3E23               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2232  07AD  0084               	movwf	4
  2233  07AE  120A  118A  200D  120A  118A  	fcall	stringdir
  2234  07B3  00F0               	movwf	___lwdiv@divisor
  2235  07B4  120A  118A  200D  120A  118A  	fcall	stringdir
  2236  07B9  00F1               	movwf	___lwdiv@divisor+1
  2237  07BA  082A               	movf	sprintf@val+1,w
  2238  07BB  00F3               	movwf	___lwdiv@dividend+1
  2239  07BC  0829               	movf	sprintf@val,w
  2240  07BD  00F2               	movwf	___lwdiv@dividend
  2241  07BE  120A  118A  219B  120A  118A  	fcall	___lwdiv
  2242  07C3  0871               	movf	?___lwdiv+1,w
  2243  07C4  00FB               	movwf	___lwmod@dividend+1
  2244  07C5  0870               	movf	?___lwdiv,w
  2245  07C6  00FA               	movwf	___lwmod@dividend
  2246  07C7  120A  118A  2130  120A  118A  	fcall	___lwmod
  2247  07CC  0878               	movf	?___lwmod,w
  2248  07CD  3E30               	addlw	48
  2249  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  2250  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  2251  07D0  00A4               	movwf	??_sprintf+1
  2252  07D1  0824               	movf	??_sprintf+1,w
  2253  07D2  00AC               	movwf	sprintf@c
  2254                           
  2255                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  2256  07D3  082C               	movf	sprintf@c,w
  2257  07D4  00A3               	movwf	??_sprintf
  2258  07D5  082B               	movf	sprintf@sp,w
  2259  07D6  0084               	movwf	4
  2260  07D7  0823               	movf	??_sprintf,w
  2261  07D8  1383               	bcf	3,7	;select IRP bank0
  2262  07D9  0080               	movwf	0
  2263  07DA  3001               	movlw	1
  2264  07DB  00A3               	movwf	??_sprintf
  2265  07DC  0823               	movf	??_sprintf,w
  2266  07DD  07AB               	addwf	sprintf@sp,f
  2267  07DE  2F9E               	goto	l1614
  2268  07DF                     l1618:	
  2269                           
  2270                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  2271  07DF  082B               	movf	sprintf@sp,w
  2272  07E0  0084               	movwf	4
  2273  07E1  1383               	bcf	3,7	;select IRP bank0
  2274  07E2  0180               	clrf	0
  2275  07E3  0008               	return
  2276  07E4                     __end_of_sprintf:	
  2277                           
  2278                           	psect	text10
  2279  0130                     __ptext10:	
  2280 ;; *************** function ___lwmod *****************
  2281 ;; Defined at:
  2282 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  divisor         2    8[COMMON] unsigned int 
  2285 ;;  dividend        2   10[COMMON] unsigned int 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  counter         1   13[COMMON] unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  2    8[COMMON] unsigned int 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, status,0
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2297 ;;      Params:         4       0       0       0       0
  2298 ;;      Locals:         1       0       0       0       0
  2299 ;;      Temps:          1       0       0       0       0
  2300 ;;      Totals:         6       0       0       0       0
  2301 ;;Total ram usage:        6 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_sprintf
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           
  2311                           ;psect for function ___lwmod
  2312  0130                     ___lwmod:	
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2316  0130  0878               	movf	___lwmod@divisor,w
  2317  0131  0479               	iorwf	___lwmod@divisor+1,w
  2318  0132  1903               	btfsc	3,2
  2319  0133  295D               	goto	l1542
  2320  0134  01FD               	clrf	___lwmod@counter
  2321  0135  0AFD               	incf	___lwmod@counter,f
  2322  0136                     l1532:	
  2323  0136  1BF9               	btfsc	___lwmod@divisor+1,7
  2324  0137  2944               	goto	l1534
  2325  0138  3001               	movlw	1
  2326  0139                     u935:	
  2327  0139  1003               	clrc
  2328  013A  0DF8               	rlf	___lwmod@divisor,f
  2329  013B  0DF9               	rlf	___lwmod@divisor+1,f
  2330  013C  3EFF               	addlw	-1
  2331  013D  1D03               	skipz
  2332  013E  2939               	goto	u935
  2333  013F  3001               	movlw	1
  2334  0140  00FC               	movwf	??___lwmod
  2335  0141  087C               	movf	??___lwmod,w
  2336  0142  07FD               	addwf	___lwmod@counter,f
  2337  0143  2936               	goto	l1532
  2338  0144                     l1534:	
  2339  0144  0879               	movf	___lwmod@divisor+1,w
  2340  0145  027B               	subwf	___lwmod@dividend+1,w
  2341  0146  1D03               	skipz
  2342  0147  294A               	goto	u955
  2343  0148  0878               	movf	___lwmod@divisor,w
  2344  0149  027A               	subwf	___lwmod@dividend,w
  2345  014A                     u955:	
  2346  014A  1C03               	skipc
  2347  014B  2952               	goto	l1538
  2348  014C  0878               	movf	___lwmod@divisor,w
  2349  014D  02FA               	subwf	___lwmod@dividend,f
  2350  014E  0879               	movf	___lwmod@divisor+1,w
  2351  014F  1C03               	skipc
  2352  0150  03FB               	decf	___lwmod@dividend+1,f
  2353  0151  02FB               	subwf	___lwmod@dividend+1,f
  2354  0152                     l1538:	
  2355  0152  3001               	movlw	1
  2356  0153                     u965:	
  2357  0153  1003               	clrc
  2358  0154  0CF9               	rrf	___lwmod@divisor+1,f
  2359  0155  0CF8               	rrf	___lwmod@divisor,f
  2360  0156  3EFF               	addlw	-1
  2361  0157  1D03               	skipz
  2362  0158  2953               	goto	u965
  2363  0159  3001               	movlw	1
  2364  015A  02FD               	subwf	___lwmod@counter,f
  2365  015B  1D03               	btfss	3,2
  2366  015C  2944               	goto	l1534
  2367  015D                     l1542:	
  2368  015D  087B               	movf	___lwmod@dividend+1,w
  2369  015E  00F9               	movwf	?___lwmod+1
  2370  015F  087A               	movf	___lwmod@dividend,w
  2371  0160  00F8               	movwf	?___lwmod
  2372  0161  0008               	return
  2373  0162                     __end_of___lwmod:	
  2374                           
  2375                           	psect	text11
  2376  019B                     __ptext11:	
  2377 ;; *************** function ___lwdiv *****************
  2378 ;; Defined at:
  2379 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;  divisor         2    0[COMMON] unsigned int 
  2382 ;;  dividend        2    2[COMMON] unsigned int 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  quotient        2    5[COMMON] unsigned int 
  2385 ;;  counter         1    7[COMMON] unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  2    0[COMMON] unsigned int 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2395 ;;      Params:         4       0       0       0       0
  2396 ;;      Locals:         3       0       0       0       0
  2397 ;;      Temps:          1       0       0       0       0
  2398 ;;      Totals:         8       0       0       0       0
  2399 ;;Total ram usage:        8 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_sprintf
  2405 ;; This function uses a non-reentrant model
  2406 ;;
  2407                           
  2408                           
  2409                           ;psect for function ___lwdiv
  2410  019B                     ___lwdiv:	
  2411                           
  2412                           ;incstack = 0
  2413                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2414  019B  01F5               	clrf	___lwdiv@quotient
  2415  019C  01F6               	clrf	___lwdiv@quotient+1
  2416  019D  0870               	movf	___lwdiv@divisor,w
  2417  019E  0471               	iorwf	___lwdiv@divisor+1,w
  2418  019F  1903               	btfsc	3,2
  2419  01A0  29D2               	goto	l1520
  2420  01A1  01F7               	clrf	___lwdiv@counter
  2421  01A2  0AF7               	incf	___lwdiv@counter,f
  2422  01A3                     l1508:	
  2423  01A3  1BF1               	btfsc	___lwdiv@divisor+1,7
  2424  01A4  29B1               	goto	l1510
  2425  01A5  3001               	movlw	1
  2426  01A6                     u865:	
  2427  01A6  1003               	clrc
  2428  01A7  0DF0               	rlf	___lwdiv@divisor,f
  2429  01A8  0DF1               	rlf	___lwdiv@divisor+1,f
  2430  01A9  3EFF               	addlw	-1
  2431  01AA  1D03               	skipz
  2432  01AB  29A6               	goto	u865
  2433  01AC  3001               	movlw	1
  2434  01AD  00F4               	movwf	??___lwdiv
  2435  01AE  0874               	movf	??___lwdiv,w
  2436  01AF  07F7               	addwf	___lwdiv@counter,f
  2437  01B0  29A3               	goto	l1508
  2438  01B1                     l1510:	
  2439  01B1  3001               	movlw	1
  2440  01B2                     u885:	
  2441  01B2  1003               	clrc
  2442  01B3  0DF5               	rlf	___lwdiv@quotient,f
  2443  01B4  0DF6               	rlf	___lwdiv@quotient+1,f
  2444  01B5  3EFF               	addlw	-1
  2445  01B6  1D03               	skipz
  2446  01B7  29B2               	goto	u885
  2447  01B8  0871               	movf	___lwdiv@divisor+1,w
  2448  01B9  0273               	subwf	___lwdiv@dividend+1,w
  2449  01BA  1D03               	skipz
  2450  01BB  29BE               	goto	u895
  2451  01BC  0870               	movf	___lwdiv@divisor,w
  2452  01BD  0272               	subwf	___lwdiv@dividend,w
  2453  01BE                     u895:	
  2454  01BE  1C03               	skipc
  2455  01BF  29C7               	goto	l1516
  2456  01C0  0870               	movf	___lwdiv@divisor,w
  2457  01C1  02F2               	subwf	___lwdiv@dividend,f
  2458  01C2  0871               	movf	___lwdiv@divisor+1,w
  2459  01C3  1C03               	skipc
  2460  01C4  03F3               	decf	___lwdiv@dividend+1,f
  2461  01C5  02F3               	subwf	___lwdiv@dividend+1,f
  2462  01C6  1475               	bsf	___lwdiv@quotient,0
  2463  01C7                     l1516:	
  2464  01C7  3001               	movlw	1
  2465  01C8                     u905:	
  2466  01C8  1003               	clrc
  2467  01C9  0CF1               	rrf	___lwdiv@divisor+1,f
  2468  01CA  0CF0               	rrf	___lwdiv@divisor,f
  2469  01CB  3EFF               	addlw	-1
  2470  01CC  1D03               	skipz
  2471  01CD  29C8               	goto	u905
  2472  01CE  3001               	movlw	1
  2473  01CF  02F7               	subwf	___lwdiv@counter,f
  2474  01D0  1D03               	btfss	3,2
  2475  01D1  29B1               	goto	l1510
  2476  01D2                     l1520:	
  2477  01D2  0876               	movf	___lwdiv@quotient+1,w
  2478  01D3  00F1               	movwf	?___lwdiv+1
  2479  01D4  0875               	movf	___lwdiv@quotient,w
  2480  01D5  00F0               	movwf	?___lwdiv
  2481  01D6  0008               	return
  2482  01D7                     __end_of___lwdiv:	
  2483                           
  2484                           	psect	text12
  2485  01D7                     __ptext12:	
  2486 ;; *************** function _Lcd_Write_String *****************
  2487 ;; Defined at:
  2488 ;;		line 98 in file "./lcd.h"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  a               2    5[COMMON] PTR unsigned char 
  2491 ;;		 -> STR_6(19), STR_5(17), STR_4(17), Lcd_Write_Integer@Data(10), 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  i               2   10[COMMON] int 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2503 ;;      Params:         2       0       0       0       0
  2504 ;;      Locals:         2       0       0       0       0
  2505 ;;      Temps:          3       0       0       0       0
  2506 ;;      Totals:         7       0       0       0       0
  2507 ;;Total ram usage:        7 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    2
  2510 ;; This function calls:
  2511 ;;		_Lcd_Write_Char
  2512 ;; This function is called by:
  2513 ;;		_Lcd_Write_Integer
  2514 ;;		_main
  2515 ;;		_configurarDerecha
  2516 ;;		_configurarIzquierda
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           
  2521                           ;psect for function _Lcd_Write_String
  2522  01D7                     _Lcd_Write_String:	
  2523                           
  2524                           ;./lcd.h: 99:     int i;;./lcd.h: 100:     for (i = 0; a[i] != '\0'; i++)
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2528  01D7  01FA               	clrf	Lcd_Write_String@i
  2529  01D8  01FB               	clrf	Lcd_Write_String@i+1
  2530  01D9                     l1562:	
  2531  01D9  087A               	movf	Lcd_Write_String@i,w
  2532  01DA  0775               	addwf	Lcd_Write_String@a,w
  2533  01DB  00F8               	movwf	??_Lcd_Write_String+1
  2534  01DC  0876               	movf	Lcd_Write_String@a+1,w
  2535  01DD  00F7               	movwf	??_Lcd_Write_String
  2536  01DE  1803               	skipnc
  2537  01DF  0AF7               	incf	??_Lcd_Write_String,f
  2538  01E0  1BFA               	btfsc	Lcd_Write_String@i,7
  2539  01E1  03F7               	decf	??_Lcd_Write_String,f
  2540  01E2  0877               	movf	??_Lcd_Write_String,w
  2541  01E3  00F9               	movwf	??_Lcd_Write_String+2
  2542  01E4  0879               	movf	??_Lcd_Write_String+2,w
  2543  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2544  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2545  01E7  00FF               	movwf	127
  2546  01E8  0878               	movf	??_Lcd_Write_String+1,w
  2547  01E9  0084               	movwf	4
  2548  01EA  120A  118A  2003  120A  118A  	fcall	stringtab
  2549  01EF  3A00               	xorlw	0
  2550  01F0  1903               	btfsc	3,2
  2551  01F1  0008               	return
  2552                           
  2553                           ;./lcd.h: 101:         Lcd_Write_Char(a[i]);
  2554  01F2  087A               	movf	Lcd_Write_String@i,w
  2555  01F3  0775               	addwf	Lcd_Write_String@a,w
  2556  01F4  00F8               	movwf	??_Lcd_Write_String+1
  2557  01F5  0876               	movf	Lcd_Write_String@a+1,w
  2558  01F6  00F7               	movwf	??_Lcd_Write_String
  2559  01F7  1803               	skipnc
  2560  01F8  0AF7               	incf	??_Lcd_Write_String,f
  2561  01F9  1BFA               	btfsc	Lcd_Write_String@i,7
  2562  01FA  03F7               	decf	??_Lcd_Write_String,f
  2563  01FB  0877               	movf	??_Lcd_Write_String,w
  2564  01FC  00F9               	movwf	??_Lcd_Write_String+2
  2565  01FD  0879               	movf	??_Lcd_Write_String+2,w
  2566  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2567  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2568  0200  00FF               	movwf	127
  2569  0201  0878               	movf	??_Lcd_Write_String+1,w
  2570  0202  0084               	movwf	4
  2571  0203  120A  118A  2003  120A  118A  	fcall	stringtab
  2572  0208  120A  118A  2162  120A  118A  	fcall	_Lcd_Write_Char
  2573  020D  3001               	movlw	1
  2574  020E  07FA               	addwf	Lcd_Write_String@i,f
  2575  020F  1803               	skipnc
  2576  0210  0AFB               	incf	Lcd_Write_String@i+1,f
  2577  0211  3000               	movlw	0
  2578  0212  07FB               	addwf	Lcd_Write_String@i+1,f
  2579  0213  29D9               	goto	l1562
  2580  0214                     __end_of_Lcd_Write_String:	
  2581                           
  2582                           	psect	text13
  2583  0162                     __ptext13:	
  2584 ;; *************** function _Lcd_Write_Char *****************
  2585 ;; Defined at:
  2586 ;;		line 83 in file "./lcd.h"
  2587 ;; Parameters:    Size  Location     Type
  2588 ;;  a               1    wreg     unsigned char 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  a               1    4[COMMON] unsigned char 
  2591 ;;  y               1    3[COMMON] unsigned char 
  2592 ;;  temp            1    2[COMMON] unsigned char 
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      void 
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0, pclath, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2602 ;;      Params:         0       0       0       0       0
  2603 ;;      Locals:         3       0       0       0       0
  2604 ;;      Temps:          1       0       0       0       0
  2605 ;;      Totals:         4       0       0       0       0
  2606 ;;Total ram usage:        4 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    1
  2609 ;; This function calls:
  2610 ;;		_Lcd_Port
  2611 ;; This function is called by:
  2612 ;;		_Lcd_Write_String
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           
  2617                           ;psect for function _Lcd_Write_Char
  2618  0162                     _Lcd_Write_Char:	
  2619                           
  2620                           ;incstack = 0
  2621                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2622                           ;Lcd_Write_Char@a stored from wreg
  2623  0162  00F4               	movwf	Lcd_Write_Char@a
  2624                           
  2625                           ;./lcd.h: 84:     char temp, y;;./lcd.h: 85:     temp = a & 0x0F;
  2626  0163  0874               	movf	Lcd_Write_Char@a,w
  2627  0164  390F               	andlw	15
  2628  0165  00F1               	movwf	??_Lcd_Write_Char
  2629  0166  0871               	movf	??_Lcd_Write_Char,w
  2630  0167  00F2               	movwf	Lcd_Write_Char@temp
  2631                           
  2632                           ;./lcd.h: 86:     y = a & 0xF0;
  2633  0168  0874               	movf	Lcd_Write_Char@a,w
  2634  0169  39F0               	andlw	240
  2635  016A  00F1               	movwf	??_Lcd_Write_Char
  2636  016B  0871               	movf	??_Lcd_Write_Char,w
  2637  016C  00F3               	movwf	Lcd_Write_Char@y
  2638                           
  2639                           ;./lcd.h: 87:     RB2 = 1;
  2640  016D  1283               	bcf	3,5	;RP0=0, select bank0
  2641  016E  1303               	bcf	3,6	;RP1=0, select bank0
  2642  016F  1506               	bsf	6,2	;volatile
  2643                           
  2644                           ;./lcd.h: 88:     Lcd_Port(y >> 4);
  2645  0170  0873               	movf	Lcd_Write_Char@y,w
  2646  0171  00F1               	movwf	??_Lcd_Write_Char
  2647  0172  3004               	movlw	4
  2648  0173                     u845:	
  2649  0173  1003               	clrc
  2650  0174  0CF1               	rrf	??_Lcd_Write_Char,f
  2651  0175  3EFF               	addlw	-1
  2652  0176  1D03               	skipz
  2653  0177  2973               	goto	u845
  2654  0178  0871               	movf	??_Lcd_Write_Char,w
  2655  0179  120A  118A  20B9  120A  118A  	fcall	_Lcd_Port
  2656                           
  2657                           ;./lcd.h: 89:     RB3 = 1;
  2658  017E  1283               	bcf	3,5	;RP0=0, select bank0
  2659  017F  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0180  1586               	bsf	6,3	;volatile
  2661                           
  2662                           ;./lcd.h: 90:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2663  0181  301A               	movlw	26
  2664  0182  00F1               	movwf	??_Lcd_Write_Char
  2665  0183                     u1617:	
  2666  0183  0BF1               	decfsz	??_Lcd_Write_Char,f
  2667  0184  2983               	goto	u1617
  2668  0185  0000               	nop
  2669                           
  2670                           ;./lcd.h: 91:     RB3 = 0;
  2671  0186  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0187  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0188  1186               	bcf	6,3	;volatile
  2674                           
  2675                           ;./lcd.h: 92:     Lcd_Port(temp);
  2676  0189  0872               	movf	Lcd_Write_Char@temp,w
  2677  018A  120A  118A  20B9  120A  118A  	fcall	_Lcd_Port
  2678                           
  2679                           ;./lcd.h: 93:     RB3 = 1;
  2680  018F  1283               	bcf	3,5	;RP0=0, select bank0
  2681  0190  1303               	bcf	3,6	;RP1=0, select bank0
  2682  0191  1586               	bsf	6,3	;volatile
  2683                           
  2684                           ;./lcd.h: 94:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2685  0192  301A               	movlw	26
  2686  0193  00F1               	movwf	??_Lcd_Write_Char
  2687  0194                     u1627:	
  2688  0194  0BF1               	decfsz	??_Lcd_Write_Char,f
  2689  0195  2994               	goto	u1627
  2690  0196  0000               	nop
  2691                           
  2692                           ;./lcd.h: 95:     RB3 = 0;
  2693  0197  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0198  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0199  1186               	bcf	6,3	;volatile
  2696  019A  0008               	return
  2697  019B                     __end_of_Lcd_Write_Char:	
  2698                           
  2699                           	psect	text14
  2700  0214                     __ptext14:	
  2701 ;; *************** function _Lcd_Set_Cursor *****************
  2702 ;; Defined at:
  2703 ;;		line 48 in file "./lcd.h"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  a               1    wreg     unsigned char 
  2706 ;;  b               1    4[COMMON] unsigned char 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  a               1    7[COMMON] unsigned char 
  2709 ;;  temp            1   10[COMMON] unsigned char 
  2710 ;;  y               1    9[COMMON] unsigned char 
  2711 ;;  z               1    8[COMMON] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0, pclath, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2721 ;;      Params:         1       0       0       0       0
  2722 ;;      Locals:         4       0       0       0       0
  2723 ;;      Temps:          2       0       0       0       0
  2724 ;;      Totals:         7       0       0       0       0
  2725 ;;Total ram usage:        7 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    2
  2728 ;; This function calls:
  2729 ;;		_Lcd_Cmd
  2730 ;; This function is called by:
  2731 ;;		_main
  2732 ;;		_configurarDerecha
  2733 ;;		_configurarIzquierda
  2734 ;;		_RunMotor
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function _Lcd_Set_Cursor
  2740  0214                     _Lcd_Set_Cursor:	
  2741                           
  2742                           ;incstack = 0
  2743                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2744                           ;Lcd_Set_Cursor@a stored from wreg
  2745  0214  00F7               	movwf	Lcd_Set_Cursor@a
  2746                           
  2747                           ;./lcd.h: 49:     char temp, z, y;;./lcd.h: 50:     if (a == 1) {
  2748  0215  0377               	decf	Lcd_Set_Cursor@a,w
  2749  0216  1D03               	btfss	3,2
  2750  0217  2A39               	goto	l1642
  2751                           
  2752                           ;./lcd.h: 51:         temp = 0x80 + b - 1;
  2753  0218  0874               	movf	Lcd_Set_Cursor@b,w
  2754  0219  3E7F               	addlw	127
  2755  021A  00F5               	movwf	??_Lcd_Set_Cursor
  2756  021B  0875               	movf	??_Lcd_Set_Cursor,w
  2757  021C  00FA               	movwf	Lcd_Set_Cursor@temp
  2758                           
  2759                           ;./lcd.h: 52:         z = temp >> 4;
  2760  021D  087A               	movf	Lcd_Set_Cursor@temp,w
  2761  021E  00F5               	movwf	??_Lcd_Set_Cursor
  2762  021F  3004               	movlw	4
  2763  0220                     u1105:	
  2764  0220  1003               	clrc
  2765  0221  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2766  0222  3EFF               	addlw	-1
  2767  0223  1D03               	skipz
  2768  0224  2A20               	goto	u1105
  2769  0225  0875               	movf	??_Lcd_Set_Cursor,w
  2770  0226  00F6               	movwf	??_Lcd_Set_Cursor+1
  2771  0227  0876               	movf	??_Lcd_Set_Cursor+1,w
  2772  0228  00F8               	movwf	Lcd_Set_Cursor@z
  2773                           
  2774                           ;./lcd.h: 53:         y = temp & 0x0F;
  2775  0229  087A               	movf	Lcd_Set_Cursor@temp,w
  2776  022A  390F               	andlw	15
  2777  022B  00F5               	movwf	??_Lcd_Set_Cursor
  2778  022C  0875               	movf	??_Lcd_Set_Cursor,w
  2779  022D  00F9               	movwf	Lcd_Set_Cursor@y
  2780                           
  2781                           ;./lcd.h: 54:         Lcd_Cmd(z);
  2782  022E  0878               	movf	Lcd_Set_Cursor@z,w
  2783  022F  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  2784                           
  2785                           ;./lcd.h: 55:         Lcd_Cmd(y);
  2786  0234  0879               	movf	Lcd_Set_Cursor@y,w
  2787  0235  120A  118A  20D3   	fcall	_Lcd_Cmd
  2788                           
  2789                           ;./lcd.h: 56:     } else if (a == 2) {
  2790  0238  0008               	return
  2791  0239                     l1642:	
  2792  0239  3002               	movlw	2
  2793  023A  0677               	xorwf	Lcd_Set_Cursor@a,w
  2794  023B  1D03               	btfss	3,2
  2795  023C  0008               	return
  2796                           
  2797                           ;./lcd.h: 57:         temp = 0xC0 + b - 1;
  2798  023D  0874               	movf	Lcd_Set_Cursor@b,w
  2799  023E  3EBF               	addlw	191
  2800  023F  00F5               	movwf	??_Lcd_Set_Cursor
  2801  0240  0875               	movf	??_Lcd_Set_Cursor,w
  2802  0241  00FA               	movwf	Lcd_Set_Cursor@temp
  2803                           
  2804                           ;./lcd.h: 58:         z = temp >> 4;
  2805  0242  087A               	movf	Lcd_Set_Cursor@temp,w
  2806  0243  00F5               	movwf	??_Lcd_Set_Cursor
  2807  0244  3004               	movlw	4
  2808  0245                     u1125:	
  2809  0245  1003               	clrc
  2810  0246  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2811  0247  3EFF               	addlw	-1
  2812  0248  1D03               	skipz
  2813  0249  2A45               	goto	u1125
  2814  024A  0875               	movf	??_Lcd_Set_Cursor,w
  2815  024B  00F6               	movwf	??_Lcd_Set_Cursor+1
  2816  024C  0876               	movf	??_Lcd_Set_Cursor+1,w
  2817  024D  00F8               	movwf	Lcd_Set_Cursor@z
  2818                           
  2819                           ;./lcd.h: 59:         y = temp & 0x0F;
  2820  024E  087A               	movf	Lcd_Set_Cursor@temp,w
  2821  024F  390F               	andlw	15
  2822  0250  00F5               	movwf	??_Lcd_Set_Cursor
  2823  0251  0875               	movf	??_Lcd_Set_Cursor,w
  2824  0252  00F9               	movwf	Lcd_Set_Cursor@y
  2825                           
  2826                           ;./lcd.h: 60:         Lcd_Cmd(z);
  2827  0253  0878               	movf	Lcd_Set_Cursor@z,w
  2828  0254  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  2829                           
  2830                           ;./lcd.h: 61:         Lcd_Cmd(y);
  2831  0259  0879               	movf	Lcd_Set_Cursor@y,w
  2832  025A  120A  118A  20D3   	fcall	_Lcd_Cmd
  2833  025D  0008               	return
  2834  025E                     __end_of_Lcd_Set_Cursor:	
  2835                           
  2836                           	psect	text15
  2837  00AE                     __ptext15:	
  2838 ;; *************** function _Lcd_Clear *****************
  2839 ;; Defined at:
  2840 ;;		line 43 in file "./lcd.h"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0, pclath, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2854 ;;      Params:         0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0
  2857 ;;      Totals:         0       0       0       0       0
  2858 ;;Total ram usage:        0 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    2
  2861 ;; This function calls:
  2862 ;;		_Lcd_Cmd
  2863 ;; This function is called by:
  2864 ;;		_main
  2865 ;;		_configurarDerecha
  2866 ;;		_configurarIzquierda
  2867 ;;		_RunMotor
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           
  2872                           ;psect for function _Lcd_Clear
  2873  00AE                     _Lcd_Clear:	
  2874                           
  2875                           ;./lcd.h: 44:     Lcd_Cmd(0);
  2876                           
  2877                           ;incstack = 0
  2878                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2879  00AE  3000               	movlw	0
  2880  00AF  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  2881                           
  2882                           ;./lcd.h: 45:     Lcd_Cmd(1);
  2883  00B4  3001               	movlw	1
  2884  00B5  120A  118A  20D3   	fcall	_Lcd_Cmd
  2885  00B8  0008               	return
  2886  00B9                     __end_of_Lcd_Clear:	
  2887                           
  2888                           	psect	text16
  2889  0392                     __ptext16:	
  2890 ;; *************** function _KeyPadGetKey *****************
  2891 ;; Defined at:
  2892 ;;		line 32 in file "./KeyPad.h"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  row             1    5[COMMON] unsigned char 
  2897 ;;  key             1    4[COMMON] unsigned char 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  2    0[COMMON] int 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2907 ;;      Params:         2       0       0       0       0
  2908 ;;      Locals:         2       0       0       0       0
  2909 ;;      Temps:          2       0       0       0       0
  2910 ;;      Totals:         6       0       0       0       0
  2911 ;;Total ram usage:        6 bytes
  2912 ;; Hardware stack levels used:    2
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_main
  2917 ;;		_configurarDerecha
  2918 ;;		_configurarIzquierda
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _KeyPadGetKey
  2924  0392                     _KeyPadGetKey:	
  2925                           
  2926                           ;./KeyPad.h: 34:     char key = 0, row;
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _KeyPadGetKey: [wreg-fsr0h+status,2+status,0+pclath]
  2930  0392  01F4               	clrf	KeyPadGetKey@key
  2931                           
  2932                           ;./KeyPad.h: 36:     for (row = 0b00000001; row < 0b00010000; row <<= 1) {
  2933  0393  01F5               	clrf	KeyPadGetKey@row
  2934  0394  0AF5               	incf	KeyPadGetKey@row,f
  2935  0395                     l167:	
  2936                           
  2937                           ;./KeyPad.h: 37:         {;./KeyPad.h: 38:             RA0 = (row & 0x0001) >> 0;
  2938  0395  1C75               	btfss	KeyPadGetKey@row,0
  2939  0396  2B9B               	goto	u1140
  2940  0397  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0398  1303               	bcf	3,6	;RP1=0, select bank0
  2942  0399  1405               	bsf	5,0	;volatile
  2943  039A  2B9E               	goto	l1670
  2944  039B                     u1140:	
  2945  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2946  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2947  039D  1005               	bcf	5,0	;volatile
  2948  039E                     l1670:	
  2949                           
  2950                           ;./KeyPad.h: 39:             RA1 = (row & 0x0002) >> 1;
  2951  039E  0875               	movf	KeyPadGetKey@row,w
  2952  039F  00F2               	movwf	??_KeyPadGetKey
  2953  03A0  3001               	movlw	1
  2954  03A1                     u1165:	
  2955  03A1  1003               	clrc
  2956  03A2  0CF2               	rrf	??_KeyPadGetKey,f
  2957  03A3  3EFF               	addlw	-1
  2958  03A4  1D03               	skipz
  2959  03A5  2BA1               	goto	u1165
  2960  03A6  1C72               	btfss	??_KeyPadGetKey,0
  2961  03A7  2BAC               	goto	u1170
  2962  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2963  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2964  03AA  1485               	bsf	5,1	;volatile
  2965  03AB  2BAF               	goto	u1184
  2966  03AC                     u1170:	
  2967  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2968  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2969  03AE  1085               	bcf	5,1	;volatile
  2970  03AF                     u1184:	
  2971                           
  2972                           ;./KeyPad.h: 40:             RA2 = (row & 0x0004) >> 2;
  2973  03AF  0875               	movf	KeyPadGetKey@row,w
  2974  03B0  00F2               	movwf	??_KeyPadGetKey
  2975  03B1  3002               	movlw	2
  2976  03B2                     u1195:	
  2977  03B2  1003               	clrc
  2978  03B3  0CF2               	rrf	??_KeyPadGetKey,f
  2979  03B4  3EFF               	addlw	-1
  2980  03B5  1D03               	skipz
  2981  03B6  2BB2               	goto	u1195
  2982  03B7  1C72               	btfss	??_KeyPadGetKey,0
  2983  03B8  2BBD               	goto	u1200
  2984  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  2985  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  2986  03BB  1505               	bsf	5,2	;volatile
  2987  03BC  2BC0               	goto	u1214
  2988  03BD                     u1200:	
  2989  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  2990  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2991  03BF  1105               	bcf	5,2	;volatile
  2992  03C0                     u1214:	
  2993                           
  2994                           ;./KeyPad.h: 41:             RA3 = (row & 0x0008) >> 3;
  2995  03C0  0875               	movf	KeyPadGetKey@row,w
  2996  03C1  00F2               	movwf	??_KeyPadGetKey
  2997  03C2  3003               	movlw	3
  2998  03C3                     u1225:	
  2999  03C3  1003               	clrc
  3000  03C4  0CF2               	rrf	??_KeyPadGetKey,f
  3001  03C5  3EFF               	addlw	-1
  3002  03C6  1D03               	skipz
  3003  03C7  2BC3               	goto	u1225
  3004  03C8  1C72               	btfss	??_KeyPadGetKey,0
  3005  03C9  2BCE               	goto	u1230
  3006  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  3007  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  3008  03CC  1585               	bsf	5,3	;volatile
  3009  03CD  2BD1               	goto	l1672
  3010  03CE                     u1230:	
  3011  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  3012  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  3013  03D0  1185               	bcf	5,3	;volatile
  3014  03D1                     l1672:	
  3015                           
  3016                           ;./KeyPad.h: 42:             _delay((unsigned long)((1)*(8000000/4000.0)));
  3017  03D1  3003               	movlw	3
  3018  03D2  00F3               	movwf	??_KeyPadGetKey+1
  3019  03D3  3097               	movlw	151
  3020  03D4  00F2               	movwf	??_KeyPadGetKey
  3021  03D5                     u1637:	
  3022  03D5  0BF2               	decfsz	??_KeyPadGetKey,f
  3023  03D6  2BD5               	goto	u1637
  3024  03D7  0BF3               	decfsz	??_KeyPadGetKey+1,f
  3025  03D8  2BD5               	goto	u1637
  3026  03D9  2BDA               	nop2
  3027                           
  3028                           ;./KeyPad.h: 43:         };./KeyPad.h: 45:         if (RA4)break;
  3029  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  3030  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  3031  03DC  1A05               	btfsc	5,4	;volatile
  3032  03DD  2BFA               	goto	l168
  3033                           
  3034                           ;./KeyPad.h: 46:         key++;
  3035  03DE  3001               	movlw	1
  3036  03DF  00F2               	movwf	??_KeyPadGetKey
  3037  03E0  0872               	movf	??_KeyPadGetKey,w
  3038  03E1  07F4               	addwf	KeyPadGetKey@key,f
  3039                           
  3040                           ;./KeyPad.h: 47:         if (RA5)break;
  3041  03E2  1A85               	btfsc	5,5	;volatile
  3042  03E3  2BFA               	goto	l168
  3043                           
  3044                           ;./KeyPad.h: 48:         key++;
  3045  03E4  3001               	movlw	1
  3046  03E5  00F2               	movwf	??_KeyPadGetKey
  3047  03E6  0872               	movf	??_KeyPadGetKey,w
  3048  03E7  07F4               	addwf	KeyPadGetKey@key,f
  3049                           
  3050                           ;./KeyPad.h: 49:         if (RA6)break;
  3051  03E8  1B05               	btfsc	5,6	;volatile
  3052  03E9  2BFA               	goto	l168
  3053                           
  3054                           ;./KeyPad.h: 50:         key++;
  3055  03EA  3001               	movlw	1
  3056  03EB  00F2               	movwf	??_KeyPadGetKey
  3057  03EC  0872               	movf	??_KeyPadGetKey,w
  3058  03ED  07F4               	addwf	KeyPadGetKey@key,f
  3059                           
  3060                           ;./KeyPad.h: 51:         if (RA7)break;
  3061  03EE  1B85               	btfsc	5,7	;volatile
  3062  03EF  2BFA               	goto	l168
  3063                           
  3064                           ;./KeyPad.h: 52:         key++;
  3065  03F0  3001               	movlw	1
  3066  03F1  00F2               	movwf	??_KeyPadGetKey
  3067  03F2  0872               	movf	??_KeyPadGetKey,w
  3068  03F3  07F4               	addwf	KeyPadGetKey@key,f
  3069                           
  3070                           ;./KeyPad.h: 53:     }
  3071  03F4  1003               	clrc
  3072  03F5  0DF5               	rlf	KeyPadGetKey@row,f
  3073  03F6  3010               	movlw	16
  3074  03F7  0275               	subwf	KeyPadGetKey@row,w
  3075  03F8  1C03               	skipc
  3076  03F9  2B95               	goto	l167
  3077  03FA                     l168:	
  3078                           
  3079                           ;./KeyPad.h: 54:     RA0 = 0;
  3080  03FA  1005               	bcf	5,0	;volatile
  3081                           
  3082                           ;./KeyPad.h: 55:     RA1 = 0;
  3083  03FB  1085               	bcf	5,1	;volatile
  3084                           
  3085                           ;./KeyPad.h: 56:     RA2 = 0;
  3086  03FC  1105               	bcf	5,2	;volatile
  3087                           
  3088                           ;./KeyPad.h: 57:     RA3 = 0;
  3089  03FD  1185               	bcf	5,3	;volatile
  3090                           
  3091                           ;./KeyPad.h: 58:     if (key != old_key) {
  3092  03FE  0874               	movf	KeyPadGetKey@key,w
  3093  03FF  064B               	xorwf	_old_key,w
  3094  0400  1903               	skipnz
  3095  0401  2C16               	goto	l1712
  3096                           
  3097                           ;./KeyPad.h: 59:         old_key = key;
  3098  0402  0874               	movf	KeyPadGetKey@key,w
  3099  0403  00F2               	movwf	??_KeyPadGetKey
  3100  0404  0872               	movf	??_KeyPadGetKey,w
  3101  0405  00CB               	movwf	_old_key
  3102                           
  3103                           ;./KeyPad.h: 60:         return keyPadMatrix[ key ];
  3104  0406  0874               	movf	KeyPadGetKey@key,w
  3105  0407  00F2               	movwf	??_KeyPadGetKey
  3106  0408  0772               	addwf	??_KeyPadGetKey,w
  3107  0409  3E01               	addlw	low ((_keyPadMatrix-__stringbase)| (0+32768))
  3108  040A  0084               	movwf	4
  3109  040B  120A  118A  200D  120A  118A  	fcall	stringdir
  3110  0410  00F0               	movwf	?_KeyPadGetKey
  3111  0411  120A  118A  200D   	fcall	stringdir
  3112  0414  00F1               	movwf	?_KeyPadGetKey+1
  3113  0415  0008               	return
  3114  0416                     l1712:	
  3115                           
  3116                           ;./KeyPad.h: 62:         return keyPadMatrix[ 0x10 ];
  3117  0416  3021               	movlw	low (((_keyPadMatrix+32)-__stringbase)| (0+32768))
  3118  0417  0084               	movwf	4
  3119  0418  120A  118A  200D  120A  118A  	fcall	stringdir
  3120  041D  00F0               	movwf	?_KeyPadGetKey
  3121  041E  120A  118A  200D   	fcall	stringdir
  3122  0421  00F1               	movwf	?_KeyPadGetKey+1
  3123  0422  0008               	return
  3124  0423                     __end_of_KeyPadGetKey:	
  3125                           
  3126                           	psect	text17
  3127  0636                     __ptext17:	
  3128 ;; *************** function _UART_Init *****************
  3129 ;; Defined at:
  3130 ;;		line 1 in file "./uart.h"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  baudrate        4    6[BANK0 ] const long 
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;  x               2    9[COMMON] unsigned int 
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      unsigned char 
  3137 ;; Registers used:
  3138 ;;		wreg, status,2, status,0, pclath, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3144 ;;      Params:         0       4       0       0       0
  3145 ;;      Locals:         2       0       0       0       0
  3146 ;;      Temps:          0      12       0       0       0
  3147 ;;      Totals:         2      16       0       0       0
  3148 ;;Total ram usage:       18 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    1
  3151 ;; This function calls:
  3152 ;;		___aldiv
  3153 ;; This function is called by:
  3154 ;;		_main
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           
  3159                           ;psect for function _UART_Init
  3160  0636                     _UART_Init:	
  3161                           
  3162                           ;./uart.h: 2:     unsigned int x;;./uart.h: 3:     x = (8000000 - baudrate * 64) / (baud
      +                          rate * 64);
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
  3166  0636  1283               	bcf	3,5	;RP0=0, select bank0
  3167  0637  1303               	bcf	3,6	;RP1=0, select bank0
  3168  0638  0826               	movf	UART_Init@baudrate,w
  3169  0639  00AA               	movwf	??_UART_Init
  3170  063A  0827               	movf	UART_Init@baudrate+1,w
  3171  063B  00AB               	movwf	??_UART_Init+1
  3172  063C  0828               	movf	UART_Init@baudrate+2,w
  3173  063D  00AC               	movwf	??_UART_Init+2
  3174  063E  0829               	movf	UART_Init@baudrate+3,w
  3175  063F  00AD               	movwf	??_UART_Init+3
  3176  0640  3006               	movlw	6
  3177  0641                     u1465:	
  3178  0641  1003               	clrc
  3179  0642  0DAA               	rlf	??_UART_Init,f
  3180  0643  0DAB               	rlf	??_UART_Init+1,f
  3181  0644  0DAC               	rlf	??_UART_Init+2,f
  3182  0645  0DAD               	rlf	??_UART_Init+3,f
  3183  0646  3EFF               	addlw	-1
  3184  0647  1D03               	skipz
  3185  0648  2E41               	goto	u1465
  3186  0649  082D               	movf	??_UART_Init+3,w
  3187  064A  00F3               	movwf	___aldiv@divisor+3
  3188  064B  082C               	movf	??_UART_Init+2,w
  3189  064C  00F2               	movwf	___aldiv@divisor+2
  3190  064D  082B               	movf	??_UART_Init+1,w
  3191  064E  00F1               	movwf	___aldiv@divisor+1
  3192  064F  082A               	movf	??_UART_Init,w
  3193  0650  00F0               	movwf	___aldiv@divisor
  3194  0651  0826               	movf	UART_Init@baudrate,w
  3195  0652  00AE               	movwf	??_UART_Init+4
  3196  0653  0827               	movf	UART_Init@baudrate+1,w
  3197  0654  00AF               	movwf	??_UART_Init+5
  3198  0655  0828               	movf	UART_Init@baudrate+2,w
  3199  0656  00B0               	movwf	??_UART_Init+6
  3200  0657  0829               	movf	UART_Init@baudrate+3,w
  3201  0658  00B1               	movwf	??_UART_Init+7
  3202  0659  3006               	movlw	6
  3203  065A                     u1475:	
  3204  065A  1003               	clrc
  3205  065B  0DAE               	rlf	??_UART_Init+4,f
  3206  065C  0DAF               	rlf	??_UART_Init+5,f
  3207  065D  0DB0               	rlf	??_UART_Init+6,f
  3208  065E  0DB1               	rlf	??_UART_Init+7,f
  3209  065F  3EFF               	addlw	-1
  3210  0660  1D03               	skipz
  3211  0661  2E5A               	goto	u1475
  3212  0662  3000               	movlw	0
  3213  0663  00B2               	movwf	??_UART_Init+8
  3214  0664  3012               	movlw	18
  3215  0665  00B3               	movwf	??_UART_Init+9
  3216  0666  307A               	movlw	122
  3217  0667  00B4               	movwf	??_UART_Init+10
  3218  0668  3000               	movlw	0
  3219  0669  00B5               	movwf	??_UART_Init+11
  3220  066A  082E               	movf	??_UART_Init+4,w
  3221  066B  02B2               	subwf	??_UART_Init+8,f
  3222  066C  082F               	movf	??_UART_Init+5,w
  3223  066D  1C03               	skipc
  3224  066E  0F2F               	incfsz	??_UART_Init+5,w
  3225  066F  2E71               	goto	u1481
  3226  0670  2E72               	goto	u1482
  3227  0671                     u1481:	
  3228  0671  02B3               	subwf	??_UART_Init+9,f
  3229  0672                     u1482:	
  3230  0672  0830               	movf	??_UART_Init+6,w
  3231  0673  1C03               	skipc
  3232  0674  0F30               	incfsz	??_UART_Init+6,w
  3233  0675  2E77               	goto	u1483
  3234  0676  2E78               	goto	u1484
  3235  0677                     u1483:	
  3236  0677  02B4               	subwf	??_UART_Init+10,f
  3237  0678                     u1484:	
  3238  0678  0831               	movf	??_UART_Init+7,w
  3239  0679  1C03               	skipc
  3240  067A  0F31               	incfsz	??_UART_Init+7,w
  3241  067B  2E7D               	goto	u1485
  3242  067C  2E7E               	goto	u1486
  3243  067D                     u1485:	
  3244  067D  02B5               	subwf	??_UART_Init+11,f
  3245  067E                     u1486:	
  3246  067E  0835               	movf	??_UART_Init+11,w
  3247  067F  00F7               	movwf	___aldiv@dividend+3
  3248  0680  0834               	movf	??_UART_Init+10,w
  3249  0681  00F6               	movwf	___aldiv@dividend+2
  3250  0682  0833               	movf	??_UART_Init+9,w
  3251  0683  00F5               	movwf	___aldiv@dividend+1
  3252  0684  0832               	movf	??_UART_Init+8,w
  3253  0685  00F4               	movwf	___aldiv@dividend
  3254  0686  120A  118A  2303  120A  118A  	fcall	___aldiv
  3255  068B  0871               	movf	?___aldiv+1,w
  3256  068C  00FA               	movwf	UART_Init@x+1
  3257  068D  0870               	movf	?___aldiv,w
  3258  068E  00F9               	movwf	UART_Init@x
  3259                           
  3260                           ;./uart.h: 4:     if (x > 255) {
  3261  068F  3001               	movlw	1
  3262  0690  027A               	subwf	UART_Init@x+1,w
  3263  0691  3000               	movlw	0
  3264  0692  1903               	skipnz
  3265  0693  0279               	subwf	UART_Init@x,w
  3266  0694  1C03               	skipc
  3267  0695  2EF2               	goto	l1812
  3268                           
  3269                           ;./uart.h: 5:         x = (8000000 - baudrate * 16) / (baudrate * 16);
  3270  0696  1283               	bcf	3,5	;RP0=0, select bank0
  3271  0697  1303               	bcf	3,6	;RP1=0, select bank0
  3272  0698  0826               	movf	UART_Init@baudrate,w
  3273  0699  00AA               	movwf	??_UART_Init
  3274  069A  0827               	movf	UART_Init@baudrate+1,w
  3275  069B  00AB               	movwf	??_UART_Init+1
  3276  069C  0828               	movf	UART_Init@baudrate+2,w
  3277  069D  00AC               	movwf	??_UART_Init+2
  3278  069E  0829               	movf	UART_Init@baudrate+3,w
  3279  069F  00AD               	movwf	??_UART_Init+3
  3280  06A0  3004               	movlw	4
  3281  06A1                     u1505:	
  3282  06A1  1003               	clrc
  3283  06A2  0DAA               	rlf	??_UART_Init,f
  3284  06A3  0DAB               	rlf	??_UART_Init+1,f
  3285  06A4  0DAC               	rlf	??_UART_Init+2,f
  3286  06A5  0DAD               	rlf	??_UART_Init+3,f
  3287  06A6  3EFF               	addlw	-1
  3288  06A7  1D03               	skipz
  3289  06A8  2EA1               	goto	u1505
  3290  06A9  082D               	movf	??_UART_Init+3,w
  3291  06AA  00F3               	movwf	___aldiv@divisor+3
  3292  06AB  082C               	movf	??_UART_Init+2,w
  3293  06AC  00F2               	movwf	___aldiv@divisor+2
  3294  06AD  082B               	movf	??_UART_Init+1,w
  3295  06AE  00F1               	movwf	___aldiv@divisor+1
  3296  06AF  082A               	movf	??_UART_Init,w
  3297  06B0  00F0               	movwf	___aldiv@divisor
  3298  06B1  0826               	movf	UART_Init@baudrate,w
  3299  06B2  00AE               	movwf	??_UART_Init+4
  3300  06B3  0827               	movf	UART_Init@baudrate+1,w
  3301  06B4  00AF               	movwf	??_UART_Init+5
  3302  06B5  0828               	movf	UART_Init@baudrate+2,w
  3303  06B6  00B0               	movwf	??_UART_Init+6
  3304  06B7  0829               	movf	UART_Init@baudrate+3,w
  3305  06B8  00B1               	movwf	??_UART_Init+7
  3306  06B9  3004               	movlw	4
  3307  06BA                     u1515:	
  3308  06BA  1003               	clrc
  3309  06BB  0DAE               	rlf	??_UART_Init+4,f
  3310  06BC  0DAF               	rlf	??_UART_Init+5,f
  3311  06BD  0DB0               	rlf	??_UART_Init+6,f
  3312  06BE  0DB1               	rlf	??_UART_Init+7,f
  3313  06BF  3EFF               	addlw	-1
  3314  06C0  1D03               	skipz
  3315  06C1  2EBA               	goto	u1515
  3316  06C2  3000               	movlw	0
  3317  06C3  00B2               	movwf	??_UART_Init+8
  3318  06C4  3012               	movlw	18
  3319  06C5  00B3               	movwf	??_UART_Init+9
  3320  06C6  307A               	movlw	122
  3321  06C7  00B4               	movwf	??_UART_Init+10
  3322  06C8  3000               	movlw	0
  3323  06C9  00B5               	movwf	??_UART_Init+11
  3324  06CA  082E               	movf	??_UART_Init+4,w
  3325  06CB  02B2               	subwf	??_UART_Init+8,f
  3326  06CC  082F               	movf	??_UART_Init+5,w
  3327  06CD  1C03               	skipc
  3328  06CE  0F2F               	incfsz	??_UART_Init+5,w
  3329  06CF  2ED1               	goto	u1521
  3330  06D0  2ED2               	goto	u1522
  3331  06D1                     u1521:	
  3332  06D1  02B3               	subwf	??_UART_Init+9,f
  3333  06D2                     u1522:	
  3334  06D2  0830               	movf	??_UART_Init+6,w
  3335  06D3  1C03               	skipc
  3336  06D4  0F30               	incfsz	??_UART_Init+6,w
  3337  06D5  2ED7               	goto	u1523
  3338  06D6  2ED8               	goto	u1524
  3339  06D7                     u1523:	
  3340  06D7  02B4               	subwf	??_UART_Init+10,f
  3341  06D8                     u1524:	
  3342  06D8  0831               	movf	??_UART_Init+7,w
  3343  06D9  1C03               	skipc
  3344  06DA  0F31               	incfsz	??_UART_Init+7,w
  3345  06DB  2EDD               	goto	u1525
  3346  06DC  2EDE               	goto	u1526
  3347  06DD                     u1525:	
  3348  06DD  02B5               	subwf	??_UART_Init+11,f
  3349  06DE                     u1526:	
  3350  06DE  0835               	movf	??_UART_Init+11,w
  3351  06DF  00F7               	movwf	___aldiv@dividend+3
  3352  06E0  0834               	movf	??_UART_Init+10,w
  3353  06E1  00F6               	movwf	___aldiv@dividend+2
  3354  06E2  0833               	movf	??_UART_Init+9,w
  3355  06E3  00F5               	movwf	___aldiv@dividend+1
  3356  06E4  0832               	movf	??_UART_Init+8,w
  3357  06E5  00F4               	movwf	___aldiv@dividend
  3358  06E6  120A  118A  2303  120A  118A  	fcall	___aldiv
  3359  06EB  0871               	movf	?___aldiv+1,w
  3360  06EC  00FA               	movwf	UART_Init@x+1
  3361  06ED  0870               	movf	?___aldiv,w
  3362  06EE  00F9               	movwf	UART_Init@x
  3363                           
  3364                           ;./uart.h: 6:         BRGH = 1;
  3365  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  3366  06F0  1303               	bcf	3,6	;RP1=0, select bank1
  3367  06F1  1518               	bsf	24,2	;volatile
  3368  06F2                     l1812:	
  3369                           
  3370                           ;./uart.h: 8:     if (x < 256) {
  3371  06F2  3001               	movlw	1
  3372  06F3  027A               	subwf	UART_Init@x+1,w
  3373  06F4  3000               	movlw	0
  3374  06F5  1903               	skipnz
  3375  06F6  0279               	subwf	UART_Init@x,w
  3376  06F7  1803               	skipnc
  3377  06F8  0008               	return
  3378                           
  3379                           ;./uart.h: 9:         SPBRG = x;
  3380  06F9  0879               	movf	UART_Init@x,w
  3381  06FA  1683               	bsf	3,5	;RP0=1, select bank1
  3382  06FB  1303               	bcf	3,6	;RP1=0, select bank1
  3383  06FC  0099               	movwf	25	;volatile
  3384                           
  3385                           ;./uart.h: 10:         SYNC = 0;
  3386  06FD  1218               	bcf	24,4	;volatile
  3387                           
  3388                           ;./uart.h: 11:         SPEN = 1;
  3389  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  3390  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  3391  0700  1798               	bsf	24,7	;volatile
  3392                           
  3393                           ;./uart.h: 12:         TRISC7 = 1;
  3394  0701  1683               	bsf	3,5	;RP0=1, select bank1
  3395  0702  1303               	bcf	3,6	;RP1=0, select bank1
  3396  0703  1787               	bsf	7,7	;volatile
  3397                           
  3398                           ;./uart.h: 13:         TRISC6 = 1;
  3399  0704  1707               	bsf	7,6	;volatile
  3400                           
  3401                           ;./uart.h: 14:         CREN = 1;
  3402  0705  1283               	bcf	3,5	;RP0=0, select bank0
  3403  0706  1303               	bcf	3,6	;RP1=0, select bank0
  3404  0707  1618               	bsf	24,4	;volatile
  3405                           
  3406                           ;./uart.h: 15:         TXEN = 1;
  3407  0708  1683               	bsf	3,5	;RP0=1, select bank1
  3408  0709  1303               	bcf	3,6	;RP1=0, select bank1
  3409  070A  1698               	bsf	24,5	;volatile
  3410  070B  0008               	return
  3411  070C                     __end_of_UART_Init:	
  3412                           
  3413                           	psect	text18
  3414  0303                     __ptext18:	
  3415 ;; *************** function ___aldiv *****************
  3416 ;; Defined at:
  3417 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;  divisor         4    0[COMMON] long 
  3420 ;;  dividend        4    4[COMMON] long 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;  quotient        4    2[BANK0 ] long 
  3423 ;;  sign            1    1[BANK0 ] unsigned char 
  3424 ;;  counter         1    0[BANK0 ] unsigned char 
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  4    0[COMMON] long 
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3434 ;;      Params:         8       0       0       0       0
  3435 ;;      Locals:         0       6       0       0       0
  3436 ;;      Temps:          1       0       0       0       0
  3437 ;;      Totals:         9       6       0       0       0
  3438 ;;Total ram usage:       15 bytes
  3439 ;; Hardware stack levels used:    1
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_UART_Init
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           
  3448                           ;psect for function ___aldiv
  3449  0303                     ___aldiv:	
  3450                           
  3451                           ;incstack = 0
  3452                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3453  0303  1283               	bcf	3,5	;RP0=0, select bank0
  3454  0304  1303               	bcf	3,6	;RP1=0, select bank0
  3455  0305  01A1               	clrf	___aldiv@sign
  3456  0306  1FF3               	btfss	___aldiv@divisor+3,7
  3457  0307  2B15               	goto	l419
  3458  0308  09F0               	comf	___aldiv@divisor,f
  3459  0309  09F1               	comf	___aldiv@divisor+1,f
  3460  030A  09F2               	comf	___aldiv@divisor+2,f
  3461  030B  09F3               	comf	___aldiv@divisor+3,f
  3462  030C  0AF0               	incf	___aldiv@divisor,f
  3463  030D  1903               	skipnz
  3464  030E  0AF1               	incf	___aldiv@divisor+1,f
  3465  030F  1903               	skipnz
  3466  0310  0AF2               	incf	___aldiv@divisor+2,f
  3467  0311  1903               	skipnz
  3468  0312  0AF3               	incf	___aldiv@divisor+3,f
  3469  0313  01A1               	clrf	___aldiv@sign
  3470  0314  0AA1               	incf	___aldiv@sign,f
  3471  0315                     l419:	
  3472  0315  1FF7               	btfss	___aldiv@dividend+3,7
  3473  0316  2B26               	goto	l1764
  3474  0317  09F4               	comf	___aldiv@dividend,f
  3475  0318  09F5               	comf	___aldiv@dividend+1,f
  3476  0319  09F6               	comf	___aldiv@dividend+2,f
  3477  031A  09F7               	comf	___aldiv@dividend+3,f
  3478  031B  0AF4               	incf	___aldiv@dividend,f
  3479  031C  1903               	skipnz
  3480  031D  0AF5               	incf	___aldiv@dividend+1,f
  3481  031E  1903               	skipnz
  3482  031F  0AF6               	incf	___aldiv@dividend+2,f
  3483  0320  1903               	skipnz
  3484  0321  0AF7               	incf	___aldiv@dividend+3,f
  3485  0322  3001               	movlw	1
  3486  0323  00F8               	movwf	??___aldiv
  3487  0324  0878               	movf	??___aldiv,w
  3488  0325  06A1               	xorwf	___aldiv@sign,f
  3489  0326                     l1764:	
  3490  0326  3000               	movlw	0
  3491  0327  00A5               	movwf	___aldiv@quotient+3
  3492  0328  3000               	movlw	0
  3493  0329  00A4               	movwf	___aldiv@quotient+2
  3494  032A  3000               	movlw	0
  3495  032B  00A3               	movwf	___aldiv@quotient+1
  3496  032C  3000               	movlw	0
  3497  032D  00A2               	movwf	___aldiv@quotient
  3498  032E  0873               	movf	___aldiv@divisor+3,w
  3499  032F  0472               	iorwf	___aldiv@divisor+2,w
  3500  0330  0471               	iorwf	___aldiv@divisor+1,w
  3501  0331  0470               	iorwf	___aldiv@divisor,w
  3502  0332  1903               	skipnz
  3503  0333  2B7B               	goto	l1786
  3504  0334  01A0               	clrf	___aldiv@counter
  3505  0335  0AA0               	incf	___aldiv@counter,f
  3506  0336                     l1772:	
  3507  0336  1BF3               	btfsc	___aldiv@divisor+3,7
  3508  0337  2B46               	goto	l1774
  3509  0338  3001               	movlw	1
  3510  0339  00F8               	movwf	??___aldiv
  3511  033A                     u1395:	
  3512  033A  1003               	clrc
  3513  033B  0DF0               	rlf	___aldiv@divisor,f
  3514  033C  0DF1               	rlf	___aldiv@divisor+1,f
  3515  033D  0DF2               	rlf	___aldiv@divisor+2,f
  3516  033E  0DF3               	rlf	___aldiv@divisor+3,f
  3517  033F  0BF8               	decfsz	??___aldiv,f
  3518  0340  2B3A               	goto	u1395
  3519  0341  3001               	movlw	1
  3520  0342  00F8               	movwf	??___aldiv
  3521  0343  0878               	movf	??___aldiv,w
  3522  0344  07A0               	addwf	___aldiv@counter,f
  3523  0345  2B36               	goto	l1772
  3524  0346                     l1774:	
  3525  0346  3001               	movlw	1
  3526  0347  00F8               	movwf	??___aldiv
  3527  0348                     u1415:	
  3528  0348  1003               	clrc
  3529  0349  0DA2               	rlf	___aldiv@quotient,f
  3530  034A  0DA3               	rlf	___aldiv@quotient+1,f
  3531  034B  0DA4               	rlf	___aldiv@quotient+2,f
  3532  034C  0DA5               	rlf	___aldiv@quotient+3,f
  3533  034D  0BF8               	decfsz	??___aldiv,f
  3534  034E  2B48               	goto	u1415
  3535  034F  0873               	movf	___aldiv@divisor+3,w
  3536  0350  0277               	subwf	___aldiv@dividend+3,w
  3537  0351  1D03               	skipz
  3538  0352  2B5D               	goto	u1425
  3539  0353  0872               	movf	___aldiv@divisor+2,w
  3540  0354  0276               	subwf	___aldiv@dividend+2,w
  3541  0355  1D03               	skipz
  3542  0356  2B5D               	goto	u1425
  3543  0357  0871               	movf	___aldiv@divisor+1,w
  3544  0358  0275               	subwf	___aldiv@dividend+1,w
  3545  0359  1D03               	skipz
  3546  035A  2B5D               	goto	u1425
  3547  035B  0870               	movf	___aldiv@divisor,w
  3548  035C  0274               	subwf	___aldiv@dividend,w
  3549  035D                     u1425:	
  3550  035D  1C03               	skipc
  3551  035E  2B6E               	goto	l1782
  3552  035F  0870               	movf	___aldiv@divisor,w
  3553  0360  02F4               	subwf	___aldiv@dividend,f
  3554  0361  0871               	movf	___aldiv@divisor+1,w
  3555  0362  1C03               	skipc
  3556  0363  0F71               	incfsz	___aldiv@divisor+1,w
  3557  0364  02F5               	subwf	___aldiv@dividend+1,f
  3558  0365  0872               	movf	___aldiv@divisor+2,w
  3559  0366  1C03               	skipc
  3560  0367  0F72               	incfsz	___aldiv@divisor+2,w
  3561  0368  02F6               	subwf	___aldiv@dividend+2,f
  3562  0369  0873               	movf	___aldiv@divisor+3,w
  3563  036A  1C03               	skipc
  3564  036B  0F73               	incfsz	___aldiv@divisor+3,w
  3565  036C  02F7               	subwf	___aldiv@dividend+3,f
  3566  036D  1422               	bsf	___aldiv@quotient,0
  3567  036E                     l1782:	
  3568  036E  3001               	movlw	1
  3569  036F                     u1435:	
  3570  036F  1003               	clrc
  3571  0370  0CF3               	rrf	___aldiv@divisor+3,f
  3572  0371  0CF2               	rrf	___aldiv@divisor+2,f
  3573  0372  0CF1               	rrf	___aldiv@divisor+1,f
  3574  0373  0CF0               	rrf	___aldiv@divisor,f
  3575  0374  3EFF               	addlw	-1
  3576  0375  1D03               	skipz
  3577  0376  2B6F               	goto	u1435
  3578  0377  3001               	movlw	1
  3579  0378  02A0               	subwf	___aldiv@counter,f
  3580  0379  1D03               	btfss	3,2
  3581  037A  2B46               	goto	l1774
  3582  037B                     l1786:	
  3583  037B  0821               	movf	___aldiv@sign,w
  3584  037C  1903               	btfsc	3,2
  3585  037D  2B89               	goto	l1790
  3586  037E  09A2               	comf	___aldiv@quotient,f
  3587  037F  09A3               	comf	___aldiv@quotient+1,f
  3588  0380  09A4               	comf	___aldiv@quotient+2,f
  3589  0381  09A5               	comf	___aldiv@quotient+3,f
  3590  0382  0AA2               	incf	___aldiv@quotient,f
  3591  0383  1903               	skipnz
  3592  0384  0AA3               	incf	___aldiv@quotient+1,f
  3593  0385  1903               	skipnz
  3594  0386  0AA4               	incf	___aldiv@quotient+2,f
  3595  0387  1903               	skipnz
  3596  0388  0AA5               	incf	___aldiv@quotient+3,f
  3597  0389                     l1790:	
  3598  0389  0825               	movf	___aldiv@quotient+3,w
  3599  038A  00F3               	movwf	?___aldiv+3
  3600  038B  0824               	movf	___aldiv@quotient+2,w
  3601  038C  00F2               	movwf	?___aldiv+2
  3602  038D  0823               	movf	___aldiv@quotient+1,w
  3603  038E  00F1               	movwf	?___aldiv+1
  3604  038F  0822               	movf	___aldiv@quotient,w
  3605  0390  00F0               	movwf	?___aldiv
  3606  0391  0008               	return
  3607  0392                     __end_of___aldiv:	
  3608                           
  3609                           	psect	text19
  3610  02A8                     __ptext19:	
  3611 ;; *************** function _Lcd_Init *****************
  3612 ;; Defined at:
  3613 ;;		line 65 in file "./lcd.h"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, pclath, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3627 ;;      Params:         0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0
  3629 ;;      Temps:          2       0       0       0       0
  3630 ;;      Totals:         2       0       0       0       0
  3631 ;;Total ram usage:        2 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    2
  3634 ;; This function calls:
  3635 ;;		_Lcd_Cmd
  3636 ;;		_Lcd_Port
  3637 ;; This function is called by:
  3638 ;;		_main
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           
  3643                           ;psect for function _Lcd_Init
  3644  02A8                     _Lcd_Init:	
  3645                           
  3646                           ;./lcd.h: 66:     Lcd_Port(0x00);
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3650  02A8  3000               	movlw	0
  3651  02A9  120A  118A  20B9  120A  118A  	fcall	_Lcd_Port
  3652                           
  3653                           ;./lcd.h: 67:     _delay((unsigned long)((20)*(8000000/4000.0)));
  3654  02AE  3034               	movlw	52
  3655  02AF  00F5               	movwf	??_Lcd_Init+1
  3656  02B0  30F1               	movlw	241
  3657  02B1  00F4               	movwf	??_Lcd_Init
  3658  02B2                     u1647:	
  3659  02B2  0BF4               	decfsz	??_Lcd_Init,f
  3660  02B3  2AB2               	goto	u1647
  3661  02B4  0BF5               	decfsz	??_Lcd_Init+1,f
  3662  02B5  2AB2               	goto	u1647
  3663  02B6  2AB7               	nop2
  3664                           
  3665                           ;./lcd.h: 68:     Lcd_Cmd(0x03);
  3666  02B7  3003               	movlw	3
  3667  02B8  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3668                           
  3669                           ;./lcd.h: 69:     _delay((unsigned long)((5)*(8000000/4000.0)));
  3670  02BD  300D               	movlw	13
  3671  02BE  00F5               	movwf	??_Lcd_Init+1
  3672  02BF  30FB               	movlw	251
  3673  02C0  00F4               	movwf	??_Lcd_Init
  3674  02C1                     u1657:	
  3675  02C1  0BF4               	decfsz	??_Lcd_Init,f
  3676  02C2  2AC1               	goto	u1657
  3677  02C3  0BF5               	decfsz	??_Lcd_Init+1,f
  3678  02C4  2AC1               	goto	u1657
  3679  02C5  2AC6               	nop2
  3680                           
  3681                           ;./lcd.h: 70:     Lcd_Cmd(0x03);
  3682  02C6  3003               	movlw	3
  3683  02C7  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3684                           
  3685                           ;./lcd.h: 71:     _delay((unsigned long)((11)*(8000000/4000.0)));
  3686  02CC  301D               	movlw	29
  3687  02CD  00F5               	movwf	??_Lcd_Init+1
  3688  02CE  3091               	movlw	145
  3689  02CF  00F4               	movwf	??_Lcd_Init
  3690  02D0                     u1667:	
  3691  02D0  0BF4               	decfsz	??_Lcd_Init,f
  3692  02D1  2AD0               	goto	u1667
  3693  02D2  0BF5               	decfsz	??_Lcd_Init+1,f
  3694  02D3  2AD0               	goto	u1667
  3695                           
  3696                           ;./lcd.h: 72:     Lcd_Cmd(0x03);
  3697  02D4  3003               	movlw	3
  3698  02D5  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3699                           
  3700                           ;./lcd.h: 74:     Lcd_Cmd(0x02);
  3701  02DA  3002               	movlw	2
  3702  02DB  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3703                           
  3704                           ;./lcd.h: 75:     Lcd_Cmd(0x02);
  3705  02E0  3002               	movlw	2
  3706  02E1  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3707                           
  3708                           ;./lcd.h: 76:     Lcd_Cmd(0x08);
  3709  02E6  3008               	movlw	8
  3710  02E7  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3711                           
  3712                           ;./lcd.h: 77:     Lcd_Cmd(0x00);
  3713  02EC  3000               	movlw	0
  3714  02ED  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3715                           
  3716                           ;./lcd.h: 78:     Lcd_Cmd(0x0C);
  3717  02F2  300C               	movlw	12
  3718  02F3  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3719                           
  3720                           ;./lcd.h: 79:     Lcd_Cmd(0x00);
  3721  02F8  3000               	movlw	0
  3722  02F9  120A  118A  20D3  120A  118A  	fcall	_Lcd_Cmd
  3723                           
  3724                           ;./lcd.h: 80:     Lcd_Cmd(0x06);
  3725  02FE  3006               	movlw	6
  3726  02FF  120A  118A  20D3   	fcall	_Lcd_Cmd
  3727  0302  0008               	return
  3728  0303                     __end_of_Lcd_Init:	
  3729                           
  3730                           	psect	text20
  3731  00D3                     __ptext20:	
  3732 ;; *************** function _Lcd_Cmd *****************
  3733 ;; Defined at:
  3734 ;;		line 35 in file "./lcd.h"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  a               1    wreg     unsigned char 
  3737 ;; Auto vars:     Size  Location     Type
  3738 ;;  a               1    3[COMMON] unsigned char 
  3739 ;; Return value:  Size  Location     Type
  3740 ;;                  1    wreg      void 
  3741 ;; Registers used:
  3742 ;;		wreg, status,2, status,0, pclath, cstack
  3743 ;; Tracked objects:
  3744 ;;		On entry : 0/0
  3745 ;;		On exit  : 0/0
  3746 ;;		Unchanged: 0/0
  3747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3748 ;;      Params:         0       0       0       0       0
  3749 ;;      Locals:         1       0       0       0       0
  3750 ;;      Temps:          2       0       0       0       0
  3751 ;;      Totals:         3       0       0       0       0
  3752 ;;Total ram usage:        3 bytes
  3753 ;; Hardware stack levels used:    1
  3754 ;; Hardware stack levels required when called:    1
  3755 ;; This function calls:
  3756 ;;		_Lcd_Port
  3757 ;; This function is called by:
  3758 ;;		_Lcd_Clear
  3759 ;;		_Lcd_Set_Cursor
  3760 ;;		_Lcd_Init
  3761 ;;		_Lcd_Shift_Right
  3762 ;;		_Lcd_Shift_Left
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _Lcd_Cmd
  3768  00D3                     _Lcd_Cmd:	
  3769                           
  3770                           ;incstack = 0
  3771                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3772                           ;Lcd_Cmd@a stored from wreg
  3773  00D3  00F3               	movwf	Lcd_Cmd@a
  3774                           
  3775                           ;./lcd.h: 36:     RB2 = 0;
  3776  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  3777  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  3778  00D6  1106               	bcf	6,2	;volatile
  3779                           
  3780                           ;./lcd.h: 37:     Lcd_Port(a);
  3781  00D7  0873               	movf	Lcd_Cmd@a,w
  3782  00D8  120A  118A  20B9  120A  118A  	fcall	_Lcd_Port
  3783                           
  3784                           ;./lcd.h: 38:     RB3 = 1;
  3785  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  3786  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  3787  00DF  1586               	bsf	6,3	;volatile
  3788                           
  3789                           ;./lcd.h: 39:     _delay((unsigned long)((4)*(8000000/4000.0)));
  3790  00E0  300B               	movlw	11
  3791  00E1  00F2               	movwf	??_Lcd_Cmd+1
  3792  00E2  3062               	movlw	98
  3793  00E3  00F1               	movwf	??_Lcd_Cmd
  3794  00E4                     u1677:	
  3795  00E4  0BF1               	decfsz	??_Lcd_Cmd,f
  3796  00E5  28E4               	goto	u1677
  3797  00E6  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3798  00E7  28E4               	goto	u1677
  3799  00E8  0000               	nop
  3800                           
  3801                           ;./lcd.h: 40:     RB3 = 0;
  3802  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  3803  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  3804  00EB  1186               	bcf	6,3	;volatile
  3805  00EC  0008               	return
  3806  00ED                     __end_of_Lcd_Cmd:	
  3807                           
  3808                           	psect	text21
  3809  00B9                     __ptext21:	
  3810 ;; *************** function _Lcd_Port *****************
  3811 ;; Defined at:
  3812 ;;		line 13 in file "./lcd.h"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  a               1    wreg     unsigned char 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  a               1    0[COMMON] unsigned char 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3826 ;;      Params:         0       0       0       0       0
  3827 ;;      Locals:         1       0       0       0       0
  3828 ;;      Temps:          0       0       0       0       0
  3829 ;;      Totals:         1       0       0       0       0
  3830 ;;Total ram usage:        1 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_Lcd_Cmd
  3836 ;;		_Lcd_Init
  3837 ;;		_Lcd_Write_Char
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _Lcd_Port
  3843  00B9                     _Lcd_Port:	
  3844                           
  3845                           ;incstack = 0
  3846                           ; Regs used in _Lcd_Port: [wreg]
  3847                           ;Lcd_Port@a stored from wreg
  3848  00B9  00F0               	movwf	Lcd_Port@a
  3849                           
  3850                           ;./lcd.h: 14:     if (a & 1)
  3851  00BA  1C70               	btfss	Lcd_Port@a,0
  3852  00BB  28C0               	goto	l79
  3853                           
  3854                           ;./lcd.h: 15:         RB4 = 1;
  3855  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  3856  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  3857  00BE  1606               	bsf	6,4	;volatile
  3858  00BF  28C3               	goto	l80
  3859  00C0                     l79:	
  3860                           ;./lcd.h: 16:     else
  3861                           
  3862                           
  3863                           ;./lcd.h: 17:         RB4 = 0;
  3864  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  3865  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  3866  00C2  1206               	bcf	6,4	;volatile
  3867  00C3                     l80:	
  3868                           
  3869                           ;./lcd.h: 19:     if (a & 2)
  3870  00C3  1CF0               	btfss	Lcd_Port@a,1
  3871  00C4  28C7               	goto	l81
  3872                           
  3873                           ;./lcd.h: 20:         RB5 = 1;
  3874  00C5  1686               	bsf	6,5	;volatile
  3875  00C6  28C8               	goto	l82
  3876  00C7                     l81:	
  3877                           ;./lcd.h: 21:     else
  3878                           
  3879                           
  3880                           ;./lcd.h: 22:         RB5 = 0;
  3881  00C7  1286               	bcf	6,5	;volatile
  3882  00C8                     l82:	
  3883                           
  3884                           ;./lcd.h: 24:     if (a & 4)
  3885  00C8  1D70               	btfss	Lcd_Port@a,2
  3886  00C9  28CC               	goto	l83
  3887                           
  3888                           ;./lcd.h: 25:         RB6 = 1;
  3889  00CA  1706               	bsf	6,6	;volatile
  3890  00CB  28CD               	goto	l84
  3891  00CC                     l83:	
  3892                           ;./lcd.h: 26:     else
  3893                           
  3894                           
  3895                           ;./lcd.h: 27:         RB6 = 0;
  3896  00CC  1306               	bcf	6,6	;volatile
  3897  00CD                     l84:	
  3898                           
  3899                           ;./lcd.h: 29:     if (a & 8)
  3900  00CD  1DF0               	btfss	Lcd_Port@a,3
  3901  00CE  28D1               	goto	l85
  3902                           
  3903                           ;./lcd.h: 30:         RB7 = 1;
  3904  00CF  1786               	bsf	6,7	;volatile
  3905  00D0  0008               	return
  3906  00D1                     l85:	
  3907                           ;./lcd.h: 31:     else
  3908                           
  3909                           
  3910                           ;./lcd.h: 32:         RB7 = 0;
  3911  00D1  1386               	bcf	6,7	;volatile
  3912  00D2  0008               	return
  3913  00D3                     __end_of_Lcd_Port:	
  3914                           
  3915                           	psect	text22
  3916  0FD6                     __ptext22:	
  3917 ;; *************** function _KeyPadInit *****************
  3918 ;; Defined at:
  3919 ;;		line 27 in file "./KeyPad.h"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;		None
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      void 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3933 ;;      Params:         0       0       0       0       0
  3934 ;;      Locals:         0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0
  3936 ;;      Totals:         0       0       0       0       0
  3937 ;;Total ram usage:        0 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _KeyPadInit
  3948  0FD6                     _KeyPadInit:	
  3949                           
  3950                           ;./KeyPad.h: 28:     TRISA = 0xf0;
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _KeyPadInit: [wreg+status,2]
  3954  0FD6  30F0               	movlw	240
  3955  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  3956  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  3957  0FD9  0085               	movwf	5	;volatile
  3958                           
  3959                           ;./KeyPad.h: 29:     PORTA = 0x00;
  3960  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  3961  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  3962  0FDC  0185               	clrf	5	;volatile
  3963  0FDD  0008               	return
  3964  0FDE                     __end_of_KeyPadInit:	
  3965  007E                     btemp	set	126	;btemp
  3966  007E                     wtemp0	set	126


Data Sizes:
    Strings     104
    Constant    44
    Data        3
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      50
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Lcd_Write_Integer@Data(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 25
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_3(CODE[19]), STR_2(CODE[25]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 19
		 -> STR_6(CODE[19]), STR_5(CODE[17]), STR_4(CODE[17]), Lcd_Write_Integer@Data(BANK0[10]), 


Critical Paths under _main in COMMON

    _StopMotor->_UART_Write_Text
    _UART_Write_Text->_UART_Write
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _UART_Init->___aldiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_configurarDerecha
    _main->_configurarIzquierda
    _configurarIzquierda->_RunMotor
    _configurarDerecha->_RunMotor
    _RunMotor->_Lcd_Write_Integer
    _Lcd_Write_Integer->_sprintf
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   23617
                                             35 BANK0      4     4      0
                       _KeyPadGetKey
                         _KeyPadInit
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                          _UART_Init
                    _UART_Write_Text
                  _configurarDerecha
                _configurarIzquierda
 ---------------------------------------------------------------------------------
 (1) _configurarIzquierda                                  4     4      0    8274
                                             31 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _configurarDerecha                                    4     4      0    8274
                                             31 BANK0      4     4      0
                       _KeyPadGetKey
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                           _RunMotor
                          _StopMotor
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _StopMotor                                            0     0      0     244
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _RunMotor                                             5     5      0    3596
                                             26 BANK0      5     5      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                         _UART_Write
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (3) _UART_Write_Text                                      3     3      0     244
                                              1 COMMON     3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (4) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Integer                                   13    11      2    2087
                                             13 BANK0     13    11      2
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_String                                     7     5      2     572
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (5) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       7     6      1    1064
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _KeyPadGetKey                                         6     4      2     205
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (6) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _KeyPadInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KeyPadGetKey
   _KeyPadInit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _RunMotor
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _UART_Write
     _UART_Write_Text
       _UART_Write
   _StopMotor
     _UART_Write_Text
       _UART_Write
   _UART_Init
     ___aldiv
   _UART_Write_Text
     _UART_Write
   _configurarDerecha
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Integer
         _Lcd_Write_String
           _Lcd_Write_Char
             _Lcd_Port
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _UART_Write
       _UART_Write_Text
         _UART_Write
     _StopMotor
       _UART_Write_Text
         _UART_Write
     ___wmul
   _configurarIzquierda
     _KeyPadGetKey
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _RunMotor
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Write_Integer
         _Lcd_Write_String
           _Lcd_Write_Char
             _Lcd_Port
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _UART_Write
       _UART_Write_Text
         _UART_Write
     _StopMotor
       _UART_Write_Text
         _UART_Write
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     27      32       5       62.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      40      12        0.0%
ABS                  0      0      40       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 29 19:44:08 2019

                           pc 0002                   __CFG_CP$OFF 0000                            l80 00C3  
                          l81 00C7                            l82 00C8                            l83 00CC  
                          l84 00CD                            l85 00D1                            l79 00C0  
                          fsr 0004           ___wmul@multiplicand 0072                           l146 0FDF  
                         l167 0395                           l168 03FA                           l354 00F7  
                         l419 0315                           _RA0 0028                           _RA1 0029  
                         _RA2 002A                           _RA3 002B                           _RB2 0032  
                         _RA4 002C                           _RB3 0033                           _RA5 002D  
                         _RB4 0034                           _RA6 002E                           _RB5 0035  
                         _RA7 002F                           _RB6 0036                           _RB7 0037  
                __CFG_CPD$OFF 0000                           u905 01C8                           u845 0173  
                         u935 0139                           u865 01A6                           u955 014A  
                         u885 01B2                           u965 0153                           u895 01BE  
                         _key 004C                           fsr0 0004                           indf 0000  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                ??_KeyPadGetKey 0072  
                        l2060 0565                          l1510 01B1                          l2062 04B4  
                        l1520 01D2                          l1600 078B                          l2064 0746  
                        l2058 061C                          l1516 01C7                          l1508 01A3  
                        l1532 0136                          l1534 0144                          l1542 015D  
                        l1614 079E                          l1606 079A                          l1712 0416  
                        l1616 0713                          l1642 0239                          l1562 01D9  
                        l1538 0152                          l1618 07DF                          l1812 06F2  
                        l1572 0733                          l1660 0111                          l1670 039E  
                        l1742 00EF                          l1672 03D1                          l1728 0268  
                        l1594 076A                          l1578 0751                          l1850 0476  
                        l1906 0560                          l1772 0336                          l1764 0326  
                        l1588 0768                          l1844 044A                          l1908 0579  
                        l1790 0389                          l1782 036E                          l1774 0346  
                        l1942 05E6                          l1952 0608                          l1960 062A  
                        l1928 05A8                          l1786 037B                          l1858 047E  
                        l1866 04AF                          l1890 0527                          l1954 060E  
                        l1938 05DA                          l1868 04C8                          l1884 04FB  
                        l1958 0614                          l1898 052F                          STR_1 00A4  
                        STR_2 003F                          STR_3 006B                          STR_4 007E  
                        STR_5 007E                          STR_6 0058                          STR_7 009A  
                        STR_8 008F                          _BRGH 04C2                          _CREN 00C4  
                        u1200 03BD                          u1105 0220                          u1035 0781  
                        u1140 039B                          u1125 0245                          u1230 03CE  
                        u1214 03C0                          u1225 03C3                          u1170 03AC  
                        u1315 02A5                          u1165 03A1                          u1415 0348  
                        u1335 00F8                          u1184 03AF                          u1425 035D  
                        u1521 06D1                          u1505 06A1                          u1345 00FF  
                        u1522 06D2                          u1435 036F                          u1523 06D7  
                        u1515 06BA                          u1195 03B2                          u1524 06D8  
                        u1525 06DD                          u1526 06DE                          u1607 0288  
                        u1481 0671                          u1465 0641                          u1617 0183  
                        u1545 046C                          u1482 0672                          u1395 033A  
                        u1483 0677                          u1475 065A                          u1627 0194  
                        u1555 051D                          u1484 0678                          u1485 067D  
                        u1637 03D5                          u1565 05D7                          u1486 067E  
                        u1647 02B2                          u1657 02C1                          u1577 0630  
                        u1667 02D0                          u1587 057F                          u1677 00E4  
                        u1597 04CE                          _RCIF 0065                          _SPEN 00C7  
                        _TRMT 04C1                          _TXEN 04C5                          _SYNC 04C4  
                __CFG_WRT$OFF 0000             ?_Lcd_Write_String 0075                          _key2 004F  
                        _main 0585                          btemp 007E                 __CFG_BOREN$ON 0000  
                        start 0000            ??_Lcd_Write_String 0077               __end_of_Lcd_Cmd 00ED  
     __end_of_UART_Write_Text 0130                   _CmIzquierda 0047             _Lcd_Write_Integer 0FE8  
             __end_of___aldiv 0392                         ?_main 0070                 __CFG_WDTE$OFF 0000  
                       _ANSEL 0188            ?_Lcd_Write_Integer 002D               __end_of___lwdiv 01D7  
             __end_of___lwmod 0162                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005       __size_of_Lcd_Set_Cursor 004A                         _TRISA 0085  
                       _TRISB 0086                         _TXREG 0019                         _nRBPU 040F  
                 ?_UART_Write 0070            __size_of_UART_Init 00D6               __end_of_dpowers 003F  
         ??_Lcd_Write_Integer 002F                    _KeyPadInit 0FD6                         pclath 000A  
                       status 0003                         wtemp0 007E               __end_of_sprintf 07E4  
            __end_of_Lcd_Init 0303              __end_of_Lcd_Port 00D3               __initialization 07E4  
                __end_of_main 0636     __end_of_Lcd_Write_Integer 1000                        ??_main 0043  
          __size_of_Lcd_Clear 000B              __end_of_RunMotor 02A8                        _ANSELH 0189  
                   ??_Lcd_Cmd 0071       __size_of_Lcd_Write_Char 0039                        _TRISC6 043E  
                      _TRISC7 043F                __CFG_PWRTE$OFF 0000             _configurarDerecha 0423  
           __end_of_UART_Init 070C           __size_of_UART_Write 000A                     ??___aldiv 0078  
                      ___wmul 00ED              ?_UART_Write_Text 0070            ?_configurarDerecha 0070  
                   ??___lwdiv 0074                     ??___lwmod 007C                        _buffer 004D  
        __end_of_KeyPadGetKey 0423               KeyPadGetKey@key 0074               KeyPadGetKey@row 0075  
         ??_configurarDerecha 003F                     ??_sprintf 0023               Lcd_Set_Cursor@a 0077  
             Lcd_Set_Cursor@b 0074               Lcd_Set_Cursor@y 0079               Lcd_Set_Cursor@z 0078  
                 ?_KeyPadInit 0070            __size_of_StopMotor 0005       __end_of__initialization 07FC  
           __end_of_Lcd_Clear 00B9     __end_of_configurarDerecha 04D4                __pcstackCOMMON 0070  
                __pidataBANK0 0FD3    __size_of_Lcd_Write_Integer 0018                _Lcd_Set_Cursor 0214  
 __end_of_configurarIzquierda 0585          __end_of_keyPadMatrix 0035                     ?_Lcd_Init 0070  
                   ?_Lcd_Port 0070                    __pbssBANK0 0047                    __pmaintext 0585  
                     ?___wmul 0070                     ?_RunMotor 0070             __end_of_StopMotor 00AE  
   __size_of_Lcd_Write_String 003D        __end_of_Lcd_Set_Cursor 025E           __size_of_KeyPadInit 0008  
                ??_UART_Write 0070                    ??_Lcd_Init 0074                    ??_Lcd_Port 0070  
                  __stringtab 0003                _Lcd_Write_Char 0162                       _Lcd_Cmd 00D3  
  __size_of_configurarDerecha 00B1         __size_of_KeyPadGetKey 0091                       ___aldiv 0303  
                  ??_RunMotor 003A               __size_of___wmul 0021            __end_of_UART_Write 0FE8  
                     ___lwdiv 019B                       ___lwmod 0130               ?_Lcd_Set_Cursor 0074  
                     __ptext1 04D4                       __ptext2 0423                       __ptext3 00ED  
                     __ptext4 00A9                       __ptext5 025E                       __ptext6 010E  
                     __ptext7 0FDE                       __ptext8 0FE8                       __ptext9 070C  
                     _dpowers 0035                       _old_key 004B              ___aldiv@dividend 0074  
                     _sprintf 070C        __end_of_Lcd_Write_Char 019B          end_of_initialization 07FC  
                _KeyPadGetKey 0392              ___aldiv@quotient 0022                     Lcd_Port@a 0070  
                   _UART_Init 0636                UART_Write@data 0070                     _CmDerecha 0049  
             ?_Lcd_Write_Char 0070                  ??_KeyPadInit 0070             Lcd_Write_String@a 0075  
           Lcd_Write_String@i 007A                  _keyPadMatrix 0013                     _Lcd_Clear 00AE  
              __end_of___wmul 010E              _Lcd_Write_String 01D7                    ?_UART_Init 0026  
          __end_of_KeyPadInit 0FDE      __size_of_UART_Write_Text 0022           start_initialization 07E4  
           __size_of_Lcd_Init 005B             __size_of_Lcd_Port 001A                    ?_Lcd_Clear 0070  
                    ??___wmul 0074                   __pdataBANK0 004F               Lcd_Write_Char@a 0074  
             Lcd_Write_Char@y 0073             __size_of_RunMotor 004A                     RunMotor@y 003D  
                   _StopMotor 00A9                     ___latbits 0002                 __pcstackBANK0 0020  
__size_of_configurarIzquierda 00B1                      ?_Lcd_Cmd 0070                   sprintf@flag 0027  
                 sprintf@prec 0028              ___lwdiv@dividend 0072              ??_Lcd_Set_Cursor 0075  
                    ?___aldiv 0070                      ?___lwdiv 0070                      ?___lwmod 0078  
                 ??_UART_Init 002A                     __pstrings 0003                    ?_StopMotor 0070  
            ___lwdiv@quotient 0075                      ?_sprintf 0020                    UART_Init@x 0079  
           ??_UART_Write_Text 0071               ___aldiv@divisor 0070               ___aldiv@counter 0020  
              ___wmul@product 0074                      Lcd_Cmd@a 0073                   ??_Lcd_Clear 0074  
       Lcd_Write_Integer@Data 0030             UART_Init@baudrate 0026                   __stringbase 0012  
           ___wmul@multiplier 0070              ??_Lcd_Write_Char 0071                      _Lcd_Init 02A8  
                    _Lcd_Port 00B9      __end_of_Lcd_Write_String 0214              __size_of_Lcd_Cmd 001A  
                    _RunMotor 025E              __size_of___aldiv 008F              __size_of___lwdiv 003C  
            __size_of___lwmod 0032            __end_of__stringtab 0013                   ??_StopMotor 0074  
                  sprintf@val 0029               ___lwdiv@divisor 0070               ___lwdiv@counter 0077  
                    __ptext10 0130                      __ptext11 019B                      __ptext20 00D3  
                    __ptext12 01D7                      __ptext21 00B9                      __ptext13 0162  
                    __ptext22 0FD6                      __ptext14 0214                      __ptext15 00AE  
                    __ptext16 0392                      __ptext17 0636                      __ptext18 0303  
                    __ptext19 02A8              __size_of_sprintf 00D8           UART_Write_Text@text 0073  
               __size_of_main 00B1                      _keypress 0051           _configurarIzquierda 04D4  
        ?_configurarIzquierda 0070            Lcd_Write_Char@temp 0072                     sprintf@ap 0026  
                   sprintf@sp 002B              ___lwmod@dividend 007A                     stringcode 000D  
          Lcd_Set_Cursor@temp 007A               _UART_Write_Text 010E                      sprintf@c 002C  
                    sprintf@f 0020               ___lwmod@divisor 0078               ___lwmod@counter 007D  
                    stringdir 000D                      stringtab 0003                  ___aldiv@sign 0021  
                  _UART_Write 0FDE            Lcd_Write_Integer@a 002D         ??_configurarIzquierda 003F  
               ?_KeyPadGetKey 0070              UART_Write_Text@i 0071  
